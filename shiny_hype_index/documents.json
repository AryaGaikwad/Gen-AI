[
  {
    "id": "docs_overview_html",
    "url": "docs/overview.html",
    "title": "Overview ‚Äì Shiny for Python",
    "description": "",
    "content": "- üìå Essentials\n- Overview\n\nOverview\n\nWelcome to the learn Shiny overview! Here we‚Äôll introduce Shiny‚Äôs capabilities and link to articles where you can learn more. In the next article, we‚Äôll cover more user interface (UI) components by building this dashboard:\n\nMany examples on this site have a code editor for modifying the source code for a Shiny app (which runs entirely in the browser, thanks to shinylive). If you‚Äôd like to run any examples locally, first install Shiny locally, then create and run by copy/paste relevant code into the app.py file (created by shiny create).\n\nBasics\n\nShiny apps typically start with input components to gather information from a user, which are then used to reactively render output components. Here‚Äôs a basic example that displays a slider‚Äôs value as formatted text.\n\nThis example demonstrates the basic mechanics behind Shiny apps:\n\n- Inputs are created via ui.input_*() functions. The first argument is the input‚Äôs id, which is used to read the input‚Äôs value.\n- Outputs are created by decorating a function with @render.*. Inside a render function, input values can be read reactively. When those input values change, Shiny knows how to minimally re-render output.\n- This example happens to use shiny.express which, compared to core Shiny, reduces the amount of code required.\n\n- The first argument is the input‚Äôs id, which is used to read the input‚Äôs value.\n\n- Inside a render function, input values can be read reactively.\n- When those input values change, Shiny knows how to minimally re-render output.\n\nComponents\n\nShiny includes many useful user interface (ui) components for creating inputs, outputs, displaying messages, and more. For brevity sake, we‚Äôll highlight just a few output and layout components here, but for a more comprehensive list, see the components gallery.\n\nOutputs\n\nShiny makes it easy to create dynamic plots, tables, and other interactive widgets. All you need to do is apply a @render decorator to a function that returns a suitable object. Shiny includes a wide variety of these decorators in its render module, but Shiny extensions like shinywidgets provide additional decorators for rendering other kinds of outputs, like Jupyter Widgets.\n\n- Plots\n- Tables\n- Widgets\n\nTo include a plot in an application, apply @render.plot to a function that creates a matplotlib visual. Note that packages like seaborn, plotnine, pandas, etc., are all compatible (as long as they create a matplotlib visual).\n\nApply @render.data_frame to any code that returns a pandas or polars DataFrame for a basic table. For more sophisticated tables, you can use render.DataGrid to add things like filters to your table.\n\nSee the Jupyter Widgets article for more information on rendering Jupyter Widgets in Shiny.\n\n- Altair\n- Bokeh\n- Plotly\n- Pydeck\n- Other\n\nMany other awesome Python packages provide widgets that are compatible with Shiny. In general, you can render them by applying the @render_widget decorator.\n\nLayouts\n\nShiny provides a full suite of layout components which help with arranging multiple inputs and outputs in a variety of ways. As seen below, with shiny.express, layout components (e.g., ui.sidebar()) can be used as context managers to help with nesting and readability.\n\n- Sidebar\n- Multi-page\n- Multi-panel\n- Multi-column\n\nShiny also integrates well with Quarto, allowing you to leverage its web-based output formats (e.g., dashboards) in combination with Shiny outputs and reactivity.\n\nReactivity\n\nShiny uses something called transparent reactivity to automatically infer relationships between components, and minimally re-render as needed when dependencies change.1 As a result, apps naturally retain performance as they grow in size, without workarounds like caching or memoization. All Shiny apps are also built on the same small set of reactive foundations, each of which are simple and easy to learn, but can be combined in novel ways to create seriously sophisticated and performant apps.\n\nTo demonstrate how Shiny minimally re-renders, consider the following app which contains two different plots, each of which depends on a different input. When the first input changes, Shiny knows to only re-render the first plot, and vice versa.\n\nShiny also knows when outputs are visible or not, and so, will only call render functions when needed. For example, in the app below, the table function doesn‚Äôt get called until the ‚ÄúTable‚Äù page is selected.\n\nFor a more in-depth look at reactivity, check out the reactivity article.\n\nStarter templates\n\nOnce you‚Äôve installed Shiny, the shiny create CLI command provides access to a collection of useful starter templates. This command walks you through a series of prompts to help you get started quickly with a helpful example. One great option is the dashboard template, which can be created with:\n\nSee how to create and run apps for more information developing Shiny apps locally. Also keep in mind you can develop apps in the browser using the playground.\n\nExtensible foundation\n\nShiny is built on a foundation of web standards, allowing you to incrementally adopt custom HTML, CSS, and/or JavaScript as needed. In fact, Shiny UI components themselves are built on a Python representation of HTML/CSS/JavaScript, which you can see by printing them in a Python REPL:\n\nAnd, since UI is HTML, you can gently introduce HTML/CSS/JavaScript as needed in your apps to customize without having to learn complicated build tooling and frameworks. However, if you‚Äôre versed in web programming, you can also use Shiny to create custom components that leverage your favorite JavaScript framework from Python.\n\nNext steps\n\nNext, we‚Äôll learn more about Shiny components and layouts by making a dashboard.\n\nFootnotes\n\n- If you‚Äôre familiar with JavaScript, you may find a lot of similarities between Shiny and reactivity in modern JS frameworks like solidjs, mobx, and svelte.‚Ü©Ô∏é\n\nIf you‚Äôre familiar with JavaScript, you may find a lot of similarities between Shiny and reactivity in modern JS frameworks like solidjs, mobx, and svelte.‚Ü©Ô∏é\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50)\n\n@render.text\ndef slider_val():\n    return f\"Slider value: {input.val()}\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 480\n\nfrom shiny.express import input, render, ui\n\nui.input_selectize(\n    \"var\", \"Select variable\",\n    choices=[\"bill_length_mm\", \"body_mass_g\"]\n)\n\n@render.plot\ndef hist():\n    from matplotlib import pyplot as plt\n    from palmerpenguins import load_penguins\n\n    df = load_penguins()\n    df[input.var()].hist(grid=False)\n    plt.xlabel(input.var())\n    plt.ylabel(\"count\")\n\n## file: requirements.txt\npalmerpenguins",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 480\n\nfrom shiny.express import input, render, ui\n\nui.input_selectize(\n    \"var\", \"Select variable\",\n    choices=[\"bill_length_mm\", \"body_mass_g\"]\n)\n\n@render.data_frame\ndef head():\n    from palmerpenguins import load_penguins\n    df = load_penguins()\n    return df[[\"species\", input.var()]]\n## file: requirements.txt\npalmerpenguins",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 480\n\nfrom shiny.express import input, ui\nfrom shinywidgets import render_altair\n\nui.input_selectize(\n    \"var\", \"Select variable\",\n    choices=[\"bill_length_mm\", \"body_mass_g\"]\n)\n\n@render_altair\ndef hist():\n    import altair as alt\n    from palmerpenguins import load_penguins\n    df = load_penguins()\n    return (\n        alt.Chart(df)\n        .mark_bar()\n        .encode(x=alt.X(f\"{input.var()}:Q\", bin=True), y=\"count()\")\n    )\n## file: requirements.txt\naltair\nanywidget\npalmerpenguins",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 480\n\nfrom shiny.express import input, ui\nfrom shinywidgets import render_bokeh\n\nui.input_selectize(\n    \"var\", \"Select variable\",\n    choices=[\"bill_length_mm\", \"body_mass_g\"]\n)\n\n@render_bokeh\ndef hist():\n    from bokeh.plotting import figure\n    from palmerpenguins import load_penguins\n\n    p = figure(x_axis_label=input.var(), y_axis_label=\"count\")\n    bins = load_penguins()[input.var()].value_counts().sort_index()\n    p.quad(\n        top=bins.values,\n        bottom=0,\n        left=bins.index - 0.5,\n        right=bins.index + 0.5,\n    )\n    return p\n## file: requirements.txt\nbokeh\njupyter_bokeh\nxyzservices",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 480\n\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\n\nui.input_selectize(\n    \"var\", \"Select variable\",\n    choices=[\"bill_length_mm\", \"body_mass_g\"]\n)\n\n@render_plotly\ndef hist():\n    import plotly.express as px\n    from palmerpenguins import load_penguins\n    df = load_penguins()\n    return px.histogram(df, x=input.var())\n\n## file: requirements.txt\npalmerpenguins\nplotly",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 480\n\nimport pydeck as pdk\nimport shiny.express\nfrom shinywidgets import render_pydeck\n\n@render_pydeck\ndef map():\n    UK_ACCIDENTS_DATA = \"https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv\"\n\n    layer = pdk.Layer(\n        \"HexagonLayer\",  # `type` positional argument is here\n        UK_ACCIDENTS_DATA,\n        get_position=[\"lng\", \"lat\"],\n        auto_highlight=True,\n        elevation_scale=50,\n        pickable=True,\n        elevation_range=[0, 3000],\n        extruded=True,\n        coverage=1,\n    )\n\n    # Set the viewport location\n    view_state = pdk.ViewState(\n        longitude=-1.415,\n        latitude=52.2323,\n        zoom=6,\n        min_zoom=5,\n        max_zoom=15,\n        pitch=40.5,\n        bearing=-27.36,\n    )\n\n    # Combined all of it and render a viewport\n    return pdk.Deck(layers=[layer], initial_view_state=view_state)\n## file: requirements.txt\npydeck==0.8.0",
      "import shiny.express\nfrom shinywidgets import render_widget\n\n@render_widget\ndef widget():\n    # Widget code goes here\n    ...",
      "import shiny.express\nfrom shinywidgets import render_widget\n\n@render_widget\ndef widget():\n    # Widget code goes here\n    ...",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 350\nimport plotly.express as px\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_widget\n\nui.page_opts(title=\"Sidebar layout\", fillable=True)\n\nwith ui.sidebar():\n    ui.input_select(\"var\", \"Select variable\", choices=[\"total_bill\", \"tip\"])\n\n@render_widget\ndef hist():\n    return px.histogram(px.data.tips(), input.var())\n\n## file: requirements.txt\npandas",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 350\n\nimport plotly.express as px\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_widget\n\nui.page_opts(title=\"Multi-page example\", fillable=True)\n\nwith ui.sidebar():\n    ui.input_select(\"var\", \"Select variable\", choices=[\"total_bill\", \"tip\"])\n\nwith ui.nav_panel(\"Plot\"):\n    @render_widget\n    def hist():\n        return px.histogram(px.data.tips(), input.var())\n\nwith ui.nav_panel(\"Table\"):\n    @render.data_frame\n    def table():\n        return px.data.tips()\n\n## file: requirements.txt\npandas",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 350\n\nimport plotly.express as px\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_widget\n\nui.page_opts(title=\"Multi-tab example\", fillable=True)\n\nwith ui.sidebar():\n    ui.input_select(\"var\", \"Select variable\", choices=[\"total_bill\", \"tip\"])\n\nwith ui.navset_card_underline(title=\"Penguins\"):\n    with ui.nav_panel(\"Plot\"):\n        @render_widget\n        def hist():\n            return px.histogram(px.data.tips(), input.var())\n\n    with ui.nav_panel(\"Table\"):\n        @render.data_frame\n        def table():\n            return px.data.tips()\n\n## file: requirements.txt\npandas",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 350\nimport plotly.express as px\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_widget\n\nui.page_opts(title=\"Multi-column example\")\n\nui.input_select(\"var\", \"Select variable\", choices=[\"total_bill\", \"tip\"])\n\nwith ui.layout_columns(height=\"300px\"):\n    @render_widget\n    def hist():\n        return px.histogram(px.data.tips(), input.var())\n\n    @render.data_frame\n    def table():\n        return px.data.tips()\n\n## file: requirements.txt\npandas",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 325\nimport plotly.express as px\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_plotly\n\ntips = px.data.tips()\n\nwith ui.layout_columns():\n    @render_plotly\n    def plot1():\n        p = px.histogram(tips, x=input.var1())\n        p.update_layout(height=200, xaxis_title=None)\n        return p\n\n    @render_plotly\n    def plot2():\n        p = px.histogram(tips, x=input.var2())\n        p.update_layout(height=200, xaxis_title=None)\n        return p\n\nwith ui.layout_columns():\n    ui.input_select(\"var1\", None, choices=[\"total_bill\", \"tip\"], width=\"100%\")\n    ui.input_select(\"var2\", None, choices=[\"tip\", \"total_bill\"], width=\"100%\")\n## file: requirements.txt\npalmerpenguins\nplotly\npandas",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 325\nimport plotly.express as px\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_plotly\n\ntips = px.data.tips()\n\nwith ui.sidebar():\n    ui.input_selectize(\"var\", \"Select variable\", choices=[\"total_bill\", \"tip\"])\n\nui.nav_spacer()\n\nwith ui.nav_panel(\"Plot\"):\n    @render_plotly\n    def plot():\n        p = px.histogram(tips, x=input.var())\n        p.update_layout(height=225)\n        return p\n\nwith ui.nav_panel(\"Table\"):\n    @render.data_frame\n    def table():\n        return tips[[input.var()]]\n## file: requirements.txt\npalmerpenguins\nplotly\npandas",
      "shiny create --template dashboard",
      "shiny create --template dashboard",
      ">>> from shiny import ui\n>>> ui.input_action_button(\"btn\", \"Button\")\n<button class=\"btn btn-default action-button\" id=\"btn\" type=\"button\">Button</button>",
      ">>> from shiny import ui\n>>> ui.input_action_button(\"btn\", \"Button\")\n<button class=\"btn btn-default action-button\" id=\"btn\" type=\"button\">Button</button>"
    ]
  },
  {
    "id": "index_html",
    "url": "index.html",
    "title": "Shiny for Python",
    "description": "",
    "content": "Reactive data & AI apps in pure Python\n\nElegant, efficient, and ready for production\n\nGet Started Shiny for AI\n\nQuickly build attractive and scalable dashboards.\n\nEasily leverage AI to query data using natural language.\n\nTake your UI to the next-level with components like value boxes and dark mode.\n\nCreate rich interactive data experiences with packages you already know like pandas and plotly.\n\nCombine the power of Python with reactivity to create sophisticated apps like this three-body problem simulator.\n\nReactive\n\nShiny eliminates the hassle of manual state management. Rather than requiring callback functions and state variables, Shiny automatically determines the best execution path for your app at runtime. This allows you to focus on delivering insights instead of troubleshooting execution issues.\n\nEfficient\n\nShiny uses a reactive execution engine to minimize rerendering of your application. Outputs are rendered on-demand and only when their upstream components change, which means that Shiny can support everything from the simplest dashboard to full-featured web apps.\n\nRobust\n\nShiny is built atop the modern Python web stack, leveraging Starlette and asyncio for robust web applications. It offers full support for CSS and JavaScript customization, enabling rich, interactive user experiences.\n\nGetting started with Shiny is easy:\n\n1\n\n2\n\n3\n\nUse your data and make the layout your own.\n\nGet Started and build your first Shiny app now!\n\n",
    "code_examples": [
      "pip install shiny",
      "pip install shiny",
      "shiny create --template dashboard-tips",
      "shiny create --template dashboard-tips"
    ]
  },
  {
    "id": "get-started_index_html",
    "url": "get-started/index.html",
    "title": "Welcome ‚Äì Shiny for Python",
    "description": "",
    "content": "Welcome\n\nShiny for Python: Effortless Python web applications\n\nCreate efficient, reactive, and robust web applications and dashboards.\n\nWhy Shiny?\n\nShiny for Python empowers you to bring your data to life with interactive applications that are easy to build, customize, and share.\n\n- Pure Python ‚Äì no JS required Create sophisticated web apps in pure Python, using libraries you already know and love. Get started now by trying Shiny in your browser, asking Shiny Assistant to build you an app, or develop locally by installing and running a starter template.\n- Batteries Included Build delightful user interfaces using an extensive library of simple yet composable components and layouts. As your app grows, you‚Äôll also appreciate advanced features like modules, theming, non-blocking tasks, bookmarking, and more.\n- Ready for AI Quickly build beautiful AI apps like chatbots and other streaming interfaces.\n- Efficiently scalable Reactivity enables Shiny to perform minimal updates, allowing you to develop sophisticated apps without the hassle of state management.\n- From demo to production-ready Shiny is great for one-off apps that help you demo a concept or quickly see your data. But Shiny apps aren‚Äôt toy apps‚ÄìShiny‚Äôs powerful reactive framework and extensible components mean your applications can evolve alongside your needs. Start simple, then customize and scale without switching frameworks.\n- Plays well with others Bring to life the Python packages you know and love with Shiny. Turn polars and pandas data frames into dynamic data grids. Breathe interactivity into any matplotlib or seaborn plot. Go further and build an app around sophisticated displays from altair, plotly, or any Jupyter Widget.\n- Deploy with confidence When it‚Äôs time to put your Shiny app on the web, you can choose to deploy on your own servers, on our hosting services, or even serverless with shinylive.\n- Open source Inspect, adapt, contribute, or join the forum or discord community! You can check out the code or make your own extensions.\n\nPure Python ‚Äì no JS required Create sophisticated web apps in pure Python, using libraries you already know and love. Get started now by trying Shiny in your browser, asking Shiny Assistant to build you an app, or develop locally by installing and running a starter template.\n\nBatteries Included Build delightful user interfaces using an extensive library of simple yet composable components and layouts. As your app grows, you‚Äôll also appreciate advanced features like modules, theming, non-blocking tasks, bookmarking, and more.\n\nReady for AI Quickly build beautiful AI apps like chatbots and other streaming interfaces.\n\nEfficiently scalable Reactivity enables Shiny to perform minimal updates, allowing you to develop sophisticated apps without the hassle of state management.\n\nFrom demo to production-ready Shiny is great for one-off apps that help you demo a concept or quickly see your data. But Shiny apps aren‚Äôt toy apps‚ÄìShiny‚Äôs powerful reactive framework and extensible components mean your applications can evolve alongside your needs. Start simple, then customize and scale without switching frameworks.\n\nPlays well with others Bring to life the Python packages you know and love with Shiny. Turn polars and pandas data frames into dynamic data grids. Breathe interactivity into any matplotlib or seaborn plot. Go further and build an app around sophisticated displays from altair, plotly, or any Jupyter Widget.\n\nDeploy with confidence When it‚Äôs time to put your Shiny app on the web, you can choose to deploy on your own servers, on our hosting services, or even serverless with shinylive.\n\nOpen source Inspect, adapt, contribute, or join the forum or discord community! You can check out the code or make your own extensions.\n\nReady to dive deeper? Learn more about what makes Shiny unique.\n\nGallery and templates\n\nCheck out the Shiny Gallery for inspiration. Or kick start a new project with one of our starter templates.\n\nSuperzip explorer\n\nRestaurant tips dashboard\n\nStock prices\n\nRespiratory Disease data\n\nAWS Community Builders Dashboard\n\nIdentify Outliers\n\nTake Shiny for a spin\n\nThe next pages in this guide will help you install shiny, create and run your first application, help you find troubleshooting help, and deploy your app to the web (for free).\n\nOr skip installation and try the shinylive playground in the browser!\n\nHave a question? Join our community on our Discord server!\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n##| standalone: true\n##| components: [viewer]\n##| viewerHeight: 400px\n\nimport seaborn as sns\nfrom shiny.express import input, render, ui\n\ndf = sns.load_dataset(\"penguins\")\n\nui.input_slider(\"bins\", \"Number of Bins\", min=5, max=20, value=15, step=1)\n\n@render.plot(height=300)\ndef plot():\n    sns.histplot(data=df, x=\"body_mass_g\", bins=input.bins())\n"
    ]
  },
  {
    "id": "components_index_html",
    "url": "components/index.html",
    "title": "Shiny Components ‚Äì Shiny for Python",
    "description": "",
    "content": "Shiny Components\n\nInputs, outputs and display messages to make your data interactive on every device. Add these components to Shiny Layouts to give your app a navbar, sidebar, cards and more.\n\nInputs\n\nInputs allow users to interact with the webpage by clicking a button, entering text, selecting an option, and more.\n\nOutputs\n\nOutputs create a spot on the webpage to display results from the server, such as text, tables, plots, and more.\n\nDisplay Messages\n\nProvide feedback to your user with notifications, progress bars, and confirmation modals.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center px-4 flex-column\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center px-4 flex-column\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"uiElement\"),\n    {\"class\": \"vh-100 d-flex flex-column pt-4 px-4\"},\n)\n\ndef server(input, output, session):\n    @render.ui\n    def uiElement():\n        if input.show_slider():\n            return ui.input_slider(\"slider\", \"\", min=1, max=10, value=5)\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"uiElement\"),\n    {\"class\": \"vh-100 d-flex flex-column pt-4 px-4\"},\n)\n\ndef server(input, output, session):\n    @render.ui\n    def uiElement():\n        if input.show_slider():\n            return ui.input_slider(\"slider\", \"\", min=1, max=10, value=5)\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text_verbatim(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center flex-column px-4\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text_verbatim(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center flex-column px-4\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = ui.markdown(\n    \"\"\"\n    Hi! This is a simple Shiny `Chat` UI. Enter a message below and I will\n    simply repeat it back to you. For more examples, see this\n    [folder of examples](https://github.com/posit-dev/py-shiny/tree/main/shiny/templates/chat).\n    \"\"\"\n)\n\n# Create a chat instance\nchat = ui.Chat(\n    id=\"chat\",\n    messages=[welcome],\n)\n\n# Display it\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = ui.markdown(\n    \"\"\"\n    Hi! This is a simple Shiny `Chat` UI. Enter a message below and I will\n    simply repeat it back to you. For more examples, see this\n    [folder of examples](https://github.com/posit-dev/py-shiny/tree/main/shiny/templates/chat).\n    \"\"\"\n)\n\n# Create a chat instance\nchat = ui.Chat(\n    id=\"chat\",\n    messages=[welcome],\n)\n\n# Display it\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, reactive, ui\nfrom pathlib import Path\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\"Message \" + str(n), duration=None)\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, reactive, ui\nfrom pathlib import Path\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\"Message \" + str(n), duration=None)\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n## file: app.py\nimport asyncio\nfrom pathlib import Path\n\nfrom shiny import App, reactive, render, ui\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_text(\"compute\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n## file: app.py\nimport asyncio\nfrom pathlib import Path\n\nfrom shiny import App, reactive, render, ui\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_text(\"compute\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"tooltip\", \"Show tooltip\", class_=\"btn-primary\"),\n        {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n        \"A tooltip message\",  \n        id=\"btn_tooltip\",  \n        placement=\"top\",  \n    ),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"tooltip\", \"Show tooltip\", class_=\"btn-primary\"),\n        {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n        \"A tooltip message\",  \n        id=\"btn_tooltip\",  \n        placement=\"top\",  \n    ),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "layouts_index_html",
    "url": "layouts/index.html",
    "title": "Shiny Layouts ‚Äì Shiny for Python",
    "description": "",
    "content": "Shiny Layouts\n\nLayouts allow the simplest or most complicated app to be useable and scalable. Is it bursting at the seams with content? Quickly change the layout for a fresh start. Fill these layouts with Shiny Components to make your app reactive and interactive.\n\nNavbars\n\nA navbar adds a navigation bar to your app, allowing users to easily navigate your app.\n\nLearn Navbars\n\nSidebars\n\nA sidebar layout creates a sidebar, typically used for inputs, and a large main area, typically used for outputs.\n\nLearn Sidebars\n\nTabs\n\nTabs and navigation allow you to create apps that have multiple pages.\n\nLearn Tabs\n\nPanels & Cards\n\nUse panels and cards to define areas of related content.\n\nLearn Panels & Cards\n\nArrange Elements\n\nUse rows and columns to create your own layout for every device size.\n\nArrange Elements\n\n",
    "code_examples": []
  },
  {
    "id": "templates_index_html",
    "url": "templates/index.html",
    "title": "Shiny for Python ‚Äì Shiny Templates",
    "description": "",
    "content": "Shiny Templates\n\nA collection of useful apps built from a combination components, layouts, and reactivity. Compared to the gallery, templates provide a more minimal yet useful starting point for your next app.\n\nBasic Apps\n\nBasic starting points highlighting common layouts and components.\n\nGenerative AI\n\nGo from a basic Gen AI chatbot to something more sophisticated.\n\nDashboards\n\nAt their core, dashboards are a combination of sidebar layout with cards and value boxes.\n\nStreaming Updates\n\nReactive file reading and polling provide an easy and useful way to ‚Äústream‚Äù updates to files, folders, databases, and more.\n\nData Entry\n\nValidate and record user input to a questionnaire.\n\n",
    "code_examples": []
  },
  {
    "id": "gallery_index_html",
    "url": "gallery/index.html",
    "title": "Gallery ‚Äì Shiny for Python",
    "description": "",
    "content": "Shiny Gallery\n\nSuperzip explorer\n\n- View app\n- View source\n\nRestaurant tips dashboard\n\n- View app\n- View source\n\nStock prices\n\n- View app\n- View source\n\nRegularization strength\n\n- View app\n- View source\n\nNBA player stats\n\n- View app\n- View source\n\nReal-time model scoring\n\n- View app\n- View source\n\nRespiratory Disease data\n\n- View app\n- View source\n\nShiny Wordle\n\n- View app\n- View source\n\nOrbit simulation\n\n- View app\n- View source\n\nAirmass calculator\n\n- View app\n- View source\n\nCPU usage monitor\n\n- View app\n- View source\n\nSimulate data for a t-test\n\n- View app\n- View source\n\nAWS Community Builders Dashboard\n\n- View app\n- View source\n\nIdentify Outliers\n\n- View app\n- View source\n\n",
    "code_examples": []
  },
  {
    "id": "api_express_index_html",
    "url": "api/express/index.html",
    "title": "index ‚Äì Shiny for Python",
    "description": "",
    "content": "Shiny Express API\n\nThis page outlines Shiny Express‚Äôs API reference.\n\nCompared to Shiny Core, Shiny Express is a simpler way to learn and create basic apps, but it is less flexible and powerful.\n\nFor an introduction to Shiny, see the tutorial.\n\nFunction reference\n\nInput components\n\nGather user input.\n\nOutput components\n\nReactively render output.\n\nLayouts and other UI tools\n\nTools for creating, arranging, and styling UI components.\n\nNavigate multiple panels\n\nCreate a set of panels that can be navigated between.\n\nChat interface\n\nBuild a chatbot interface\n\nStreaming markdown\n\nStream markdown content into the UI\n\nReactive programming\n\nCreate reactive functions and dependencies.\n\nReusable Express code\n\nCreate reusable Express code.\n\nUpdate inputs\n\nProgrammatically update input values.\n\nUpdate UI Layouts\n\nDisplay messages\n\nDisplay messages to the user.\n\nModules\n\nUI panels\n\nVisually group together a section of UI components.\n\nUploads & downloads\n\nAllow users to upload and download files.\n\nDynamic UI\n\nDynamically show/hide UI elements.\n\nUser Session\n\nTools for managing user sessions and accessing session-related information.\n\nClient Data\n\nAccess (client-side) information about the user session (e.g., URL, output info, etc).\n\nUI as HTML\n\nTools for creating HTML/CSS/JS\n\nApplication-level settings\n\nExpress developer tooling\n\n",
    "code_examples": []
  },
  {
    "id": "api_core_index_html",
    "url": "api/core/index.html",
    "title": "index ‚Äì Shiny for Python",
    "description": "",
    "content": "Shiny Core API\n\nThis page outlines Shiny Core‚Äôs API reference.\n\nCompared to Shiny Express, Shiny Core is more structured and verbose, but also more flexible and powerful.\n\nNewcomers may want to start with Shiny Express Shiny Core API.\n\nFunction reference\n\nPage containers\n\nCreate a user interface page container.\n\nUI Layouts\n\nControl the layout of multiple UI components.\n\nUI Inputs\n\nCreate UI that prompts the user for input values or interaction.\n\nValue boxes\n\nProminently display a value and label in a box that can be expanded to show more information.\n\nNavigation (tab) panels\n\nCreate segments of UI content.\n\nUI panels\n\nVisually group together a section of UI components.\n\nUploads & downloads\n\nAllow users to upload and download files.\n\nChat interface\n\nBuild a chatbot interface\n\nStreaming markdown\n\nStream markdown content into the UI\n\nCustom UI\n\nLower-level UI functions for creating custom HTML/CSS/JS\n\nUpdate inputs\n\nProgrammatically update input values.\n\nUpdate UI Layouts\n\nRendering outputs\n\nUI (output_*()) and server (render)ing functions for generating content server-side.\n\nReactive programming\n\nCreate and run applications\n\nDisplay messages\n\nModules\n\nDeveloper facing tools\n\nTypes\n\nDeprecated\n\nExperimental\n\nThese methods are under consideration and are considered unstable. However, if there is a method you are excited about, please let us know!\n\n",
    "code_examples": []
  },
  {
    "id": "api_testing_index_html",
    "url": "api/testing/index.html",
    "title": "index ‚Äì Shiny for Python",
    "description": "",
    "content": "Shiny Testing API\n\nThis page outlines Shiny‚Äôs Testing API reference.\n\nFor an introduction to Shiny testing, see the unit testing and end to end testing tutorials.\n\nFunction reference\n\nUI Layouts\n\nMethods for interacting with Shiny app multiple UI component controller.\n\nUI Inputs\n\nMethods for interacting with Shiny app input value controller.\n\nValue boxes\n\nMethods for interacting with Shiny app valuebox controller.\n\nNavigation (tab) panels\n\nMethods for interacting with Shiny app UI content controller.\n\nUpload and download\n\nMethods for interacting with Shiny app uploading and downloading controller.\n\nChat interface\n\nMethods for interacting with Shiny app chat controller.\n\nRendering Outputs\n\nRender output in a variety of ways.\n\nPlaywright Expect\n\nMethods for testing the state of a locator within a Shiny app.\n\nPytest\n\nFixtures used for testing Shiny apps with Pytest.\n\nRun\n\nMethods for starting a local Shiny app in the background\n\n",
    "code_examples": []
  },
  {
    "id": "docs_user-interfaces_html",
    "url": "docs/user-interfaces.html",
    "title": "User interfaces ‚Äì Shiny for Python",
    "description": "",
    "content": "- üìå Essentials\n- User interfaces\n\nUser interfaces\n\nWith Shiny, you can create a wide variety of user interfaces (UI), including dashboards. Here, we‚Äôll use the following dashboard as motivation to learn about some important UI components (e.g., cards, value boxes) and layouts (e.g., columns).\n\nSee the gallery, layouts, and components for more UI design inspiration.\n\nBasic dashboard\n\nBefore we walk through a more sophisticated dashboard, consider this basic dashboard with a header (i.e., page title) and a sidebar layout. In the sidebar, there are a couple inputs for getting different views of the data, and in the main content area, is a plotly output. That output is also placed in a card to give it some depth and the ability to go full screen. The card isn‚Äôt critical when there is only one output, but they come highly recommended when there are multiple outputs to display.\n\nSophisticated dashboard\n\nNow let‚Äôs work up to a more sophisticated dashboard by walking through components and layouts that are useful for dashboards step-by-step.\n\nSidebar layout\n\nCreate a sidebar layout by giving content to ui.sidebar(). It‚Äôs usually a good idea to place inputs in the sidebar and outputs in the main content area.\n\nTo create a sidebar layout with multiple pages, just put each page‚Äôs content in a top-level ui.nav_panel(), as shown here.\n\nCards\n\nCards are great for visually grouping together related content, and it‚Äôs best practice to place related components together in a card. Here you‚Äôll also have an opportunity to add a header, footer, add full_screen capability, and more. As we‚Äôll see later, cards are also useful for making outputs stand out from one another when there are multiple outputs to display.\n\nValue boxes\n\nValue boxes are great for highlighting important summaries. They require at least two values (the title and value) and also support a showcase argument for adding a visual representation of the value. The showcase argument can technically be any UI element, but is often a faicons (i.e., fontawesome) icon.\n\nUnder the hood, value boxes are built on cards, so you can leverage similar options like full_screen.\n\nMulti-column layout\n\nCreate a multi-column layout based on a 12-column grid system by using ui.layout_columns(). By default, an intelligent equal-width layout is created, but each column width can be specified (in units of 1/12) using col_widths:\n\nBy default, col_widths doesn‚Äôt apply on smaller width (i.e., mobile) screens (in that case, columns go full-width). However, col_widths also accepts a dictionary of column widths for different screen sizes (e.g., col_widths=dict(sm=6, md=4) yields 2 columns on small screens and 3 columns on medium (or larger) screens).\n\nFilling layout\n\nSet ui.page_opts(fillable=True) to encourage content to fill the screen. Many of Shiny‚Äôs layouts and components automatically fill the screen when this option is set, which is often desirable for dashboards, but may not be what you want for things like value boxes or cards with a textual description. You can override the filling behavior on a per-component basis by setting fill=False or by specifying a height:\n\nDid you know the app viewer above is resizable? Try resizing it to see how the layout responds (the card fills the remaining space).\n\nTooltips and popovers\n\nTooltips and popovers are a useful means for both displaying and interacting with additional information in a non-obtrusive way. Tooltips are shown on hover, whereas popovers are shown on click, making them more suitable for interactive content like inputs. In the actual dashboard, we‚Äôll leverage a popover to effectively add a toolbar with additional inputs controls to card headers.\n\nAll together now\n\nLet‚Äôs put it all together to create a dashboard for exploring restaurant tipping data.\n\nHere we use a sidebar to hold our ‚Äúglobal‚Äù inputs, and place outputs in cards. These cards are laid out column-wise, and value boxes highlight the most important numbers. Finally, inputs that are specific to each are placed in a popover so that they are unobtrusive and don‚Äôt distract the user from the main application content.\n\nNext steps\n\nIf you‚Äôd like to start developing Shiny apps locally, see the get started section on creating and running apps.\n\nOtherwise, to keep learning more about some of the topics covered here, see the following:\n\n- User interfaces: Learn more about the Shiny‚Äôs UI tooling.\n- Reactivity: Learn how to manage code execution in response to user input.\n- Jupyter Widgets: Learn how all about Shiny‚Äôs Jupyter Widgets integration.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer, editor]\n#| layout: vertical\n#| viewerHeight: 500\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_plotly\n\nui.page_opts(title=\"Penguins dashboard\", fillable=True)\n\nwith ui.sidebar():\n    ui.input_selectize(\n        \"var\", \"Select variable\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\", \"year\"]\n    )\n    ui.input_numeric(\"bins\", \"Number of bins\", 30)\n\nwith ui.card(full_screen=True):\n    @render_plotly\n    def hist():\n        import plotly.express as px\n        from palmerpenguins import load_penguins\n        return px.histogram(load_penguins(), x=input.var(), nbins=input.bins())",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 200\nfrom shiny.express import ui\n\nui.page_opts(title = \"Title\")\n\nwith ui.sidebar():\n    \"Sidebar (input)\"\n\n\"Main content (output)\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 300\nfrom shiny.express import render, ui\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"A card with a header\")\n    @render.plot\n    def plot():\n        import matplotlib.pyplot as plt\n        return plt.scatter([1, 2, 3], [4, 5, 6])\n\nwith ui.card():\n    ui.markdown(\"Another card with some _markdown_.\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 300\nfrom shiny.express import render, ui\nfrom faicons import icon_svg as icon\n\nwith ui.value_box(showcase=icon(\"piggy-bank\")):\n    \"Total sales\"\n    \"$1,000,000\"\n\nwith ui.value_box(showcase=icon(\"person\")):\n    \"Total customers\"\n    @render.ui\n    def customers():\n        return f\"{1000:,}\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 200\nfrom shiny.express import ui\n\nwith ui.layout_columns(col_widths=[6, 6, 12]):\n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n    with ui.card():\n        \"Card 3\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 300\nfrom shiny.express import ui\n\nui.page_opts(fillable = True)\n\nwith ui.layout_column_wrap(fill=False):\n    with ui.value_box():\n        \"Value box\"\n        \"$1,000,000\"\n\n    with ui.value_box():\n        \"Value box\"\n        \"$1,000,000\"\n\nwith ui.card():\n    \"Card that fills remaining space...\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 100\nfrom shiny.express import ui\nfrom faicons import icon_svg as icon\n\n\"Hover this icon: \"\n\nwith ui.tooltip():\n    icon(\"circle-info\")\n    \"Tooltip message\"\n\nui.br()\n\n\"Click this icon: \"\n\nwith ui.popover(title=\"Popover title\"):\n    icon(\"circle-info\")\n    \"Popover message\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n\nimport faicons as fa\nimport plotly.express as px\nfrom shinywidgets import render_plotly\n\nfrom shiny import reactive, render, req\nfrom shiny.express import input, ui\n\n# Load data and compute static values\ntips = px.data.tips()\nbill_rng = (min(tips.total_bill), max(tips.total_bill))\n\n# Add page title and sidebar\nui.page_opts(title=\"Restaurant tipping\", fillable=True)\nwith ui.sidebar(open=\"desktop\"):\n    ui.input_slider(\"total_bill\", \"Bill amount\", min=bill_rng[0], max=bill_rng[1], value=bill_rng, pre=\"$\")\n    ui.input_checkbox_group(\"time\", \"Food service\", [\"Lunch\", \"Dinner\"], selected=[\"Lunch\", \"Dinner\"], inline=True)\n    ui.input_action_button(\"reset\", \"Reset filter\")\n\n# Add main content\nICONS = {\n    \"user\": fa.icon_svg(\"user\", \"regular\"),\n    \"wallet\": fa.icon_svg(\"wallet\"),\n    \"currency-dollar\": fa.icon_svg(\"dollar-sign\"),\n    \"gear\": fa.icon_svg(\"gear\")\n}\n\nwith ui.layout_columns(fill=False):\n\n    with ui.value_box(showcase=ICONS[\"user\"]):\n        \"Total tippers\"\n        @render.express\n        def total_tippers():\n            tips_data().shape[0]\n\n    with ui.value_box(showcase=ICONS[\"wallet\"]):\n        \"Average tip\"\n        @render.express\n        def average_tip():\n            d = tips_data()\n            if d.shape[0] > 0:\n                perc = d.tip / d.total_bill\n                f\"{perc.mean():.1%}\"\n\n    with ui.value_box(showcase=ICONS[\"currency-dollar\"]):\n        \"Average bill\"\n        @render.express\n        def average_bill():\n            d = tips_data()\n            if d.shape[0] > 0:\n                bill = d.total_bill.mean()\n                f\"${bill:.2f}\"\n\n\nwith ui.layout_columns(col_widths=[6, 6, 12]):\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Tips data\")\n        @render.data_frame\n        def table():\n            return render.DataGrid(tips_data())\n\n    with ui.card(full_screen=True):\n        with ui.card_header(class_=\"d-flex justify-content-between align-items-center\"):\n            \"Total bill vs tip\"\n            with ui.popover(title=\"Add a color variable\", placement=\"top\"):\n                ICONS[\"gear\"]\n                ui.input_radio_buttons(\n                    \"scatter_color\", None,\n                    [\"none\", \"sex\", \"smoker\", \"day\", \"time\"],\n                    inline=True\n                )\n\n        @render_plotly\n        def scatterplot():\n            color = input.scatter_color()\n            return px.scatter(\n                tips_data(),\n                x=\"total_bill\",\n                y=\"tip\",\n                color=None if color == \"none\" else color,\n                trendline=\"lowess\"\n            )\n\n    with ui.card(full_screen=True):\n        with ui.card_header(class_=\"d-flex justify-content-between align-items-center\"):\n            \"Tip percentages\"\n            with ui.popover(title=\"Add a color variable\"):\n                ICONS[\"gear\"]\n                ui.input_radio_buttons(\n                    \"tip_perc_y\", \"Split by:\",\n                    [\"sex\", \"smoker\", \"day\", \"time\"],\n                    selected=\"day\",\n                    inline=True\n                )\n\n        @render_plotly\n        def tip_perc():\n            from ridgeplot import ridgeplot\n            # Must make a copy of this pandas dataframe before we mutate it!\n            # See https://shiny.posit.co/py/docs/reactive-mutable.html\n            dat = tips_data().copy()\n            dat[\"percent\"] = dat.tip / dat.total_bill\n            yvar = input.tip_perc_y()\n            uvals = dat[yvar].unique()\n\n            samples = [\n                [ dat.percent[dat[yvar] == val] ]\n                for val in uvals\n            ]\n\n            plt = ridgeplot(\n                samples=samples, labels=uvals, bandwidth=0.01,\n                colorscale=\"viridis\", colormode=\"row-index\"\n            )\n\n            plt.update_layout(\n                legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"center\", x=0.5)\n            )\n\n            return plt\n\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n@reactive.calc\ndef tips_data():\n    bill = input.total_bill()\n    idx1 = tips.total_bill.between(bill[0], bill[1])\n    idx2 = tips.time.isin(input.time())\n    return tips[idx1 & idx2]\n\n@reactive.effect\n@reactive.event(input.reset)\ndef _():\n    ui.update_slider(\"total_bill\", value=bill_rng)\n    ui.update_checkbox_group(\"time\", selected=[\"Lunch\", \"Dinner\"])\n\n## file: requirements.txt\nridgeplot==0.1.25"
    ]
  },
  {
    "id": "docs_genai-inspiration_html",
    "url": "docs/genai-inspiration.html",
    "title": "Get inspired ‚Äì Shiny for Python",
    "description": "",
    "content": "- ü§ñ Generative AI\n- Get inspired\n\nGet inspired\n\nBefore jumping into tools and techniques for building Generative AI apps, it‚Äôs helpful to see some inspiring examples of what‚Äôs possible. In this article, we‚Äôll highlight a few apps that leverage Gen AI in useful ways, from streaming chatbots to more bespoke interfaces. Make sure to also check out the templates for more examples of Shiny + AI.\n\nGenerative AI is a powerful tool. When used responsibly, it offers some incredible opportunities for enhancing user experiences and productivity. However, when Gen AI outcomes lack reliability, transparency, and reproducibility, it can lead to worse, not better, outcomes. This is especially true when data analysis is involved and accuracy is paramount. Thankfully, LLMs have some useful techniques for increasing verifiability in outcomes, such as tool calling where you can effectively equip the LLM with the reproducible tools to accomplish certain tasks, and allow the user to verify the methodology and results.\n\nIn this article, we‚Äôll highlight some of these techniques, and how they can be used to build more reliable and reproducible applications.\n\nChatbots\n\nIn chatbots, we‚Äôll cover the ins and outs of building a chatbot with Chat(). Chatbots are the most familiar interface to Generative AI, and can be used for a wide variety of tasks, from coding assistants to enhancing interactive dashboards.\n\nCoding assistant üë©‚Äçüíª\n\nLLMs excel when they are instructed to focus on particular task(s), and provided the context necessary to complete them accurately. This is especially true for coding assistants, such as the Shiny Assistant which leverages an LLM to help you build Shiny apps faster. Just describe the app you want to build, and Shiny Assistant does its best to give you a complete working example that runs in your browser.\n\nAlthough a ‚Äústandard‚Äù chat interface like ChatGPT can help you write Shiny code, there are two main things that make Shiny Assistant a better experience:\n\n- Context: Shiny Assistant is provided instructions and up-to-date knowledge about Shiny, which allows it to generate more accurate code and better looking results.\n- Playground: Shiny Assistant takes the generated code and runs the app in your browser via shinylive, allowing you to iterate on the app and see the results in real-time.\n\nAlthough the playground aspect of Shiny Assistant is an impressive technical feat, it‚Äôs not strictly necessary to make your own useful coding/learning assistant with context important to your domain. In fact, we‚Äôve found that creating a simple chatbot that is simply instructed to focus on helping you learn about a new package, and providing the documentation for that package, to be surprisingly effective. One such example includes the chatlas assistant, which helps users learn about the chatlas package (our recommended way of programming with LLMs) by providing documentation and examples.\n\nEnhanced dashboards üìä\n\nLLMs are also very good at extracting structured data from unstructured text, which is useful for a wide variety of tasks. One interesting application is translating a user‚Äôs natural language query into a SQL query. Combining this ability with tools to actually run the SQL query on the data and reactively update relevant views makes for a powerful way to ‚Äúdrill down‚Äù into your data. Moreover, by making the SQL query accessible to the user, you can enhance the verifiability and reproducibility of the LLM‚Äôs response.\n\nQuery chat\n\nThe querychat package provides tools to help you more easily leverage this idea in your own Shiny apps. A straightforward use of querychat is shown below, where the user can ask a natural language question about the titanic dataset, and the LLM generates a SQL query that can be run on the data:\n\nThe app above is available as a template:\n\nSidebot\n\nA more advanced application of this concept is to drive multiple views of the data with a single natural language query. An implementation of this idea is available in the sidebot repo. It defaults to the tips dataset, but without much effort, you can adapt it to another dataset of your choosing.\n\nThe app above is available as a template:\n\nSidebot also demonstrates how one can leverage an LLM‚Äôs ability to ‚Äúsee‚Äù images and generate natural language descriptions of them. Specifically, by clicking on the ‚ú® icon, the user is provided with a natural language description of the visualization, which can be useful for accessibility or for users who are not as familiar with the data.\n\nGuided exploration üß≠\n\nChatbots are also a great way to guide users through an experience, such as a story, game, or learning activity. The Chat() component‚Äôs input suggestion feature provides a particularly useful interface for this, as it makes it very easy for users to ‚Äòchoose their own adventure‚Äô with little to no typing.\n\nFor example, this ‚ÄúChoose your own Data Science Adventure‚Äù app starts by collecting some basic user information, then generates relevant hypothetical data science scenarios. Based on the scenario the user chooses, the app then guides the user through a series of questions, ultimately leading to a data science project idea and deliverable:\n\nThe app above is available as a template:\n\nAnother example is the ‚ÄúWhat‚Äôs for Dinner?‚Äù app, which helps the user brainstorm dinner (or other) recipe ideas based on available ingredients and other input. In addition to brainstorming through recipe ideas, it also leverages structured data extraction to put the recipe in a structured format that could be ingested by a database.\n\n- Exploring recipes üç≤\n- Extracted recipe üìù\n\nThe app above is available as a template:\n\nStreaming markdown\n\nMarkdownStream() usage is fairly straightforward, but the potential applications may not be immediately obvious. In a generative AI setting, a common pattern is to gather input from the user, then pass that info along to a prompt template for the LLM to generate a response. Here are a couple motivating examples:\n\nWorkout plan generator üí™\n\nThe app illustrated below uses an LLM to generate a workout plan based on a user‚Äôs fitness goals, experience level, and available equipment:\n\nWhen the user clicks ‚ÄòGet Workout‚Äô, the app fills a prompt template that looks roughly like this, and passes the result as input to the LLM:\n\nFrom this prompt, the LLM responds with a workout plan, which is streamed into the app via MarkdownStream() component. Go ahead and visit the live app to see it in action, or grab the source code to run it locally:\n\nThe app above is available as a template:\n\nImage describer üñºÔ∏è\n\nThe app below uses an LLM to generate a description of an image based on a user-provided URL:\n\nWhen the user clicks ‚ÄòDescribe Image‚Äô, the app passes the image URL to the LLM, which generates an overall description, tag keywords, as well as estimates on location, photographer, etc. This content is then streamed into the MarkdownStream() component (inside of a card) as it‚Äôs being produced.\n\nThis slightly more advanced example also demonstrates how to route the same response stream to multiple output views: namely, both the MarkdownStream() and a Chat() component. This allows the user to make follow-up requests or ask questions about the image description.\n\nThe app above is available as a template:\n\n",
    "code_examples": [
      "shiny create --template querychat \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template querychat \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template querychat \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template querychat \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template data-sci-adventure \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template data-sci-adventure \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template dinner-recipe \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template dinner-recipe \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "prompt = f\"\"\"\nGenerate a brief {input.duration()}-minute workout plan for a {input.goal()} fitness goal.\nOn a scale of 1-10, I have a level  {input.experience()} experience,\nworks out {input.daysPerWeek()} days per week, and have access to:\n{\", \".join(input.equipment()) if input.equipment() else \"no equipment\"}.\n\"\"\"",
      "prompt = f\"\"\"\nGenerate a brief {input.duration()}-minute workout plan for a {input.goal()} fitness goal.\nOn a scale of 1-10, I have a level  {input.experience()} experience,\nworks out {input.daysPerWeek()} days per week, and have access to:\n{\", \".join(input.equipment()) if input.equipment() else \"no equipment\"}.\n\"\"\"",
      "shiny create --template workout-plan \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template workout-plan \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --github jonkeane/shinyImages",
      "shiny create --github jonkeane/shinyImages"
    ]
  },
  {
    "id": "docs_genai-chatbots_html",
    "url": "docs/genai-chatbots.html",
    "title": "Chatbots ‚Äì Shiny for Python",
    "description": "",
    "content": "- ü§ñ Generative AI\n- Chatbots\n\nChatbots\n\nIn this article, you‚Äôll learn how to build a chatbot powered by a Large Language Model (LLM) shiny and chatlas.\n\nGet started\n\nChoose a template\n\nPick from the following LLM providers below to start your chatbot. Copy & paste the relevant shiny create terminal command to get the relevant source files on your machine.\n\n- Ollama\n- Anthropic\n- OpenAI\n- Google\n- Bedrock Anthropic\n- Azure OpenAI\n- LangChain\n- Other\n- Help me choose!\n\nchatlas supports a wide variety of LLM providers including Vertex, Snowflake, Groq, Perplexity, and more. In this case, you can start from any template and swap out the chat_client with the relevant chat constructor (e.g., ChatVertex()).\n\nIf you‚Äôre not sure which provider to choose, chatlas provides a great guide to help you decide.\n\nWhen you run the shiny create command, you‚Äôll be provided with some tips on where to obtain the necessary API keys (if any) and how to securely add them to your app.\n\nAlso, if you‚Äôre not ready to sign up for a cloud provider (e.g., Anthropic, OpenAI, etc.), you can run models locally (for free!) with the Ollama template. This is a great way to get started and learn about LLMs without any cost, and without sharing your data with a cloud provider.\n\nOnce your credentials (if any) are in place, run the app. Congrats, you now have a streaming chat interface powered by an LLM of your choice! üéâ\n\nInspect the code\n\nGo ahead and open the app.py file from your template, you‚Äôll see something roughly like this:\n\n- Express\n- Core\n\nFrom here, we can see the key requirements for streaming reponses from an LLM:\n\n- Initialize a chat_client (e.g., ChatOllama()) to interact with the LLM. chatlas isn‚Äôt required for this, but it‚Äôs highly recommended.\n- Initialize a Chat() instance.\n- Display it‚Äôs UI element with chat.ui(). Here you can specify startup messages, customize icons, and more.\n- Decorate a @chat.on_user_submit function to fire when the user submits input. Here, chat_client generates a response stream, which is passed along to the .append_message_stream() method for display.\n\n- chatlas isn‚Äôt required for this, but it‚Äôs highly recommended.\n\n- Here you can specify startup messages, customize icons, and more.\n\n- Here, chat_client generates a response stream, which is passed along to the .append_message_stream() method for display.\n\nIn this article, our primary focus is the UI portion of the chatbot (i.e., chat). That said, since LLM model choice and prompt design are so important for generating good responses, we‚Äôll briefly touch on that first.\n\nModels & prompts\n\nWith chatlas, it‚Äôs very easy to switch between the model and system prompt behind your chat_client. Just change the model and system_prompt parameters:\n\nIf you‚Äôre new to programming with LLMs, we highly recommend visiting the chatlas website for guidance on where to start, choosing a model, and designing an effective system prompt.\n\nIf you‚Äôre not yet ready learn about LLMs, that‚Äôs okay! We can still dive into chat UI features without knowing much about LLMs.\n\nInteractively experiment with different models and prompts with the playground template. It‚Äôs also a great learning resource on how to leverage reactivity for dynamic prompts and model selection.\n\nAdd messages\n\nOn startup\n\nShow message(s) when the chat first loads by providing messages to chat.ui(). Messages are interpreted as markdown, so you can use markdown (or HTML) to format the text as you like.\n\nStartup messages are a great place to introduce the chatbot with a brief description of what it can do and, optionally, some input suggestions to help the user get started quickly. Messages can also contain arbitrary Shiny UI components, so you could even include something like a tooltip to provide additional details on demand.\n\n- Express\n- Core\n\nOn user submit\n\nEvery chat instance should have a @chat.on_user_submit callback. This is where you‚Äôll receive the user‚Äôs input and append a response to the chat. In your started template, the response stream is provided by chatlas via chat_client.stream_async(prompt). As it turns out, stream is an generator of markdown strings, and the .append_message_stream() method can work with any generator of strings. This is useful to know if you want to:\n\n- Use another framework for reponse generation (e.g., LangChain).\n- Transform the stream as it‚Äôs being generated (e.g., capitalize the response).\n\nBookmark messages\n\nWhen a Shiny app reloads, the app returns to it‚Äôs original state, unless the URL includes bookmarked state.1 Automatically updating the URL to include a bookmark of the chat state is a great way to help users return to their work if they accidentally refresh the page or unexpectedly lose their connection.\n\nAdding bookmark support to an app generally requires some extra effort. At the very least, Shiny needs to know where and when to save state, and in some cases, how to save/restore it as well.2 The .enable_bookmarking() method makes this all a bit easier for bookmarking both the chat and chat_client instances.\n\n- Express\n- Core\n\nAdding this .enable_bookmarking() call handles the where, when, and how of bookmarking chat state:\n\n- Where (store) \"url\" store the state in the URL. \"server\" store the state on the server. Consider this over \"url\" if you want to support a large amount of state, or have other bookmark state that can‚Äôt be serialized to JSON.\n- When (bookmark_on) \"response\": triggers a bookmark when an \"assistant\" response is appended. None: don‚Äôt trigger a bookmark. This assumes you‚Äôll be triggering bookmarks through other means (e.g., a button).\n- How is handled automatically by registering the relevant on_bookmark and on_restore callbacks.\n\n- \"url\" store the state in the URL.\n- \"server\" store the state on the server. Consider this over \"url\" if you want to support a large amount of state, or have other bookmark state that can‚Äôt be serialized to JSON.\n\n- \"response\": triggers a bookmark when an \"assistant\" response is appended.\n- None: don‚Äôt trigger a bookmark. This assumes you‚Äôll be triggering bookmarks through other means (e.g., a button).\n\nAlso note that when .enable_bookmarking() triggers a bookmark for you, it‚Äôll also update the URL query string to include the bookmark state. This way, when the user unexpectedly loses connection, they can load the current URL to restore the chat state, or go back to the original URL to start over.\n\nLayout\n\nFill\n\nFill the page on desktop (and mobile) with the fillable=True (and fillable_mobile=True) page options. This way, the input stays anchored to the bottom of the page, and the chat fills the remaining space.\n\n- Express\n- Core\n\nSidebar\n\nTo have the chat fill a sidebar, set height to 100% on both the sidebar and chat.\n\n- Express\n- Core\n\nCard layout\n\nAnother useful UI pattern is to embed the chat component inside a ui.card(). If nothing else, this will help visually separate the chat from the rest of the app. It also provides a natural place to provide a header (with perhaps a tooltip with more info about your chatbot). Cards also come with other handy features like full_screen=True to make the chat full-screen when embedded inside a larger app.\n\n- Express\n- Core\n\nTheming\n\nCustom CSS\n\nTo customize main colors and fonts, provide a ui.Theme() to the theme page option. Theming customization may be done directly on ui.Theme() (e.g., .add_defaults()) and/or created from a brand-yml file and applied with ui.Theme().from_brand(). Note you can also introduce a dark mode toggle with ui.input_dark_mode().\n\n- Express\n- Core\n\nCustom icons\n\nCustomize the assistant icon by supplying HTML/SVG to icon_assistant when creating the UI element (or when appending a message). The faicons package makes it easy to do this for font awesome, but other icon libraries (e.g., Bootstrap icons, heroicons, etc.) or custom SVGs are also possible by providing inline SVGs as a string to ui.HTML().\n\n- Express\n- Core\n\nHTML <img> tags also work. By default, they fill their container, and may get clipped by the container‚Äôs border-radius. To scale down the image, add a icon CSS class, or border-0 to remove the border and border-radius.\n\n- Express\n- Core\n\nRecommend input\n\nSuggest input\n\nHelp users start or continue a conversation by providing input suggestions. To create one, add a suggestion CSS class to relevant portion(s) of the message text. You can also add a submit class to make the suggestion submit the input automatically. Try clicking on the suggestions (or accessing via keyboard) below to see how they work.\n\nSuggestions are a great way to help guide users throughout a multi-turn conversation (for real examples, see here). To accomplish this, you‚Äôll need to instruct the AI how to generate suggestions itself. We‚Äôve found that adding a section like the one below to your system_prompt to be effective for this:\n\nInput suggestions can also things other than text, like images or cards. To create one, supply a data-suggestion attribute with the suggestion text on the desired HTML element. As shown below, we highly recommend using a ui.card() in this scenario ‚Äì it should be fairly obvious to the user that it‚Äôs clickable, and comes with a nice hover effect.\n\nAny suggestion can be auto-submitted by holding Ctrl/Cmd when clicking on it. Morever, you can opt-out of auto-submitting any suggestion by holding Alt/Option when clicking on a suggestion.\n\nUpdate input\n\nInput suggestions are a great starting point for recommending input to user, but more advanced use cases may require programmatically updating the user input. With chat.update_user_input(), you can change placeholder text, the input value, and even focus or submit that value on the user‚Äôs behalf.\n\nFor example, the app below collects some user input through a set of inputs in the sidebar, which effectively just prepopulates the starting user prompt, which the user can then further modify as they see fit:\n\nThe app above is available as a template:\n\nInteractive messages\n\nMessages can contain Shiny UI elements like inputs, outputs, etc. This allows you to collect user input, display rich interactive output (e.g., Jupyter Widgets), or provide additional context (e.g. tooltips) from within the chat.\n\nFor example, in the ‚ÄúWhat‚Äôs for Dinner?‚Äù app, when the user requests to extract recipe, a message is shown with a human readable version of recipe, as well as a download button to get the recipe in a structured JSON format:\n\nThe app above is available as a template:\n\nFor a more basic example, here‚Äôs a startup message with an input field:\n\nProbably the most interesting way in which interactive messages can be used is from a custom tool call display. For example, you could have a tool that displays a Data Grid or Jupyter Widget (e.g., a plotly graph).\n\nMessage streams\n\nNon-blocking streams\n\nUnder-the-hood, .append_message_stream() launches a non-blocking extended task. This allows the app to be responsive while the AI generates the response, even when multiple concurrent users are on a single Python process.\n\nA few other benefits of an extended task is that they make it easy to:\n\n- Reactively read for the .result().\n- Reactively read for the .status().\n- .cancel() the stream.\n\nTo grab the latest message stream, read the .latest_message_stream property on the chat object. This property always points to the most recent message stream, making it easy to work with it in a reactive context. Here‚Äôs an example of reactively reading the status and result of the latest message stream:\n\nProviding good UI/UX for canceling a stream is a bit more involved, but it can be done with a button that cancels the stream and notifies the user. See the example below for an approach to this:\n\nStreaming context\n\nAn alternative way to append a streaming messages is through the .message_stream_context() context manager. Compared to .append_message_stream(), it provides a bit more control over the stream‚Äôs lifecycle and content, but has the downside of not being non-blocking by default. You‚Äôll find it useful when you want to:\n\n- Overwrite/replace content that already exists in a message.\n- Insert a new stream inside an existing stream.\n\nThe example below demonstrates both of these use cases. Note how the inner stream is used to show progress, and the outer stream is used to provide context:\n\nAs you‚Äôll learn in tool calling, a .message_stream() can also be nested inside an non-blocking .append_message_stream(), which is primarily useful for showing tool progress/results.\n\nTroubleshooting\n\nError handling\n\nWhen an error occurs in the @chat.on_user_submit callback, the app displays a dismissible notification about the error. When running locally, the actual error message is shown, but in production, only a generic message is shown (i.e., the error is sanitized since it may contain sensitive information). If you‚Äôd prefer to have errors stop the app, that can also be done through the on_error argument of Chat (see the documentation for more information).\n\nAnother way to handle error is to catch them yourself and append a message to the chat. This way, you can might provide a better experience with ‚Äúknown‚Äù errors, like when the user enters an invalid/unexpected input:\n\nDebugging\n\nSometimes response generation from an LLM might not be quite what you expect, leaving you to wonder what went wrong. With chatlas, your primary interactive debugging tool is to set echo=\"all\" in the .stream_async() method to see the context of the chat history (emitted to your Python console). For lower-level debugging, you can also enable logging and/or access the full chat history via the chat_client.get_turns() method. For more, see chatlas‚Äô troubleshooting guide.\n\nSince chatlas builds on top of official Python SDKs like openai and anthropic, monitoring solutions that integrate with their logging mechanism can be used to monitor and debug your chatbot in production.\n\nMessage history\n\nThe chat.messages() method returns a tuple of all the messages appended after startup. Use this if you want to obtain a record of messages as they appear in the UI. This makes implementing something like download feature easy:\n\nBeware that chat.messages() only returns only the content sent to the UI, not necessarily the full message content sent/returned by the LLM. This means, if your chat history contains ‚Äúbackground‚Äù context, you may instead want that full back-end message history. Note that with chatlas, you can access and set that additional context via the .get_turns() and .set_turns() methods on the chat_client.\n\nFor a more advanced example of how you can combine reactivity with chat.messages() to add a ‚ÄúNew chat‚Äù button with a dropdown to select previous chats, see the example below:\n\nNext steps\n\nThe next article covers a more generic way to stream generative AI: the ui.MarkdownStream() component. This component is useful when you don‚Äôt want a full chat interface, but still want to stream in some content from an LLM.\n\nSkip to other articles in the series if you want to learn about other generally useful Generative AI techniques like tool calls, structured output, and RAG.\n\nFootnotes\n\n- This can be especially frustrating behavior since hosted apps, by default, will close a idle session after a certain (configurable) amount of time.‚Ü©Ô∏é\n- When server-side state can‚Äôt be fully determined by the UI‚Äôs input values alone, you‚Äôll need to register on_bookmark and on_restore callbacks to save and restore that server-state.‚Ü©Ô∏é\n\nThis can be especially frustrating behavior since hosted apps, by default, will close a idle session after a certain (configurable) amount of time.‚Ü©Ô∏é\n\nWhen server-side state can‚Äôt be fully determined by the UI‚Äôs input values alone, you‚Äôll need to register on_bookmark and on_restore callbacks to save and restore that server-state.‚Ü©Ô∏é\n\n",
    "code_examples": [
      "shiny create --template chat-ai-ollama",
      "shiny create --template chat-ai-ollama",
      "shiny create --template chat-ai-anthropic",
      "shiny create --template chat-ai-anthropic",
      "shiny create --template chat-ai-openai",
      "shiny create --template chat-ai-openai",
      "shiny create --template chat-ai-gemini",
      "shiny create --template chat-ai-gemini",
      "shiny create --template chat-ai-anthropic-aws",
      "shiny create --template chat-ai-anthropic-aws",
      "shiny create --template chat-ai-azure-openai",
      "shiny create --template chat-ai-azure-openai",
      "shiny create --template chat-ai-langchain",
      "shiny create --template chat-ai-langchain",
      "from chatlas import ChatOllama\nfrom shiny.express import ui\n\n# Might instead be ChatAnthropic, ChatOpenAI, or some other provider\nchat_client = ChatOllama(model=\"llama3.2\")\n\nchat = ui.Chat(id=\"my_chat\")\nchat.ui()\n\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    response = await chat_client.stream_async(user_input)\n    await chat.append_message_stream(response)",
      "from chatlas import ChatOllama\nfrom shiny.express import ui\n\n# Might instead be ChatAnthropic, ChatOpenAI, or some other provider\nchat_client = ChatOllama(model=\"llama3.2\")\n\nchat = ui.Chat(id=\"my_chat\")\nchat.ui()\n\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    response = await chat_client.stream_async(user_input)\n    await chat.append_message_stream(response)",
      "from chatlas import ChatOllama\nfrom shiny import ui, App\n\napp_ui = ui.page_fixed(\n    ui.chat_ui(id=\"my_chat\")\n)\n\ndef server(input):\n    chat = ui.Chat(id=\"my_chat\")\n    chat_client = ChatOllama(model=\"llama3.2\")\n\n    @chat.on_user_submit\n    async def handle_user_input(user_input: str):\n        response = await chat_client.stream_async(user_input)\n        await chat.append_message_stream(response)\n\napp = App(app_ui, server)",
      "from chatlas import ChatOllama\nfrom shiny import ui, App\n\napp_ui = ui.page_fixed(\n    ui.chat_ui(id=\"my_chat\")\n)\n\ndef server(input):\n    chat = ui.Chat(id=\"my_chat\")\n    chat_client = ChatOllama(model=\"llama3.2\")\n\n    @chat.on_user_submit\n    async def handle_user_input(user_input: str):\n        response = await chat_client.stream_async(user_input)\n        await chat.append_message_stream(response)\n\napp = App(app_ui, server)",
      "chat_client = ChatOllama(\n  model=\"llama3.2\",\n  system_prompt=\"You are a helpful assistant\",\n)",
      "chat_client = ChatOllama(\n  model=\"llama3.2\",\n  system_prompt=\"You are a helpful assistant\",\n)",
      "shiny create --template chat-ai-playground",
      "shiny create --template chat-ai-playground",
      "chat.ui(\n  messages=[\"**Hello!** How can I help you today?\"]\n)",
      "chat.ui(\n  messages=[\"**Hello!** How can I help you today?\"]\n)",
      "ui.chat_ui(\n  id=\"chat\",\n  messages=[\"**Hello!** How can I help you today?\"],\n)",
      "ui.chat_ui(\n  id=\"chat\",\n  messages=[\"**Hello!** How can I help you today?\"],\n)",
      "@chat.on_user_submit\nasync def _(user_input: str):\n    stream = stream_generator(user_input)\n    await chat.append_message_stream(stream)\n\n# 'Wrap' the stream to capitialize the response\nasync def stream_generator(user_input):\n    stream = await chat_client.stream_async(user_input)\n    async for chunk in stream:\n        yield chunk.upper()",
      "@chat.on_user_submit\nasync def _(user_input: str):\n    stream = stream_generator(user_input)\n    await chat.append_message_stream(stream)\n\n# 'Wrap' the stream to capitialize the response\nasync def stream_generator(user_input):\n    stream = await chat_client.stream_async(user_input)\n    async for chunk in stream:\n        yield chunk.upper()",
      "from chatlas import ChatOllama\nfrom shiny.express import ui\n\nchat_client = ChatOllama(model=\"llama3.2\")\n\nchat = ui.Chat(id=\"chat\")\nchat.ui(messages=[\"Welcome!\"])\n\nchat.enable_bookmarking(\n    chat_client,\n    bookmark_store=\"url\", # or \"server\"\n    bookmark_on=\"response\", # or None\n)",
      "from chatlas import ChatOllama\nfrom shiny.express import ui\n\nchat_client = ChatOllama(model=\"llama3.2\")\n\nchat = ui.Chat(id=\"chat\")\nchat.ui(messages=[\"Welcome!\"])\n\nchat.enable_bookmarking(\n    chat_client,\n    bookmark_store=\"url\", # or \"server\"\n    bookmark_on=\"response\", # or None\n)",
      "from chatlas import ChatOllama\nfrom shiny import ui, App\n\napp_ui = ui.page_fixed(\n    ui.chat_ui(id=\"chat\", messages=[\"Welcome!\"])\n)\n\ndef server(input):\n    chat_client = ChatOllama(model=\"llama3.2\")\n    chat = ui.Chat(id=\"chat\")\n\n    chat.enable_bookmarking(\n        chat_client,\n        bookmark_on=\"response\", # or None\n    )\n\napp = App(app_ui, server, bookmark_store=\"url\")",
      "from chatlas import ChatOllama\nfrom shiny import ui, App\n\napp_ui = ui.page_fixed(\n    ui.chat_ui(id=\"chat\", messages=[\"Welcome!\"])\n)\n\ndef server(input):\n    chat_client = ChatOllama(model=\"llama3.2\")\n    chat = ui.Chat(id=\"chat\")\n\n    chat.enable_bookmarking(\n        chat_client,\n        bookmark_on=\"response\", # or None\n    )\n\napp = App(app_ui, server, bookmark_store=\"url\")",
      "from shiny.express import ui\n\nui.page_opts(\n  fillable=True,\n  fillable_mobile=True,\n)\n\nchat = ui.Chat(id=\"chat\")\nchat.ui(messages=[\"Welcome!\"])",
      "from shiny.express import ui\n\nui.page_opts(\n  fillable=True,\n  fillable_mobile=True,\n)\n\nchat = ui.Chat(id=\"chat\")\nchat.ui(messages=[\"Welcome!\"])",
      "from shiny import ui, App\n\napp_ui = ui.page_fillable(\n    ui.chat_ui(id=\"chat\", messages=[\"Welcome!\"]),\n    fillable_mobile=True,\n)\n\ndef server(input):\n    chat = ui.Chat(id=\"chat\")\n\napp = App(app_ui, server)",
      "from shiny import ui, App\n\napp_ui = ui.page_fillable(\n    ui.chat_ui(id=\"chat\", messages=[\"Welcome!\"]),\n    fillable_mobile=True,\n)\n\ndef server(input):\n    chat = ui.Chat(id=\"chat\")\n\napp = App(app_ui, server)",
      "from shiny.express import ui\n\nchat = ui.Chat(id=\"chat\")\n\nwith ui.sidebar(width=300, style=\"height:100%\"):\n    chat.ui(height=\"100%\", messages=[\"Welcome!\"])\n\n\"Main content\"",
      "from shiny.express import ui\n\nchat = ui.Chat(id=\"chat\")\n\nwith ui.sidebar(width=300, style=\"height:100%\"):\n    chat.ui(height=\"100%\", messages=[\"Welcome!\"])\n\n\"Main content\"",
      "from shiny import ui, App\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.chat_ui(id=\"chat\", messages=[\"Welcome!\"], height=\"100%\"),\n        width=300, style=\"height:100%\"\n    ),\n    \"Main content\",\n)\n\ndef server(input):\n    chat = ui.Chat(id=\"chat\")\n\napp = App(app_ui, server)",
      "from shiny import ui, App\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.chat_ui(id=\"chat\", messages=[\"Welcome!\"], height=\"100%\"),\n        width=300, style=\"height:100%\"\n    ),\n    \"Main content\",\n)\n\ndef server(input):\n    chat = ui.Chat(id=\"chat\")\n\napp = App(app_ui, server)",
      "from shiny.express import ui\nfrom faicons import icon_svg\n\nui.page_opts(\n    fillable=True,\n    fillable_mobile=True,\n    class_=\"bg-light\",\n)\n\nchat = ui.Chat(id=\"chat\")\n\nwith ui.card():\n    with ui.card_header(class_=\"d-flex justify-content-between align-items-center\"):\n        \"Welcome to Posit chat\"\n        with ui.tooltip():\n            icon_svg(\"question\")\n            \"This chat is brought to you by Posit.\"\n    chat.ui(\n        messages=[\"Hello! How can I help you today?\"]\n    )",
      "from shiny.express import ui\nfrom faicons import icon_svg\n\nui.page_opts(\n    fillable=True,\n    fillable_mobile=True,\n    class_=\"bg-light\",\n)\n\nchat = ui.Chat(id=\"chat\")\n\nwith ui.card():\n    with ui.card_header(class_=\"d-flex justify-content-between align-items-center\"):\n        \"Welcome to Posit chat\"\n        with ui.tooltip():\n            icon_svg(\"question\")\n            \"This chat is brought to you by Posit.\"\n    chat.ui(\n        messages=[\"Hello! How can I help you today?\"]\n    )",
      "from shiny import ui, App\n\napp_ui = ui.page_fillable(\n  ui.card(\n      ui.card_header(\n          \"Welcome to Posit chat\",\n          ui.tooltip(\n              icon_svg(\"question\"),\n              \"This chat is brought to you by Posit.\"\n          ),\n          class_=\"d-flex justify-content-between align-items-center\"\n      ),\n      ui.chat_ui(\n          id=\"chat\",\n          messages=[\"Hello! How can I help you today?\"],\n      ),\n    ),\n    fillable_mobile=True,\n    class_=\"bg-light\",\n)\n\ndef server(input):\n    chat = ui.Chat(id=\"chat\")\n\napp = App(app_ui, server)",
      "from shiny import ui, App\n\napp_ui = ui.page_fillable(\n  ui.card(\n      ui.card_header(\n          \"Welcome to Posit chat\",\n          ui.tooltip(\n              icon_svg(\"question\"),\n              \"This chat is brought to you by Posit.\"\n          ),\n          class_=\"d-flex justify-content-between align-items-center\"\n      ),\n      ui.chat_ui(\n          id=\"chat\",\n          messages=[\"Hello! How can I help you today?\"],\n      ),\n    ),\n    fillable_mobile=True,\n    class_=\"bg-light\",\n)\n\ndef server(input):\n    chat = ui.Chat(id=\"chat\")\n\napp = App(app_ui, server)",
      "from shiny.express import ui\n\nui.page_opts(\n    theme=ui.Theme().add_defaults(primary=\"#a855f7\"),\n    title=ui.div(\n        \"My themed chat app\",\n        ui.input_dark_mode(mode=\"dark\"),\n        class_=\"d-flex justify-content-between w-100\",\n    )\n)\n\nchat = ui.Chat(id=\"chat\")\n\nwith ui.sidebar(width=300, style=\"height:100%\"):\n    chat.ui(height=\"100%\", messages=[\"Welcome!\"])\n\n\"Main content region\"",
      "from shiny.express import ui\n\nui.page_opts(\n    theme=ui.Theme().add_defaults(primary=\"#a855f7\"),\n    title=ui.div(\n        \"My themed chat app\",\n        ui.input_dark_mode(mode=\"dark\"),\n        class_=\"d-flex justify-content-between w-100\",\n    )\n)\n\nchat = ui.Chat(id=\"chat\")\n\nwith ui.sidebar(width=300, style=\"height:100%\"):\n    chat.ui(height=\"100%\", messages=[\"Welcome!\"])\n\n\"Main content region\"",
      "from shiny import ui, App\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.chat_ui(id=\"chat\", messages=[\"Welcome!\"], height=\"100%\"),\n        width=300, style=\"height:100%\"\n    ),\n    \"Main content region\",\n    theme=ui.Theme().add_defaults(primary=\"#a855f7\"),  # <<\n    title=ui.tags.div(\n        \"My themed chat app\",\n        ui.input_dark_mode(mode=\"dark\"),\n        class_=\"d-flex justify-content-between w-100\",\n    ),\n)\n\ndef server(input):\n    chat = ui.Chat(id=\"chat\")\n\napp = App(app_ui, server)",
      "from shiny import ui, App\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.chat_ui(id=\"chat\", messages=[\"Welcome!\"], height=\"100%\"),\n        width=300, style=\"height:100%\"\n    ),\n    \"Main content region\",\n    theme=ui.Theme().add_defaults(primary=\"#a855f7\"),  # <<\n    title=ui.tags.div(\n        \"My themed chat app\",\n        ui.input_dark_mode(mode=\"dark\"),\n        class_=\"d-flex justify-content-between w-100\",\n    ),\n)\n\ndef server(input):\n    chat = ui.Chat(id=\"chat\")\n\napp = App(app_ui, server)",
      "from faicons import icon_svg\n\nchat.ui(\n  messages=[\"**Hello!** How can I help you today?\"],\n  icon_assistant=icon_svg(\"slack\"),\n)",
      "from faicons import icon_svg\n\nchat.ui(\n  messages=[\"**Hello!** How can I help you today?\"],\n  icon_assistant=icon_svg(\"slack\"),\n)",
      "from faicons import icon_svg\n\nui.chat_ui(\n  id=\"chat\",\n  messages=[\"**Hello!** How can I help you today?\"],\n  icon_assistant=icon_svg(\"slack\"),\n)",
      "from faicons import icon_svg\n\nui.chat_ui(\n  id=\"chat\",\n  messages=[\"**Hello!** How can I help you today?\"],\n  icon_assistant=icon_svg(\"slack\"),\n)",
      "from faicons import icon_svg\n\nchat.ui(\n  messages=[\"**Hello!** How can I help you today?\"],\n  icon_assistant=ui.img(\n    src=\"https://raw.githubusercontent.com/posit-dev/py-shiny/c1445b2/tests/playwright/shiny/components/chat/icon/img/shiny.png\"\n  )\n)",
      "from faicons import icon_svg\n\nchat.ui(\n  messages=[\"**Hello!** How can I help you today?\"],\n  icon_assistant=ui.img(\n    src=\"https://raw.githubusercontent.com/posit-dev/py-shiny/c1445b2/tests/playwright/shiny/components/chat/icon/img/shiny.png\"\n  )\n)",
      "from faicons import icon_svg\n\nui.chat_ui(\n  id=\"chat\",\n  messages=[\"**Hello!** How can I help you today?\"],\n  icon_assistant=ui.img(\n    src=\"https://raw.githubusercontent.com/posit-dev/py-shiny/c1445b2/tests/playwright/shiny/components/chat/icon/img/shiny.png\",\n  )\n)",
      "from faicons import icon_svg\n\nui.chat_ui(\n  id=\"chat\",\n  messages=[\"**Hello!** How can I help you today?\"],\n  icon_assistant=ui.img(\n    src=\"https://raw.githubusercontent.com/posit-dev/py-shiny/c1445b2/tests/playwright/shiny/components/chat/icon/img/shiny.png\",\n  )\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 300\n\nfrom shiny.express import ui\n\nwelcome = \"\"\"\n**Hello!** How can I help you today?\n\nHere are a couple suggestions:\n\n* <span class=\"suggestion\">Tell me a joke</span>\n* <span class=\"suggestion submit\">Tell me a story</span>\n\"\"\"\n\nchat = ui.Chat(id=\"chat\")\nchat.ui(messages=[welcome])\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    await chat.append_message(f\"You said: {user_input}\")",
      "## Showing prompt suggestions\n\nIf you find it appropriate to suggest prompts the user might want to write, wrap the text of each prompt in `<span class=\"suggestion\">` tags.\nAlso use \"Suggested next steps:\" to introduce the suggestions. For example:\n\n```\nSuggested next steps:\n\n1. <span class=\"suggestion\">Suggestion 1.</span>\n2. <span class=\"suggestion\">Suggestion 2.</span>\n3. <span class=\"suggestion\">Suggestion 3.</span>\n```",
      "## Showing prompt suggestions\n\nIf you find it appropriate to suggest prompts the user might want to write, wrap the text of each prompt in `<span class=\"suggestion\">` tags.\nAlso use \"Suggested next steps:\" to introduce the suggestions. For example:\n\n```\nSuggested next steps:\n\n1. <span class=\"suggestion\">Suggestion 1.</span>\n2. <span class=\"suggestion\">Suggestion 2.</span>\n3. <span class=\"suggestion\">Suggestion 3.</span>\n```",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n#| editorHeight: 300\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import expressify, ui\nfrom suggestions import card_suggestions\n\nwith ui.hold() as suggestions:\n    card_suggestions()\n\nwelcome = f\"\"\"\n**Hello!** How can I help you today?\n\nHere are a couple suggestions:\n\n{suggestions[0]}\n\"\"\"\n\nchat = ui.Chat(id=\"chat\")\nchat.ui(messages=[welcome])\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    await chat.append_message(f\"You said: {user_input}\")\n\n## file: suggestions.py\nfrom shiny.express import expressify, ui\n\n@expressify\ndef card_suggestion(title: str, suggestion: str, img_src: str, img_alt: str):\n    with ui.card(data_suggestion=suggestion):\n        ui.card_header(title)\n        ui.fill.as_fill_item(\n            ui.img(\n                src=img_src,\n                alt=img_alt,\n            )\n        )\n\n@expressify\ndef card_suggestions():\n    with ui.layout_column_wrap(height=200):\n        card_suggestion(\n            title=\"Learn Python\",\n            suggestion=\"Teach me Python\",\n            img_src=\"https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg\",\n            img_alt=\"Python logo\",\n        )\n        card_suggestion(\n            title=\"Learn R\",\n            suggestion=\"Teach me R\",\n            img_src=\"https://upload.wikimedia.org/wikipedia/commons/1/1b/R_logo.svg\",\n            img_alt=\"R logo\",\n        )",
      "shiny create --template data-sci-adventure \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template data-sci-adventure \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template dinner-recipe \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template dinner-recipe \\\n    --github posit-dev/py-shiny-templates/gen-ai",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 300\nfrom shiny.express import ui\n\nwith ui.hold() as welcome:\n    \"**Hello!** What's your name?\"\n    ui.input_text(\"name\", None, placeholder=\"Enter name here\")\n\nchat = ui.Chat(id=\"chat\")\nchat.ui(messages=[welcome])",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 350\n#| editorHeight: 300\n\n## file: app.py\nfrom app_utils import stream_generator\nfrom shiny.express import render, ui\n\nchat = ui.Chat(\"chat\")\n\n@render.code\ndef stream_status():\n    return f\"Status: {chat.latest_message_stream.status()}\"\n\nchat.ui(placeholder=\"Type anything here and press Enter\")\n\n@render.text\nasync def stream_result():\n    return f\"Result: {chat.latest_message_stream.result()}\"\n\n@chat.on_user_submit\nasync def _(message: str):\n    await chat.append_message_stream(stream_generator())\n\n## file: app_utils.py\nimport asyncio\n\nasync def stream_generator():\n    for i in range(5):\n        await asyncio.sleep(0.5)\n        yield f\"Message {i} \\n\\n\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 350\n#| editorHeight: 300\n\n## file: app.py\nfrom app_utils import stream_generator\n\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\n    \"cancel\",\n    \"Cancel stream\",\n    class_=\"btn btn-danger\",\n)\n\nchat = ui.Chat(\"chat\")\nchat.ui(placeholder=\"Type anything here and press Enter\")\n\n@chat.on_user_submit\nasync def _(message: str):\n    await chat.append_message_stream(stream_generator())\n\n@reactive.effect\n@reactive.event(input.cancel)\ndef _():\n    chat.latest_message_stream.cancel()\n    ui.notification_show(\"Stream cancelled\", type=\"warning\")\n\n@reactive.effect\ndef _():\n    ui.update_action_button(\n        \"cancel\",\n        disabled=chat.latest_message_stream.status() != \"running\"\n    )\n\n\n## file: app_utils.py\nimport asyncio\n\nasync def stream_generator():\n    for i in range(3):\n        await asyncio.sleep(0.75)\n        yield f\"Message {i} \\n\\n\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 250\n#| editorHeight: 300\nimport asyncio\n\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nwelcome = f\"\"\"\n**Hello!** Press the button below to append a stream.\n\n{ui.input_task_button(\"do_stream\", \"Stream\", class_=\"btn btn-primary\")}\n\"\"\"\n\nchat = ui.Chat(id=\"my_chat\")\nchat.ui(messages=[welcome])\n\n@reactive.effect\n@reactive.event(input.do_stream)\nasync def _():\n    async with chat.message_stream_context() as outer:\n        await outer.append(\"Starting stream üîÑ...\\n\\nProgress:\")\n        async with chat.message_stream_context() as inner:\n            for x in [0, 50, 100]:\n                await inner.replace(f\" {x}%\")\n                await asyncio.sleep(1)\n        await outer.replace(\"Completed stream ‚úÖ\")",
      "def format_as_error(x: str):\n    return f'<span class=\"text-danger\">{x}</span>'\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    if not user_input.startswith(\"http\"):\n        msg = format_as_error(\"Please enter a valid URL\")\n        return await chat.append_message(msg)\n\n    try:\n        contents = scrape_page_with_url(input)\n    except Exception:\n        msg = \"I'm sorry, I couldn't extract content from that URL. Please try again.\"\n        return await chat.append_message(format_as_error(msg))\n\n    response = await chat_client.stream_async(contents)\n    await chat.append_message_stream(response)",
      "def format_as_error(x: str):\n    return f'<span class=\"text-danger\">{x}</span>'\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    if not user_input.startswith(\"http\"):\n        msg = format_as_error(\"Please enter a valid URL\")\n        return await chat.append_message(msg)\n\n    try:\n        contents = scrape_page_with_url(input)\n    except Exception:\n        msg = \"I'm sorry, I couldn't extract content from that URL. Please try again.\"\n        return await chat.append_message(format_as_error(msg))\n\n    response = await chat_client.stream_async(contents)\n    await chat.append_message_stream(response)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 375\nimport json\nfrom shiny.express import render, ui\n\nui.page_opts(fillable=True, fillable_mobile=True)\n\nchat = ui.Chat(\"chat\")\n\nchat.ui(messages=[\"Welcome!\"])\n\n@render.download(filename=\"messages.json\", label=\"Download messages\")\ndef download():\n    yield json.dumps(chat.messages())\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    await chat.append_message(f\"You said: {user_input}\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n#| editorHeight: 400\n\nfrom datetime import datetime\nfrom faicons import icon_svg\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.page_opts(fillable=True, fillable_mobile=True)\n\nchat = ui.Chat(id=\"chat\")\nchat.ui(messages=[\"**Hello!** How can I help you today?\"])\n\nwith ui.layout_columns(fill=False):\n    ui.input_action_button(\"new\", \"New chat\", icon=icon_svg(\"plus\"))\n\n    @render.express\n    def history_ui():\n        if not history():\n            return\n        choices = list(history().keys())\n        choices_dict = dict(zip(choices, choices))\n        ui.input_select(\n            \"previous_chat\", None,\n            choices={\"\": \"Choose a previous chat\", **choices_dict}\n        )\n\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    await chat.append_message(f\"You said: {user_input}\")\n\n# Track chat history\nhistory = reactive.value({})\n\n# When a new chat is started, add the current chat messages\n# to the history, clear the chat, and append a new start message\n@reactive.effect\n@reactive.event(input.new)\nasync def _():\n    stamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    hist = {**history(), stamp: chat.messages()}\n    history.set(hist)\n    await chat.clear_messages()\n    await chat.append_message(f\"Chat started at {stamp}\")\n\n# When a previous chat is selected, clear the current chat,\n# and append the messages from the selected chat\n@reactive.effect\n@reactive.event(input.previous_chat)\nasync def _():\n    if not input.previous_chat():\n        return\n    msgs = history()[input.previous_chat()]\n    await chat.clear_messages()\n    for msg in msgs:\n        await chat.append_message(msg)"
    ]
  },
  {
    "id": "docs_genai-stream_html",
    "url": "docs/genai-stream.html",
    "title": "Streaming ‚Äì Shiny for Python",
    "description": "",
    "content": "- ü§ñ Generative AI\n- Streaming\n\nStreaming\n\nIn this article, you‚Äôll learn how to stream markdown/HTML content into your app via MarkdownStream(). This component is general purpose, but it‚Äôs particularly useful in a generative AI setting where displaying markdown strings as it‚Äôs being generated is a common requirement.\n\nCompared to the Chat() component, MarkdownStream()‚Äôs API is simpler and focuses solely on a streaming display without the conversational UI elements. The possible experiences you can create around MarkdownStream() are vast, but as we‚Äôll see shortly, a common pattern is populate a LLM prompt template based on user input.\n\nGet started\n\nChoose a template\n\nPick from the following LLM providers below to start your streaming markdown app. Copy & paste the relevant shiny create terminal command to get the relevant source files on your machine.\n\n- Ollama\n- Anthropic\n- OpenAI\n- Google\n- Bedrock Anthropic\n- Azure OpenAI\n- LangChain\n- Other\n- Help me choose!\n\nchatlas‚Äôs supports a wide variety of LLM providers including Vertex, Snowflake, Groq, Perplexity, and more. In this case, you can start from any template and swap out the chat_client with the relevant chat constructor (e.g., ChatVertex()).\n\nIf you‚Äôre not sure which provider to choose, chatlas provides a great guide to help you decide.\n\nWhen you run the shiny create command, you‚Äôll be provided some tips on where to go to obtain the necessary API keys (if any) and how to securely get them into your app.\n\nAlso, if you‚Äôre not ready to sign up for a cloud provider (e.g., Anthropic, OpenAI, etc), you can run models locally (for free!) with the Ollama template. This is a great way to get started and learn about LLMs without any cost, and without sharing your data with a cloud provider.\n\nOnce your credentials (if any) are in place, run the app. Congrats, you now have a streaming markdown interface powered by an LLM of your choice! üéâ\n\nInspect the code\n\nGo ahead and open the app.py file from your template, you‚Äôll see something roughly like this:\n\n- Express\n- Core\n\nFrom here, we can see the key requirements for streaming from an LLM:\n\n- Initialize a chat_client (e.g., ChatOllama()) to interact with the LLM. chatlas isn‚Äôt required for this, but it‚Äôs highly recommended.\n- Initialize a MarkdownStream() component.\n- Display it‚Äôs UI element with stream.ui(). Here you can specify initial content, sizing, and more.\n- Define the action which triggers the LLM to generate content. In this case, it‚Äôs a button click that prompts the LLM to generate a joke. Here, chat_client generates a response stream, which is passed along to the .stream() method for display.\n\n- chatlas isn‚Äôt required for this, but it‚Äôs highly recommended.\n\n- Here you can specify initial content, sizing, and more.\n\n- In this case, it‚Äôs a button click that prompts the LLM to generate a joke.\n- Here, chat_client generates a response stream, which is passed along to the .stream() method for display.\n\nIn this article, our primary focus is the UI portion of the markdown stream (i.e., stream). That said, since LLM model choice and prompt design are so important for generating good responses, we‚Äôll briefly touch on that first.\n\nModels & prompts\n\nWith chatlas, it‚Äôs very easy to switch between the model and system prompt behind your chat_client. Just change the model and system_prompt parameters:\n\nIf you‚Äôre new to programming with LLMs, we highly recommend visiting the chatlas website for guidance on where to start, choosing a model, and designing an effective system prompt.\n\nIf you‚Äôre not yet ready learn about LLMs, that‚Äôs okay! We can still dive into stream UI features without knowing much about LLMs.\n\nContent APIs\n\nStarting content\n\nShow content to the user when the MarkdownStream() UI is first displayed by providing a string to the content parameter in stream.ui().\n\nThis is typically most useful for providing a welcome message or instructions to the user.\n\n- Express\n- Core\n\nAppending content\n\nWhen you .stream() content, you have the choice of whether or not to clear the existing content. By default, existing content is cleared, but you can instead append to the existing content by passing clear=False to stream.stream().\n\nContent generators\n\nIn your starter template, the response stream is provided by chatlas via chat_client.stream_async(prompt). As it turns out, that response object is an generator of markdown strings, and the .stream() method can work with any generator of strings. This is useful to know if you want to:\n\n- Use another framework for reponse generation (e.g., LangChain).\n- Transform the stream as it‚Äôs being generated (e.g., highlight keywords).\n- Manually create a generator (to say, show progress on a non-blocking task).\n\nContent types\n\nMarkdownStream() supports several different content types through the content_type parameter. The default markdown content type is the most broadly useful, since it not only parses and renders markdown strings, but also renders HTML content.\n\n- markdown: render markdown (specifically CommonMark) as HTML. Currently, you can‚Äôt customize the markdown renderer. If you need to customize, apply ui.markdown() to the content before streaming.\n- html: render a string of HTML as HTML.\n- text: render a string of plain text verbatim.\n- semi-markdown: render a string of markdown as HTML, but with HTML tags escaped.\n\n- Currently, you can‚Äôt customize the markdown renderer. If you need to customize, apply ui.markdown() to the content before streaming.\n\nInteractive content\n\nSimilar to Chat(), MarkdownStream() supports interactive content, meaning that content can include Shiny UI elements like inputs, outputs, etc. This allows you to collect user input, display rich interactive output (e.g., Jupyter Widgets), or provide additional context (e.g. tooltips) from within the message stream.\n\nFor a basic example, here‚Äôs a startup message with an input field:\n\nProbably the most interesting way in which interactive messages can be used is from a custom tool call display. For example, you could have a tool that displays a Data Grid or Jupyter Widget (e.g., a plotly graph).\n\nCard layout\n\nWhen embedding a stream within a larger app, it‚Äôs often useful to place it within a ui.card(). This provides a clear visual separation between the stream and other content, and allows you to easily add a header, footer, or other elements around the stream.\n\nIn this case, it‚Äôs also useful to know that a sidebar layout can also placed within a card:\n\n- Express\n- Core\n\nIf you want multiple cards in an app, it‚Äôs useful to know about Shiny‚Äôs grid layout options.\n\nA nice result of placing a stream in a card is that when it overflows the card (either because it has a specified height or because it‚Äôs in a fillable page), the card will automatically scroll to show the new content.\n\nThis can be disabled by setting auto_scroll=False when creating the UI element.\n\nNon-blocking streams\n\nSimilar to Chat()‚Äôs .append_message_stream(), MarkdownStream()‚Äôs .stream() launches a non-blocking extended task. This allows the app to be responsive while the AI generates the response, even when multiple concurrent users are on a single Python process.\n\nA few other benefits of an extended task is that they make it easy to:\n\n- Reactively read for the .result().\n- Reactively read for the .status().\n- .cancel() the stream.\n\nTo grab the latest message stream, read the .latest_stream property on the stream object. This property always points to the most recent stream, making it easy to work with it in a reactive context. Here‚Äôs an example of reactively reading the status and result of the latest stream:\n\nProviding good UI/UX for canceling a stream is a bit more involved, but it can be done with a button that cancels the stream and notifies the user. See the example below for an approach to this:\n\nTroubleshooting\n\nError handling\n\nUsually, when an error occurs in a reactive.effect, the error crashes the app, forcing the user to refresh the page. This behavior is intentional since, when an error occurs in a reactive.effect, the user isn‚Äôt notified of the error, and the app is in an unknown state.\n\nSince LLM response generation can be flaky (e.g., due to rate/context limits, network issues, etc), you may want to handle errors during response more gracefully.\n\nAs it turns out, when an error occurs inside a .stream(), the error is caught and re-thrown by a special NotifyException which notifies the user of the error, and allows the app to continue running. When running locally, the actual error message is shown, but in production, only a generic message is shown (i.e., the error is sanitized since it may contain sensitive information).\n\nThis is should be good enough to catch most errors that occur during response generation. However, it‚Äôs also good to be aware though that other errors that might occur elsewhere in a reactive.effect will still crash the app. If you‚Äôd like to protect against this, you can wrap them in a try/except block, and re-raise the error as a NotifyException, like this:\n\nIf you‚Äôd like to customize how MarkdownStream() handles errors, you can do so by setting the on_error parameter in the constructor. See the documentation.\n\nDebugging\n\nSometimes response generation from an LLM might not be quite what you expect, leaving you to wonder what went wrong. With chatlas, your primary interactive debugging tool is to set echo=\"all\" in the .stream_async() method to see the context of the chat history (emitted to your Python console). For lower-level debugging, you can also enable logging and/or access the full chat history via the chat_client.get_turns() method. For more, see chatlas‚Äô troubleshooting guide.\n\nSince chatlas builds on top of official Python SDKs like openai and anthropic, monitoring solutions that integrate with their logging mechanism can be used to monitor and debug your chatbot in production.\n\nNext steps\n\nThe next article covers a very useful technique for both chatbots and streaming markdown: tool calling.\n\nSkip to other articles in the series if you want to learn about other generally useful Generative AI techniques like tool calls, structured output, and RAG.\n\n",
    "code_examples": [
      "shiny create --template stream-ai-ollama",
      "shiny create --template stream-ai-ollama",
      "shiny create --template stream-ai-anthropic",
      "shiny create --template stream-ai-anthropic",
      "shiny create --template stream-ai-openai",
      "shiny create --template stream-ai-openai",
      "shiny create --template stream-ai-gemini",
      "shiny create --template stream-ai-gemini",
      "shiny create --template stream-ai-anthropic-aws",
      "shiny create --template stream-ai-anthropic-aws",
      "shiny create --template stream-ai-azure-openai",
      "shiny create --template stream-ai-azure-openai",
      "shiny create --template stream-ai-langchain",
      "shiny create --template stream-ai-langchain",
      "from chatlas import ChatOllama\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\n# Might instead be ChatAnthropic, ChatOpenAI, or some other provider\nchat_client = ChatOllama(model=\"llama3.2\")\n\nwith ui.sidebar():\n    ui.input_select(\n        \"comic\",\n        \"Choose a comedian\",\n        choices=[\"Jerry Seinfeld\", \"Ali Wong\", \"Mitch Hedberg\"],\n    )\n    ui.input_action_button(\"go\", \"Tell me a joke\", class_=\"btn-primary\")\n\nstream = ui.MarkdownStream(id=\"my_stream\")\nstream.ui(\n    content=\"Press the button and I'll tell you a joke.\",\n)\n\n@reactive.effect\n@reactive.event(input.go)\nasync def do_joke():\n    prompt = f\"Pretend you are {input.comic()} and tell me a funny joke.\"\n    response = await chat_client.stream_async(prompt)\n    await stream.stream(response)",
      "from chatlas import ChatOllama\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\n# Might instead be ChatAnthropic, ChatOpenAI, or some other provider\nchat_client = ChatOllama(model=\"llama3.2\")\n\nwith ui.sidebar():\n    ui.input_select(\n        \"comic\",\n        \"Choose a comedian\",\n        choices=[\"Jerry Seinfeld\", \"Ali Wong\", \"Mitch Hedberg\"],\n    )\n    ui.input_action_button(\"go\", \"Tell me a joke\", class_=\"btn-primary\")\n\nstream = ui.MarkdownStream(id=\"my_stream\")\nstream.ui(\n    content=\"Press the button and I'll tell you a joke.\",\n)\n\n@reactive.effect\n@reactive.event(input.go)\nasync def do_joke():\n    prompt = f\"Pretend you are {input.comic()} and tell me a funny joke.\"\n    response = await chat_client.stream_async(prompt)\n    await stream.stream(response)",
      "from chatlas import ChatOllama\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_select(\n            \"comic\",\n            \"Choose a comedian\",\n            choices=[\"Jerry Seinfeld\", \"Ali Wong\", \"Mitch Hedberg\"],\n        ),\n        ui.input_action_button(\"go\", \"Tell me a joke\"),\n    ),\n    ui.output_markdown_stream(\"my_stream\"),\n)\n\ndef server(input):\n    stream = ui.MarkdownStream(id=\"my_stream\")\n    chat_client = ChatOllama(model=\"llama3.2\")\n\n    @reactive.effect\n    @reactive.event(input.go)\n    async def do_joke():\n        prompt = f\"Pretend you are {input.comic()} and tell me a funny joke.\"\n        response = await chat_client.stream_async(prompt)\n        await stream.stream(response)\n\napp = App(app_ui, server)",
      "from chatlas import ChatOllama\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_select(\n            \"comic\",\n            \"Choose a comedian\",\n            choices=[\"Jerry Seinfeld\", \"Ali Wong\", \"Mitch Hedberg\"],\n        ),\n        ui.input_action_button(\"go\", \"Tell me a joke\"),\n    ),\n    ui.output_markdown_stream(\"my_stream\"),\n)\n\ndef server(input):\n    stream = ui.MarkdownStream(id=\"my_stream\")\n    chat_client = ChatOllama(model=\"llama3.2\")\n\n    @reactive.effect\n    @reactive.event(input.go)\n    async def do_joke():\n        prompt = f\"Pretend you are {input.comic()} and tell me a funny joke.\"\n        response = await chat_client.stream_async(prompt)\n        await stream.stream(response)\n\napp = App(app_ui, server)",
      "chat_client = ChatOllama(\n  model=\"llama3.2\",\n  system_prompt=\"You are a helpful assistant\",\n)",
      "chat_client = ChatOllama(\n  model=\"llama3.2\",\n  system_prompt=\"You are a helpful assistant\",\n)",
      "stream.ui(\n  content=\"Press the button and I'll tell you a joke.\"\n)",
      "stream.ui(\n  content=\"Press the button and I'll tell you a joke.\"\n)",
      "ui.output_markdown_stream(\n  content=\"Press the button and I'll tell you a joke.\"\n)",
      "ui.output_markdown_stream(\n  content=\"Press the button and I'll tell you a joke.\"\n)",
      "await stream.stream(response, clear=False)",
      "await stream.stream(response, clear=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n#| editorHeight: 250\nimport asyncio\n\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"do_stream\", \"Do stream\", class_=\"btn btn-primary\")\n\nstream = ui.MarkdownStream(\"stream\")\nstream.ui()\n\nasync def simple_generator():\n    yield \"Hello \"\n    await asyncio.sleep(1)\n    yield \"`MarkdownStream()`!\"\n\n@reactive.effect\n@reactive.event(input.do_stream)\nasync def _():\n    await stream.stream(simple_generator())",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 300\nfrom shiny.express import ui\n\nwith ui.hold() as welcome:\n    \"**Hello!** What's your name?\"\n    ui.input_text(\"name\", None, placeholder=\"Enter name here\")\n\nchat = ui.Chat(id=\"chat\")\nchat.ui(messages=[welcome])",
      "from shiny.express import ui\n\n# Get the card to fill the page\nui.page_opts(\n    fillable=True,\n    fillable_mobile=True,\n    class_=\"bg-light-subtle\",\n)\n\n# Create and display a MarkdownStream()\nstream = ui.MarkdownStream(id=\"my_stream\")\n\nwith ui.card():\n    ui.card_header(\"Streaming Joke Generator\")\n\n    # Put sidebar layout in the card\n    with ui.layout_sidebar():\n        with ui.sidebar():\n            ui.input_select(\n                \"comic\",\n                \"Choose a comedian\",\n                choices=[\"Jerry Seinfeld\", \"Ali Wong\", \"Mitch Hedberg\"],\n                width=\"auto\",\n            )\n            ui.input_action_button(\"go\", \"Tell me a joke\", class_=\"btn-primary\")\n\n        stream.ui(content=\"Press the button and I'll tell you a joke.\")",
      "from shiny.express import ui\n\n# Get the card to fill the page\nui.page_opts(\n    fillable=True,\n    fillable_mobile=True,\n    class_=\"bg-light-subtle\",\n)\n\n# Create and display a MarkdownStream()\nstream = ui.MarkdownStream(id=\"my_stream\")\n\nwith ui.card():\n    ui.card_header(\"Streaming Joke Generator\")\n\n    # Put sidebar layout in the card\n    with ui.layout_sidebar():\n        with ui.sidebar():\n            ui.input_select(\n                \"comic\",\n                \"Choose a comedian\",\n                choices=[\"Jerry Seinfeld\", \"Ali Wong\", \"Mitch Hedberg\"],\n                width=\"auto\",\n            )\n            ui.input_action_button(\"go\", \"Tell me a joke\", class_=\"btn-primary\")\n\n        stream.ui(content=\"Press the button and I'll tell you a joke.\")",
      "from shiny import ui, App\nfrom faicons import icon_svg\n\napp_ui = ui.page_fillable(\n    ui.card(\n        ui.card_header(\"Streaming Joke Generator\"),\n        ui.layout_sidebar(\n            ui.sidebar(\n                ui.input_select(\n                    \"comic\",\n                    \"Choose a comedian\",\n                    choices=[\"Jerry Seinfeld\", \"Ali Wong\", \"Mitch Hedberg\"],\n                    width=\"auto\",\n                ),\n                ui.input_action_button(\"go\", \"Tell me a joke\", class_=\"btn-primary\"),\n            ),\n            ui.output_markdown_stream(\"stream\", content=\"Press the button and I'll tell you a joke.\"),\n        ),\n    ),\n    fillable_mobile=True,\n    class_=\"bg-light\",\n)\n\ndef server(input):\n    stream = ui.MarkdownStream(id=\"stream\")\n\napp = App(app_ui, server)",
      "from shiny import ui, App\nfrom faicons import icon_svg\n\napp_ui = ui.page_fillable(\n    ui.card(\n        ui.card_header(\"Streaming Joke Generator\"),\n        ui.layout_sidebar(\n            ui.sidebar(\n                ui.input_select(\n                    \"comic\",\n                    \"Choose a comedian\",\n                    choices=[\"Jerry Seinfeld\", \"Ali Wong\", \"Mitch Hedberg\"],\n                    width=\"auto\",\n                ),\n                ui.input_action_button(\"go\", \"Tell me a joke\", class_=\"btn-primary\"),\n            ),\n            ui.output_markdown_stream(\"stream\", content=\"Press the button and I'll tell you a joke.\"),\n        ),\n    ),\n    fillable_mobile=True,\n    class_=\"bg-light\",\n)\n\ndef server(input):\n    stream = ui.MarkdownStream(id=\"stream\")\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n# | standalone: true\n# | components: [editor, viewer]\n# | layout: vertical\n# | viewerHeight: 350\n# | editorHeight: 300\n\n## file: app.py\nfrom app_utils import stream_generator\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nstream = ui.MarkdownStream(\"stream\")\n\nui.input_action_button(\"start_stream\", \"Start stream\", class_=\"btn-primary\")\n\n@render.code\ndef stream_status():\n    return f\"Status: {stream.latest_stream.status()}\"\n\n\nstream.ui(content=\"Press the button to start streaming.\")\n\n\n@render.text\nasync def stream_result():\n    return f\"Result: {stream.latest_stream.result()}\"\n\n\n@reactive.effect\n@reactive.event(input.start_stream)\nasync def _():\n    await stream.stream(stream_generator())\n\n\n## file: app_utils.py\nimport asyncio\n\n\nasync def stream_generator():\n    for i in range(5):\n        await asyncio.sleep(0.5)\n        yield f\"Message {i} \\n\\n\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n# | standalone: true\n# | components: [editor, viewer]\n# | layout: vertical\n# | viewerHeight: 350\n# | editorHeight: 300\n\n## file: app.py\nfrom app_utils import stream_generator\n\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\n\nwith ui.layout_column_wrap():\n    ui.input_action_button(\n        \"do_stream\",\n        \"Start stream\",\n        class_=\"btn btn-primary\",\n    )\n\n    ui.input_action_button(\n        \"cancel\",\n        \"Cancel stream\",\n        class_=\"btn btn-danger\",\n    )\n\nstream = ui.MarkdownStream(\"stream\")\nstream.ui(content=\"Press the button to start streaming.\")\n\n\n@reactive.effect\n@reactive.event(input.do_stream)\nasync def _():\n    await stream.stream(stream_generator())\n\n\n@reactive.effect\n@reactive.event(input.cancel)\ndef _():\n    stream.latest_stream.cancel()\n    ui.notification_show(\"Stream cancelled\", type=\"warning\")\n\n\n@reactive.effect\ndef _():\n    ui.update_action_button(\n        \"cancel\", disabled=stream.latest_stream.status() != \"running\"\n    )\n\n\n## file: app_utils.py\nimport asyncio\n\n\nasync def stream_generator():\n    for i in range(3):\n        await asyncio.sleep(0.75)\n        yield f\"Message {i} \\n\\n\"",
      "from shiny.types import NotifyException\nfrom shiny import reactive\n\n@reactive.effect\n@reactive.event(input.go)\nasync def do_joke():\n    try:\n        prompt = f\"Pretend you are {input.comic()} and tell me a funny joke.\"\n        response = await chat_client.stream_async(prompt)\n    except Exception as e:\n        raise NotifyException(f\"An error occurred in do_joke: {e}\") from e\n    await stream.stream(response)",
      "from shiny.types import NotifyException\nfrom shiny import reactive\n\n@reactive.effect\n@reactive.event(input.go)\nasync def do_joke():\n    try:\n        prompt = f\"Pretend you are {input.comic()} and tell me a funny joke.\"\n        response = await chat_client.stream_async(prompt)\n    except Exception as e:\n        raise NotifyException(f\"An error occurred in do_joke: {e}\") from e\n    await stream.stream(response)"
    ]
  },
  {
    "id": "docs_genai-tools_html",
    "url": "docs/genai-tools.html",
    "title": "Tool calling ‚Äì Shiny for Python",
    "description": "",
    "content": "- ü§ñ Generative AI\n- Tool calling\n\nTool calling\n\nWhy tool calling?\n\nLarge language models (LLMs) are inherently good at drawing from their vast knowledge base to generate helpful responses based on a user prompt. However, they are not inherently good at or capable of everything. Some of their limitations can be addressed by equipping the LLM with the ability to call tools (i.e., functions). For example, LLMs are not inherently good at:\n\n- Making precise, reliable, and reproducible calculations based on data.\n- Accessing up-to-date, private, or otherwise ‚Äúmost relevant‚Äù information.\n- Generally accomplishing programmatic tasks at the request of the user.\n\nFor a motivating example, consider the sidebot template. It allows end users to ask questions about a dataset using natural language, and see multiple views of the data update in real-time. It works by equipping the LLM with the context and tools to control the dashboard through SQL. And, since LLMs are inherently good at translating natural language to SQL, the result is a suprisingly effective (and verfiable!) way to explore data.\n\nThis article discusses the mechanics behind what makes an app like sidebot work. It covers:\n\n- Get started with tool calls, including displaying status/results in Shiny.\n- Combine tools with reactivity, enabling the LLM to ‚Äúuse‚Äù the app.\n- Customize the display of tool calls.\n\nAlthough this article focuses on using tool calling in a chatbot, the same ideas also apply to streaming markdown\n\nGet started\n\nFundamentals\n\nLLMs are trained on data up until a certain cutoff date, and they don‚Äôt natively have access to the internet. This means that they can‚Äôt answer questions about current events, weather, etc. Most LLMs nowadays are at least aware of this limitation:\n\nI don‚Äôt have the ability to check the current temperature in Duluth, MN in real-time.\n\nHowever, we can equip the LLM with a function to query current weather from a web API. Since LLMs are good at finding structure from unstructured input, we can have a tool that accepts lat/long as input, and the LLM is smart enough to infer a lat/long from a city name (or ask the user for lat/long).\n\nNote also that the function includes type hints and a docstring. This is important because it helps the LLM understand what the function does and how to use it.\n\nThe current temperature in Duluth, Minnesota is 0.9¬∞C (which is approximately 33.6¬∞F). There are also strong winds at 32.7 km/h (about 20.3 mph).\n\nIn .chat(), you can set echo=\"all\" to see all the tool call information in your console. In the Tool displays, we‚Äôll see how to display this information in the Shiny UI.\n\nSee the chatlas docs to learn more about tool calling fundamentals.\n\nBasic chatbot\n\nTo embed our chat_client in a Shiny chatbot, let‚Äôs put it in a client.py module and use it for response generation. To display the tool call results, just set content=\"all\" in the .stream_async() method. This way, chatlas will include tool call content objects in the stream, and since those content objects know how to display themselves in Shiny, we get a generic display of the tool request, response, and any errors that occurred.\n\nOnce the tool call is made, you can expand the <details> of the tool call to see what the model requested for arguments as well as the result sent to the model.\n\nAlso, for tools that take a while to run, the user is notified of what tool is running along with a bouncing dot to indicate that the tool is still running.\n\nAnd, in the case of an error, the user is also notified of the error.\n\nIn general, these default displays should be enough to let your users know what the LLM is requesting/receiving to help generate their responses.\n\nReactivity\n\nCombining tool calling with reactivity is a powerful technique that can effectively let the LLM interact with the app. Here, we‚Äôll explore a few general patterns for doing this.\n\nUpdating inputs\n\nThe most basic way to hand over control to the LLM is to have it update reactive input(s). The core idea is to wrap a ui.update_*() call in a tool function and register that function with the chat_client. Then, when a user asks the LLM to update an input, it is able to do so.\n\nThe basic example above illustrates the idea using minimal code, but the app itself is not particularly useful. For brevity sake, we won‚Äôt fully explore compelling applications here, but in general, updating inputs can be useful for:\n\n- Navigating complex UI (i.e., lots of tabs, controls, etc) Allow users describe to what they want without finding it\n- Combine with input suggestions to: Guide user to interesting states Save clicks\n\n- Allow users describe to what they want without finding it\n\n- Guide user to interesting states\n- Save clicks\n\nManaging state\n\nIn Shiny, a reactive value can derive from either an input component (e.g., ui.input_select(), etc.) or an entirely server-side reactive.value(). Generally speaking, the latter approach is useful for tracking state that may not exist in the UI (e.g., authentication, user activity, etc.). Similar to how we can equip the LLM to update an input component, we can also equip it to update a reactive value to have it drive the app‚Äôs state.\n\nThe sidebot template (mentioned at the top of this article) illustrates a particularly powerful application of managing state. In this case, the state is an SQL query. When that state changes, it triggers a reactive data frame (current_data) to be updated, which in turn updates all the downstream views of the data.\n\nThe LLM is also provided a tool (update_dashboard()) which takes an SQL query as input, and sets a new value for the current_query reactive value.\n\nSince this tool runs within a non-blocking message stream (i.e., .append_message_stream()), in order to prevent race conditions, it must lock the reactivity graph when updating reactive value(s). If the tool were, instead, running in a blocking stream, the reactive.lock() and reactive.flush() wouldn‚Äôt be necessary.\n\nThe final crucial piece is that, in order for the LLM to generate accurate SQL, it needs to know the schema of the dataset. This is done by passing the table schema to the LLM‚Äôs system prompt.\n\nSince the general pattern of having a tool to update a reactive data frame via SQL is so useful, the querychat package generalizes this pattern to make it more accessible and easier to use.\n\nCustom tool display\n\nCustomizing how tool results are displayed can be useful for a variety of reasons. For example, you may want to style results differently, or implement something more sophisticated, such as displaying a map or a table.\n\nTo customize the result display, you can:\n\n- Subclass the chatlas.ContentToolResult class.\n- Override the tagify() method. This can return any valid ui.Chat() message content (i.e., a markdown string or Shiny UI).\n- Return an instance of this subclass from your tool function.\n\nThe basic example below would just style the tool result differently than the default:\n\nKeep in mind that Shiny UI can be included in messages, so you could do something like diplay a Jupyter Widget.\n\n",
    "code_examples": [
      "from chatlas import ChatAnthropic\nchat_client = ChatAnthropic()\nchat_client.chat(\"What's the current temperature in Duluth, MN?\")",
      "from chatlas import ChatAnthropic\nchat_client = ChatAnthropic()\nchat_client.chat(\"What's the current temperature in Duluth, MN?\")",
      "import requests\n\ndef get_current_weather(latitude: float, longitude: float):\n    \"\"\"Get the current current weather given a latitude and longitude.\"\"\"\n\n    lat_lng = f\"latitude={latitude}&longitude={longitude}\"\n    url = f\"https://api.open-meteo.com/v1/forecast?{lat_lng}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m\"\n    response = requests.get(url)\n    json = response.json()\n    return json[\"current\"]\n\nchat_client.register_tool(get_current_weather)\nchat_client.chat(\"What's the current temperature in Duluth, MN?\")",
      "import requests\n\ndef get_current_weather(latitude: float, longitude: float):\n    \"\"\"Get the current current weather given a latitude and longitude.\"\"\"\n\n    lat_lng = f\"latitude={latitude}&longitude={longitude}\"\n    url = f\"https://api.open-meteo.com/v1/forecast?{lat_lng}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m\"\n    response = requests.get(url)\n    json = response.json()\n    return json[\"current\"]\n\nchat_client.register_tool(get_current_weather)\nchat_client.chat(\"What's the current temperature in Duluth, MN?\")",
      "import requests\nfrom chatlas import ChatAnthropic\n\nchat_client = ChatAnthropic()\n\ndef get_current_weather(latitude: float, longitude: float):\n    \"\"\"Get the current temperature given a latitude and longitude.\"\"\"\n\n    lat_lng = f\"latitude={latitude}&longitude={longitude}\"\n    url = f\"https://api.open-meteo.com/v1/forecast?{lat_lng}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m\"\n    response = requests.get(url)\n    json = response.json()\n    return json[\"current\"]\n\nchat_client.register_tool(get_current_weather)",
      "import requests\nfrom chatlas import ChatAnthropic\n\nchat_client = ChatAnthropic()\n\ndef get_current_weather(latitude: float, longitude: float):\n    \"\"\"Get the current temperature given a latitude and longitude.\"\"\"\n\n    lat_lng = f\"latitude={latitude}&longitude={longitude}\"\n    url = f\"https://api.open-meteo.com/v1/forecast?{lat_lng}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m\"\n    response = requests.get(url)\n    json = response.json()\n    return json[\"current\"]\n\nchat_client.register_tool(get_current_weather)",
      "from client import chat_client\nfrom shiny.express import ui\n\nchat = ui.Chat(id=\"chat\")\nchat.ui(messages=[\"Hello! How can I help you today?\"])\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    response = await chat_client.stream_async(\n      user_input,\n      content=\"all\"\n    )\n    await chat.append_message_stream(response)",
      "from client import chat_client\nfrom shiny.express import ui\n\nchat = ui.Chat(id=\"chat\")\nchat.ui(messages=[\"Hello! How can I help you today?\"])\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    response = await chat_client.stream_async(\n      user_input,\n      content=\"all\"\n    )\n    await chat.append_message_stream(response)",
      "from chatlas import ChatAnthropic\nfrom shiny.express import ui\n\nSLIDER_ID = \"slider\"\n\nchat_client = ChatAnthropic(\n    system_prompt=(\n        \"You are a helpful assistant in the sidebar of a Shiny app.\"\n        \"You have a tool available to you to update a slider in the main panel of the app.\"\n    )\n)\n\ndef update_slider(value: int):\n    \"Update the slider in the main panel with the provided value\"\n    ui.update_slider(SLIDER_ID, value=value)\n\nchat_client.register_tool(update_slider)",
      "from chatlas import ChatAnthropic\nfrom shiny.express import ui\n\nSLIDER_ID = \"slider\"\n\nchat_client = ChatAnthropic(\n    system_prompt=(\n        \"You are a helpful assistant in the sidebar of a Shiny app.\"\n        \"You have a tool available to you to update a slider in the main panel of the app.\"\n    )\n)\n\ndef update_slider(value: int):\n    \"Update the slider in the main panel with the provided value\"\n    ui.update_slider(SLIDER_ID, value=value)\n\nchat_client.register_tool(update_slider)",
      "from client import chat_client, SLIDER_ID\nfrom shiny.express import ui\n\nui.input_slider(SLIDER_ID, \"Value\", value=50, min=0, max=100)\n\nwelcome = \"Welcome! Try asking me to <span class='suggestion'>update the slider to 80</span> \"\n\nwith ui.sidebar(width=350):\n    chat = ui.Chat(\"chat\")\n    chat.ui(messages=[welcome])\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    response = await chat_client.stream_async(user_input)\n    await chat.append_message_stream(response)",
      "from client import chat_client, SLIDER_ID\nfrom shiny.express import ui\n\nui.input_slider(SLIDER_ID, \"Value\", value=50, min=0, max=100)\n\nwelcome = \"Welcome! Try asking me to <span class='suggestion'>update the slider to 80</span> \"\n\nwith ui.sidebar(width=350):\n    chat = ui.Chat(\"chat\")\n    chat.ui(messages=[welcome])\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    response = await chat_client.stream_async(user_input)\n    await chat.append_message_stream(response)",
      "import duckdb\nfrom shiny import reactive\n\n# An SQL query\ncurrent_query = reactive.value(\"\")\n\n# Reactively execute the SQL query and\n# return the result as a data frame\n@reactive.calc\ndef current_data():\n    if current_query() == \"\":\n        return tips\n    return duckdb.query(current_query()).df()",
      "import duckdb\nfrom shiny import reactive\n\n# An SQL query\ncurrent_query = reactive.value(\"\")\n\n# Reactively execute the SQL query and\n# return the result as a data frame\n@reactive.calc\ndef current_data():\n    if current_query() == \"\":\n        return tips\n    return duckdb.query(current_query()).df()",
      "from typing import Annotated\n\nasync def update_dashboard(\n    query: Annotated[str, 'A DuckDB SQL query; must be a SELECT statement, or \"\".']\n):\n    \"Modifies the data presented in the data dashboard based on the provided SQL query\"\n    async with reactive.lock():\n        current_query.set(query)\n        await reactive.flush()",
      "from typing import Annotated\n\nasync def update_dashboard(\n    query: Annotated[str, 'A DuckDB SQL query; must be a SELECT statement, or \"\".']\n):\n    \"Modifies the data presented in the data dashboard based on the provided SQL query\"\n    async with reactive.lock():\n        current_query.set(query)\n        await reactive.flush()",
      "from chatlas import ContentToolResult\n\nclass WeatherToolResult(ContentToolResult):\n    def tagify(self):\n        if self.error:\n            return super().tagify()\n        else:\n            args = self.arguments\n            params = \", \".join(f\"{k}={v}\" for k, v in args.items())\n            temp = self.value[\"temperature_2m\"]\n            return (\n                f\"‚úÖ Tool call of `{self.name}({params})` \"\n                \"gave temperature of: {temp} ¬∞C\\n\\n\"\n            )\n\ndef get_current_weather(latitude: float, longitude: float):\n    \"\"\"Get the current temperature given a latitude and longitude.\"\"\"\n\n    lat_lng = f\"latitude={latitude}&longitude={longitude}\"\n    url = f\"https://api.open-meteo.com/v1/forecast?{lat_lng}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m\"\n    response = requests.get(url)\n    json = response.json()\n    return WeatherToolResult(value=json[\"current\"])",
      "from chatlas import ContentToolResult\n\nclass WeatherToolResult(ContentToolResult):\n    def tagify(self):\n        if self.error:\n            return super().tagify()\n        else:\n            args = self.arguments\n            params = \", \".join(f\"{k}={v}\" for k, v in args.items())\n            temp = self.value[\"temperature_2m\"]\n            return (\n                f\"‚úÖ Tool call of `{self.name}({params})` \"\n                \"gave temperature of: {temp} ¬∞C\\n\\n\"\n            )\n\ndef get_current_weather(latitude: float, longitude: float):\n    \"\"\"Get the current temperature given a latitude and longitude.\"\"\"\n\n    lat_lng = f\"latitude={latitude}&longitude={longitude}\"\n    url = f\"https://api.open-meteo.com/v1/forecast?{lat_lng}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m\"\n    response = requests.get(url)\n    json = response.json()\n    return WeatherToolResult(value=json[\"current\"])",
      "import ipywidgets\nfrom shinywidgets import register_widget, output_widget\nfrom ipyleaflet import Map, CircleMarker\n\nclass WeatherToolResult(ContentToolResult):\n    def tagify(self):\n        if self.error:\n            return super().tagify()\n\n        args = self.arguments\n        loc = (args[\"latitude\"], args[\"longitude\"])\n        info = (\n            f\"<h6>Current weather</h6>\"\n            f\"Temperature: {self.value['temperature_2m']}¬∞C<br>\"\n            f\"Wind: {self.value['wind_speed_10m']} m/s<br>\"\n            f\"Time: {self.value['time']}\"\n        )\n\n        m = Map(center=loc, zoom=10)\n        m.add_layer(\n            CircleMarker(location=loc, popup=ipywidgets.HTML(info))\n        )\n\n        register_widget(self.id, m)\n        return output_widget(self.id)",
      "import ipywidgets\nfrom shinywidgets import register_widget, output_widget\nfrom ipyleaflet import Map, CircleMarker\n\nclass WeatherToolResult(ContentToolResult):\n    def tagify(self):\n        if self.error:\n            return super().tagify()\n\n        args = self.arguments\n        loc = (args[\"latitude\"], args[\"longitude\"])\n        info = (\n            f\"<h6>Current weather</h6>\"\n            f\"Temperature: {self.value['temperature_2m']}¬∞C<br>\"\n            f\"Wind: {self.value['wind_speed_10m']} m/s<br>\"\n            f\"Time: {self.value['time']}\"\n        )\n\n        m = Map(center=loc, zoom=10)\n        m.add_layer(\n            CircleMarker(location=loc, popup=ipywidgets.HTML(info))\n        )\n\n        register_widget(self.id, m)\n        return output_widget(self.id)"
    ]
  },
  {
    "id": "docs_genai-structured-data_html",
    "url": "docs/genai-structured-data.html",
    "title": "Structured data ‚Äì Shiny for Python",
    "description": "",
    "content": "- ü§ñ Generative AI\n- Structured data\n\nStructured data\n\nLLMs are quite good at extracting structured data from unstructured text, images, and more. Although not always perfect, they can greatly reduce the manual work needed to extract information from large amounts of text or documents. Here are just a few scenarios where this can be useful:\n\n- Form processing: Extract structured field-value pairs from scanned documents, invoices, and forms to reduce manual data entry.\n- Automated table extraction: Identify and extract tables from unstructured text and images.\n- Sentiment analysis: Extract sentiment scores and associated entities from customer reviews or social media posts to gain insights into public opinion.\n- Classification: Classify text into predefined categories, such as spam detection or topic classification.\n- Executive summaries: Extract key points and structured data from lengthy reports or articles to create concise summaries for decision-makers.\n\nIntro to .extract_data()\n\nThe chatlas package provides a simple way to extract structured data: the .extract_data() method. To use it, you‚Äôll need three things:\n\n- Pick a model provider (e.g., ChatOpenAI()).\n- Define a data model by subclassing pydantic‚Äôs BaseModel class. Here you‚Äôll define the fields and value types you‚Äôre expecting in the input.\n- Pass the unstructured input and data_model to the .extract_data() method.\n\n- Here you‚Äôll define the fields and value types you‚Äôre expecting in the input.\n\n.extract_data() then returns a dictionary matching the fields and types in the data_model:\n\nFor more examples and details on how .extract_data() works, see the chatlas documentation.\n\nchatlas also supports input other than text, such as images (content_image_file()) and PDF (content_pdf_file()).\n\nBasic app\n\nTo go from this basic script to a Shiny app, you‚Äôll at least want a couple things:\n\n- Change .extract_data() to await chat_client.extract_data_async(). This helps the Shiny app scale efficiently to multiple concurrent users. You could also wrap this part in a non-blocking task to keep the rest of the app responsive within the same session.\n- Decide how the user will provide and/or navigate the unstructured input(s). This could be a simple text input field (as below), a file upload, a chat interface, etc.\n\n- This helps the Shiny app scale efficiently to multiple concurrent users.\n- You could also wrap this part in a non-blocking task to keep the rest of the app responsive within the same session.\n\n- This could be a simple text input field (as below), a file upload, a chat interface, etc.\n\nFor now, let‚Äôs keep it simple and use a text input field:\n\nEditable data\n\nRemember that the LLM is not perfect ‚Äì you may want to manually correct or refine the extracted data. In this scenario, it may be useful to allow the user to edit the extracted data and download it when done. Here‚Äôs an example of how to do this in a named entity extraction app.\n\nPopulating inputs\n\nFor data extraction that isn‚Äôt tabular in nature, you might consider using extracted data to populate input controls that the user can make changes to.\n\nBuilding on Google‚Äôs invoice and form data extraction example, here‚Äôs an example of how you could use structured data to populate input controls (in addition to an editable table).\n\n",
    "code_examples": [
      "from chatlas import ChatOpenAI\nfrom pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n    age: int\n\nchat_client = ChatOpenAI()\nchat_client.extract_data(\n  \"My name is Susan and I'm 13 years old\",\n  data_model=Person,\n)",
      "from chatlas import ChatOpenAI\nfrom pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n    age: int\n\nchat_client = ChatOpenAI()\nchat_client.extract_data(\n  \"My name is Susan and I'm 13 years old\",\n  data_model=Person,\n)",
      "{'name': 'Susan', 'age': 13}",
      "{'name': 'Susan', 'age': 13}",
      "from chatlas import ChatOpenAI\nfrom pydantic import BaseModel\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nchat_client = ChatOpenAI()\n\nclass Person(BaseModel):\n    name: str\n    age: int\n\nwith ui.card():\n    ui.card_header(\"Enter some input with name and age\")\n    ui.input_text_area(\n        \"user_input\", None, update_on=\"blur\", width=\"100%\",\n        value=\"My name is Susan and I'm 13 years old\",\n    )\n    ui.input_action_button(\"submit\", label=\"Extract data\")\n\n    @render.ui\n    @reactive.event(input.submit)\n    async def result():\n        return ui.markdown(f\"Extracted data: `{await data()}`\")\n\n@reactive.calc\nasync def data():\n    return await chat_client.extract_data_async(\n        input.user_input(),\n        data_model=Person,\n    )",
      "from chatlas import ChatOpenAI\nfrom pydantic import BaseModel\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nchat_client = ChatOpenAI()\n\nclass Person(BaseModel):\n    name: str\n    age: int\n\nwith ui.card():\n    ui.card_header(\"Enter some input with name and age\")\n    ui.input_text_area(\n        \"user_input\", None, update_on=\"blur\", width=\"100%\",\n        value=\"My name is Susan and I'm 13 years old\",\n    )\n    ui.input_action_button(\"submit\", label=\"Extract data\")\n\n    @render.ui\n    @reactive.event(input.submit)\n    async def result():\n        return ui.markdown(f\"Extracted data: `{await data()}`\")\n\n@reactive.calc\nasync def data():\n    return await chat_client.extract_data_async(\n        input.user_input(),\n        data_model=Person,\n    )",
      "from pydantic import BaseModel, Field\n\nclass NamedEntity(BaseModel):\n    \"\"\"Named entity in the text.\"\"\"\n\n    name: str = Field(description=\"The extracted entity name\")\n\n    type_: str = Field(\n        description=\"The entity type, e.g. 'person', 'location', 'organization'\"\n    )\n\n    context: str = Field(\n        description=\"The context in which the entity appears in the text.\"\n    )\n\nclass NamedEntities(BaseModel):\n    \"\"\"Named entities in the text.\"\"\"\n\n    entities: list[NamedEntity] = Field(description=\"Array of named entities\")\n\n_ = NamedEntities.model_rebuild()",
      "from pydantic import BaseModel, Field\n\nclass NamedEntity(BaseModel):\n    \"\"\"Named entity in the text.\"\"\"\n\n    name: str = Field(description=\"The extracted entity name\")\n\n    type_: str = Field(\n        description=\"The entity type, e.g. 'person', 'location', 'organization'\"\n    )\n\n    context: str = Field(\n        description=\"The context in which the entity appears in the text.\"\n    )\n\nclass NamedEntities(BaseModel):\n    \"\"\"Named entities in the text.\"\"\"\n\n    entities: list[NamedEntity] = Field(description=\"Array of named entities\")\n\n_ = NamedEntities.model_rebuild()",
      "import pandas as pd\nfrom chatlas import ChatOpenAI\nfrom faicons import icon_svg\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nfrom data_model import NamedEntities\n\nchat_client = ChatOpenAI()\n\nwith ui.card():\n    ui.card_header(\"Named Entity Extraction\")\n    ui.input_text_area(\n        \"user_input\", None, update_on=\"blur\", width=\"100%\",\n        value=\"John works at Google in New York. He met with Sarah, the CEO of Acme Inc., last week in San Francisco.\",\n    )\n    ui.input_action_button(\"submit\", label=\"Extract\", icon=icon_svg(\"paper-plane\"))\n\nwith ui.card():\n    with ui.card_header(class_=\"d-flex justify-content-between align-items-center\"):\n        \"Extracted (editable) table\"\n\n        @render.download(filename=\"entities.csv\", label=\"Download CSV\")\n        async def download():\n            d = await data()\n            yield d.to_csv(index=False)\n\n    @render.data_frame\n    async def data_frame():\n        return render.DataGrid(\n            await data(),\n            editable=True,\n            width=\"100%\",\n        )\n\n@reactive.calc\n@reactive.event(input.user_input)\nasync def data():\n    d = await chat_client.extract_data_async(\n        input.user_input(),\n        data_model=NamedEntities,\n    )\n    df = pd.DataFrame(d[\"entities\"])\n    return df.rename(columns={\"type_\": \"type\"})",
      "import pandas as pd\nfrom chatlas import ChatOpenAI\nfrom faicons import icon_svg\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nfrom data_model import NamedEntities\n\nchat_client = ChatOpenAI()\n\nwith ui.card():\n    ui.card_header(\"Named Entity Extraction\")\n    ui.input_text_area(\n        \"user_input\", None, update_on=\"blur\", width=\"100%\",\n        value=\"John works at Google in New York. He met with Sarah, the CEO of Acme Inc., last week in San Francisco.\",\n    )\n    ui.input_action_button(\"submit\", label=\"Extract\", icon=icon_svg(\"paper-plane\"))\n\nwith ui.card():\n    with ui.card_header(class_=\"d-flex justify-content-between align-items-center\"):\n        \"Extracted (editable) table\"\n\n        @render.download(filename=\"entities.csv\", label=\"Download CSV\")\n        async def download():\n            d = await data()\n            yield d.to_csv(index=False)\n\n    @render.data_frame\n    async def data_frame():\n        return render.DataGrid(\n            await data(),\n            editable=True,\n            width=\"100%\",\n        )\n\n@reactive.calc\n@reactive.event(input.user_input)\nasync def data():\n    d = await chat_client.extract_data_async(\n        input.user_input(),\n        data_model=NamedEntities,\n    )\n    df = pd.DataFrame(d[\"entities\"])\n    return df.rename(columns={\"type_\": \"type\"})",
      "from pydantic import BaseModel, Field\n\nclass Item(BaseModel):\n    description: str = Field(description=\"The description of the item\")\n    quantity: float = Field(description=\"The Qty of the item\")\n    gross_worth: float = Field(description=\"The gross worth of the item\")\n\n\nclass Invoice(BaseModel):\n    \"\"\"Extract the invoice number, date and all list items with description, quantity and gross worth and the total gross worth.\"\"\"\n\n    invoice_number: str = Field(description=\"The invoice number e.g. 1234567890\")\n    date: str = Field(description=\"The date of the invoice e.g. 10/09/2012\")\n    items: list[Item] = Field(\n        description=\"The list of items with description, quantity and gross worth\"\n    )\n    total_gross_worth: float = Field(description=\"The total gross worth of the invoice\")\n\n_ = Invoice.model_rebuild()",
      "from pydantic import BaseModel, Field\n\nclass Item(BaseModel):\n    description: str = Field(description=\"The description of the item\")\n    quantity: float = Field(description=\"The Qty of the item\")\n    gross_worth: float = Field(description=\"The gross worth of the item\")\n\n\nclass Invoice(BaseModel):\n    \"\"\"Extract the invoice number, date and all list items with description, quantity and gross worth and the total gross worth.\"\"\"\n\n    invoice_number: str = Field(description=\"The invoice number e.g. 1234567890\")\n    date: str = Field(description=\"The date of the invoice e.g. 10/09/2012\")\n    items: list[Item] = Field(\n        description=\"The list of items with description, quantity and gross worth\"\n    )\n    total_gross_worth: float = Field(description=\"The total gross worth of the invoice\")\n\n_ = Invoice.model_rebuild()",
      "import chatlas as ctl\nimport dateparser\nimport faicons\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nfrom data_model import Invoice\n\nui.page_opts(\n    title=\"Invoice data extractor\",\n    fillable=True,\n)\n\nwith ui.sidebar():\n    ui.input_text(\n        \"url\",\n        \"Enter URL to PDF invoice\",\n        \"https://storage.googleapis.com/generativeai-downloads/data/pdf_structured_outputs/invoice.pdf\",\n    )\n\n    ui.input_task_button(\n        \"extract\",\n        \"Extract data\",\n        class_=\"btn btn-primary\",\n        icon=faicons.icon_svg(\"person-digging\"),\n    )\n\nchat_client = ctl.ChatGoogle()\n\n@reactive.calc\ndef invoice_data():\n    return chat_client.extract_data(\n        ctl.content_pdf_url(input.url()),\n        data_model=Invoice,\n    )\n\n\nwith ui.layout_column_wrap(height_equal=\"row\"):\n\n    with ui.card():\n        ui.card_header(\"Invoice metadata\")\n\n        @render.express\n        def invoice_metadata():\n            if not input.extract():\n                \"Click the button to extract data\"\n                return\n\n            d = invoice_data()\n\n            ui.input_text(\n                \"invoice_number\",\n                label=\"Invoice number\",\n                value=d[\"invoice_number\"],\n                width=\"auto\",\n            )\n            ui.input_date(\n                \"date\",\n                label=\"Date\",\n                value=dateparser.parse(d[\"date\"]),\n                width=\"auto\",\n            )\n            ui.input_numeric(\n                \"total_gross_worth\",\n                label=\"Total gross worth\",\n                value=d[\"total_gross_worth\"],\n                width=\"auto\",\n            )\n\n    with ui.card():\n        ui.card_header(\"Invoice items\")\n\n        @render.express(fill=True, fillable=True)\n        def invoice_items():\n            if not input.extract():\n                \"Click the button to extract data\"\n                return\n\n            @render.data_frame\n            def invoice_items_df():\n                df = pd.DataFrame(invoice_data()[\"items\"])\n                return render.DataGrid(df, editable=True)",
      "import chatlas as ctl\nimport dateparser\nimport faicons\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nfrom data_model import Invoice\n\nui.page_opts(\n    title=\"Invoice data extractor\",\n    fillable=True,\n)\n\nwith ui.sidebar():\n    ui.input_text(\n        \"url\",\n        \"Enter URL to PDF invoice\",\n        \"https://storage.googleapis.com/generativeai-downloads/data/pdf_structured_outputs/invoice.pdf\",\n    )\n\n    ui.input_task_button(\n        \"extract\",\n        \"Extract data\",\n        class_=\"btn btn-primary\",\n        icon=faicons.icon_svg(\"person-digging\"),\n    )\n\nchat_client = ctl.ChatGoogle()\n\n@reactive.calc\ndef invoice_data():\n    return chat_client.extract_data(\n        ctl.content_pdf_url(input.url()),\n        data_model=Invoice,\n    )\n\n\nwith ui.layout_column_wrap(height_equal=\"row\"):\n\n    with ui.card():\n        ui.card_header(\"Invoice metadata\")\n\n        @render.express\n        def invoice_metadata():\n            if not input.extract():\n                \"Click the button to extract data\"\n                return\n\n            d = invoice_data()\n\n            ui.input_text(\n                \"invoice_number\",\n                label=\"Invoice number\",\n                value=d[\"invoice_number\"],\n                width=\"auto\",\n            )\n            ui.input_date(\n                \"date\",\n                label=\"Date\",\n                value=dateparser.parse(d[\"date\"]),\n                width=\"auto\",\n            )\n            ui.input_numeric(\n                \"total_gross_worth\",\n                label=\"Total gross worth\",\n                value=d[\"total_gross_worth\"],\n                width=\"auto\",\n            )\n\n    with ui.card():\n        ui.card_header(\"Invoice items\")\n\n        @render.express(fill=True, fillable=True)\n        def invoice_items():\n            if not input.extract():\n                \"Click the button to extract data\"\n                return\n\n            @render.data_frame\n            def invoice_items_df():\n                df = pd.DataFrame(invoice_data()[\"items\"])\n                return render.DataGrid(df, editable=True)"
    ]
  },
  {
    "id": "docs_genai-rag_html",
    "url": "docs/genai-rag.html",
    "title": "RAG ‚Äì Shiny for Python",
    "description": "",
    "content": "- ü§ñ Generative AI\n- RAG\n\nRAG\n\nLarge language models (LLMs) are trained on public data and have a training cutoff date, so they aren‚Äôt inherently aware of private or the latest information. As a result, LLMs may not have the necessary information to answer a user‚Äôs question, even though they might pretend to (a.k.a. hallucinate). This is a common problem, especially in an enterprise setting, where the information is proprietary and/or constantly changing. Unfortunately, this is also an environment where plausible but inaccurate answers can have serious consequences.\n\nThere are roughly three general approaches to addressing this problem, going from the least to most complex:\n\n- System prompt: If the information that the model needs to perform well can fit within a system prompt (i.e., fit within the relevant context window), you should consider that first.\n- Tool calling: Provide the LLM with tools it can use to retrieve the information that it needs. Compared to RAG, this has the benefit of not needing to pre-fetch/maintain an information database, compute document/query similarities, and can even be combined with RAG.\n- Retrieval-Augmented Generation (RAG): Among these options, this can be the most demanding to implement and maintain, but also offers the most control over when and how exactly the LLM gains access to the information it needs.\n\nIf RAG sounds right for your use case, the next section gives a basic example of how to implement it using Shiny and chatlas. The last section provides some tips on how to scale up your RAG implementation.\n\nRAG basics\n\nThe core concept of RAG is fairly simple, yet general: given a set of documents and a user query, find the document(s) that are the most similar to the query and supply those documents as additional context to the LLM. This requires choosing a numerical technique to compute similarity, of which there are many, each with its own strengths and weaknesses. The often tricky part of doing RAG well is finding the similarity measure that is both performant and effective for your use case.\n\nTo demonstrate, let‚Äôs use a basic example derived from chatlas‚Äôs article on RAG. The main idea is to implement a function (get_top_k_similar_documents) that finds the top-k most similar documents to a user query. Note that similarity depends on two main factors:\n\n- The embedding model (for embedding text into a numerical vector space).\n\n- Here we use the popular all-MiniLM-L12-v2 model, which offers a nice balance between performance and speed.\n\n- The similarity metric (for computing similarity between two vectors).\n\n- Here we use cosine similarity, which is a common choice for text embeddings.\n\n- Without RAG\n- With RAG\n\nScaling up\n\nTo scale this basic example up to your use case, you‚Äôll not only want to consider an embedding model and similarity metric that better matches your use case, but also a more efficient way to store/retrieve your documents.\n\nNowadays, there are many options for efficient storage/retrieval of documents (i.e., vector databases). That said, duckdb‚Äôs vector extension comes highly recommended, and here is a great blog post on building a database and retrieving from it with a custom embedding model. Many of these options will offer both a local and cloud-based solution, so you can choose the one that best fits your needs. For example, with duckdb, you can leverage MotherDuck for your hosting needs, as well as others like Pinecone and Weaviate.\n\n",
    "code_examples": [
      "import numpy as np\nfrom sentence_transformers import SentenceTransformer\n\nembed_model = SentenceTransformer(\"sentence-transformers/all-MiniLM-L12-v2\")\n\n# A list of 'documents' (one document per list element)\ndocuments = [\n    \"The unicorn programming language was created by Horsey McHorseface.\",\n    \"It's known for its magical syntax and rainbow-colored variables.\",\n    \"Unicorn is a dynamically typed language with a focus on readability.\",\n    \"Some other programming languages include Python, Java, and C++.\",\n    \"Some other useless context...\",\n]\n\n# Compute embeddings for each document (do this once for performance reasons)\nembeddings = [embed_model.encode([doc])[0] for doc in documents]\n\ndef get_top_k_similar_documents(user_query, top_k=3):\n    # Compute embedding for the user query\n    query_embedding = embed_model.encode([user_query])[0]\n\n    # Calculate cosine similarity between the query and each document\n    similarities = np.dot(embeddings, query_embedding) / (\n        np.linalg.norm(embeddings, axis=1) * np.linalg.norm(query_embedding)\n    )\n\n    # Get the top-k most similar documents\n    top_indices = np.argsort(similarities)[-top_k:][::-1]\n    return [documents[i] for i in top_indices]",
      "import numpy as np\nfrom sentence_transformers import SentenceTransformer\n\nembed_model = SentenceTransformer(\"sentence-transformers/all-MiniLM-L12-v2\")\n\n# A list of 'documents' (one document per list element)\ndocuments = [\n    \"The unicorn programming language was created by Horsey McHorseface.\",\n    \"It's known for its magical syntax and rainbow-colored variables.\",\n    \"Unicorn is a dynamically typed language with a focus on readability.\",\n    \"Some other programming languages include Python, Java, and C++.\",\n    \"Some other useless context...\",\n]\n\n# Compute embeddings for each document (do this once for performance reasons)\nembeddings = [embed_model.encode([doc])[0] for doc in documents]\n\ndef get_top_k_similar_documents(user_query, top_k=3):\n    # Compute embedding for the user query\n    query_embedding = embed_model.encode([user_query])[0]\n\n    # Calculate cosine similarity between the query and each document\n    similarities = np.dot(embeddings, query_embedding) / (\n        np.linalg.norm(embeddings, axis=1) * np.linalg.norm(query_embedding)\n    )\n\n    # Get the top-k most similar documents\n    top_indices = np.argsort(similarities)[-top_k:][::-1]\n    return [documents[i] for i in top_indices]",
      "from chatlas import ChatAnthropic\nfrom rag import get_top_k_similar_documents\n\nfrom shiny.express import ui\n\nchat_client = ChatAnthropic(\n    model=\"claude-3-7-sonnet-latest\",\n    system_prompt=\"\"\"\n    You are a helpful AI assistant. Using the provided context,\n    answer the user's question. If you cannot answer the question based on the\n    context, say so.\n   \"\"\",\n)\n\nchat = ui.Chat(\n    id=\"chat\",\n    messages=[\"Hello! How can I help you today?\"],\n)\nchat.ui()\n\nchat.update_user_input(value=\"Who created the unicorn language?\")\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    top_docs = get_top_k_similar_documents(user_input, top_k=3)\n    prompt = f\"Context: {top_docs}\\nQuestion: {user_input}\"\n    response = await chat_client.stream_async(prompt)\n    await chat.append_message_stream(response)",
      "from chatlas import ChatAnthropic\nfrom rag import get_top_k_similar_documents\n\nfrom shiny.express import ui\n\nchat_client = ChatAnthropic(\n    model=\"claude-3-7-sonnet-latest\",\n    system_prompt=\"\"\"\n    You are a helpful AI assistant. Using the provided context,\n    answer the user's question. If you cannot answer the question based on the\n    context, say so.\n   \"\"\",\n)\n\nchat = ui.Chat(\n    id=\"chat\",\n    messages=[\"Hello! How can I help you today?\"],\n)\nchat.ui()\n\nchat.update_user_input(value=\"Who created the unicorn language?\")\n\n@chat.on_user_submit\nasync def _(user_input: str):\n    top_docs = get_top_k_similar_documents(user_input, top_k=3)\n    prompt = f\"Context: {top_docs}\\nQuestion: {user_input}\"\n    response = await chat_client.stream_async(prompt)\n    await chat.append_message_stream(response)"
    ]
  },
  {
    "id": "docs_ui-overview_html",
    "url": "docs/ui-overview.html",
    "title": "Overview ‚Äì Shiny for Python",
    "description": "",
    "content": "- üé® User interfaces\n- Overview\n\nOverview\n\nThe term, user interface (UI), refers to the part of an application that is visible to the user. The UI is typically composed of a collection of components (e.g. buttons, sliders, plots, etc) that allow the user to interact with the application. Shiny provides roughly three types of UI components:\n\n- Inputs: Components that gather user input (e.g. sliders, text boxes, etc).\n- Outputs: Components that display the results (e.g. plots, tables, etc).\n- Layouts: Components that arrange other components (e.g. columns, tabs, etc). Page layouts are a special type of layout that are used to start a new UI.\n\nThe component and layout galleries provide a great visual overview of available components. This article focuses more on the shared concepts and patterns of UI components.\n\nInputs\n\nShiny provides a wide variety of input components, all of which:\n\n- Start with ui.input_*().\n- Require an id argument, a label, and sometimes other (mostly optional) arguments.\n- Allow their value to be read reactively using input[id]().\n- Have a corresponding ui.update_*() function for efficiently updating the input control (see here for more details and examples).\n\nHere‚Äôs a basic example of a text input (and printing its value to the console):\n\n- Express\n- Core\n\nSee this section of the component gallery for an overview of available inputs.\n\nSome layout components, like ui.accordion() or ui.navset_tab(), take an optional id argument. If provided, the id can be used to read the selected tab/accordion panel reactively in the server using input[id]().\n\nOutputs\n\nShiny provides a handful of output components, all of which:\n\n- Require a (named) function decorated by a @render.* decorator.\n- Require the return value of the function to be a valid value (e.g. a string for @render.text, a plot for @render.plot, etc).\n\nHere‚Äôs a basic example of using a text output (reacting to changes in a text input):\n\n- Express\n- Core\n\nIn a Shiny core app, output components typically start with a ui.output_*() object directly in the UI definition. Like inputs, outputs require an id argument, which must match the name of the function that returns the output‚Äôs value in the server.\n\nSee this section of the component gallery for an overview of available outputs.\n\nIn the next article, Jupyter Widgets, you‚Äôll learn how to use Jupyter Widgets as outputs.\n\nSome outputs provide access their client-side state as input values. For example:\n\n- @render.plot provides access to hover, click, and drag events.\n- @render.data_frame provides access to selected rows and more.\n- {shinywidgets}‚Äôs @render_widget() provides access to the ipywidget traits.\n\nLayouts\n\nLayout components help with arrangement and styling of their child components. A handful of layout components start with ui.layout_*(), but many other layout components are available as well (e.g. ui.card(), ui.accordion(), ui.navset_*() functions, etc).\n\nFor a quick example, here‚Äôs how to arrange two sliders in a row:\n\n- Express\n- Core\n\nSee the layout gallery for an overview of available layout mechanisms.\n\nPage layouts\n\nA special type of layout is the page layout, which is used to start a new UI. In Shiny Express, the page layout is implicit, and automatically inferred from the top-level UI components. In Shiny Core, the page layout is explicit, meaning that the UI starts with a page layout component (e.g. ui.page_fluid(), ui.page_sidebar(), etc).\n\n- Sidebar\n- Navbar\n- Fillable\n- Restricted width\n- Full width\n\n- Express\n- Core\n\n- Express\n- Core\n\n- Express\n- Core\n\n- Express\n- Core\n\n- Express\n- Core\n\nDisplay messages\n\nAnother type of UI component is one used to display messages to the user (e.g. notifications, modals, tooltips, etc). Display messages like notifications and modals require server-side code to manage their state, so they are typically created in the server and then shown/hidden using the ui.*_show() and ui.*_hide() functions. Tooltips and popovers, on the other hand, can be created directly in the UI definition (i.e., statically rendered, without any server-side code).\n\nSee this section of the component gallery for an overview of available display messages.\n\nNext steps\n\nNext up, we‚Äôll learn all about Shiny‚Äôs Jupyter Widgets integration.\n\n",
    "code_examples": [
      "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_text(\"text\", label=\"Enter some text\")\n\n@reactive.effect\ndef _():\n    print(input.text())",
      "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_text(\"text\", label=\"Enter some text\")\n\n@reactive.effect\ndef _():\n    print(input.text())",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"text\", label=\"Enter some text\")\n)\n\ndef server(input):\n    @reactive.effect\n    def _():\n        print(input.text())\n\napp = App(app_ui, server)",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"text\", label=\"Enter some text\")\n)\n\ndef server(input):\n    @reactive.effect\n    def _():\n        print(input.text())\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_text(\"text\", label=\"Enter some text\")\n\n@render.text\ndef text_out():\n    return f\"Input text: {input.text()}\"",
      "from shiny.express import input, render, ui\n\nui.input_text(\"text\", label=\"Enter some text\")\n\n@render.text\ndef text_out():\n    return f\"Input text: {input.text()}\"",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"text\", label=\"Enter some text\"),\n    ui.output_text(\"text_out\")\n)\n\ndef server(input):\n    @render.text\n    def text_out():\n        return f\"Input text: {input.text()}\"\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"text\", label=\"Enter some text\"),\n    ui.output_text(\"text_out\")\n)\n\ndef server(input):\n    @render.text\n    def text_out():\n        return f\"Input text: {input.text()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 100\nfrom shiny.express import ui\n\nwith ui.layout_column_wrap(gap=\"2rem\"):\n    ui.input_slider(\"slider1\", \"Slider 1\", min=0, max=100, value=50)\n    ui.input_slider(\"slider2\", \"Slider 2\", min=0, max=100, value=50)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 100\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.input_slider(\"slider1\", \"Slider 1\", min=0, max=100, value=50),\n        ui.input_slider(\"slider2\", \"Slider 2\", min=0, max=100, value=50),\n        gap=\"2rem\"\n    )\n)\n\napp = App(app_ui, None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\nfrom shiny.express import ui\n\nui.page_opts(title=\"Page title\")\n\nwith ui.sidebar():\n    \"Sidebar content\"\n\n\"Main content\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\"Sidebar content\"),\n    \"Main content\",\n    title=\"Page title\"\n)\n\napp = App(app_ui, None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.page_opts(title=\"Page title\")\n\nwith ui.nav_panel(\"Page 1\"):\n    \"Page 1 content\"\n\nwith ui.nav_panel(\"Page 2\"):\n    \"Page 2 content\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny import App, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\"Page 1\", \"Page 1 content\"),\n    ui.nav_panel(\"Page 2\", \"Page 2 content\"),\n    title=\"Page title\"\n)\n\napp = App(app_ui, None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.card():\n    \"Card content\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.card(\"Card content\")\n)\n\napp = App(app_ui, None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nwith ui.card():\n    \"Card content\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fixed(\n    ui.card(\"Card content\")\n)\n\napp = App(app_ui, None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.page_opts(full_width=True)\n\nwith ui.card():\n    \"Card content\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.card(\"Card content\")\n)\n\napp = App(app_ui, None)"
    ]
  },
  {
    "id": "docs_jupyter-widgets_html",
    "url": "docs/jupyter-widgets.html",
    "title": "Jupyter Widgets ‚Äì Shiny for Python",
    "description": "",
    "content": "- üé® User interfaces\n- Jupyter Widgets\n\nJupyter Widgets\n\nShiny fully supports ipywidgets (aka Jupyter Widgets) via the shinywidgets package. Many notable Python packages build on ipywidgets to provide highly interactive widgets in Jupyter notebooks, including:\n\n- Plots, like altair, bokeh, and plotly.\n- Maps, like pydeck and ipyleaflet.\n- Tables, ipydatagrid and ipysheet.\n- 3D visualizations, like ipyvolume and pythreejs.\n- Media streaming, like ipywebrtc.\n- Other awesome widgets\n\nIn this article, we‚Äôll learn how to leverage ipywidgets in Shiny, including how to render them, efficiently update them, and respond to user input.\n\nAlthough the term ‚ÄúJupyter Widgets‚Äù is often used to refer to ipywidgets, it‚Äôs important to note that not all Jupyter Widgets are ipywidgets. For example, packages like folium and ipyvizzu aren‚Äôt compatible with ipywidgets, but do provide a _repr_html_ method for getting the HTML representation. It may be possible to display these widgets using Shiny‚Äôs @render.ui decorator.\n\nInstallation\n\nTo use ipywidgets in Shiny, start by installing shinywidgets:\n\nThen, install the ipywidgets that you‚Äôd like to use. For this article, we‚Äôll need the following:\n\nGet started\n\nTo render an ipywidget you first define a reactive function that returns the widget and then decorate it with @render_widget. Some popular widgets like altair have specially-designed decorators for better ergonomics and we recommend using them if they exist.\n\n- Altair\n- Bokeh\n- Plotly\n- Pydeck\n- Other\n\nMany other awesome Python packages provide widgets that are compatible with Shiny. In general, you can render them by applying the @render_widget decorator.\n\nWidget object\n\nIn order to create rich user experiences like linked brushing, editable tables, and smooth transitions, it‚Äôs useful to know how to efficiently update and respond to user input. In either case, we‚Äôll need access to the Python object underlying the rendered widget. This object is available as a property, named widget, on the render function. From this widget object, you can then access its attributes and methods. As we‚Äôll see later, special widget attributes known as traits, can be used to efficiently update and respond to user input.\n\nIf you‚Äôre not sure what traits are available, you can use the widget.traits() method to list them.\n\nThis widget object is always a subclass of ipywidgets.Widget and may be different from the object returned by the render function. For example, the hist function below returns Figure, but the widget property is a FigureWidget (a subclass of ipywidgets.Widget). In many cases, this is useful since ipywidgets.Widget provides a standard way to efficiently update and respond to user input that shinywidgets knows how to handle. If you need the actual return value of the render function, you can access it via the value property.\n\nThe ‚Äúmain‚Äù API for notable packages like altair, bokeh, plotly, and pydeck don‚Äôt subclass ipywidgets.Widget (so that they can be used outside of a notebook). Shinywidgets is aware of this and automatically coerces to the relevant subclass (e.g, plotly‚Äôs Figure -> FigureWidget).\n\nAs long as you‚Äôre using the dedicated decorators for these packages (e.g., @render_altair), the widget property‚Äôs type will know about the coercion (i.e., you‚Äôll get proper autocomplete and type checking on the widget property).\n\nEfficient updates\n\nIf you‚Äôve used ipywidgets before, you may know that widgets have traits that can be updated after the widget is created. It‚Äôs often much more performant to update a widget‚Äôs traits instead of re-creating it from from scratch, and so you should update a widget‚Äôs traits when performance is critical.\n\nFor example, in a notebook, you may have written a code cell like this to first display a map:\n\nThen, in a later cell, you may have updated the map‚Äôs center trait to change the map‚Äôs location:\n\nWith shinywidgets, we can do the same thing reactively in Shiny by updating the widget property of the render function. For example, the following code creates a map, then updates the map‚Äôs center whenever the dropdown changes.\n\nIf the app above had used @render_widget instead of @reactive.effect to perform the update, then the map would be re-rendered from stratch every time input.center changes, which causes the map to flicker (instead of a smooth transition to the new location).\n\nRespond to user input\n\nThere are two different ways to respond to user input:\n\n- Reactive traits\n- Widget event callbacks\n\nIt‚Äôs usually easiest to use reactive traits but you may need to use event callbacks if the event information isn‚Äôt available as a trait.\n\nReactive traits\n\nIf you‚Äôve used ipywidgets before, you may know that widgets have traits that can be accessed and observed. For example, in a notebook, you may have written a code cell like this to display a map:\n\nThen, in a later cell, you may have read the map‚Äôs center trait to get the current map‚Äôs location:\n\nWith shinywidgets, we can do the same thing reactively in Shiny by using the reactive_read() function to read the trait in a reactive context. For example, the following example creates a map, then displays/updates the map‚Äôs current center whenever the map is panned.\n\nUnder the hood, reactive_read() uses ipywidgets‚Äô observe() method to observe changes to the relevant trait. So, any observable trait can be used with reactive_read().\n\nSome widgets have attributes that contain observable traits. One practical example of this is the selections attribute of altair‚Äôs JupyterChart class, which has an observable point trait.\n\nWidget event callbacks\n\nSometimes, you may want to capture user interaction that isn‚Äôt available through a widget trait. For example, ipyleaflet.CircleMarker has an .on_click() method that allows you to execute a callback when a marker is clicked. In this case, you‚Äôll want to define a callback that updates some reactive.value everytime its triggered to capture the relevant information. That way, the callback information can be used to cause invalidation of other outputs (or trigger reactive side-effects):\n\nIn the example above, we created a CircleMarker object, then added it to a Map object. Both of these objects subclass ipywidgets.Widget, so they both have traits that can be updated and read reactively.\n\nLayout & styling\n\nLayout and styling of ipywidgets can get a bit convoluted, partially due to potentially 3 levels of customization:\n\n- The ipywidgets API.\n- The widget implementation‚Äôs API (e.g., altair‚Äôs Chart, plotly‚Äôs Figure, etc).\n- Shiny‚Äôs UI layer.\n\nGenerally speaking, it‚Äôs preferable to use the widget‚Äôs layout API if it is available since the API is designed specifically for the widget. For example, if you want to set the size and theme of a plotly figure, can use its update_layout method:\n\nArranging widgets\n\nThe best way to include widgets in your application is to wrap them in one of Shiny‚Äôs UI components. In addition to being quite expressive and flexible, these components make it easy to implement filling and responsive layouts. For example, the following code arranges two widgets side-by-side, and fills the available space:\n\nFor more layout inspiration, check out the Layout Gallery.\n\nShinylive\n\nExamples on this page are powered by shinylive, a tool for running Shiny apps in the browser (via pyodide). Generally speaking, apps that use shinywidgets should work in shinylive as long as the widget and app code is supported by pyodide. The shinywidgets package itself comes pre-installed in shinylive, but you‚Äôll need to include any other dependencies in the requirements.txt file.\n\nExamples\n\nFor more shinywidgets examples, see the examples/ directory in the shinywidgets repo. The outputs example is a particularly useful example to see an overview of available widgets.\n\nTroubleshooting\n\nIf after installing shinywidgets, you have trouble rendering widgets, first try running this ‚Äúhello world‚Äù ipywidgets example. If that doesn‚Äôt work, it could be that you have an unsupported version of a dependency like ipywidgets or shiny.\n\nIf you can run the ‚Äúhello world‚Äù example, but other widgets don‚Äôt work, first check that the extension is properly configured with jupyter nbextension list. If the extension is properly configured, and still isn‚Äôt working, here are some possible reasons why:\n\n- The widget requires initialization code to work in a notebook environment.\n\n- In this case, shinywidgets probably won‚Äôt work without providing the equivalent setup information to Shiny. A known case of this is bokeh, shinywidgets‚Äô @render_bokeh decorator handles through inclusion of additional HTML dependencies.\n\n- Not all widgets are compatible with ipywidgets!\n\n- Some web-based widgets in Python aren‚Äôt compatible with the ipywidgets framework, but do provide a repr_html method for getting the HTML representation (e.g., folium). It may be possible to display these widgets using Shiny‚Äôs @render.ui decorator, but be aware that, you may not be able to do things mentioned in this article with these widgets.\n\n- The widget itself is broken.\n\n- If you think this is the case, try running the code in a notebook to see if it works there. If it doesn‚Äôt work in a notebook, then it‚Äôs likely a problem with the widget itself (and the issue should be reported to the widget‚Äôs maintainers).\n\n- The widget is otherwise misconfigured (or your offline).\n\n- shinywidgets tries its best to load widget dependencies from local files, but if it fails to do so, it will try to load them from a CDN. If you‚Äôre offline, then the CDN won‚Äôt work, and the widget will fail to load. If you‚Äôre online, and the widget still fails to load, then please let us know by opening an issue.\n\nFor developers\n\nIf you‚Äôd like to create your own ipywidget that works with shinywidgets, we highly recommend using the anywidget framework to develop that ipywidget. However, if only care about Shiny integration, and not Jupyter, then you may want to consider using a custom Shiny binding instead of shinywidgets. If you happen to already have an ipywidget implementation, and want to use/add a dedicated decorator for it, see how it‚Äôs done here.\n\n",
    "code_examples": [
      "pip install shinywidgets",
      "pip install shinywidgets",
      "pip install altair bokeh plotly ipyleaflet pydeck==0.8.0",
      "pip install altair bokeh plotly ipyleaflet pydeck==0.8.0",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 485\n\nfrom shiny.express import input, ui\nfrom shinywidgets import render_altair\n\nui.input_selectize(\"var\", \"Select variable\", choices=[\"bill_length_mm\", \"body_mass_g\"])\n\n\n@render_altair\ndef hist():\n    import altair as alt\n    from palmerpenguins import load_penguins\n    df = load_penguins()\n    return (\n        alt.Chart(df)\n        .mark_bar()\n        .encode(x=alt.X(f\"{input.var()}:Q\", bin=True), y=\"count()\")\n    )\n## file: requirements.txt\naltair\nanywidget\npalmerpenguins",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 485\n\nfrom shiny.express import input, ui\nfrom shinywidgets import render_bokeh\n\nui.input_selectize(\n    \"var\", \"Select variable\",\n    choices=[\"bill_length_mm\", \"body_mass_g\"]\n)\n\n@render_bokeh\ndef hist():\n    from bokeh.plotting import figure\n    from palmerpenguins import load_penguins\n\n    p = figure(x_axis_label=input.var(), y_axis_label=\"count\")\n    bins = load_penguins()[input.var()].value_counts().sort_index()\n    p.quad(\n        top=bins.values,\n        bottom=0,\n        left=bins.index - 0.5,\n        right=bins.index + 0.5,\n    )\n    return p\n## file: requirements.txt\nbokeh\njupyter_bokeh\nxyzservices",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 485\n\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\n\nui.input_selectize(\n    \"var\", \"Select variable\",\n    choices=[\"bill_length_mm\", \"body_mass_g\"]\n)\n\n@render_plotly\ndef hist():\n    import plotly.express as px\n    from palmerpenguins import load_penguins\n    df = load_penguins()\n    return px.histogram(df, x=input.var())\n\n## file: requirements.txt\npalmerpenguins\nplotly",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 485\n\nimport pydeck as pdk\nimport shiny.express\nfrom shinywidgets import render_pydeck\n\n@render_pydeck\ndef map():\n    UK_ACCIDENTS_DATA = \"https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv\"\n\n    layer = pdk.Layer(\n        \"HexagonLayer\",  # `type` positional argument is here\n        UK_ACCIDENTS_DATA,\n        get_position=[\"lng\", \"lat\"],\n        auto_highlight=True,\n        elevation_scale=50,\n        pickable=True,\n        elevation_range=[0, 3000],\n        extruded=True,\n        coverage=1,\n    )\n\n    # Set the viewport location\n    view_state = pdk.ViewState(\n        longitude=-1.415,\n        latitude=52.2323,\n        zoom=6,\n        min_zoom=5,\n        max_zoom=15,\n        pitch=40.5,\n        bearing=-27.36,\n    )\n\n    # Combined all of it and render a viewport\n    return pdk.Deck(layers=[layer], initial_view_state=view_state)\n## file: requirements.txt\npydeck==0.8.0",
      "import shiny.express\nfrom shinywidgets import render_widget\n\n@render_widget\ndef widget():\n    # Widget code goes here\n    ...",
      "import shiny.express\nfrom shinywidgets import render_widget\n\n@render_widget\ndef widget():\n    # Widget code goes here\n    ...",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 480\nfrom shiny.express import render\nfrom shinywidgets import render_plotly\n\n@render_plotly\ndef hist():\n    import plotly.express as px\n    return px.histogram(px.data.tips(), x=\"tip\")\n\n@render.code\ndef info():\n    return str([type(hist.widget), type(hist.value)])\n## file: requirements.txt\npandas\nplotly",
      "import ipyleaflet as ipyl\nmap = ipyl.Map()",
      "import ipyleaflet as ipyl\nmap = ipyl.Map()",
      "map.center = (51, 0)",
      "map.center = (51, 0)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\nfrom shiny import reactive\nfrom shiny.express import input, ui\nfrom shinywidgets import render_widget\nimport ipyleaflet as ipyl\n\ncity_centers = {\n    \"London\": (51.5074, 0.1278),\n    \"Paris\": (48.8566, 2.3522),\n    \"New York\": (40.7128, -74.0060)\n}\n\nui.input_select(\"center\", \"Center\", choices=list(city_centers.keys()))\n\n@render_widget\ndef map():\n    return ipyl.Map(zoom=4)\n\n@reactive.effect\ndef _():\n    map.widget.center = city_centers[input.center()]\n## file: requirements.txt\nipyleaflet",
      "import ipyleaflet as ipyl\nmap = ipyl.Map()",
      "import ipyleaflet as ipyl\nmap = ipyl.Map()",
      "map.center",
      "map.center",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 460\nimport ipyleaflet as ipyl\nfrom shiny.express import render\nfrom shinywidgets import reactive_read, render_widget\n\n\"Click and drag to pan the map\"\n\n@render_widget\ndef map():\n    return ipyl.Map(zoom=2)\n\n@render.text\ndef center():\n    cntr = reactive_read(map.widget, 'center')\n    return f\"Current center: {cntr}\"\n## file: requirements.txt\nipyleaflet",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 460\nimport altair as alt\nfrom shiny.express import render\nfrom shinywidgets import reactive_read, render_altair\nfrom vega_datasets import data\n\n\"Click the legend to update the selection\"\n\n@render.code\ndef selection():\n    pt = reactive_read(jchart.widget.selections, \"point\")\n    return str(pt)\n\n@render_altair\ndef jchart():\n    brush = alt.selection_point(name=\"point\", encodings=[\"color\"], bind=\"legend\")\n    return (\n        alt.Chart(data.cars())\n        .mark_point()\n        .encode(\n            x=\"Horsepower:Q\",\n            y=\"Miles_per_Gallon:Q\",\n            color=alt.condition(brush, \"Origin:N\", alt.value(\"grey\")),\n        )\n        .add_params(brush)\n    )\n\n\n## file: requirements.txt\naltair\nanywidget\nvega_datasets",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 450\nimport ipyleaflet as ipyl\nfrom shiny.express import render\nfrom shiny import reactive\nfrom shinywidgets import render_widget\n\n# Stores the number of clicks\nn_clicks = reactive.value(0)\n\n# A click callback that updates the reactive value\ndef on_click(**kwargs):\n    n_clicks.set(n_clicks() + 1)\n\n# Create the map, add the CircleMarker, and register the map with Shiny\n@render_widget\ndef map():\n    cm = ipyl.CircleMarker(location=(55, 360))\n    cm.on_click(on_click)\n    m = ipyl.Map(center=(53, 354), zoom=5)\n    m.add_layer(cm)\n    return m\n\n@render.text\ndef nClicks():\n    return f\"Number of clicks: {n_clicks.get()}\"\n## file: requirements.txt\nipyleaflet",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 285\n\nimport plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\n\nui.input_selectize(\n    \"theme\", \"Choose a theme\",\n    choices=[\"plotly\", \"plotly_white\", \"plotly_dark\"]\n)\n\n@render_plotly\ndef plot():\n    p = px.histogram(px.data.tips(), x=\"tip\")\n    p.update_layout(template=input.theme(), height=200)\n    return p\n## file: requirements.txt\npandas\nplotly",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 250\n\nimport plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\n\nui.page_opts(title = \"Filling layout\", fillable = True)\n\nwith ui.layout_columns():\n  @render_plotly\n  def plot1():\n      return px.histogram(px.data.tips(), y=\"tip\")\n\n  @render_plotly\n  def plot2():\n      return px.histogram(px.data.tips(), y=\"total_bill\")\n## file: requirements.txt\npandas\nplotly"
    ]
  },
  {
    "id": "docs_ui-dynamic_html",
    "url": "docs/ui-dynamic.html",
    "title": "Dynamic UI ‚Äì Shiny for Python",
    "description": "",
    "content": "- üé® User interfaces\n- Dynamic UI\n\nDynamic UI\n\nIt‚Äôs often useful to programmatically update the UI based on user input or other server-side state. Shiny provides several mechanisms for doing this, including conditional UI, updating inputs, and dynamic UI. Amongst these dynamic UI is the most general and powerful, but also comes with the most overhead.\n\nConditional UI\n\nThe most basic way to create dynamic UIs is by conditionally hiding a UI element on the client side. ui.panel_conditional() enables this by showing/hiding UI based on a JavaScript condition. This condition can reference input values, and can be used to make any sort of UI conditional.\n\nUpdating inputs\n\nIn addition to hiding elements on the client side, you can also update input elements from the server. This is used in cases where you want to change on part of an input without regenerating it entirely. For example you might want to change ui.input_select choices when a user takes a particular action.\n\nDynamic UI\n\nFinally, @render.ui lets you generate UI element(s) entirely on the server, which is an extremely flexible way to dynamically generate UIs. This is the most general mechanism for dynamic UI, but also comes with the most overhead.\n\nShiny Express code that works via side-effects needs to be used with @render.express, not @render.ui. See this section to learn more.\n\nAnything that‚Äôs statically renderable can also be rendered dynamically (e.g., ui.markdown(), ui.HTML(), ui.div(), inputs, outputs, etc).\n\nDynamic UI is a more general mechanism than the updating inputs and conditional UI patterns, and can be used to update any UI component(s) (not just inputs). However, updating inputs is more efficient than dynamic UI, and should be preferred where possible.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 100\n\nfrom shiny.express import ui\n\nui.input_radio_buttons(\"display\", None, [\"hidden\", \"shown\"], inline=True)\n\n# The 1st string is a JavaScript condition, and the child UI is shown if it's truthy\n# NOTE: JS input values are read via `input[id]`, not `input[id]()`\nwith ui.panel_conditional(\"input.display === 'shown'\"):\n    \"Hidden content\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 200\n\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nCHOICES = {\n  \"lower\": [\"a\", \"b\", \"c\"],\n  \"upper\": [\"A\", \"B\", \"C\"]\n}\n\nui.input_switch(\"uppercase\", \"Uppercase choices\", value=False)\nui.input_selectize(\"x\", None, choices=CHOICES[\"lower\"])\n\n@reactive.effect\ndef _():\n    choices = \"upper\" if input.uppercase() else \"lower\"\n    ui.update_selectize(\"x\", choices=CHOICES[choices])",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 250\nfrom shiny.express import input, render, ui\n\nui.input_text(\"message\", \"Message\", value=\"Hello, world!\")\n\nui.input_checkbox_group(\n  \"styles\", \"Styles\",\n  choices=[\"Bold\", \"Italic\"],\n  selected=[\"Bold\"],\n  inline=True\n)\n\n@render.ui\ndef result():\n    x = input.message()\n    if \"Bold\" in input.styles():\n        x = ui.strong(x)\n    if \"Italic\" in input.styles():\n        x = ui.em(x)\n    return x"
    ]
  },
  {
    "id": "docs_ui-html_html",
    "url": "docs/ui-html.html",
    "title": "UI as HTML ‚Äì Shiny for Python",
    "description": "",
    "content": "- üé® User interfaces\n- UI as HTML\n\nUI as HTML\n\nUnder the hood, Shiny UI stands on a foundation of HTML, CSS, and JavaScript. In fact, if you print a UI component in a Python REPL, you‚Äôll see its HTML representation:\n\nCreating HTML\n\nShiny provides some convenience for creating HTML, like ui.markdown():\n\nAlso, ui.HTML() for raw HTML:\n\nAs well as common HTML tags like ui.div(), ui.span(), ui.p(), ui.h2(), etc.\n\nAlso, less common tags are available under ui.tags:\n\nHTML tag objects\n\nOne benefit working with formal Tag object (e.g., ui.div()) is that you can use its methods and attributes to:\n\n- Add/remove HTML attributes like class and style.\n- Add/remove child tags.\n- show() to view the HTML in a browser:\n\nThat said, you can also provide HTML attributes when creating the Tag (via either named arguments or a dictionary):\n\nIn Python, there are some reserved keywords which can‚Äôt be used as argument names, such as class. To get around this, you can either use a dictionary as above, or append an underscore to the argument. If there‚Äôs a trailing _, it will be stripped off when creating the tag object.\n\n<head> content\n\nThe <head> of an HTML document is a special place where you can load CSS, JavaScript, and add other ‚Äúmeta‚Äù content that should only be loaded once. head_content() provides an easy easy way to add to the <head>, and can be placed anywhere in the UI. For example, to add a robots meta tag:\n\nIf head_content() wants to import local files, see here to learn how to serve local files. If you find yourself using ui.head_content() to import CSS and JavaScript, you may instead want to use ui.include_css() and ui.include_js(), which are covered here. Lastly, if you‚Äôre loading files for a framework like Bootstrap, Svelte, etc. consider using HTMLDependency() instead (see below).\n\nHTML Dependencies\n\nHTMLDependency() provides a useful way to include CSS, JavaScript, other files which should only ever be loaded once. Most Shiny apps don‚Äôt need to worry about this problem, but if you‚Äôre creating UI components that you expect other people to use, then it‚Äôs important to be aware of HTMLDependency(). It‚Äôs typically used to load frameworks like Bootstrap or Svelte, and can also be included as a child of any Tag/TagList object, so may see it used in the wild like this:\n\nIf multiple HTMLDependency() objects with the same name are included in the UI, then only the latest version is loaded.\n\nLearn more about HTMLDependencies in the custom component guide.\n\nList fragments\n\nWhen you need a collaction of HTML tags, you can usually just use a Python list or tuple. However, in some more advanced situations, it‚Äôs helpful to use a TagList, which has some additional attributes and methods (e.g., .render(), .get_dependencies(), etc).\n\nHTML-like objects\n\nIf you‚Äôve created a custom Python object that you‚Äôd like to be able to render as a Shiny UI object, you can either create a full-blown Shiny binding and/or implement a _repr_html_ method. The former approach is recommended if it‚Äôs important to access the object‚Äôs state from Python, while the latter is recommended if the object is just a simple container for HTML (plus, it should also work in Jupyter notebooks).\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\nfrom shiny import ui\nui.input_action_button(\"btn\", \"Button\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\nfrom shiny import ui\nui.markdown(\"Hello **world**!\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\nfrom shiny import ui\nui.HTML(\"<p>Hello <strong>world</strong>!</p>\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\nfrom shiny import ui\nui.div(\"Hello\", ui.span(\"world\"), \"!\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\nfrom shiny import ui\nui.tags.video(src=\"video.mp4\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\nfrom shiny import ui\nx = ui.div(\"Hello\")\nx.add_style(\"color:red;\")\n# x.show()",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\nfrom shiny import ui\n# Both of these are equivalent:\nui.a(\"Help\", href=\"help.html\")\nui.a({\"href\": \"help.html\"}, \"Help\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\nfrom shiny import ui\n# Two ways of doing the same thing\nui.a({\"href\": \"help.html\", \"class\": \"help-link\"}, \"Help\")\nui.a(\"Help\", href=\"help.html\", class_=\"help-link\")\n<a href=\"help.html\">Help</a>",
      "from shiny import ui\n\nui.head_content(\n    ui.tags.meta(name=\"robots\", content=\"noindex\")\n)",
      "from shiny import ui\n\nui.head_content(\n    ui.tags.meta(name=\"robots\", content=\"noindex\")\n)",
      "from shiny import ui\n\ndef my_ui(x):\n    return ui.TagList(\n        x,\n        ui.HTMLDependency(\n            name=\"my-ui\",\n            version=\"0.1.0\",\n            source={\"subdir\": ...},\n            stylesheet=[{\"href\": \"my-ui.css\"}],\n            script=[{\"src\": \"my-ui.js\"}],\n        )\n    )",
      "from shiny import ui\n\ndef my_ui(x):\n    return ui.TagList(\n        x,\n        ui.HTMLDependency(\n            name=\"my-ui\",\n            version=\"0.1.0\",\n            source={\"subdir\": ...},\n            stylesheet=[{\"href\": \"my-ui.css\"}],\n            script=[{\"src\": \"my-ui.js\"}],\n        )\n    )",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\nfrom shiny import ui\nui.TagList(\n    ui.div(\"Hello\"),\n    ui.span(\"World\"),\n    \"!\"\n)"
    ]
  },
  {
    "id": "docs_ui-customize_html",
    "url": "docs/ui-customize.html",
    "title": "Customizing UI ‚Äì Shiny for Python",
    "description": "",
    "content": "- üé® User interfaces\n- Customizing UI\n\nCustomizing UI\n\nThis article covers various levels of ways of customizing the overall look and feel of your Shiny app.\n\nThe techniques covered here are intentionally generic (i.e., applies to all UI). Some components may have additional customization options (e.g., ui.sidebar() has a bg argument to change the background color).\n\nShinyswatch\n\nThe shinyswatch package makes is very easy to change the look of your app, and provides over a dozen different bootswatch themes to choose from. Simply choose a theme from shinyswatch.theme.<theme_name> and pass it to the theme argument of the page function (Shiny Core) or ui.page_opts() (Shiny Express).\n\nCustom CSS\n\nIf you want to customize the look of your app beyond what is available in shinyswatch, a natural next step is to add custom CSS. This is pretty straightforward to do since UI components are HTML. That said, you‚Äôll at least want to know the basics of CSS, including CSS selectors before you get started.\n\nCSS string\n\nIf you don‚Äôt need much CSS, you can add a string of CSS directly to your UI with ui.tags.style(). This is convenient because you don‚Äôt need to create an external file, but it can be a bit cumbersome if you have a lot of CSS.\n\nCSS file\n\nIf you have a lot of CSS, put it in an external file and import it with ui.include_css().\n\nInline styles\n\nMost UI components provide the opportunity to add an inline style (i.e., CSS that is applied directly to the element). This approach may be preferrable to an external CSS file if you only need to apply the style to one element, or if you want to apply style(s) programatically.\n\nUtility classes\n\nSince Shiny provides Bootstrap by default, you can use Bootstrap utility classes to customize your app. For example, you can bg-primary to change the background color, and lead to change the font weight. In addition to colors and fonts, utility classes are super useful for things like spacing, alignment, and borders.\n\nNote this approach is similar to inline styles (i.e., per element styling), but has the advantage of abstracting the actual styling away from the element itself, which is especially useful when used in conjunction with CSS variables.\n\nCSS Variables\n\nBootstrap‚Äôs CSS variables provide another nice entry point to customizing your app, especially if you want to make sweeping changes to Bootstrap‚Äôs default styles. For example, you can change the primary color by setting the --bs-primary-rgb variable.\n\nTo learn more about Bootstrap‚Äôs CSS variables, check out the Bootstrap docs.\n\nFonts\n\nWhen using a custom font, its good practice to import the relevant font files into your app. This is because the font may not be available on the user‚Äôs computer, and importing the font files ensures that the font will be available to the user. One way to import font files is to import them from a service like Google Fonts.\n\nThat said, if you want your app to work properly offline, you‚Äôll want to serve the font files with the app, which is covered next.\n\nServe local files\n\nWhen customizing UI with CSS (and/or JavaScript), it‚Äôs often useful to serve local files (e.g., fonts, images, CSS, etc) to the app. This can be done by providing a value for static_assets; the syntax for doing this is slightly different for Core and Express apps.\n\n- Express\n- Core\n\nIn Shiny Express, if you have a subdirectory named www, the contents of that directory will automatically be available to the application‚Äôs UI at /.\n\nIf you want to mount other directories, you can use the app_opts() function:\n\nTo make static files available for the UI in Shiny Core, use the static_assets argument of shiny.App(). Unlike Shiny Express, the www subdirectory is not automatically mounted at / but you can add it manually like any other static asset directory.\n\nDistribute styles\n\nThe HTMLDependency class (from htmltools) provides a useful mechanism to distribute custom styles and other files, especially when the CSS/JS should be loaded only once. A useful pattern to make those assets more accessible to others is to export a function from your Python package which returns an HTMLDependency object (this is essentially what shinyswatch does). This way, after a user installs your package, they will be able to call this function anywhere in their UI code to insert the theme.\n\nIf you‚Äôre interested in creating custom Shiny bindings, you‚Äôll learn more about using this mechanism to attach CSS/JS to your custom component.\n\nIf your CSS/JS assets are large, you may want to minify them to improve app performance.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 200\n\nfrom shinyswatch import theme\nfrom shiny.express import render, ui\n\nui.page_opts(title=\"Hello shinyswatch theme\", theme=theme.darkly)\n\nwith ui.sidebar():\n    \"Sidebar content\"\n\n\"Main content\"\n## file: requirements.txt\nshinyswatch",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.style(\n    \".card-header { color:white; background:#2A2A2A !important; }\"\n)\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom pathlib import Path\nfrom shiny.express import ui\n\nui.include_css(\n    Path(__file__).parent / \"my-styles.css\"\n)\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"\n## file: my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nwith ui.card():\n    ui.card_header(\"Card header\", style=\"color:white; background:#2A2A2A !important;\")\n    \"Card body\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nwith ui.card():\n    ui.card_header(\"Card header\", class_=\"bg-primary-subtle lead\")\n    \"Card body\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.style(\":root { --bs-primary-rgb: 113,46,246; }\")\n\nwith ui.card():\n    ui.card_header(\"Card header\", class_=\"bg-primary lead\"),\n    \"Card body\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.link(\n    rel=\"stylesheet\",\n    href=\"https://fonts.googleapis.com/css?family=Roboto\"\n)\n\nui.tags.style(\n    \"body { font-family: 'Roboto', sans-serif; }\"\n)\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import ui\n\nui.tags.link(href=\"my-styles.css\", rel=\"stylesheet\")\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"\n\n## file: www/my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import app_opts, ui\n\n# Mount the local directory css_files at the web path /css\napp_opts(static_assets={ \"/css\" : \"css_files\" })\n\nui.tags.link(href=\"css/my-styles.css\", rel=\"stylesheet\")\n\nwith ui.card():\n    ui.card_header(\"Card header\")\n    \"Card body\"\n\n## file: css_files/my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom pathlib import Path\nfrom shiny import App, ui\n\napp_ui = ui.page_fixed(\n    ui.tags.link(href=\"my-styles.css\", rel=\"stylesheet\"),\n    ui.card(\n        ui.card_header(\"Card header\"),\n        \"Card body\"\n    )\n)\n\napp_dir = Path(__file__).parent\napp = App(app_ui, None, static_assets=app_dir / \"www\")\n\n## file: www/my-styles.css\n.card-header {\n    color: white;\n    background: #2A2A2A !important;\n}\n",
      "from htmltools import HTMLDependency\n\ndef acme_theme():\n    return HTMLDependency(\n        name=\"acme_theme\",\n        version=\"0.01\",\n        source={\"package\": \"acme_theme\", \"subdir\": \"acme-theme\"},\n        stylesheet=[{\"href\": \"acme-theme.css\"}],\n        script=[{\"src\": \"acme-theme.js\"}],\n        # If you want other files in the acme-theme dir to be served\n        all_files=True\n    )",
      "from htmltools import HTMLDependency\n\ndef acme_theme():\n    return HTMLDependency(\n        name=\"acme_theme\",\n        version=\"0.01\",\n        source={\"package\": \"acme_theme\", \"subdir\": \"acme-theme\"},\n        stylesheet=[{\"href\": \"acme-theme.css\"}],\n        script=[{\"src\": \"acme-theme.js\"}],\n        # If you want other files in the acme-theme dir to be served\n        all_files=True\n    )"
    ]
  },
  {
    "id": "docs_reactive-foundations_html",
    "url": "docs/reactive-foundations.html",
    "title": "Foundations ‚Äì Shiny for Python",
    "description": "",
    "content": "- ‚ö° Reactivity\n- Foundations\n\nFoundations\n\nAt the heart of Shiny is a reactive programming framework. We often refer to this framework as ‚Äúgood magic‚Äù because it‚Äôs easy to get started with, but also decomposes into simple pieces which combine in powerful ways.\n\nThe Quick Start introduced the most common form of reactivity: changes in input causing relevant render functions to re-execute (aka invalidate). For a refresher, here‚Äôs a basic example that displays a slider‚Äôs value as formatted text.\n\nMore generally, Shiny knows to re-execute reactive functions (e.g., render functions) when their reactive dependencies (e.g., input) change. In this section, we‚Äôll cover the other main forms of reactive functions and dependencies:\n\n- Calculations with @reactive.calc Write your reactive calculation once, then call it as needed.\n- Side effects with @reactive.effect Effects are similar to @render.* functions, but they don‚Äôt return anything. They‚Äôre used for their side-effects (e.g., writing to a database, sending an email, etc.)\n- Reactive values with reactive.value Create input-like values that aren‚Äôt tied to input controls and can be updated. They‚Äôre often used to maintain state in an app.\n\n- Write your reactive calculation once, then call it as needed.\n\n- Effects are similar to @render.* functions, but they don‚Äôt return anything. They‚Äôre used for their side-effects (e.g., writing to a database, sending an email, etc.)\n\n- Create input-like values that aren‚Äôt tied to input controls and can be updated. They‚Äôre often used to maintain state in an app.\n\nIn the next article, we‚Äôll build on these foundational concepts to cover some useful reactivity patterns.\n\nCalculations\n\nOften times it‚Äôs useful to perform a calculation based on reactive dependencies (e.g., input values), then reuse that calculation in multiple places. @reactive.calc is designed for this purpose: it allows you to define a calculation once, then efficiently recall it as needed.\n\nFor a basic example, say we need the square of an input value and display the result in multiple places. The @reactive.calc, x2, encapsulates the calculation, and the @render.* functions call for its value like an input value. And, although we call x2() multiple times, the calculation is only performed once per invalidation.\n\nReactive calculations can read any reactive dependency (e.g., input, reactive.value, and @reactive.calc) as well as be read by any reactive function (i.e., @render.*, @reactive.effect, and @reactive.calc). This makes, itself, both a reactive dependency and a reactive function.\n\nSide effects\n\nOften times it‚Äôs useful to perform side effects (e.g., write to a database, send an email, etc) in response to changes in reactive dependencies (e.g., input values). @reactive.effect is designed for this purpose: it expects a function which doesn‚Äôt return anything, but get used for its side effect(s). In programming lingo, a side effect is when a function modifies state other than its return value.\n\nFor a basic example, lets write every value of a slider as it changes to the UI:\n\nOften times, you‚Äôll want to perform a side effect in response to a specific event (e.g., a button click). In the next article, we‚Äôll cover how to do this with @reactive.event.\n\nA better way to implement the example above, which allows us to keep a history of all values, is covered in Reactive values with reactive.value.\n\nReactive values\n\nA reactive.value, like an input value, is a reactive dependency (i.e., they can be used to invalidate reactive functions). Unlike input values, they‚Äôre not necessarily bound to input controls and can have their value updated programmatically. This makes them primarily useful for maintaining state in an app.\n\nFor example, lets track the history of slider values visited by a user through a reactive.value. When initialized, it takes an initial value (here, an empty list). Then, a @reactive.effect appends the slider value whenever it changes. Note also, that since we are both getting and setting vals in the @reactive.effect, we need @reactive.event to prevent an infinite loop.\n\nReactive values are often used to maintain state in an app. Here we‚Äôre using it to keep track of the history of a slider, but they can be used for many other things as well (what pages/tabs have been visited, what points have been clicked on a plot, etc.).\n\nBe careful when using mutable objects (e.g., lists, dicts, etc.) as reactive values. If you modify the object in-place, Shiny won‚Äôt know that it‚Äôs changed and won‚Äôt invalidate any reactive functions that depend on it. See the article on handling mutability for more.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50)\n\n@render.text\ndef slider_val():\n    return f\"Slider value: {input.val()}\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 200\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"x\", \"Slider value\", min=0, max=100, value=10)\n\n@reactive.calc\ndef x2():\n  return input.x() ** 2\n\n@render.ui\ndef out1():\n  return f\"Render UI: {x2()}\"\n\n@render.text\ndef out2():\n  return f\"Render text: {x2()}\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 200\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_slider(\"x\", \"Slider value\", min=0, max=100, value=10)\n\n@reactive.effect\ndef _():\n    ui.insert_ui(ui.p(input.x()), selector=\"#x\", where=\"afterEnd\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 200\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"x\", \"Slider value\", min=0, max=100, value=10)\n\nvals = reactive.value([])\n\n# Track the history of the slider\n@reactive.effect\n@reactive.event(input.x)\ndef _():\n    vals.set([input.x()] + vals())\n\n@render.ui\ndef out():\n    return [ui.p(x) for x in vals()]"
    ]
  },
  {
    "id": "docs_reactive-patterns_html",
    "url": "docs/reactive-patterns.html",
    "title": "Patterns ‚Äì Shiny for Python",
    "description": "",
    "content": "- ‚ö° Reactivity\n- Patterns\n\nPatterns\n\nIn the previous article, we learned the foundations of reactive programming in Shiny. Here we‚Äôll learn about some useful utilities that make reactive programming easier in certain situations.\n\n- Isolation & Events Ignore changes in certain reactive dependencies.\n- Requiring input Require an input before executing a reactive function.\n- Scheduled invalidation Invalidate a reactive function on a schedule.\n- Reactive file reading Invalidate a reactive function when a file changes.\n- Reactive polling Periodically check for changes to a reactive dependency.\n\n- Ignore changes in certain reactive dependencies.\n\n- Require an input before executing a reactive function.\n\n- Invalidate a reactive function on a schedule.\n\n- Invalidate a reactive function when a file changes.\n\n- Periodically check for changes to a reactive dependency.\n\nIsolation & Events\n\nNormally, a reactive function re-executes when any of its reactive dependencies change. Sometimes this leads to a function re-executing too often. Shiny provides two ways to ignore changes in reactive dependencies: @reactive.event() and with isolate(). The former is more convenient when you want ‚Äúevent-like‚Äù behavior (i.e., do something on button click).\n\nFor example, suppose we have an output that depends on the value of a slider, but is computationally expensive. We might want it to re-execute it only when the user presses a button. In other words, we want to ignore changes in the slider until the button is pressed. The more idiomatic way to do this is with @reactive.event():\n\n- reactive.event\n- reactive.isolate\n\nThe @reactive.event() decorator restricts re-execution to only changes in one (or more) reactive dependency. Any other reactive dependencies inside the function being decorated are ignored.\n\nIn the @reactive.event() example above, the function does not execute the first time when the session starts; it will wait until the user presses the button. If you want it to execute once when the session starts, you can use @reactive.event(input.compute, ignore_none=False).\n\nUsing with isolate(), a block of code is run inside a reactive function, but without taking a reactive dependency on the code inside the block. This means that any reactive inputs in that block will not cause the function to re-execute. In the example below, the result takes a dependency on input.button(), but not input.x():\n\nRequiring input\n\nWhen input must be provided or a certain condition must be met before displaying output, you can use req() to effectively stop execution for the current reactive cycle. For example, the app below allows a user to upload a csv file, which is then used to render a table. Notice how the reactive calculation, df, uses req() to stop execution until the user has uploaded a file.\n\nVideo\n\nScheduled invalidation\n\nTo repeatedly invalidate a reactive function on a schedule, use reactive.invalidate_later(). This is useful for implementing things like streaming data, or updating a clock. For example, to implement a clock that updates every second, you can use reactive.invalidate_later(1):\n\nReactive file reading\n\nIf your app reads input files, you can use @reactive.file_reader() to invalidate the result when the file changes. For example, lets extend the example from above to write the current time to a file every second, and then read and display the contents of that file:\n\nSee here for a more compelling example of monitoring a file for changes.\n\nReactive polling\n\nSometimes it‚Äôs useful to invalidate a reactive function on a schedule, but only if a certain condition is met. For example, suppose we want to check if a (potentially large) file (or database) has changed/updated every so often, and if it has, re-read it. The @reactive.poll() decorator is designed for this purpose. When applying the decorator, make sure to provide a function that is relatively cheap to execute, since it will be executed repeatedly on an interval. And, in the event that that function‚Äôs value changes, the reactive function will be invalidated and re-executed.\n\nFor example, lets extend the example from above to write the current time to a file every 0.5 seconds, but only read and display the contents every 2 seconds:\n\nSee here for an example of monitoring a database for changes.\n\nSee here for an example of monitoring a folder for changes.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\nimport asyncio\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"n\", \"N\", min=1, max=100, value=1)\nui.input_action_button(\"compute\", \"Compute!\")\n\n@render.text\n@reactive.event(input.compute) # Take a dependency on the button\nasync def result():\n    # Any reactive dependencies inside this function are ignored.\n    await asyncio.sleep(2) # Simulate a long computation\n    return f\"Result: {input.n()}\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\nimport asyncio\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"n\", \"N\", min=1, max=100, value=1)\nui.input_action_button(\"compute\", \"Compute!\")\n\n@render.text\nasync def result():\n    input.compute()        # Take a dependency on the button\n    await asyncio.sleep(2) # Simulate a long computation\n    with reactive.isolate():\n        # Read input.n() without taking a dependency on it\n        return f\"Result: {input.n()}\"",
      "import pandas as pd\nfrom shiny import reactive, req\nfrom shiny.express import input, render, ui\n\nui.input_file(\"file\", \"Upload a csv file\", accept=\".csv\")\n\n@reactive.calc\ndef df():\n    # req() stops execution until input.file() is truthy\n    f = req(input.file())\n    return pd.read_csv(f[0]['datapath'])\n\n@render.data_frame\ndef table():\n    # Output won't render until input.file() is truthy\n    return render.DataGrid(df())",
      "import pandas as pd\nfrom shiny import reactive, req\nfrom shiny.express import input, render, ui\n\nui.input_file(\"file\", \"Upload a csv file\", accept=\".csv\")\n\n@reactive.calc\ndef df():\n    # req() stops execution until input.file() is truthy\n    f = req(input.file())\n    return pd.read_csv(f[0]['datapath'])\n\n@render.data_frame\ndef table():\n    # Output won't render until input.file() is truthy\n    return render.DataGrid(df())",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 50\nfrom datetime import datetime\nfrom shiny import reactive\nfrom shiny.express import render\n\n# Get the current time every second\n@reactive.calc\ndef cur_time():\n    reactive.invalidate_later(1)\n    return datetime.now().strftime('%H:%M:%S')\n\n@render.ui\ndef clock():\n    return f\"Current time: {cur_time()}\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 50\nfrom datetime import datetime\nfrom shiny import reactive\nfrom shiny.express import render\n\n# Get the current time every second\n@reactive.calc\ndef cur_time():\n    reactive.invalidate_later(1)\n    return datetime.now().strftime('%H:%M:%S')\n\n# Write cur_time() to a file (every second)\n@reactive.effect\ndef _():\n    with open(\"time.txt\", \"w\") as f:\n        f.write(cur_time())\n\nf = open(\"time.txt\", \"w\")  # Create the file if it doesn't exist\n\n# Read and display whenever the file changes\n@render.ui\n@reactive.file_reader(\"time.txt\")\ndef time():\n    with open(\"time.txt\") as f:\n        return f\"Current time {f.read()}\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 50\nimport os\nfrom datetime import datetime\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\n# Get the current time every 0.5 seconds\n@reactive.calc\ndef cur_time():\n    reactive.invalidate_later(0.5)\n    return datetime.now().strftime('%H:%M:%S')\n\n# Write cur_time() to a file (every 0.5 seconds)\n@reactive.effect\ndef _():\n    with open(\"time2.txt\", \"w\") as f:\n        f.write(cur_time())\n\nf = open(\"time2.txt\", \"w\")  # Create the file if it doesn't exist\n\n# Every 2 seconds, check if the file has changed.\n# If it has, re-read it, and display the contents.\n# Note: checking for the modified time of a file is cheap\n# compared to reading the file contents\n@render.ui\n@reactive.poll(lambda: os.path.getmtime(\"time2.txt\"), 2)\ndef time():\n    with open(\"time2.txt\") as f:\n        return f\"Current time {f.read()}\""
    ]
  },
  {
    "id": "docs_reactive-mutable_html",
    "url": "docs/reactive-mutable.html",
    "title": "Mutable objects ‚Äì Shiny for Python",
    "description": "",
    "content": "- ‚ö° Reactivity\n- Mutable objects\n\nMutable objects\n\nTo write robust Shiny applications, it is important to understand mutability in Python objects. Simple objects like numbers, strings, bools, and even tuples are immutable, but most other objects in Python, like lists and dicts, are mutable. This means that they can be modified in place‚Äîmodifying an object in one part of a program can cause it to be (unexpectedly) different in another part of the program. That makes mutable objects dangerous, and they are everywhere in Python.\n\nIn this article, you‚Äôll learn exactly why mutable objects can cause problems for Shiny reactivity, and techniques for solving them.\n\nThe problem\n\nLet‚Äôs first look at an example featuring (immutable) integer objects.\n\nInitially, b gets its value from a. Then, the value of a changes. This doesn‚Äôt affect b, which retains its original value.\n\nNow, what happens if a and b both point to the same (mutable) list object, and then we change that list in-place?\n\nIf our goal is to end up with a == [1, 2, 3] and b == [1, 2], then we‚Äôve failed.\n\nMutability can cause unexpected behavior in any Python program, but especially so in reactive programming. For example, if you modify a mutable object stored in a reactive.value, or one returned from a reactive.calc, other consumers of those values will have their values changed. This can cause two different problems. First, the altered value will probably be unexpected. Second, even if the change in value is expected and desired, it will not trigger downstream reactive objects to re-execute.\n\nSolutions\n\nThere are a few ways to fix this problem and end up with the results we want (b == [1, 2]).\n\nCopy on assignment\n\nThe first way is to avoid having two variables point to the same object in the first place, by copying the object every time you use it in a new context:\n\nCopy on update\n\nThe second way is to be disciplined about never mutating the object in question, but using methods and operators that create a copy. For example, there are two ways to add an item to an existing list: x.append(value) which mutates the existing list, as we saw above; and x + [value], which leaves the original list x unchanged and creates a new list object that has the results we want.\n\nThe advantage to this approach is not eagerly creating defensive copies all the time, as we must in the ‚Äúcopy on assignment‚Äù approach. However, if you are performing more updates than assignments, this approach actually makes more copies, plus it gives you more opportunities to slip up and forget not to mutate the object.\n\nPython operations that create copies\n\nWe‚Äôve seen that x + [value] creates a new list object and that x.copy() creates a new list object. There are some other common operations that create copies. You can use these patterns to avoid mutating reactive values in place.\n\n- List comprehensions: [x for x in a] creates a new list with the same elements as a. This approach is particularly useful when you need to transform the elements of a list in some way, as in [x*2 for x in a].\n- Slicing: a[:] creates a new list with the same elements as a. This is useful when you need to copy the entire list, or a subset of it.\n- Star operator: [*a, value] creates a new list with the same elements as a, with the additional value appended after them. This is an easy way to add a single element to the end or start of a list ([value, *a]).\n- Double star operator: {**a, key: value} creates a new dictionary with the same key-value pairs as a, with the additional key-value pair key: value added. This is an easy way to add a single key-value pair to a dictionary.\n\nList comprehensions: [x for x in a] creates a new list with the same elements as a. This approach is particularly useful when you need to transform the elements of a list in some way, as in [x*2 for x in a].\n\nSlicing: a[:] creates a new list with the same elements as a. This is useful when you need to copy the entire list, or a subset of it.\n\nStar operator: [*a, value] creates a new list with the same elements as a, with the additional value appended after them. This is an easy way to add a single element to the end or start of a list ([value, *a]).\n\nDouble star operator: {**a, key: value} creates a new dictionary with the same key-value pairs as a, with the additional key-value pair key: value added. This is an easy way to add a single key-value pair to a dictionary.\n\nUse immutable objects\n\nThe third way is to use a different data structure entirely. Instead of list, we will use tuple, which is immutable. Immutable objects do not provide any way to change their values ‚Äúin place‚Äù, even if we wanted to. Therefore, we can be confident that nothing we do to tuple variable a could ever affect tuple variable b.\n\nFor this simple example, a tuple was an adequate substitute for a list, but this won‚Äôt always be the case. The pyrsistent Python package provides immutable versions of several common data structures including list, dict, and set; using these objects in conjunction with reactive.value and reactive.calc is much safer than mutable versions.\n\nExamples in Shiny\n\nThe rest of this article demonstrates these problems, and their solutions, in the context of a minimal Shiny app.\n\nExample 1: Lack of reactive invalidation\n\nThis demo app demonstrates that when an object that is stored in a reactive.value is mutated, the change is not visible to the reactive.value and no reactive invalidation occurs. Below, the add_value_to_list effect retrieves the list stored in user_provided_values and appends an item to it.\n\nEach time the button is clicked, a new item is added to the list; but the reactive.value has no way to know anything has changed. (Surprisingly, even adding user_provided_values.set(values) to the end of add_value_to_list will not help; the reactive value will see that the identity of the new object is the same as its existing object, and ignore the change.)\n\nSwitching to the ‚Äúcopy on update‚Äù technique fixes the problem. The app below is identical to the one above, except for the body of add_value_to_list. Click on the button a few times‚Äìthe results now appear correctly.\n\nExample 2: Leaky changes\n\nLet‚Äôs further modify our example; now, we will output not just the values entered by the user, but also a parallel list of those values after being doubled. This example is the same as the last one, with the addition of the @reactive.calc called doubled_values, which is then included in the text output.\n\nIn the example below, if you click the button three times, you‚Äôd expect the user values to be [1, 1, 1] and the doubled values to be [2, 2, 2]. Click the button below three times. What values do you actually get?\n\nBy the third click, the user input that should be [1, 1, 1] is instead [4, 2, 1]! This is because doubled_values does its doubling by modifying the values of the list in place, causing these changes to ‚Äúleak‚Äù back into user_provided_values.\n\nWe could fix this by having doubled_values call user_provided_values().copy(). Or we can use a list comprehension, which creates a new list in the process. The second option is shown below.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\n\na = 1\nb = a\n\na += 1\nb",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\n\na = [1, 2]\nb = a\n\na.append(3)\nb",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\n\na = [1, 2]\nb = a.copy()\n\na.append(3)\nb",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\n\na = [1, 2]\nb = a\n\na = a + [3]\nb",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| components: [editor, cell]\n\na = (1, 2)\nb = a\n\na = (*a, 3)  # alternatively, a = a + (3,)\nb",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 250\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_numeric(\"x\", \"Enter a value to add to the list:\", 1)\nui.input_action_button(\"submit\", \"Add Value\")\n\n@render.code\ndef out():\n    return f\"Values: {user_provided_values()}\"\n\n# Stores all the values the user has submitted so far\nuser_provided_values =  reactive.value([])\n\n@reactive.effect\n@reactive.event(input.submit)\ndef add_value_to_list():\n    # WATCHOUT! This doesn't work as expected!\n    values = user_provided_values()\n    values.append(input.x())",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 250\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_numeric(\"x\", \"Enter a value to add to the list:\", 1)\nui.input_action_button(\"submit\", \"Add Value\")\n\n@render.code\ndef out():\n    return f\"Values: {user_provided_values()}\"\n\n# Stores all the values the user has submitted so far\nuser_provided_values =  reactive.value([])\n\n@reactive.effect\n@reactive.event(input.submit)\ndef add_value_to_list():\n    # This works by creating a new list object\n    user_provided_values.set(user_provided_values() + [input.x()])",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 250\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_numeric(\"x\", \"Enter a value to add to the list:\", 1)\nui.input_action_button(\"submit\", \"Add Value\")\n\n@render.code\ndef out():\n    return f\"User Values: {user_provided_values()}\\n\" + f\"Doubled: {doubled_values()}\"\n\n# Stores all the values the user has submitted so far\nuser_provided_values =  reactive.value([])\n\n@reactive.effect\n@reactive.event(input.submit)\ndef add_value_to_list():\n    user_provided_values.set(user_provided_values() + [input.x()])\n\n@reactive.calc\ndef doubled_values():\n    values = user_provided_values()\n    for i in range(len(values)):\n        values[i] *= 2\n    return values",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 250\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_numeric(\"x\", \"Enter a value to add to the list:\", 1)\nui.input_action_button(\"submit\", \"Add Value\")\n\n@render.code\ndef out():\n    return f\"User Values: {user_provided_values()}\\n\" + f\"Doubled: {doubled_values()}\"\n\n# Stores all the values the user has submitted so far\nuser_provided_values =  reactive.value([])\n\n@reactive.effect\n@reactive.event(input.submit)\ndef add_value_to_list():\n    user_provided_values.set(user_provided_values() + [input.x()])\n\n@reactive.calc\ndef doubled_values():\n    return [x*2 for x in user_provided_values()]"
    ]
  },
  {
    "id": "docs_express-vs-core_html",
    "url": "docs/express-vs-core.html",
    "title": "Express vs.¬†Core ‚Äì Shiny for Python",
    "description": "",
    "content": "- üìù Syntax modes\n- Express vs. Core\n\nExpress vs. Core\n\nShiny is one framework with two different syntax options: Shiny Express and Shiny Core. Up until now, these docs have focused on Shiny Express. In this section, we‚Äôll dig into the differences between the two, and why you might choose one or the other.\n\nDon‚Äôt worry, though. There is an enormous amount of overlap between the two, and the vast majority of apps will be well served by either Shiny Express or Shiny Core.\n\nAnd if you do decide to switch, the process is relatively straightforward‚Äîespecially in the direction of Express to Core, as the latter supports a superset of the former‚Äôs capabilities. We go into more detail on this in the transitioning article.\n\nBackground\n\nShiny for Python was unveiled in 2022 with a single syntax option, which we now call Shiny Core. It drew inspiration from the Shiny framework for R, which has been around for over a decade and is used by hundreds of thousands of data scientists around the world. Our goal was to make Shiny Core feel Pythonic, as opposed to a literal port of Shiny for R, but carry over the same core principles and tradeoffs.\n\nIn January 2024, we introduced Shiny Express as a second syntax option. Express is built on top of Core, and is designed to be extremely easy to write, while preserving most of the power and flexibility of Shiny.\n\nDifferences between Express and Core\n\nThe major differences between Shiny Express and Core are the following:\n\n- Slightly different import statements\n- Different organization of UI and server code\n- Implicit vs. explicit placement of outputs\n- Different syntax for UI containers\n\nLet‚Äôs examine each of these in more detail.\n\nImport statements\n\nA Shiny Core app file usually contains an import statement like:\n\nIn Shiny Express, you‚Äôll instead see:\n\nNote that both import ui and render, but from different places. While Express‚Äôs shiny.express.ui has almost all of the same UI functions as Core‚Äôs shiny.ui, their function signatures often differ slightly, to reflect Express‚Äôs different usage patterns. And the render functions‚Äîwell actually, they are identical right now, but we‚Äôre planning to add some Express-specific features to the shiny.express.render versions in the near future.\n\nMeanwhile, the reactive module is unchanged between Core and Express, as the two modes share the same reactive foundations.\n\nFinally, notice that Express also imports input from shiny.express. This isn‚Äôt needed in Core, because the input object is passed into the server function as an argument. Since Express has no server function, we made it an attribute of shiny.express.\n\nOrganization of UI and server code\n\nEvery Shiny Core app file has a UI section, and a server section; the two are separate and distinct.\n\nThe UI section consists of a single (potentially very long and deeply nested) expression, stored as a variable named app_ui by convention. The object this produces is actually simply HTML, which is sent to the browser when it first loads the app.\n\nThe server section is a function, named server by convention, that always takes the arguments input, output, and session. This function contains render functions and reactive functions, which are used to update the UI in response to user input.\n\nYou can think of the UI section as a template, with ui.output_xx() calls as placeholders for outputs, and the server section as the instructions for how to populate those outputs.\n\nIn Shiny Express, there isn‚Äôt this hard distinction between UI and server.\n\nInstead, everything coexists as top-level code in the app file: input components, layout directives, outputs (including their rendering logic), and reactive functions.\n\nAlso, you aren‚Äôt forced to combine your UI into a single complex object. You can use multiple UI objects, and they will be combined together by the framework.\n\nAgain, notice how greeting in this app does not have a corresponding call to output_code(\"greeting\"). This is because in Shiny Express, render functions implicitly add an output to the page as a side effect so you don‚Äôt need the output function.\n\nCore advantages\n\n- Because the UI structure is kept separate from the server, it is easier to read, reorder, and restructure. This advantage grows as app UIs grow larger.\n- Explicit server function declaration gives us a natural place to put code that should only execute at startup (top level) versus for each session (server function body). In contrast, in Express, all of the code in the app file is executed for each session.\n\nExpress advantages\n\n- It‚Äôs nice for beginners not to have to learn about the difference between UI and server.\n- Avoids having to write code in two different places for a single output, and having to make the IDs match up.\n- No need to write nested function declarations (i.e. functions inside the server function), which can be surprising to Python programmers.\n\nImplicit vs. explicit placement of outputs\n\nFor an output to appear in a Shiny app of any type, the framework needs to know two things: where it should go in the UI, and how it should be rendered.\n\nIn Shiny Core, this is done in two separate steps. In the UI, you create a placeholder for the output, using a function like ui.output_plot(\"plot1\"). Then, in the server, you create a rendering function, using a decorator like @render.plot, and name the function the same as the placeholder, like def plot1():.\n\nIn Shiny Express, this is done in a single step. You create a rendering function, using a decorator like @render.plot, and name the function however you like (as long as it‚Äôs unique). The framework automatically creates a placeholder in the UI where the function is defined.\n\nCore advantages\n\n- Moving an output from one place in the UI to another is as simple as moving the corresponding placeholder function.\n- The ui.output_xx() functions currently have some additional arguments that allow you to customize the output‚Äôs behavior, like enabling plot brushing (with ui.output_plot(\"plot1\", brush=True)). This is not as natural in Express, though workarounds do exist‚Äîsee the next article.\n\nExpress advantages\n\n- No need to carefully match the names of placeholders and rendering functions.\n\nDifferent syntax for UI containers\n\nBroadly speaking, there are two kinds of UI components in Shiny: container components, which, as the name suggests, can contain other components, and non-container components, which cannot. (You can also think of the UI as a tree data structure: container components have children, while non-container components are leaf nodes in the tree.)\n\nHere are some examples of container components:\n\n- ui.sidebar()\n- ui.card()\n- ui.layout_columns()\n- ui.div()\n\nHere are some examples of non-container components:\n\n- ui.input_text()\n- ui.output_plot()\n\nIn Shiny Core, to put a component inside of a container, you nest the function calls, like ui.sidebar(ui.input_text()).\n\nBy contrast, in Shiny Express, container components like ui.sidebar() are context managers, and used via with statements. Their child components go within the with block.\n\nCore advantages\n\n- Passing children as arguments is beautifully simple and robust from a programming perspective.\n- Containers and non-containers behave very similarly (in fact, non-containers act no different than containers with no children).\n- All of the Core UI components are simple value-returning functions, without side effects. This makes them easy to compose, reuse, refactor, inspect, and test.\n\nExpress advantages\n\n- The with block syntax is more forgiving to write, as you don‚Äôt need to separate elements with commas. (Every Shiny Core app author has probably seen the ‚ÄúPerhaps you forgot a comma?‚Äù error message many times.)\n- You can put arbitrary Python code inside with blocks, including loops, conditionals, import statements, function definitions, reactive functions, and output rendering functions. (In Core, you are limited to Python expressions that generate UI.)\n\nIn unusual situations, you might want to create HTML content that doesn‚Äôt use context managers. HTML tag functions, like div() and span() can actually be used as context managers or as regular functions, so the following are equivalent:\n\nMore complex component functions, such as ui.sidebar() and ui.card(), can only be used as context managers in Shiny Express.\n\n",
    "code_examples": [
      "from shiny import App, reactive, render, ui",
      "from shiny import App, reactive, render, ui",
      "from shiny import reactive\nfrom shiny.express import input, render, ui",
      "from shiny import reactive\nfrom shiny.express import input, render, ui",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n# Core\nfrom shiny import App, reactive, render, ui\nfrom datetime import datetime\n\napp_ui = ui.page_fixed(\n    ui.h1(\"Title\"),\n    ui.output_code(\"greeting\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def time():\n        reactive.invalidate_later(1)\n        return datetime.now()\n\n    @render.code\n    def greeting():\n        return f\"Hello, world!\\nIt's currently {time()}.\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n# Express\nfrom shiny import reactive\nfrom shiny.express import render, ui \nfrom datetime import datetime\n\nui.h1(\"Title\")\n\n@reactive.calc\ndef time():\n    reactive.invalidate_later(1)\n    return datetime.now()\n\n@render.code\ndef greeting():\n    return f\"Hello, world!\\nIt's currently {time()}.\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n# Core\nfrom shiny import ui, render, App\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_text(\"txt_in\", \"Type something here:\"),\n        open=\"always\",\n    ),\n    ui.card(\n        ui.output_code(\"result\"),\n    )\n)\n\ndef server(input, output, session):\n    @render.code\n    def result():\n        return f\"You entered '{input.txt_in()}'.\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n# Express\nfrom shiny.express import input, render, ui\n\nwith ui.sidebar():\n    ui.input_text(\"txt_in\", \"Type something here:\")\n\nwith ui.card():\n    @render.code\n    def result():\n        return f\"You entered '{input.txt_in()}'.\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n# Express\nfrom shiny.express import ui\n\nwith ui.div():\n    with ui.pre(style=\"background-color: #eff;\"):\n        \"Hello!\"\n\nui.div(\n    ui.pre(\n        \"Hello!\",\n        style=\"background-color: #eff;\",\n    ),\n)"
    ]
  },
  {
    "id": "docs_express-or-core_html",
    "url": "docs/express-or-core.html",
    "title": "Choosing a syntax ‚Äì Shiny for Python",
    "description": "",
    "content": "- üìù Syntax modes\n- Choosing a syntax\n\nChoosing a syntax\n\nNow that you are familiar with the differences between Shiny Express and Shiny Core, you might be wondering how to choose between them.\n\nIn this article, we‚Äôll suggest some guidelines, but it‚Äôs important to note that there are not many hard and fast rules. There is a lot of overlap between the capabilities of the two syntaxes, so feel free to choose whichever feels more natural and comfortable for you.\n\nShiny Express is designed to get you up and running as quickly as possible. It‚Äôs also designed to let you author your app with a minimum of boilerplate. As a result, it really shines in the early stages of both the learning journey and the lifecycle of an app.\n\nCompared to Express, Core enforces a more structured approach that requires more initial effort to use. However, that investment has its own payoff.\n\nThe bulk of the rest of this article will focus on the advantages of Shiny Core. This isn‚Äôt because we think it‚Äôs better, but because Shiny Express‚Äôs advantages‚Äîbeing more approachable and more concise‚Äîare fairly self-evident, while Shiny Core‚Äôs advantages are more subtle.\n\nMaintainability\n\nConsider using Shiny Core if you are building a large or long-lived app.\n\nThe most important difference between the two syntaxes is that Express allows you to intermingle UI and server code, while Core requires you to separate them. The separation that Core requires can feel inconvenient while adding features to your app, as each new output requires you to edit two different places in your app.py file.\n\nBut for larger and longer-lived apps, Shiny Core‚Äôs more opinionated approach becomes an advantage. It is much easier to add, remove, or relocate pieces of your UI when all of its code is in one place, with no server code to confuse things. Similarly, when you‚Äôre trying to understand the relationship between a reactive calculation and some outputs, it‚Äôs much easier to do so when you don‚Äôt have intermingled UI code in the way.\n\nAt the bottom of this page, you‚Äôll find a Shiny Core version of the dashboard app from the Essentials section of this guide. Compare their respective source code, and consider:\n\n- Which version makes the structure of the UI more obvious?\n- Which version would make you more confident in moving UI elements around?\n- Which version makes it easier to understand the reactive calcs and outputs?\n- Imagine you were picking up an app that had been written a year ago by someone else. Which version would you prefer?\n\nFeature set\n\nConsider using Shiny Core if you need to use Shiny Modules or dynamic UI.\n\nAt this time, Shiny Core‚Äôs functionality is a superset of Express, meaning that anything you can do in Express, you can also do in Core. However, the reverse is not true.\n\nMost importantly, Shiny Modules are supported in Shiny Core but not (yet) in Shiny Express. Shiny Modules are extremely useful for organizing large apps into smaller, more manageable pieces, and are also a mechanism for reusing Shiny application logic.\n\nShiny Core also has ui.insert_ui() and ui.remove_ui() functions, which is a way to imperatively add or remove UI elements from the app at any time. Despite being available in shiny.express.ui, these functions do not currently work well with Shiny Express. The same goes for ui.modal_show().\n\nMaturity\n\nConsider using Shiny Core if you care more about maturity and stability than convenience.\n\nGiven its longer history, Shiny Core is naturally more mature than Shiny Express in both syntax and implementation.\n\nWe‚Äôve carefully designed the Shiny Express syntax, and hope not to have to make breaking changes to it. However, we don‚Äôt know what we don‚Äôt know, and it‚Äôs possible that user feedback or our own testing will someday require us to make significant changes.\n\nSimilarly, we are constantly testing Shiny Express, but as of this writing, it has not has as much real-world use as Shiny Core. Therefore, with Shiny Core, you are less likely to encounter bugs.\n\nFamiliarity to R users\n\nConsider using Shiny Core if you are an R user who is already familiar with Shiny.\n\nWhile Shiny Core is not a literal translation of Shiny for R, it is much closer to it than Shiny Express. The UI/server separation, the nested UI function calls, the matching of output IDs to render functions, are all going to feel very natural to experienced Shiny for R app authors.\n\nAppendix\n\nThe following is the dashboard application from the Essentials section of this guide, rewritten using Shiny Core. Compare it to the original.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\nimport faicons as fa\nimport plotly.express as px\nfrom shinywidgets import output_widget, render_plotly\n\nfrom shiny import App, reactive, render, req, ui\n\n# Load data and compute static values\ntips = px.data.tips()\nbill_rng = (min(tips.total_bill), max(tips.total_bill))\n\nICONS = {\n    \"user\": fa.icon_svg(\"user\", \"regular\"),\n    \"wallet\": fa.icon_svg(\"wallet\"),\n    \"currency-dollar\": fa.icon_svg(\"dollar-sign\"),\n    \"gear\": fa.icon_svg(\"gear\")\n}\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_slider(\"total_bill\", \"Bill amount\", min=bill_rng[0], max=bill_rng[1], value=bill_rng, pre=\"$\"),\n        ui.input_checkbox_group(\"time\", \"Food service\", [\"Lunch\", \"Dinner\"], selected=[\"Lunch\", \"Dinner\"], inline=True),\n        ui.input_action_button(\"reset\", \"Reset filter\"),\n    ),\n    ui.layout_columns(\n        ui.value_box(\n            \"Total tippers\",\n            ui.output_ui(\"total_tippers\"),\n            showcase=ICONS[\"user\"],\n            showcase_layout=\"left center\",\n        ),\n        ui.value_box(\n            \"Average tip\",\n            ui.output_ui(\"average_tip\"),\n            showcase=ICONS[\"wallet\"],\n            showcase_layout=\"left center\",\n        ),\n        ui.value_box(\n            \"Average bill\",\n            ui.output_ui(\"average_bill\"),\n            showcase=ICONS[\"currency-dollar\"],\n            showcase_layout=\"left center\",\n        ),\n        fill=False,\n    ),\n    ui.layout_columns(\n        ui.card(\n            ui.card_header(\"Tips data\"),\n            ui.output_data_frame(\"table\"),\n            full_screen=True,\n        ),\n        ui.card(\n            ui.card_header(\n                \"Total bill vs tip\",\n                ui.popover(\n                    ICONS[\"gear\"],\n                    ui.input_radio_buttons(\n                        \"scatter_color\", None,\n                        [\"none\", \"sex\", \"smoker\", \"day\", \"time\"],\n                        inline=True,\n                    ),\n                    title=\"Add a color variable\",\n                    placement=\"top\",\n                ),\n                class_=\"d-flex justify-content-between align-items-center\"\n            ),\n            output_widget(\"scatterplot\"),\n            full_screen=True,\n        ),\n        ui.card(\n            ui.card_header(\n                \"Tip percentages\",\n                ui.popover(\n                    ICONS[\"gear\"],\n                    ui.input_radio_buttons(\n                        \"tip_perc_y\", \"Split by:\",\n                        [\"sex\", \"smoker\", \"day\", \"time\"],\n                        selected=\"day\",\n                        inline=True,\n                    ),\n                    title=\"Add a color variable\",\n                ),\n                class_=\"d-flex justify-content-between align-items-center\",\n            ),\n            output_widget(\"tip_perc\"),\n            full_screen=True,\n        ),\n        col_widths=[6, 6, 12],\n    ),\n    title=\"Restaurant tipping\",\n    fillable=True,\n)\n\ndef server(input, output, session):\n\n    # --------------------------------------------------------\n    # Reactive calculations and effects\n    # --------------------------------------------------------\n\n    @reactive.calc\n    def tips_data():\n        bill = input.total_bill()\n        idx1 = tips.total_bill.between(bill[0], bill[1])\n        idx2 = tips.time.isin(input.time())\n        return tips[idx1 & idx2]\n\n    @reactive.effect\n    @reactive.event(input.reset)\n    def _():\n        ui.update_slider(\"total_bill\", value=bill_rng)\n        ui.update_checkbox_group(\"time\", selected=[\"Lunch\", \"Dinner\"])\n\n    # --------------------------------------------------------\n    # Outputs\n    # --------------------------------------------------------\n\n    @render.ui\n    def total_tippers():\n        return tips_data().shape[0]\n\n    @render.ui\n    def average_tip():\n        d = tips_data()\n        req(d.shape[0] > 0)\n        perc = d.tip / d.total_bill\n        return f\"{perc.mean():.1%}\"\n\n    @render.ui\n    def average_bill():\n        d = tips_data()\n        req(d.shape[0] > 0)\n        bill = d.total_bill.mean()\n        return f\"${bill:.2f}\"\n\n    @render.data_frame\n    def table():\n        return render.DataGrid(tips_data())\n\n\n    @render_plotly\n    def scatterplot():\n        color = input.scatter_color()\n        return px.scatter(\n            tips_data(),\n            x=\"total_bill\",\n            y=\"tip\",\n            color=None if color == \"none\" else color,\n            trendline=\"lowess\"\n        )\n\n    @render_plotly\n    def tip_perc():\n        from ridgeplot import ridgeplot\n        dat = tips_data().copy()\n        dat.loc[:, \"percent\"] = dat.tip / dat.total_bill\n        yvar = input.tip_perc_y()\n        uvals = dat[yvar].unique()\n\n        samples = [\n            [ dat.percent[dat[yvar] == val] ]\n            for val in uvals\n        ]\n\n        plt = ridgeplot(\n            samples=samples, labels=uvals, bandwidth=0.01,\n            colorscale=\"viridis\", colormode=\"row-index\"\n        )\n\n        plt.update_layout(\n            legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"center\", x=0.5)\n        )\n\n        return plt\n\napp = App(app_ui, server)\n\n## file: requirements.txt\nridgeplot==0.1.25"
    ]
  },
  {
    "id": "docs_express-in-depth_html",
    "url": "docs/express-in-depth.html",
    "title": "Express in depth ‚Äì Shiny for Python",
    "description": "",
    "content": "- üìù Syntax modes\n- Express in depth\n\nExpress in depth\n\nShiny Express has a simple syntax that makes it easy to get started. But achieving this outer simplicity requires some inner complexity. As your usage of Shiny Express becomes more advanced, you may start to encounter some of this complexity.\n\n(In comparison, Shiny Core requires slightly more effort to learn and to write, but is more predictable and easier to reason about.)\n\nThis article peels back the curtain on Shiny Express, and reveals some of the hurdles you may run into as your apps grow. Where possible, we‚Äôve added utilities and techniques to deal with these issues.\n\nIt‚Äôs our hope that after reading this article, you‚Äôll have a far more complete mental model of how Shiny Express works, and be able to write more advanced apps with less friction. That being said, if you spend a lot of time using these advanced Express features, you may want to consider switching to Shiny Core.\n\nThe following information is organized into two broad topics: Programming UI and Shared objects.\n\nProgramming UI\n\nLet‚Äôs start with an unremarkable bit of Shiny Express UI code: one card container, with a heading tag and a string inside.\n\nNow let‚Äôs say we want to add a second card.\n\nThat works. But as good programmers, we don‚Äôt like to repeat ourselves. So we‚Äôll follow programming best practices and refactor that UI logic into a function:\n\nUh oh, that doesn‚Äôt look right. Such a simple and obviously correct refactor, yet the cards are now empty!\n\nInteractive mode vs script mode\n\nTo understand why, you first need to know that the Python interpreter has two different ways of executing code: interactive mode and script mode.\n\nIf you‚Äôve been using Python for a while, you intuitively understand these modes, even if you‚Äôve never stopped to think about it. If you run python and type \"hello\" into the prompt, you‚Äôll see hello printed back to you. But if you create a script.py file containing \"hello\" and run python script.py, you won‚Äôt see anything printed.\n\nIn interactive mode, the Python interpreter automatically prints the result of each expression; in script mode, print() must be called explicitly.\n\nShiny Express executes your app.py file in interactive mode, not script mode. Even though you‚Äôre not at an interactive prompt, it still ‚Äúprints‚Äù the result of each expression. Now, it doesn‚Äôt literally use the print() function‚Äîthat would just print text to the console‚Äîbut a lower-level function in Python called sys.displayhook that is designed to be overridden by frameworks like Shiny (and Jupyter, incidentally).\n\nThis is so important that we‚Äôll repeat it: Shiny Express executes your app.py file in interactive mode, which automatically calls sys.displayhook() on each expression.\n\nThat‚Äôs why, in our simple examples above, a bare string like \"470-399 BC\" gets printed to the screen. If Shiny Express was executed in script mode (like Shiny Core is, by the way), you‚Äôd have to rewrite it as:\n\nto get the string to appear in the UI. Gross.\n\nFunctions in interactive mode\n\nOne important aspect of interactive mode is that only top-level expressions are printed. If you define a function in interactive mode, the expressions that make it up are not automatically printed.\n\nNow that you understand that Shiny Express executes in interactive mode, you can see why our person() function doesn‚Äôt work. The UI code in the body of the person() function isn‚Äôt automatically printed because it‚Äôs not at the top level.\n\nYou could fix this by calling sys.displayhook on each UI element.\n\nOK, it works, but that‚Äôs pretty gross. Is there a better way to fix this problem?\n\nThe answer is yes, but before we get to that, let‚Äôs take a step back and restate what we‚Äôve learned so far.\n\n- You can call sys.displayhook() to tell Shiny Express to display something.\n- Shiny Express executes app.py in interactive mode, not script mode.\n- In interactive mode, only top-level expressions are displayed, not expressions in function bodies.\n\nNow let‚Äôs see where this approach causes problems, and how we can solve them. We‚Äôll start with the person() function we just tried to write.\n\nProblem: Writing UI generating functions\n\nWe want to write functions that generate UI, and we don‚Äôt want to have to call sys.displayhook() by hand.\n\nSolution: @expressify decorator\n\nApply the @expressify decorator to a function to tell Shiny Express that the function body should be executed in interactive mode. Think of it as rewriting the function body so that sys.displayhook() wraps every expression.\n\nShiny Core doesn‚Äôt need an @expressify decorator because it does not rely on interactive mode and never calls sys.displayhook anyway. Instead, UI functions are just normal functions that happen to return UI objects.\n\nProblem: Collect UI code into a variable\n\nSometimes we have a need to generate UI for some purpose other than directly displaying it. For example, we might want to save it to be displayed later, or multiple times.\n\nThis works OK for simple objects like strings (naturally) and even non-container UI elements‚Äîyou can simply store them as variables, and that works. But in the examples above, we‚Äôre using with ui.card():, and you can‚Äôt store a with statement in a variable.\n\nYou also cannot use with ui.card() as x: syntax, because UI context managers like ui.card() don‚Äôt yield anything, for reasons we‚Äôll get to in a moment.\n\nIt looks for a moment like it worked, but no, it didn‚Äôt; instead of displaying the card three times, it displayed it once. That‚Äôs because leaving the with ui.card(): context immediately displays the entire card, and then the x is just assigned a None value, which doesn‚Äôt display anything.\n\nSolution: ui.hold() context manager\n\nThe ui.hold() context manager allows you to collect UI code into a variable.\n\nIn this case, it‚Äôs just a single card, but there‚Äôs no limit to how much or how little UI you can nest under ui.hold().\n\nIn Shiny Core, UI objects are just normal objects, so you can assign them to variables no differently than you would an integer or a list.\n\nProblem: Reactively rendering UI\n\nSo far, all of the UI we‚Äôve generated has been ‚Äústatic‚Äù‚Äîit‚Äôs generated once, when the page loads, and never changes. It‚Äôs pretty common in Shiny to want to generate UI in response to user input or server events.\n\nWe can do this in Shiny Express by using the @render.ui decorator, which expects a function that returns a UI object. We can combine @expressify and ui.hold() to make this work. (Spoiler alert: we‚Äôre just setting up a strawman solution here, we‚Äôll get to the ‚Äúright‚Äù way in a moment.)\n\nThat does work; change the name or year inputs, and the card updates. But it‚Äôs way more boilerplate than we‚Äôd like.\n\nSolution: @render.express decorator\n\nThe @render.express decorator is a shorthand for that combination of @render.ui + @expressify + ui.hold. You can just think of it as ‚Äúreactively render a chunk of Express code‚Äù.\n\nIt‚Äôs almost anticlimactically simple to use, considering how much explaining we had to do to get here.\n\nIn Shiny Core, you should use @render.ui and skip @expressify or ui.hold()‚Äîthey‚Äôre not needed. Instead, your render function would return a UI object directly.\n\nProblem: Display causes a TypeError\n\nWhen Express currently raises an error when attempting to display an object that is not a valid UI object. This can surface in suprising ways, for example, when calling a function to perform a side-effect (like logging) which returns an unknown class of object.\n\nSolution: Assign to a variable\n\nIn Express, you can assign the result of a function call to a variable to prevent displaying it, so you can use it to work around this issue.\n\nSummary\n\n- When writing a function that contains Shiny Express UI code, always decorate it with @expressify. This tells Python to execute the function body in interactive mode, which is necessary for the UI to be displayed.\n- If you want to collect UI into a variable instead of displaying it, wrap it in a with ui.hold() as var_name: block.\n- If you want to reactively render UI, decorate the function with @render.express.\n\nShared objects\n\nFor better performance, it‚Äôs often useful to have some code run once when the app initializes, not every time a new connection (i.e., session) is made. All of the code in a Shiny Express app.py file is re-executed every time a new connection is made, so it‚Äôs not a good place to do expensive work that only needs to be done once.\n\nFortunately, if you move expensive code to a separate module, it will only be executed once (and objects can then be shared across sessions).\n\nIn Shiny Core, code outside of the server function scope runs once per startup (not per user session). See the code below for the equivalent Shiny Core app.\n\nIt‚Äôs also possible to share reactive objects across sessions. This can be potentially dangerous since one users activity could impact another‚Äôs, but also quite useful in combination reactive.file_reader and reactive.poll to create a reactive data source that‚Äôs only polled once, no matter how many users are connected.\n\nSessions\n\nShiny apps have an object that represent a particular user‚Äôs session. This object is useful for a variety of more advanced tasks like sending messages to the client and serving up session-specific data. In Express, you‚Äôll need to import session from shiny.express and only use it inside a reactive function, like a @reactive.effect:\n\nIn Shiny Core, the session object is available through server function, and can be used anywhere in the server function scope.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import ui\n\nwith ui.card(class_=\"mt-3\"):\n    ui.h3(\"Socrates\")\n    \"470-399 BC\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import ui\n\nwith ui.card(class_=\"mt-3\"):\n    ui.h3(\"Socrates\")\n    \"470-399 BC\"\n\nwith ui.card(class_=\"mt-3\"):\n    ui.h3(\"Immanuel Kant\")\n    \"1724-1804\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import ui\n\ndef person(name, years):\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(name)\n        years\n\nperson(\"Socrates\", \"470-399 BC\")\nperson(\"Immanuel Kant\", \"1724-1804\")",
      "sys.displayhook(\"470-399 BC\")",
      "sys.displayhook(\"470-399 BC\")",
      ">>> def foo():\n...     \"470-399 BC\"\n...\n>>> foo()\n>>>",
      ">>> def foo():\n...     \"470-399 BC\"\n...\n>>> foo()\n>>>",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nimport sys\nfrom shiny.express import ui\n\ndef person(name, years):\n    with ui.card(class_=\"mt-3\"):\n        sys.displayhook(ui.h3(name))\n        sys.displayhook(years)\n\nperson(\"Socrates\", \"470-399 BC\")\nperson(\"Immanuel Kant\", \"1724-1804\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, ui\n\n@expressify\ndef person(name, years):\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(name)\n        years\n\nperson(\"Socrates\", \"470-399 BC\")\nperson(\"Immanuel Kant\", \"1724-1804\")",
      ">>> x = with ui.card():\n  File \"<stdin>\", line 1\n    x = with ui.card():\n        ^^^^\nSyntaxError: invalid syntax",
      ">>> x = with ui.card():\n  File \"<stdin>\", line 1\n    x = with ui.card():\n        ^^^^\nSyntaxError: invalid syntax",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, ui\n\nwith ui.card(class_=\"mt-3\") as x:\n    ui.h3(\"Socrates\")\n    \"470-399 BC\"\n\nx\nx\nx",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, ui\n\nwith ui.hold() as x:\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(\"Socrates\")\n        \"470-399 BC\"\n\nx\nx\nx",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, input, render, ui\n\nui.input_text(\"name\", \"Name\", \"Socrates\")\nui.input_text(\"years\", \"Years\", \"470-399 BC\")\n\n@render.ui\n@expressify\ndef person():\n    with ui.hold() as result:\n        with ui.card(class_=\"mt-3\"):\n            ui.h3(input.name())\n            input.years()\n    return result",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\nfrom shiny.express import expressify, input, render, ui\n\nui.input_text(\"name\", \"Name\", \"Socrates\")\nui.input_text(\"years\", \"Years\", \"470-399 BC\")\n\n@render.express\ndef person():\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(input.name())\n        input.years()",
      "from shiny.express import session\n\nsession.on_ended(lambda: \"Session ended!\")",
      "from shiny.express import session\n\nsession.on_ended(lambda: \"Session ended!\")",
      "TypeError: Invalid tag item type: <class 'function'>. Consider calling str() on this value before treating it as a tag item.",
      "TypeError: Invalid tag item type: <class 'function'>. Consider calling str() on this value before treating it as a tag item.",
      "from shiny.express import session\n\n_ = session.on_ended(lambda: \"Session ended!\")",
      "from shiny.express import session\n\n_ = session.on_ended(lambda: \"Session ended!\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 120\n\nfrom shiny.express import render\nimport shared\n# Runs once per session\n@render.data_frame\ndef df():\n    return shared.df\n\n## file: shared.py\n# Runs once per startup\nimport pandas as pd\nfrom pathlib import Path\ndf = pd.read_csv(Path(__file__).parent / \"data.csv\")\n## file: data.csv\ncol1,col2\n1,2\n3,4",
      "from shiny import App, render, ui\nimport pandas as pd\nfrom pathlib import Path\n\ndf = pd.read_csv(Path(__file__).parent / \"data.csv\") # Read in once\n\napp_ui = ui.page_fixed(ui.output_data_frame(\"dat\"))\n\ndef server(input, output, session):\n    @render.data_frame\n    def dat():\n        # Returned to each session\n        return df\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\nimport pandas as pd\nfrom pathlib import Path\n\ndf = pd.read_csv(Path(__file__).parent / \"data.csv\") # Read in once\n\napp_ui = ui.page_fixed(ui.output_data_frame(\"dat\"))\n\ndef server(input, output, session):\n    @render.data_frame\n    def dat():\n        # Returned to each session\n        return df\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 75\nfrom shiny import reactive\nfrom shiny.express import session, ui\n\n@reactive.effect\nasync def _():\n    x = {\"message\": \"Hello from Python!\"}\n    await session.send_custom_message(\"send_alert\", x)\n\nui.tags.script(\n    \"\"\"\n    Shiny.addCustomMessageHandler(\"send_alert\", function(x) {\n        document.body.innerHTML = x.message;\n    });\n    \"\"\"\n)"
    ]
  },
  {
    "id": "docs_express-to-core_html",
    "url": "docs/express-to-core.html",
    "title": "Transition to Core ‚Äì Shiny for Python",
    "description": "",
    "content": "- üìù Syntax modes\n- Transition to Core\n\nTransition to Core\n\nThis article digs into the syntax differences translation Express and Core apps as well as a translation guide to help you move from Express to Core.\n\nThe quickest way to tell whether an app is an Express app is the presence of shiny.express in the import statements. Common Express imports like from shiny.express import ui, input highlight the main difference from Core: expression of user interfaces (ui) and where input values come from. You‚Äôll also commonly see Core imports like from shiny import reactive in Express apps, highlighting the fact that things like reactivity work the same way in both modes.\n\nTo dig into more specifics, consider the following app that just displays a slider value, and notice the following:\n\n- Core requires an App() object, which in turn requires a UI definition and server function.\n- Core UI starts with a ui.page_*() call to create a page layout. It also requires output containers (i.e., ui.output_*()) in the UI with ids that match the corresponding render function. In Express, these page and output containers are implicit.1\n\n- In Express, these page and output containers are implicit.1\n\n- Core\n- Express\n\nNow, suppose we add a UI component that takes other components as children, like ui.layout_columns(). In Core, this is done by nesting pure function calls. However, in Express, UI components that take other UI components as children are context managers, so we use with statements instead.\n\n- Core\n- Express\n\nTerminal UI components (e.g. ui.input_slider()); that is, components that usually don‚Äôt take other UI components as children, are not context managers in Express.\n\nIn Express, HTML tags can be used as both context managers and/or pure functions. For example, ui.div(ui.h1(\"Hello world!\")) is also equivalent to with ui.div(): ui.h1(\"Hello world!\").\n\nTranslation guide\n\nWhen translating an Express app to Core, the following steps are recommended:\n\n- Replace Express imports with Core imports (e.g., from shiny.express import ui -> from shiny import ui).\n- Add from shiny import App.\n- Add the following just below the imports:\n\n- Then, start moving the ‚Äútop-level‚Äù Express logic into the UI/server:\n\n- Identify @render and @reactive functions and move them inside server function.\n- Add ui.output_*() containers to app_ui for each @render function.\n- Move ui components (i.e., inputs and layout) and move them inside the app_ui. Remember that, in Core, layout components like ui.layout_columns() are pure functions, not context managers.\n- If your Express app has top-level ui.sidebar() and/or ui.nav_panel() components, you‚Äôll need to also change ui.page_fixed() to ui.page_sidebar()/ui.page_navbar().\n\n- Remember that, in Core, layout components like ui.layout_columns() are pure functions, not context managers.\n\nFootnotes\n\n- In Express, page layout options can be controlled via ui.page_opts() and (at least some, for now) output containers can be controlled through their respective @render.*() decorators.‚Ü©Ô∏é\n\nIn Express, page layout options can be controlled via ui.page_opts() and (at least some, for now) output containers can be controlled through their respective @render.*() decorators.‚Ü©Ô∏é\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(\n    ui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50),\n    ui.output_text_verbatim(\"slider_val\")\n)\n\ndef server(input, output, session):\n    @render.text\n    def slider_val():\n        return f\"Slider value: {input.val()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50)\n\n@render.text\ndef slider_val():\n    return f\"Slider value: {input.val()}\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(\n    ui.layout_columns(\n      ui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50),\n      ui.output_text_verbatim(\"slider_val\")\n    )\n)\n\ndef server(input, output, session):\n    @render.text\n    def slider_val():\n        return f\"Slider value: {input.val()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\nwith ui.layout_columns():\n    ui.input_slider(\"val\", \"Slider label\", min=0, max=100, value=50)\n\n    @render.text\n    def slider_val():\n        return f\"Slider value: {input.val()}\"",
      "app_ui = ui.page_fixed(\n    # static UI here\n)\n\ndef server(input, output, session):\n    # render/reactive logic here\n    ...\n\napp = App(app_ui, server)",
      "app_ui = ui.page_fixed(\n    # static UI here\n)\n\ndef server(input, output, session):\n    # render/reactive logic here\n    ...\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "docs_modules_html",
    "url": "docs/modules.html",
    "title": "Shiny Modules ‚Äì Shiny for Python",
    "description": "",
    "content": "- üì¶ Modules\n- Shiny Modules\n\nShiny Modules\n\nIntroduction\n\nShiny‚Äôs execution model allows you to write large applications that render quickly for the user. However, as your application grows in complexity, your code base can become difficult to understand or maintain. While it‚Äôs easy to write a small application without worrying too much about the quality of your code, as your application grows, you need to think more carefully about how your code is organized. Writing modules in Shiny is the best strategy for organizing a large Shiny code base. With modules, you can break your application into small pieces that can be reasoned about separately and composed to build larger applications. This article explains the basics of why we need modules and how to use them, and the next article explains how to communicate between modules.\n\nNote that while Shiny modules are analogous to Python modules, they are not the same. Python modules are a generic way to organize objects in a namespace, while Shiny modules are used to encapsulate reactive components in a namespace.\n\nModules are supported in Shiny Express apps as of version 0.10.0.\n\nFunctions in Shiny\n\nOne of the most important things you can do to improve your code quality is to extract a piece of logic into a function. Using functions allows you to keep the logic in one place, which makes it easier to understand and harder to make mistakes. Functions also allow you to define local variables within the function‚Äôs scope, which helps you avoid naming conflicts with the global environment.\n\nWhile many people are comfortable using functions in their day-to-day programming activities, they often forget to use them when building user interfaces, but functions are just as powerful in this context as they are in any other. To use functions in your Shiny UI, all you have to do is write a function that returns a valid UI element. For example, let‚Äôs imagine you had a bunch of sliders which mostly had the same values:\n\n- Express\n- Core\n\nThis code has a lot of repetition which makes it difficult to manage. For example if we wanted to change the maximum value of all of those sliders we would need to make five changes instead of one. Instead of tolerating this repetition, we can create a function which returns an ui.input_slider, and call that function with different ids. You can use this function in combination with list comprehension to further reduce repetition in your code.\n\n- Express\n- Core\n\n- Using a function\n- Iterating across a list\n- Iterating across two lists\n\nA simple function cleans up your code, but still requires multiple calls to that function.\n\nList comprehension allows you to apply a ui-generating function to a list of ids.\n\nFor more complicated functions you can use the zip function to turn multiple lists into a list of tuples which allows you to use list comprehension to generate UI elements.\n\n- Using a function\n- Iterating across a list\n- Iterating across two lists\n\nA simple function cleans up your code, but still requires multiple calls to that function.\n\nList comprehension allows you to apply a ui-generating function to a list of ids.\n\nFor more complicated functions you can use the zip function to turn multiple lists into a list of tuples which allows you to use list comprehension to generate UI elements.\n\nWhy do we need modules?\n\nUsing functions in this way is a great way to improve your application code, but it has two main problems. First, while we‚Äôre able to use locally scoped variables within the function, each input or output ID needs to be unique across the entire Shiny application. For example, consider this function which returns two UI elements:\n\n- Express\n- Core\n\nThe io_row() function works fine in this case, but if you try to use it more than once, your app will not render properly. The reason is that Shiny requires all IDs in the UI to be unique, and if we call this function more than once, there will be several elements with the text_input id and several elements with the text_output id. When that happens, Shiny doesn‚Äôt know how to connect particular inputs to particular outputs.\n\nOne possible way to address this is to add a prefix argument to our function and append that to the ids of all the returned elements. (Note that this can be done with Shiny Core applications, but is difficult to do with Shiny Express.)\n\nModules solve these problems by encapsulating both the UI and server logic in their own namespace. A module namespace can be thought of as a container for a module‚Äôs code, and helps to keep the module‚Äôs variables, functions, and classes separate from those in other modules. This separation prevents naming conflicts and makes the code easier to understand and manage. A namespace is a unique identifier that Shiny assigns to each instance of a module to keep its input and output IDs separate from the IDs of other instances and from the rest of the Shiny application.\n\nHow to use modules\n\nThere are two sides to modules: creating them, and using them. Each side can be done with Shiny Express or Shiny Core syntax. If a module is written with Core syntax, it can be used in an Express app, and vice versa. In the examples below, we‚Äôll create and use a module using the same type of syntax, but they can work interchangeably.\n\n- Express\n- Core\n\nTo create a module with Shiny Express, use the @module decorator on a function that takes input, output, and session as parameters. It can also accept additional parameters. In the example below, it takes one extra parameter, named placeholder.\n\nThe signature of this function, with input, output, and session is the same as a the server function in a Shiny Core app.\n\nTo use the module, just call the decorated function with a first parameter which is the ID,\n\nOne thing you might have noticed is that when we call the decorated function, we just pass a namespace ID string to it ‚Äì we don‚Äôt pass in input, output, and session. This is because the @module decorator wraps the function so that those three parameters are hidden from the caller, and requires an ID to be passed in.\n\nFor example if your function‚Äôs signature looks like this:\n\nThen after it‚Äôs wrapped by the decorator, it looks like this from the outside (but note that id is a positional-only parameter):\n\nIf you want your module to take additional parameters, you can just add them on to the function. In the example below, we‚Äôve add another parameter named placeholder.\n\nAt their core, modules are just functions and so anything you can do with a function you can also do with a module. Modules can take any argument, and can return any value to the caller. Modules usually include both UI and server elements which work together to encapsulate a part of your application, and the module UI and server work exactly the same way they do in a regular Shiny application.\n\nThe UI part of the module is a function which returns UI elements, and is decorated with the @module.ui decorator. This decorator sets a default module namespace, so each component created by the function has a prefix implicitly added to its ID.\n\nThe module server function looks just like a Shiny app server function, except it‚Äôs decorated with the @module.server decorator.\n\nTo use this module in an application, you call the module UI and server functions inside of the application UI and server functions. Every module call includes an id argument which defines the module‚Äôs namespace. This id has two requirements. First, it must be unique in a single scope, and can‚Äôt be duplicated in a given application or module definition. If you need to generate many instances of a single module, it is often a good idea to store their ids in a list, and use list comprehension to generate the UI and server instances. Second, the UI and server ids must match. This ensures that the UI and server instances exist in the same namespace, and if the ids don‚Äôt match, the UI and server modules will not be able to interact.\n\nSince modules allow you to tie UI and Server code together in the same namespace, you can include arbitrarily complex interactions within your module. Anything that you can do in a Shiny app can also be done inside of a module, and modules can themselves call other modules. This allows you to break your app up into building blocks of various sizes, compose those blocks to build different applications, and share them with others.\n\nConclusion\n\nWhenever you find that your Shiny code is repetitive, you should consider whether it‚Äôs worth extracting some logic into a function or a module. This article has gone through the basics of modules to explain what they are, why we need them, and how to include them in your application. Once you start using modules, the natural next question is how to communicate between different modules and the rest of the application. To learn more about that see the module communication article.\n\n",
    "code_examples": [
      "from shiny.express import ui\n\nui.input_slider(\"n1\", \"N\", 0, 100, 20)\nui.input_slider(\"n2\", \"N\", 0, 100, 20)\nui.input_slider(\"n3\", \"N\", 0, 100, 20)\nui.input_slider(\"n4\", \"N\", 0, 100, 20)\nui.input_slider(\"n5\", \"N\", 0, 100, 20)\nui.input_slider(\"n6\", \"N\", 0, 100, 20)",
      "from shiny.express import ui\n\nui.input_slider(\"n1\", \"N\", 0, 100, 20)\nui.input_slider(\"n2\", \"N\", 0, 100, 20)\nui.input_slider(\"n3\", \"N\", 0, 100, 20)\nui.input_slider(\"n4\", \"N\", 0, 100, 20)\nui.input_slider(\"n5\", \"N\", 0, 100, 20)\nui.input_slider(\"n6\", \"N\", 0, 100, 20)",
      "from shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n1\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n2\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n3\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n4\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n5\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n6\", \"N\", 0, 100, 20),\n)\n\napp = App(app_ui, None)",
      "from shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n1\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n2\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n3\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n4\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n5\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n6\", \"N\", 0, 100, 20),\n)\n\napp = App(app_ui, None)",
      "from shiny.express import ui\n\ndef my_slider(id):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\nmy_slider(\"n1\")\nmy_slider(\"n2\")\nmy_slider(\"n3\")\nmy_slider(\"n4\")\nmy_slider(\"n5\")",
      "from shiny.express import ui\n\ndef my_slider(id):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\nmy_slider(\"n1\")\nmy_slider(\"n2\")\nmy_slider(\"n3\")\nmy_slider(\"n4\")\nmy_slider(\"n5\")",
      "from shiny.express import ui\n\ndef my_slider(id):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\nids = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\"]\n\n[my_slider(x) for x in ids]",
      "from shiny.express import ui\n\ndef my_slider(id):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\nids = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\"]\n\n[my_slider(x) for x in ids]",
      "from shiny.express import ui\n\ndef my_slider(id, label):\n    return ui.input_slider(id, label + \" Number\", 0, 100, 20)\n\nnumbers = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\"]\nlabels = [\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth\"]\n\n[my_slider(x, y) for x, y in zip(numbers, labels)]",
      "from shiny.express import ui\n\ndef my_slider(id, label):\n    return ui.input_slider(id, label + \" Number\", 0, 100, 20)\n\nnumbers = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\"]\nlabels = [\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth\"]\n\n[my_slider(x, y) for x, y in zip(numbers, labels)]",
      "from shiny import App, ui\n\ndef my_slider(id):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\napp_ui = ui.page_fluid(\n    my_slider(\"n1\"),\n    my_slider(\"n2\"),\n    my_slider(\"n3\"),\n    my_slider(\"n4\"),\n    my_slider(\"n5\"),\n)\n\napp = App(app_ui, None)",
      "from shiny import App, ui\n\ndef my_slider(id):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\napp_ui = ui.page_fluid(\n    my_slider(\"n1\"),\n    my_slider(\"n2\"),\n    my_slider(\"n3\"),\n    my_slider(\"n4\"),\n    my_slider(\"n5\"),\n)\n\napp = App(app_ui, None)",
      "from shiny import App, ui\n\ndef my_slider(id):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\nids = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\"]\n\napp_ui = ui.page_fluid(\n    [my_slider(x) for x in ids]\n)\n\napp = App(app_ui, None)",
      "from shiny import App, ui\n\ndef my_slider(id):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\nids = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\"]\n\napp_ui = ui.page_fluid(\n    [my_slider(x) for x in ids]\n)\n\napp = App(app_ui, None)",
      "from shiny import App, ui\n\ndef my_slider(id, label):\n    return ui.input_slider(id, label + \" Number\", 0, 100, 20)\n\nnumbers = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\"]\nlabels = [\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth\"]\n\napp_ui = ui.page_fluid(\n    [my_slider(x, y) for x, y in zip(numbers, labels)]\n)\n\napp = App(app_ui, None)",
      "from shiny import App, ui\n\ndef my_slider(id, label):\n    return ui.input_slider(id, label + \" Number\", 0, 100, 20)\n\nnumbers = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\"]\nlabels = [\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth\"]\n\napp_ui = ui.page_fluid(\n    [my_slider(x, y) for x, y in zip(numbers, labels)]\n)\n\napp = App(app_ui, None)",
      "from shiny.express import expressify, input, render, module, ui\n\n@expressify\ndef io_row():\n    with ui.layout_columns():\n        ui.input_text(\"text_input\", \"Enter text\")\n\n        @render.text\n        def text_output():\n            return f'You entered \"{input.text_input()}\"'\n\nio_row()",
      "from shiny.express import expressify, input, render, module, ui\n\n@expressify\ndef io_row():\n    with ui.layout_columns():\n        ui.input_text(\"text_input\", \"Enter text\")\n\n        @render.text\n        def text_output():\n            return f'You entered \"{input.text_input()}\"'\n\nio_row()",
      "from shiny import App, render, ui\n\ndef io_row():\n    return ui.layout_columns(\n        ui.card(ui.input_text(\"text_input\", \"Enter text\")),\n        ui.card(ui.output_text(\"text_output\")),\n    )\n\napp_ui = ui.page_fluid(\n    io_row(),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text_output():\n        return f'You entered \"{input.text_input()}\"'\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\ndef io_row():\n    return ui.layout_columns(\n        ui.card(ui.input_text(\"text_input\", \"Enter text\")),\n        ui.card(ui.output_text(\"text_output\")),\n    )\n\napp_ui = ui.page_fluid(\n    io_row(),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text_output():\n        return f'You entered \"{input.text_input()}\"'\n\napp = App(app_ui, server)",
      "from shiny.express import module, render, ui\n\n# Define a module function, which takes input, output, and session\n@module\ndef io_row(input, output, session):\n    with ui.layout_columns():\n        with ui.card():\n            ui.input_text(f\"text_input\", \"Enter text\")\n        with ui.card():\n            @render.text\n            def text_out():\n                return f'You entered \"{input.text_input()}\"'\n\n# Call the module function with two different namespace IDs\nio_row(\"first\")\nio_row(\"second\")",
      "from shiny.express import module, render, ui\n\n# Define a module function, which takes input, output, and session\n@module\ndef io_row(input, output, session):\n    with ui.layout_columns():\n        with ui.card():\n            ui.input_text(f\"text_input\", \"Enter text\")\n        with ui.card():\n            @render.text\n            def text_out():\n                return f'You entered \"{input.text_input()}\"'\n\n# Call the module function with two different namespace IDs\nio_row(\"first\")\nio_row(\"second\")",
      "@module\ndef my_module(input, output, session):\n    ...",
      "@module\ndef my_module(input, output, session):\n    ...",
      "def my_module(id):\n    ...",
      "def my_module(id):\n    ...",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny.express import module, render, ui\n\n@module\ndef io_row(input, output, session, placeholder=\"\"):\n    with ui.layout_columns():\n        with ui.card():\n            ui.input_text(f\"text_input\", \"Enter text\", placeholder=placeholder)\n        with ui.card():\n            @render.text\n            def text_out():\n                return f'You entered \"{input.text_input()}\"'\n\n\nextra_ids = [\"row_3\", \"row_4\", \"row_5\"]\n\nio_row(\"row_1\")\n# Call with a different ID and pass in argument for placeholder\nio_row(\"row_2\", placeholder=\"Enter second thing\")\n# We can add more instances programmatically\n[io_row(x) for x in extra_ids]",
      "@module.ui\ndef row_ui():\n    return ui.layout_columns(\n        ui.card(ui.input_text(\"text_in\", \"Enter text\")),\n        ui.card(ui.output_text(\"text_out\")),\n    )",
      "@module.ui\ndef row_ui():\n    return ui.layout_columns(\n        ui.card(ui.input_text(\"text_in\", \"Enter text\")),\n        ui.card(ui.output_text(\"text_out\")),\n    )",
      "@module.server\ndef row_server(input, output, session):\n    @output\n    @render.text\n    def text_out():\n        return f'You entered \"{input.text_in()}\"'",
      "@module.server\ndef row_server(input, output, session):\n    @output\n    @render.text\n    def text_out():\n        return f'You entered \"{input.text_in()}\"'",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny import App, module, render, ui\n\n\n@module.ui\ndef row_ui():\n    return ui.layout_columns(\n        ui.card(ui.input_text(\"text_in\", \"Enter text\")),\n        ui.card(ui.output_text(\"text_out\")),\n    )\n\n\n@module.server\ndef row_server(input, output, session):\n    @output\n    @render.text\n    def text_out():\n        return f'You entered \"{input.text_in()}\"'\n\nextra_ids = [\"row_3\", \"row_4\", \"row_5\"]\n\napp_ui = ui.page_fluid(\n    row_ui(\"row_1\"),\n    row_ui(\"row_2\"),\n    [row_ui(x) for x in extra_ids]\n)\n\n\ndef server(input, output, session):\n    row_server(\"row_1\")\n    row_server(\"row_2\")\n    [row_server(x) for x in extra_ids]\n\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "docs_module-communication_html",
    "url": "docs/module-communication.html",
    "title": "Module Communication ‚Äì Shiny for Python",
    "description": "",
    "content": "- üì¶ Modules\n- Module Communication\n\nModule Communication\n\nCommunication between modules\n\nOnce you start breaking your app into modules, you might wonder how to pass values between your module and the rest of the application. For example, you might want to define an input label in the global application scope and pass that label to the module, or have user interactions with one module affect an output of another module. Since modules are just functions with a specific namespace, they can take and return both reactive and non-reactive arguments, which gives you a rich set of tools for handling application requirements.\n\nThere are four main patterns you should be aware of when building Shiny modules:\n\n- Modules that take non-reactive arguments\n- Passing callbacks to modules\n- Modules that take reactive arguments\n- Modules that return reactive arguments\n\nNon-reactive arguments\n\nThe easiest way to communicate with modules is to pass non-reactive arguments to them. This is just like passing an argument to a normal Python function, and allows you to set specific module options. For example, say we wanted a counter module which allowed you to set the label and starting value.\n\n- Express\n- Core\n\nTo create the module, use the @module decorator on a function and give it two additional parameters, label and starting value.\n\nYou can then pass in values when you call the module in your app. Note that you always need to provide an id to the module function to define its namespace. Using arguments like this makes your modules much more flexible and allows you to encapsulate some of the logic while maintaining the flexibility that your application needs.\n\nNote that in the example above we used the relative import from .counter import ... instead of the absolute import from counter import .... This is necessary when running multiple Shinylive applications on one web page as we do here, so that different apps do not cause conflicts when importing their own counter modules. In normal Shiny Express applications, you can use either a relative or absolute import.\n\nTo do this, you would first add an argument to the module UI function which sets the button label.\n\nNext, you would add an argument to the server function which specifies the starting value for the counter.\n\nYou can then set the options when you call the module in your app. Note that you always need to provide an id to the module function to define its namespace. Using arguments like this makes your modules much more flexible and allows you to encapsulate some of the logic while maintaining the flexibility that your application needs.\n\nNote that in the example above we used the relative import from .counter import ... instead of the absolute import from counter import .... This is necessary when running multiple Shinylive applications on one web page as we do here, so that different apps do not cause conflicts when importing their own counter modules. In normal Shiny Core applications, you must use the absolute import (relative imports will generally not work with Shiny Core applications).\n\nPassing multiple UI elements to modules\n\nIn addition to passing numeric and string values to modules you can also pass any number of UI elements. This allows you to build layout modules similar to ui.sidebar_layout() which can take arbitrary Shiny elements and arrange them in some fashion.\n\n- Express\n- Core\n\nThere are two sides to modules: a module can be written with Shiny Express or Core syntax, and a module can be used from a Shiny Express or Core application. In this section we‚Äôll learn about both using and writing modules with Shiny Express.\n\nIf a module used from within a Shiny Express application, you can pass it UI elements, but doing so requires understanding how UI elements work in Shiny Express.\n\nSuppose you want to use a module called table_cards_module(). We‚Äôll just provide the signature here (the implementation will be later). If you want it to accept multiple arguments, they can be passed in as a list:\n\nNotice that in order to display the elements that the user passed in, we just used a for loop and evaluated each element. This is similar to how you would print each item in a Jupyter notebook.\n\nAnother method is to have your module take non-keyword argument with *args. With this method, you don‚Äôt have two wrap the elements in a list when using the module:\n\nFor example, let‚Äôs say we wanted to display two cards, one which displayed a standard table, and the other displaying an arbitrary set of elements. One way we could do this is by writing a module which rendered a table in one card and passed *args to a second card.\n\nThere are two main ways to pass multiple UI elements to a module. First, you can have the module take a list as one of the arguments and pass that list to another container function.\n\nThis is convenient because it lets the parent context pass in any number of elements to the module, but requires that you wrap the elements in a list before passing them to the module.\n\nThe second method is to have your module take non keyword argument with *args. This is how Shiny‚Äôs container functions are designed, and using this pattern lets you to call the module UI just like you would any Shiny function.\n\nFor example, let‚Äôs say we wanted to display two cards, one which displayed a standard table, and the other displaying an arbitrary set of elements. One way we could do this is by writing a module which rendered a table in one card and passed *args to a second card.\n\nPassing reactives to modules\n\nThe modules we‚Äôve seen so far are useful for cleaning up your code base, but we can do more to integrate them in an application‚Äôs reactive structure. For example, what if we wanted a global button which reset all of the counters in an application? To accomplish this, we can pass reactive objects and use them inside the module just as you would use them in an app.\n\nIt is important to distinguish between calls to reactive objects like input.n() and the reactive object itself, input.n. While input.n is reactive object, calling input.n() returns the current value that object.\n\n- Express\n- Core\n\nWhile this app may look it‚Äôs doing something quite different, it‚Äôs actually following the same reactive rules as any other app. When we pass input.clear to each module as the global_clear parameter, we can use it inside the module just like we would use any other reactive object. You could retrieve its value with global_clear() or use it with @reactive.event(global_clear) to trigger a side effect. Since all of the module instances are receiving the same reactive object, when that object is invalidated, it will cause elements within those modules to invalidate and re-execute.\n\nWhile this app may look it‚Äôs doing something quite different, it‚Äôs actually following the same reactive rules as any other app. When we pass input.clear to each module as the global_clear parameter, we can use it inside the module just like we would use any other reactive object. You could retrieve its value with global_clear() or use it with @reactive.event(global_clear) to trigger a side effect. Since all of the module instances are receiving the same reactive object, when that object is invalidated, it will cause elements within those modules to invalidate and re-execute.\n\nPassing callbacks to modules\n\nAnother common problem with modules is to change some piece of application state from within the module. One intuitive way to do this is to define a state-modifying function at the application level, and pass that function down to the module. When the function is called within the module code, it will update the global application state.\n\nFor example, let‚Äôs add a text output that adds up the total number of button clicks for a session. To do this we create a reactive.value and a function which increments that value by one. We then pass this function down to the module and call it whenever the module button is clicked. This updates the reactive.value at the application level.\n\n- Express\n- Core\n\nWe could accomplish the same thing by passing the reactive value itself down to the module, and while this works, it‚Äôs not a great idea. Passing the reactive value creates a tight coupling between the module and the particular context in which it was called. The module would be expecting a particular type of reactive value and wouldn‚Äôt work for anything else. Additionally the update logic would be split between the application context and the module which makes it harder to reason about. Passing a callback is more flexible because the module can be used to do a variety of things. For example, by passing a different callback you could use the same module in another application which did something else when the button was clicked.\n\nReturning reactives from modules\n\nJust like we can pass reactives to modules and use them inside the module code we can also return reactive objects from modules to use them in the larger application. For example, one common form of dynamic user interface is to populate a drop-down menu based on another drop-down. You might have one menu which lets the user select a state, and a second which only shows cities in that state. To make it a reusable component, you can extract it into a module so that it could be easily added into other applications.\n\n- Express\n- Core\n\nTo do this, you can have the module function return one of the reactive objects which are defined in the module. This reactive object can then be used in the application context like any other reactive object.\n\nTo do this, you can have the module‚Äôs server function return one of the reactive objects which are defined in the module. This reactive object can then be used in the application context like any other reactive object.\n\nMultiple returns\n\nSometimes you may want to retrieve multiple reactive objects from the module context. To do this you can use either a tuple or namedtuple to send multiple reactives from a module to another context. For example, if you wanted to retrieve both the city and state reactives from the module could you have the module return both of them with return (input.cities, input.state). This tuple could then be unpacked in the application context with city, state = city_state_server(\"cities\").\n\n- Express\n- Core\n\nIf your return value has more objects, it may be useful to return a namedtuple. Named tuples are similar to tuples except that they allow you to set specific named attributes, which makes them useful for data validation because if you don‚Äôt pass the right attributes to a named tuple it will fail early and loudly.\n\nUsing modules with Shiny Core and Express syntax\n\nIn all the examples we‚Äôve seen so far, a Shiny Express app uses modules created with Shiny Express syntax, or a Shiny Core app uses modules created with Shiny Core syntax. It is also possible for an Express app to use a module written with Core syntax. To do so, in your Express app, simply call both the UI and server components of the Core-syntax module.\n\nThis is a Shiny Express app which illustrates how to use both types of modules: one written with Express syntax, and the other written with Core syntax.\n\nConclusion\n\nModules are the main way to grow and scale your Shiny application code. They let you break up your app into tractable parts, define how those parts communicate with one another, and reuse components across applications. While mastering modules takes quite a bit of time, you can accomplish almost anything with the four patterns listed in this article.\n\n",
    "code_examples": [
      "from shiny import reactive\nfrom shiny.express import module, ui, render\n\n@module\ndef counter_module(input, output, session, label=\"Increment counter\", starting_value=0):\n    count = reactive.value(starting_value)\n    with ui.card():\n        ui.card_header(\"This is \" + label)\n        ui.input_action_button(id=\"button\", label=label)\n\n        @render.code\n        def out():\n            return f\"Click count is {count()}\"\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def _():\n        count.set(count() + 1)",
      "from shiny import reactive\nfrom shiny.express import module, ui, render\n\n@module\ndef counter_module(input, output, session, label=\"Increment counter\", starting_value=0):\n    count = reactive.value(starting_value)\n    with ui.card():\n        ui.card_header(\"This is \" + label)\n        ui.input_action_button(id=\"button\", label=label)\n\n        @render.code\n        def out():\n            return f\"Click count is {count()}\"\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def _():\n        count.set(count() + 1)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| viewerHeight: 400\n## file: app.py\nfrom shiny.express import ui\nfrom .counter import counter_module\n\ncounter_module(\"counter1\", \"Counter 1\", starting_value=5)\ncounter_module(\"counter2\", \"Counter 2\", starting_value=3)\n\n## file: counter.py\nfrom shiny import reactive\nfrom shiny.express import module, ui, render\n\n@module\ndef counter_module(input, output, session, label=\"Increment counter\", starting_value=0):\n    count = reactive.value(starting_value)\n    with ui.card():\n        ui.card_header(\"This is \" + label)\n        ui.input_action_button(id=\"button\", label=label)\n\n        @render.code\n        def out():\n            return f\"Click count is {count()}\"\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def _():\n        count.set(count() + 1)\n",
      "from shiny import module, ui, render, reactive, event, App\n\n\n@module.ui\ndef counter_ui(custom_label = \"Increment counter\"):\n    return ui.card(\n        ui.h2(\"This is \", custom_label),\n        ui.input_action_button(id=\"button\", label=custom_label),\n        ui.output_code(id=\"out\"),\n    )",
      "from shiny import module, ui, render, reactive, event, App\n\n\n@module.ui\ndef counter_ui(custom_label = \"Increment counter\"):\n    return ui.card(\n        ui.h2(\"This is \", custom_label),\n        ui.input_action_button(id=\"button\", label=custom_label),\n        ui.output_code(id=\"out\"),\n    )",
      "@module.server\ndef counter_server(input, output, session, starting_value = 0):\n    count =  reactive.value(starting_value)\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def _():\n        count.set(count() + 1)\n\n    @render.code\n    def out():\n        return f\"Click count is {count()}\"",
      "@module.server\ndef counter_server(input, output, session, starting_value = 0):\n    count =  reactive.value(starting_value)\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def _():\n        count.set(count() + 1)\n\n    @render.code\n    def out():\n        return f\"Click count is {count()}\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny import App, ui\n# Note: In a normal Shiny Core app, use an absolute import, as in:\n# `from counter import ...`\nfrom .counter import counter_ui, counter_server\n\n\napp_ui = ui.page_fluid(\n    counter_ui(\"counter1\", \"Counter 1\"),\n    counter_ui(\"counter2\", \"Counter 2\"),\n)\n\n\ndef server(input, output, session):\n    counter_server(\"counter1\", starting_value=5)\n    counter_server(\"counter2\", starting_value=3)\n\n\napp = App(app_ui, server)\n\n## file: counter.py\nfrom shiny import module, ui, render, reactive, event\n\n@module.ui\ndef counter_ui(label: str = \"Increment counter\"):\n    return ui.card(\n        ui.card_header(\"This is \" + label),\n        ui.input_action_button(id=\"button\", label=label),\n        ui.output_code(id=\"out\"),\n    )\n\n\n@module.server\ndef counter_server(input, output, session, starting_value = 0):\n    count =  reactive.value(starting_value)\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def _():\n        count.set(count() + 1)\n\n    @render.code\n    def out():\n        return f\"Click count is {count()}\"\n",
      "@module\ndef my_module(input, output, session, elements):\n    for el in elements:\n        with ui.card():\n            el\n\nmy_module(\"mod1\", [ui.h1(\"heading\"), ui.p(\"paragraph\")])",
      "@module\ndef my_module(input, output, session, elements):\n    for el in elements:\n        with ui.card():\n            el\n\nmy_module(\"mod1\", [ui.h1(\"heading\"), ui.p(\"paragraph\")])",
      "@module\ndef my_module(input, output, session, *elements):\n    for el in elements:\n        with ui.card():\n            el\n\nmy_module(\"mod1\", ui.h1(\"heading\"), ui.p(\"paragraph\"))",
      "@module\ndef my_module(input, output, session, *elements):\n    for el in elements:\n        with ui.card():\n            el\n\nmy_module(\"mod1\", ui.h1(\"heading\"), ui.p(\"paragraph\"))",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom .modules import table_cards\nfrom shiny.express import input, render, ui\n\ntext_tags = [ui.h1(\"A heading\"), ui.p(\"Some paragraph text\")]\n\n# The ui.hold prevents the plot from being placed on the page here,\n# but the dot_plot object can later be passed to the table_cards() module.\nwith ui.hold():\n    @render.plot\n    def dot_plot():\n        x = np.random.rand(input.dots())\n        y = np.random.rand(input.dots())\n        fig, ax = plt.subplots()\n        ax.scatter(x, y)\n        return fig\n\nreactive_tags = [\n    ui.input_numeric(\"dots\", \"Number of points\", value=25),\n    dot_plot\n]\n\n\ntable_cards(\"output_example\", reactive_tags),\n\ntable_cards(\"heading_example\", text_tags),\n\n## file: modules.py\nimport pandas as pd\nfrom shiny.express import module, render, ui\n\n@module\ndef table_cards(input, output, session, *args):\n    with ui.layout_columns():\n        with ui.card():\n            ui.card_header(\"Standard table\")\n            @render.table\n            def module_table():\n                df = pd.DataFrame({\"col1\": range(4), \"col2\": range(4)})\n                return df\n\n        with ui.card():\n            ui.card_header(\"New elements\")\n            for arg in args:\n                arg\n",
      "@module.ui\ndef mod_ui(elements):\n    return ui.div(elements)\n\nui = ui.page_fluid(mod_ui([ui.h1(\"heading\"), ui.p(\"paragraph\")]))",
      "@module.ui\ndef mod_ui(elements):\n    return ui.div(elements)\n\nui = ui.page_fluid(mod_ui([ui.h1(\"heading\"), ui.p(\"paragraph\")]))",
      "@module.ui\ndef mod_ui(*args):\n    return ui.div(*args)\n\nui = ui.page_fluid(mod_ui(ui.h1(\"heading\"), ui.p(\"paragraph\")))",
      "@module.ui\ndef mod_ui(*args):\n    return ui.div(*args)\n\nui = ui.page_fluid(mod_ui(ui.h1(\"heading\"), ui.p(\"paragraph\")))",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom .modules import table_cards_server, table_cards_ui\nfrom shiny import App, render, ui\n\ntext_tags = [ui.h1(\"A heading\"), ui.p(\"Some paragraph text\")]\nreactive_tags = [\n    ui.input_numeric(\"dots\", \"Number of points\", value=25), ui.output_plot(\"dot_plot\")\n]\n\napp_ui = ui.page_fluid(\n    table_cards_ui(\"output_example\", reactive_tags),\n    table_cards_ui(\"heading_example\", text_tags),\n)\n\n\ndef server(input, output, session):\n    @render.plot\n    def dot_plot():\n        x = np.random.rand(input.dots())\n        y = np.random.rand(input.dots())\n        fig, ax = plt.subplots()\n        ax.scatter(x, y)\n        return fig\n\n    table_cards_server(\"heading_example\")\n    table_cards_server(\"output_example\")\n\n\napp = App(app_ui, server)\n\n## file: modules.py\nimport pandas as pd\nfrom shiny import module, render, ui\n\n@module.ui\ndef table_cards_ui(*args):\n    return ui.row(\n        ui.layout_column_wrap(\n            ui.card(\n                ui.card_header(\"Standard table\"), ui.output_table(\"module_table\")\n            ),\n            ui.card(ui.card_header(\"New elements\"), *args),\n            width = 1 / 2,\n        ),\n    )\n\n\n@module.server\ndef table_cards_server(input, output, session):\n    @render.table\n    def module_table():\n        df = pd.DataFrame({\"col1\": range(4), \"col2\": range(4)})\n        return df\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom .modules import counter\n\n\nwith ui.card():\n    ui.input_action_button(\"clear\", \"Clear counters\")\n\ncounter(\"counter1\", starting_value=5, global_clear=input.clear, label=\"Counter 1\")\n\ncounter(\"counter2\", starting_value=3, global_clear=input.clear, label=\"Counter 2\")\n\n## file: modules.py\nfrom shiny import reactive\nfrom shiny.express import module, render, ui\n\n@module\ndef counter(input, output, session, global_clear, starting_value=0, label=\"Increment counter\"):\n    count = reactive.value(starting_value)\n\n    @reactive.effect\n    @reactive.event(global_clear)\n    def clear_all():\n        count.set(0)\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def increment_counter():\n        count.set(count() + 1)\n\n\n    with ui.card():\n        ui.card_header(\"This is \" + label)\n        ui.input_action_button(id=\"button\", label=label)\n\n        @render.code\n        def out():\n            return f\"Click count is {count()}\"\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny import App, module, reactive, render, ui\nfrom .modules import counter_ui, counter_server\n\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"clear\", \"Clear counters\"),\n    counter_ui(\"counter1\", \"Counter 1\"),\n    counter_ui(\"counter2\", \"Counter 2\"),\n)\n\n\ndef server(input, output, session):\n    counter_server(\"counter1\", starting_value=5, global_clear=input.clear)\n    counter_server(\"counter2\", starting_value=3, global_clear=input.clear)\n\n\napp = App(app_ui, server)\n\n## file: modules.py\nfrom shiny import App, module, reactive, render, ui\n\n\n@module.ui\ndef counter_ui(label: str = \"Increment counter\"):\n    return ui.card(\n        ui.card_header(\"This is \" + label),\n        ui.input_action_button(id=\"button\", label=label),\n        ui.output_code(id=\"out\"),\n    )\n\n\n@module.server\ndef counter_server(input, output, session, global_clear, starting_value=0):\n    count = reactive.value(starting_value)\n\n    @reactive.effect\n    @reactive.event(global_clear)\n    def clear_all():\n        count.set(0)\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def increment_counter():\n        count.set(count() + 1)\n\n    @render.code\n    def out():\n        return f\"Click count is {count()}\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom .modules import counter\n\nglobal_tally = reactive.value(0)\n\ndef increment_counter():\n    global_tally.set(global_tally() + 1)\n\nwith ui.card():\n    @render.text\n    def total_counts():\n        return f\"Total counts: {global_tally()}\"\n\ncounter(\"counter1\", _on_click=increment_counter, label=\"Counter 1\")\n\ncounter(\"counter2\", _on_click=increment_counter, label=\"Counter 2\")\n\n## file: modules.py\nfrom shiny import reactive\nfrom shiny.express import module, render, ui\n\n@module\ndef counter(input, output, session, _on_click, starting_value=0, label=\"Increment counter\"):\n    count = reactive.value(starting_value)\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def increment_button():\n        _on_click()\n        count.set(count() + 1)\n\n\n    with ui.card():\n        ui.card_header(\"This is \" + label)\n        ui.input_action_button(id=\"button\", label=label)\n\n        @render.code\n        def out():\n            return f\"Click count is {count()}\"\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\n\nfrom shiny import App, module, reactive, render, ui\nfrom .modules import counter_ui, counter_server\n\napp_ui = ui.page_fluid(\n    ui.output_text(\"total_counts\"),\n    ui.br(),\n    counter_ui(\"counter1\", \"Counter 1\"),\n    counter_ui(\"counter2\", \"Counter 2\"),\n)\n\n\ndef server(input, output, session):\n    global_tally =  reactive.value(0)\n\n    def increment_counter():\n        global_tally.set(global_tally() + 1)\n\n    @render.text\n    def total_counts():\n        return f\"Total counts: {global_tally()}\"\n\n    counter_server(\"counter1\", _on_click=increment_counter)\n    counter_server(\"counter2\", _on_click=increment_counter)\n\n\napp = App(app_ui, server)\n\n## file: modules.py\nfrom shiny import App, module, reactive, render, ui\n\n\n@module.ui\ndef counter_ui(label: str = \"Increment counter\"):\n    return ui.card(\n        ui.card_header(\"This is \" + label),\n        ui.input_action_button(id=\"button\", label=label),\n        ui.output_code(id=\"out\"),\n    )\n\n\n@module.server\ndef counter_server(input, output, session, _on_click, starting_value=0):\n    count =  reactive.value(starting_value)\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def increment_button():\n        _on_click()\n        count.set(count() + 1)\n\n    @render.code\n    def out():\n        return f\"Click count is {count()}\"",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny.express import render, ui\nfrom .modules import city_state\n\ncity = city_state(\"cities\")\n\n@render.text\ndef selected_city():\n    return f\"You selected '{city()}'\"\n\n## file: modules.py\nimport pandas as pd\nfrom shiny.express import module, render, ui\nfrom shiny import reactive, req\n\ndata = {\n    \"state\": [\"NY\", \"CO\", \"OR\", \"MI\"] * 5,\n    \"city\": [\n        \"New York\",\n        \"Denver\",\n        \"Portland\",\n        \"Detroit\",\n        \"Buffalo\",\n        \"Colorado Springs\",\n        \"Salem\",\n        \"Grand Rapids\",\n        \"Rochester\",\n        \"Aurora\",\n        \"Eugene\",\n        \"Warren\",\n        \"Yonkers\",\n        \"Lakewood\",\n        \"Gresham\",\n        \"Sterling Heights\",\n        \"Syracuse\",\n        \"Fort Collins\",\n        \"Hillsboro\",\n        \"Ann Arbor\",\n    ],\n}\ndf = pd.DataFrame(data)\n\n\n@module\ndef city_state(input, output, session):\n    ui.input_selectize(\n        \"state\", \"State\", choices=[\"NY\", \"CO\", \"OR\", \"MI\"], selected=\"NY\"\n    )\n\n    @render.express\n    def cities_ui():\n        opts = df[df[\"state\"] == input.state()][\"city\"].unique().tolist()\n        ui.input_selectize(\"cities\", \"Cities\", choices=opts, selected=opts[0])\n\n    return input.cities\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny import App, render, ui\nfrom .modules import city_state_ui, city_state_server\n\napp_ui = ui.page_fluid(city_state_ui(\"cities\"), ui.output_text(\"selected_city\"))\n\n\ndef server(input, output, session):\n    city = city_state_server(\"cities\")\n\n    @render.text\n    def selected_city():\n        return f\"You selected '{city()}'\"\n\n\napp = App(app_ui, server)\n\n## file: modules.py\nimport pandas as pd\nfrom shiny import module, render, ui\n\n\n@module.ui\ndef city_state_ui():\n    return ([\n        ui.input_selectize(\n            \"state\", \"State\", choices=[\"NY\", \"CO\", \"OR\", \"MI\"], selected=\"NY\"\n        ),\n        ui.output_ui(\"cities_ui\"),\n    ])\n\n\n@module.server\ndef city_state_server(input, output, session):\n    data = {\n        \"state\": [\"NY\", \"CO\", \"OR\", \"MI\"] * 5,\n        \"city\": [\n            \"New York\",\n            \"Denver\",\n            \"Portland\",\n            \"Detroit\",\n            \"Buffalo\",\n            \"Colorado Springs\",\n            \"Salem\",\n            \"Grand Rapids\",\n            \"Rochester\",\n            \"Aurora\",\n            \"Eugene\",\n            \"Warren\",\n            \"Yonkers\",\n            \"Lakewood\",\n            \"Gresham\",\n            \"Sterling Heights\",\n            \"Syracuse\",\n            \"Fort Collins\",\n            \"Hillsboro\",\n            \"Ann Arbor\",\n        ],\n    }\n    df = pd.DataFrame(data)\n\n    @render.ui\n    def cities_ui():\n        opts = df[df[\"state\"] == input.state()][\"city\"].unique().tolist()\n        return ui.input_selectize(\"cities\", \"Cities\", choices=opts, selected=opts[0])\n\n    return input.cities\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny.express import render, ui\nfrom .modules import city_state\n\n(city, state) = city_state(\"cities\")\n\n@render.text\ndef selected_city():\n    return f\"You selected '{city()}' in '{state()}'\"\n\n## file: modules.py\nimport pandas as pd\nfrom shiny.express import module, render, ui\nfrom shiny import reactive, req\n\ndata = {\n    \"state\": [\"NY\", \"CO\", \"OR\", \"MI\"] * 5,\n    \"city\": [\n        \"New York\",\n        \"Denver\",\n        \"Portland\",\n        \"Detroit\",\n        \"Buffalo\",\n        \"Colorado Springs\",\n        \"Salem\",\n        \"Grand Rapids\",\n        \"Rochester\",\n        \"Aurora\",\n        \"Eugene\",\n        \"Warren\",\n        \"Yonkers\",\n        \"Lakewood\",\n        \"Gresham\",\n        \"Sterling Heights\",\n        \"Syracuse\",\n        \"Fort Collins\",\n        \"Hillsboro\",\n        \"Ann Arbor\",\n    ],\n}\ndf = pd.DataFrame(data)\n\n\n@module\ndef city_state(input, output, session):\n    ui.input_selectize(\n        \"state\", \"State\", choices=[\"NY\", \"CO\", \"OR\", \"MI\"], selected=\"NY\"\n    )\n\n    @render.express\n    def cities_ui():\n        opts = df[df[\"state\"] == input.state()][\"city\"].unique().tolist()\n        ui.input_selectize(\"cities\", \"Cities\", choices=opts, selected=opts[0])\n\n    return (input.cities, input.state)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny import App, render, ui\nfrom .modules import city_state_ui, city_state_server\n\napp_ui = ui.page_fluid(city_state_ui(\"cities\"), ui.output_text(\"selected_city\"))\n\n\ndef server(input, output, session):\n    (city, state) = city_state_server(\"cities\")\n\n    @render.text\n    def selected_city():\n        return f\"You selected '{city()}' in '{state()}'\"\n\n\napp = App(app_ui, server)\n\n## file: modules.py\nimport pandas as pd\nfrom shiny import module, render, ui\n\n\n@module.ui\ndef city_state_ui():\n    return ([\n        ui.input_selectize(\n            \"state\", \"State\", choices=[\"NY\", \"CO\", \"OR\", \"MI\"], selected=\"NY\"\n        ),\n        ui.output_ui(\"cities_ui\"),\n    ])\n\n\n@module.server\ndef city_state_server(input, output, session):\n    data = {\n        \"state\": [\"NY\", \"CO\", \"OR\", \"MI\"] * 5,\n        \"city\": [\n            \"New York\",\n            \"Denver\",\n            \"Portland\",\n            \"Detroit\",\n            \"Buffalo\",\n            \"Colorado Springs\",\n            \"Salem\",\n            \"Grand Rapids\",\n            \"Rochester\",\n            \"Aurora\",\n            \"Eugene\",\n            \"Warren\",\n            \"Yonkers\",\n            \"Lakewood\",\n            \"Gresham\",\n            \"Sterling Heights\",\n            \"Syracuse\",\n            \"Fort Collins\",\n            \"Hillsboro\",\n            \"Ann Arbor\",\n        ],\n    }\n    df = pd.DataFrame(data)\n\n    @render.ui\n    def cities_ui():\n        opts = df[df[\"state\"] == input.state()][\"city\"].unique().tolist()\n        return ui.input_selectize(\"cities\", \"Cities\", choices=opts, selected=opts[0])\n\n    return (input.cities, input.state)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| viewerHeight: 400\n## file: app.py\n# This Shiny Express app illustrates how to use modules with Express and Core syntax\nfrom shiny.express import ui\nfrom .counter_express import counter_express\nfrom .counter_core import counter_server, counter_ui\n\n# Use a module that was made with Shiny Express syntax\ncounter_express(\"counter1\", label=\"Counter 1 (Express)\", starting_value=5)\n\n# Use a module that was made with Shiny Core syntax: Call the ui and server components\n# with the same `id`, and pass in any additional arguments.\ncounter_ui(\"counter2\", label=\"Counter 2 (Core)\")\ncounter_server(\"counter2\", starting_value=2)\n\n## file: counter_express.py\n# Counter module implemented with Shiny Express syntax\nfrom shiny import reactive\nfrom shiny.express import module, ui, render\n\n@module\ndef counter_express(input, output, session, label=\"Increment counter\", starting_value=0):\n    count = reactive.value(starting_value)\n    with ui.card():\n        ui.card_header(\"This is \" + label)\n        ui.input_action_button(id=\"button\", label=label)\n\n        @render.code\n        def out():\n            return f\"Click count is {count()}\"\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def _():\n        count.set(count() + 1)\n\n## file: counter_core.py\n# Counter module implemented with Shiny Core syntax\nfrom shiny import module, ui, render, reactive, event\n\n@module.ui\ndef counter_ui(label: str = \"Increment counter\"):\n    return ui.card(\n        ui.card_header(\"This is \" + label),\n        ui.input_action_button(id=\"button\", label=label),\n        ui.output_code(id=\"out\"),\n    )\n\n\n@module.server\ndef counter_server(input, output, session, starting_value = 0):\n    count =  reactive.value(starting_value)\n\n    @reactive.effect\n    @reactive.event(input.button)\n    def _():\n        count.set(count() + 1)\n\n    @render.code\n    def out():\n        return f\"Click count is {count()}\"\n"
    ]
  },
  {
    "id": "docs_unit-testing_html",
    "url": "docs/unit-testing.html",
    "title": "Unit testing ‚Äì Shiny for Python",
    "description": "",
    "content": "- üß™ Testing\n- Unit testing\n\nUnit testing\n\nTesting is important to ensure your apps continue working as intended. There are two main approaches to testing Shiny apps: unit testing and end-to-end testing. Relatively speaking, unit tests much more limited compared to end-to-end, but they‚Äôre also simpler to write and maintain since they don‚Äôt depend on running the app in a browser. Unit tests also tend to force you to separate the app‚Äôs ‚Äúbusiness‚Äù logic from the reactive logic (which can be a good thing) since your app won‚Äôt have access to things like input or output in a unit test.\n\nIn this article, we‚Äôll provide a short guide on unit testing with pytest. See the next article for end-to-end testing.\n\nMake your app testable\n\nConsider the following Shiny app that filters a dataset based on a user‚Äôs selection of species.\n\nNone of the logic can be tested directly through a unit test.1 We can, however, put the logic for display_dat inside separate function, which can be then be tested independently of the Shiny app:\n\nNow that we have a function that doesn‚Äôt rely on a reactive input value, we can write a unit test for it. There are many unit testing frameworks available for Python, but we‚Äôll use pytest in this article since it‚Äôs by far the most common.\n\npytest\n\npytest is a popular, open-source testing framework for Python. To get started, you‚Äôll first want to install pytest:\n\npytest expects tests to be in files with names that start with test_ or end with _test.py. It also expects test functions to start with test_. Here‚Äôs an example of a test file for the filter_penguins function:\n\nAssuming both the app.py and test_filter_penguins.py files are in the same directory, you can now run the test by typing pytest in your terminal. pytest will automatically locate the test file and run it with the results shown below.\n\nIf a test fails, pytest will show you which test failed and why:\n\nUnit testing is a great way to ensure that your ‚Äúbusiness‚Äù logic is working as expected. However, to fully ensure your app is working as intended, you‚Äôll also want to write end-to-end tests. In the next article, we‚Äôll show you how to write end-to-end tests for your Shiny app via Playwright.\n\nFootnotes\n\n- You could test this with an end-to-end test, but that‚Äôs for the next article.‚Ü©Ô∏é\n\nYou could test this with an end-to-end test, but that‚Äôs for the next article.‚Ü©Ô∏é\n\n",
    "code_examples": [
      "from palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.input_select(\n  \"species\", \"Enter a species\",\n  list(penguins.species.unique())\n)\n\n@render.data_frame\ndef display_dat():\n    idx = penguins.species.isin(input.species())\n    return penguins[idx]",
      "from palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.input_select(\n  \"species\", \"Enter a species\",\n  list(penguins.species.unique())\n)\n\n@render.data_frame\ndef display_dat():\n    idx = penguins.species.isin(input.species())\n    return penguins[idx]",
      "@render.data_frame\ndef display_dat():\n    return filter_penguins(input.species())\n\ndef filter_penguins(species):\n    return penguins[penguins.species.isin(species)]",
      "@render.data_frame\ndef display_dat():\n    return filter_penguins(input.species())\n\ndef filter_penguins(species):\n    return penguins[penguins.species.isin(species)]",
      "pip install pytest",
      "pip install pytest",
      "from app import filter_penguins\n\ndef test_filter_penguins():\n    assert filter_penguins([\"Adelie\"]).shape[0] == 152\n    assert filter_penguins([\"Gentoo\"]).shape[0] == 124\n    assert filter_penguins([\"Chinstrap\"]).shape[0] == 68\n    assert filter_penguins([\"Adelie\", \"Gentoo\"]).shape[0] == 276\n    assert filter_penguins([\"Adelie\", \"Gentoo\", \"Chinstrap\"]).shape[0] == 344",
      "from app import filter_penguins\n\ndef test_filter_penguins():\n    assert filter_penguins([\"Adelie\"]).shape[0] == 152\n    assert filter_penguins([\"Gentoo\"]).shape[0] == 124\n    assert filter_penguins([\"Chinstrap\"]).shape[0] == 68\n    assert filter_penguins([\"Adelie\", \"Gentoo\"]).shape[0] == 276\n    assert filter_penguins([\"Adelie\", \"Gentoo\", \"Chinstrap\"]).shape[0] == 344",
      "platform darwin -- Python 3.10.12, pytest-7.4.4, pluggy-1.4.0\nconfigfile: pytest.ini\nplugins: asyncio-0.21.0, timeout-2.1.0, Faker-20.1.0, cov-4.1.0, playwright-0.4.4, rerunfailures-11.1.2, xdist-3.3.1, base-url-2.1.0, hydra-core-1.3.2, anyio-3.7.0, syrupy-4.0.5, shiny-1.0.0\nasyncio: mode=strict\n12 workers [1 item]\n.          [100%]\n(3 durations < 5s hidden.  Use -vv to show these durations.)",
      "platform darwin -- Python 3.10.12, pytest-7.4.4, pluggy-1.4.0\nconfigfile: pytest.ini\nplugins: asyncio-0.21.0, timeout-2.1.0, Faker-20.1.0, cov-4.1.0, playwright-0.4.4, rerunfailures-11.1.2, xdist-3.3.1, base-url-2.1.0, hydra-core-1.3.2, anyio-3.7.0, syrupy-4.0.5, shiny-1.0.0\nasyncio: mode=strict\n12 workers [1 item]\n.          [100%]\n(3 durations < 5s hidden.  Use -vv to show these durations.)",
      "======================================================= test session starts =======================================================\nplatform darwin -- Python 3.10.12, pytest-7.4.4, pluggy-1.4.0\nconfigfile: pytest.ini\nplugins: asyncio-0.21.0, timeout-2.1.0, Faker-20.1.0, cov-4.1.0, playwright-0.4.4, rerunfailures-11.1.2, xdist-3.3.1, base-url-2.1.0, hydra-core-1.3.2, anyio-3.7.0, syrupy-4.0.5, shiny-1.0.0\nasyncio: mode=strict\n12 workers [1 item]\nF       [100%]\n======= FAILURES =======\n________ test_double_number ________\n\n    def test_filter_penguins():\n>       assert filter_penguins([\"Adelie\"]).shape[0] == 150\nE       AssertionError: assert 152 == 150\nE        +  where 152 = filter_penguins([\"Adelie\"]).shape[0]",
      "======================================================= test session starts =======================================================\nplatform darwin -- Python 3.10.12, pytest-7.4.4, pluggy-1.4.0\nconfigfile: pytest.ini\nplugins: asyncio-0.21.0, timeout-2.1.0, Faker-20.1.0, cov-4.1.0, playwright-0.4.4, rerunfailures-11.1.2, xdist-3.3.1, base-url-2.1.0, hydra-core-1.3.2, anyio-3.7.0, syrupy-4.0.5, shiny-1.0.0\nasyncio: mode=strict\n12 workers [1 item]\nF       [100%]\n======= FAILURES =======\n________ test_double_number ________\n\n    def test_filter_penguins():\n>       assert filter_penguins([\"Adelie\"]).shape[0] == 150\nE       AssertionError: assert 152 == 150\nE        +  where 152 = filter_penguins([\"Adelie\"]).shape[0]"
    ]
  },
  {
    "id": "docs_end-to-end-testing_html",
    "url": "docs/end-to-end-testing.html",
    "title": "End-to-End Testing Your App ‚Äì Shiny for Python",
    "description": "",
    "content": "- üß™ Testing\n- End-to-End Testing Your App\n\nEnd-to-End Testing Your App\n\nWhat is End-to-End Testing (and Why Should You Care)?\n\nImagine you‚Äôve built a beautiful, interactive Shiny app. You want to make sure everything works exactly as expected, every time, for every user. That‚Äôs where end-to-end testing comes in.\n\nWhat it is:\n\n- End-to-end testing checks your entire Shiny app, from start to finish, as if a real person were using it.\n- It simulates user actions like clicking buttons, filling in forms, and navigating between different parts of your app.\n- It verifies that the app‚Äôs outputs (like graphs, tables, and text) are correct based on those actions.\n\nWhy it‚Äôs awesome:\n\n- Early bug detection: Find problems before your users do! No more embarrassing surprises.\n- Confidence in changes: When you update your app, tests make sure you haven‚Äôt accidentally broken anything.\n- Time saver: Instead of manually clicking through your app every time you make a change, tests automate the process.\n- Peace of mind: Know that your app is working reliably, so you can focus on building new features.\n\nIntroducing Playwright: A Comprehensive Automated Testing Solution for Web Applications\n\nPlaywright is a robust, open-source automation framework developed by Microsoft that enables programmatic control of web browsers. This tool provides developers with the capability to automate interactions with web applications across Chrome, Firefox, and Safari, simulating user behavior in a controlled, reproducible environment.\n\nWhy Playwright is perfect for Shiny:\n\n- Handles interactivity: It can interact with all those cool Shiny widgets like sliders, dropdowns, and buttons.\n- Cross-browser testing: Make sure your app works flawlessly on different browsers.\n- Smart waiting: Playwright automatically waits for your app to load and for elements to be ready, so your tests are reliable.\n- Easy to learn: The code is relatively straightforward, and we‚Äôll walk you through it.\n\nLearn more at the official Playwright documentation.\n\nLet‚Äôs Build and Test a Simple Shiny App!\n\nWe‚Äôll start with a super simple example to show you the basics. Follow along, and you‚Äôll be writing your own tests in no time!\n\nStep 1: Create Your First Shiny App\n\nFirst, let‚Äôs create a tiny Shiny app with just a slider and some text.\n\n- Create a new file: Create a file named app.py.\n- Copy and paste this code:\n\n- What this app does: This app displays a slider (labeled ‚ÄúN‚Äù) that goes from 0 to 100. Below the slider, it shows the text ‚Äún*2 is [value]‚Äú, where [value] is twice the current slider value.\n\nStep 2: What Are We Testing?\n\nOur goal is to write a test that does the following:\n\n- Opens the app: Starts the Shiny app in a browser.\n- Moves the slider: Sets the slider to a specific value (55 in this case).\n- Checks the output: Verifies that the text below the slider displays the correct result (‚Äún*2 is 110‚Äù).\n\nStep 3: Write Your First Test!\n\nNow for the exciting part ‚Äì writing the test code!\n\n- Create a new file: Create a new file named test_basic_app.py in the same directory as your app.py file. Remember, test file names must start with test_.\n- Copy and paste this code:\n\n- Understand role of Fixtures ShinyAppProc: Manages a Shiny application subprocess, handling lifecycle (startup, shutdown) and providing access to output streams. page: Playwright object representing the browser tab. local_app: Running instance of the Shiny application.\n- Understand role of Controllers Controllers such as OutputText and InputSlider provide abstraction over Playwright‚Äôs low-level interactions by: Automatically handling element waiting and state changes Offering specialized interfaces for specific Shiny component types Managing Shiny-specific behaviors without additional code Providing consistent patterns for testing similar components\n\nUnderstand role of Fixtures\n\n- ShinyAppProc: Manages a Shiny application subprocess, handling lifecycle (startup, shutdown) and providing access to output streams.\n- page: Playwright object representing the browser tab.\n- local_app: Running instance of the Shiny application.\n\nUnderstand role of Controllers\n\nControllers such as OutputText and InputSlider provide abstraction over Playwright‚Äôs low-level interactions by:\n\n- Automatically handling element waiting and state changes\n- Offering specialized interfaces for specific Shiny component types\n- Managing Shiny-specific behaviors without additional code\n- Providing consistent patterns for testing similar components\n\nAnd visually, this is what happens when the test runs:\n\nStep 4: Run Your Test!\n\nBefore you run the test, you need to install a couple of things:\n\n- Install pytest and pytest-playwright: Open your terminal (or command prompt) and type:\n\n- Navigate to your app‚Äôs directory: In the terminal, use the cd command to go to the folder where you saved app.py and test_basic_app.py.\n- Run the test: Type the following command and press Enter:\n\nNavigate to your app‚Äôs directory: In the terminal, use the cd command to go to the folder where you saved app.py and test_basic_app.py.\n\nRun the test: Type the following command and press Enter:\n\nYou should see output similar to this:\n\nWhat does this mean?\n\n- The . (dot) means your test passed!\n- If you see an F, it means the test failed. Double-check your code and make sure you followed all the steps.\n\nVisualize Your Test (Optional)\n\nIf you want to see what Playwright is doing, you can run the test in ‚Äúheaded‚Äù mode. This will open a browser window and show you the interactions.\n\nYou can also specify a particular browser:\n\nAdding Tests to an Existing Shiny App\n\nIf you already have a Shiny app, you can easily add tests:\n\n- Open your terminal: Navigate to your app‚Äôs directory.\n- Run the shiny add test command:\n\n- Answer the prompts: It will ask for the path to your app file (e.g., app.py) and a name for your test file (e.g., test_myapp.py). Remember, the test file name must start with test_.\n- Edit the generated test file: This command creates a basic test file. You‚Äôll need to modify it to add your specific test scenarios (like the slider example above).\n\nAnswer the prompts: It will ask for the path to your app file (e.g., app.py) and a name for your test file (e.g., test_myapp.py). Remember, the test file name must start with test_.\n\nEdit the generated test file: This command creates a basic test file. You‚Äôll need to modify it to add your specific test scenarios (like the slider example above).\n\nTroubleshooting Common Issues\n\n- Test fails with an error about finding an element: Make sure the IDs you‚Äôre using in your test code (e.g., ‚Äútxt‚Äù, ‚Äún‚Äù) match the IDs in your Shiny app code. Inspect your app‚Äôs HTML in the browser‚Äôs developer tools if you‚Äôre unsure.\n- Test is flaky (sometimes passes, sometimes fails): This can happen if your app takes a while to load or if there are timing issues. Playwright has built-in waiting mechanisms, but you might need to add explicit waits in some cases. See the Playwright documentation on waiting.\n\nTest fails with an error about finding an element: Make sure the IDs you‚Äôre using in your test code (e.g., ‚Äútxt‚Äù, ‚Äún‚Äù) match the IDs in your Shiny app code. Inspect your app‚Äôs HTML in the browser‚Äôs developer tools if you‚Äôre unsure.\n\nTest is flaky (sometimes passes, sometimes fails): This can happen if your app takes a while to load or if there are timing issues. Playwright has built-in waiting mechanisms, but you might need to add explicit waits in some cases. See the Playwright documentation on waiting.\n\nKeep Exploring!\n\nYou‚Äôve taken your first steps into the world of Shiny app testing! Here are some resources to help you learn more:\n\n- Shiny testing API documentation - This is your go-to guide for all the available testing methods in Shiny.\n- Playwright documentation - Learn more about Playwright‚Äôs powerful features.\n- pytest documentation\n\nHappy testing! You‚Äôre now well-equipped to build more robust and reliable Shiny apps.\n\n",
    "code_examples": [
      "from shiny.express import input, render, ui\n\nui.panel_title(\"Hello Shiny!\")\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.text\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"",
      "from shiny.express import input, render, ui\n\nui.panel_title(\"Hello Shiny!\")\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.text\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"",
      "from shiny.playwright import controller\nfrom shiny.run import ShinyAppProc\nfrom playwright.sync_api import Page\n\ndef test_basic_app(page: Page, local_app: ShinyAppProc) -> None:\n    # Navigate to the app URL when it's ready\n    page.goto(local_app.url)\n\n    # Controller objects for interacting with specific Shiny components\n    txt = controller.OutputText(page, \"txt\")\n    slider = controller.InputSlider(page, \"n\")\n\n    # Move the slider to position 55\n    slider.set(\"55\")\n\n    # Verify that the output text shows \"n*2 is 110\"\n    # (since 55 * 2 = 110)\n    txt.expect_value(\"n*2 is 110\")",
      "from shiny.playwright import controller\nfrom shiny.run import ShinyAppProc\nfrom playwright.sync_api import Page\n\ndef test_basic_app(page: Page, local_app: ShinyAppProc) -> None:\n    # Navigate to the app URL when it's ready\n    page.goto(local_app.url)\n\n    # Controller objects for interacting with specific Shiny components\n    txt = controller.OutputText(page, \"txt\")\n    slider = controller.InputSlider(page, \"n\")\n\n    # Move the slider to position 55\n    slider.set(\"55\")\n\n    # Verify that the output text shows \"n*2 is 110\"\n    # (since 55 * 2 = 110)\n    txt.expect_value(\"n*2 is 110\")",
      "pip install pytest pytest-playwright",
      "pip install pytest pytest-playwright",
      "pytest",
      "pytest",
      "pytest --headed",
      "pytest --headed",
      "pytest --browser firefox",
      "pytest --browser firefox",
      "shiny add test",
      "shiny add test"
    ]
  },
  {
    "id": "docs_custom-component-one-off_html",
    "url": "docs/custom-component-one-off.html",
    "title": "Custom JavaScript component ‚Äì Shiny for Python",
    "description": "",
    "content": "- üèóÔ∏è Extending\n- Custom JavaScript component\n\nCustom JavaScript component\n\nIn this post, you will learn how to create a custom element and accompanying output binding in Shiny. This is useful if you want to create an output that is not currently in Shiny for your app.\n\nThis post talks about making a one-off component for a given app. If you plan on reusing your component or distributing it for others to use, see the accompanying post on making a custom component package.\n\nThe code shown here is simplified to get the point across, but before you use it in your own app, you should make sure to add error handling and other features to make it robust.\n\nThe problem\n\nYou found a new table library that you really want to use in your Shiny app. The library is Tabulator, which is a JavaScript library for making tables with data. But there‚Äôs a problem: there‚Äôs (currently) no way to easily use it from a Shiny app. To do this, we‚Äôll need to write some Python code that will let us use the library from the Python side of Shiny, and wrap the library‚Äôs JavaScript code to make it talk to JavaScript side of Shiny.\n\nThe solution\n\nTo implement a custom Tabulator element for your app, you‚Äôll need to write three things:\n\n- A JavaScript script that renders the element on the client side using the Tabulator library\n- An output_tabulator() function for placing the element in your app‚Äôs UI\n- A render_tabulator() decorator for passing table data to the JavaScript code rendering the element on the server side\n\nThe JavaScript code\n\nFirst things first: to use a custom JavaScript library we need to write‚Ä¶ some JavaScript.\n\nTo do this we will create a new folder called tabulator/ that has the following structure:\n\nThis example uses plain JavaScript with no build step. For an example using typescript and with a build-step see the accompanying article on making a custom component package.\n\nBoth tabulator_esm.min.js and tabulator.min.css are downloaded from tabulator‚Äôs website. tableComponent.js is the script that we will write that contains the code for rendering the table to our Shiny app.\n\nThe code in this article will be abbreviated to show the relevant parts. If you want to see the full code, see the accompanying repo.\n\nTo create an output binding in Shiny, we create a new instance of the Shiny.OutputBinding class.\n\nThis class has two methods that we need to implement: find() and renderValue(). The find() method is used to identify the element that will contain the rendered table. The renderValue() method is used to render the table in the element. After making that class we need to register it with Shiny so it can find and send data to instances of our output.\n\nThe find() method\n\nNow that we have the scaffolding set up we can start by filling in the find method. This function is passed a scope object, which is a jQuery selection and should return the element you wish to render your output into.\n\nNote that we‚Äôre using the class \".shiny-tabulator-output\" here to mark the element that we want to render the table in. This is the same class that we will use in our output_tabulator() function in our app‚Äôs server code. You can use any valid CSS selector here, but it‚Äôs common to use a class name that descibes the output.\n\nThe renderValue() method\n\nNext, we fill in the main logic for rendering our table in to the renderValue method. This method gets passed two arguments: el, which is an HTMLElement identified by our find function, and payload, which is the data that the server has provided from the render function (more on this soon).\n\nThe implementation of this function is not terribly important and draws directly from the tabulator docs.\n\nWhat matters is that we take our data, transform it in some way, and then instantiate our table with the new Tabulator(el, {...}) call. In this case we take data in the form of the rows of a passed data frame, the column names, and the types of those columns (this is determined by the render decorator), and construct a js object in the form of data = [{col1: foo1, col2: bar1, ...}, {col1: foo2, col2: bar2, ...}]. We also combine the column names and types to create the columnsDef object that Tabulator expects.\n\nDon‚Äôt worry too much about following this particular format because it will change depending on the component that you are wrapping.\n\nThis code relies on the Shiny object existing in the JavaScript context, but you may want to wrap all the above code in an if (Shiny) statement so it only runs if the Shiny object exists. This is useful if you‚Äôre writing a component that might be used in a non-Shiny context because your code won‚Äôt error out trying to access the non-existant Shiny variable and break the document.\n\nTo see the full JavaScript code, see tabulator/tableComponent.js in the accompanying repo.\n\nThe output_tabulator() function\n\nNext we need an HTML element to target with our JavaScript code. When we set up the find method for our binding, we chose the class shiny-tabulator-output as the mark of a tabualtor output, so we need to add that class. We also need to allow the user to set the ID of the element so that Shiny knows which element to target with which output. By wrapping the id argument in resolve_id() we make sure it will work in the context of modules. We‚Äôll also add a height argument so that the user can set the height of the table.\n\nWe use the HTMLDependency function to bind up the assets needed for tabulator that we made in the previous step to make sure that they‚Äôre included in our app whenever the output_tabulator() function is called (but not more than once).\n\nNote the use of all_files=True here. This makes it so we can do the ESM import of the Tabulator library. Otherwise tabulator_esm.min.js would not be hosted and the JS library wouldn‚Äôt be able to find it.\n\nNow, the output_tabulator() function can be called anywhere we want to render a table in our app.\n\nThe render_tabulator() decorator\n\nNow we‚Äôve got the client-side logic finished, we need to write a custom render decorator that sends our data into the component.\n\nA render function‚Äôs job is to take the result of calling the decorated function, transform it into the format our client-side code wants (in many cases this may be as simple as just returning the object unchanged), and then returning that client-side friendly data which will be passed to our client‚Äôs renderValue() method.\n\nTo do this we can leverage some tools provided by Shiny in the shiny.render.renderer subpackage.\n\nIn the code above we use types so that we can get some type checking in our IDE, but these are not required.\n\nAn implementation of Renderer produces a class which is intended to be used as a decorator, which is why a render_* naming convention is recommended. An implementation requires at least 3 things: (1) auto_output_ui, (2) either a transform or render function, and (3) an value type for the Renderer class.\n\nHere, the value type we‚Äôve used is pd.DataFrame, which helps users know if they‚Äôve returned a suitable object in their render function.\n\nThe auto_output_ui() method is used to generate the UI for the output if the renderer were to be used in Express mode. In this case we just use the output_tabulator() function we wrote earlier.\n\nFinally, renderers use either the transform(self, value: IT) or render(self) methods to retrieve and transform the result of an output value function into an object that can be sent to the client. render_tabulator‚Äôs transform method returns a dictionary of data (which is JSON-like, e.g. Jsonifiable) to be passed to the client side. The transform method is called when the output value function returns a non-None value. If the value is None, the render method quits early, returning None.\n\nIt is required by Shiny Renderer that the transform be async. This allows for asynchronous transformations to occur even if the output value function is synchronous. By providing an async function, Renderer can then handle either an async or sync function provided by the user.\n\nWhen first transforming an output value, we check to make sure that the value returned by the function is a dataframe. If it‚Äôs not, we throw an error. This is not required, but it‚Äôs good practice to do so.\n\nFinally, we return a dictionary of data that we want to pass to the client side. In this case we return the data as a list of lists, the column names as an array of strings, and the types of each column as an array of strings using methods provided by pandas.\n\nThis returned value is then what gets sent to the client side and is available in the payload argument of the renderValue() method of our TabulatorOutputBinding class.\n\nThe result\n\nNow we have all the components neccesary to use our tabulator output component. Here‚Äôs an app that uses it to render some number of rows of the indomitable mtcars dataset.\n\n- Express\n- Core\n\nWhich results in the following app:\n\nTo see the full app script, see app.py in the accompanying repo for this post here.\n\n",
    "code_examples": [
      "class TabulatorOutputBinding extends Shiny.OutputBinding {\n    // Find element to render in\n    find(scope) { ... }\n\n    // Render output element in the found element\n    renderValue(el, payload) { ... }\n}\n\n// Register the binding\nShiny.outputBindings.register(\n  new TabulatorOutputBinding(),\n  \"shiny-tabulator-output\"\n);",
      "class TabulatorOutputBinding extends Shiny.OutputBinding {\n    // Find element to render in\n    find(scope) { ... }\n\n    // Render output element in the found element\n    renderValue(el, payload) { ... }\n}\n\n// Register the binding\nShiny.outputBindings.register(\n  new TabulatorOutputBinding(),\n  \"shiny-tabulator-output\"\n);",
      "class TabulatorOutputBinding extends Shiny.OutputBinding {\n    find(scope) {\n        return scope.find(\".shiny-tabulator-output\");\n    }\n\n    renderValue(el, payload) {...}\n}\n\nShiny.outputBindings.register(...);",
      "class TabulatorOutputBinding extends Shiny.OutputBinding {\n    find(scope) {\n        return scope.find(\".shiny-tabulator-output\");\n    }\n\n    renderValue(el, payload) {...}\n}\n\nShiny.outputBindings.register(...);",
      "// Import the Tabulator library\nimport { Tabulator } from \"./tabulator_esm.min.js\";\n\nclass TabulatorOutputBinding extends Shiny.OutputBinding {\n    find(scope) { ... }\n\n    renderValue(el, payload) {\n      // Unpack the info we get from the associated render function\n      const { columns, data, type_hints } = payload;\n\n      // Convert the column names to a format that Tabulator expects\n      const columnsDef = columns.map((col, i) => {\n        return {\n          title: col,\n          field: col,\n          hozAlign: type_hints[i] === \"numeric\" ? \"right\" : \"left\",\n        };\n      });\n\n      // Data comes in as a series of rows with each row having as many elements\n      // as there are columns in the data. We need to map this to a series of\n      // objects with keys corresponding to the column names.\n      function zipRowWithColumns(row) {\n        const obj = {};\n        row.forEach((val, i) => {\n          obj[columns[i]] = val;\n        });\n        return obj;\n      }\n\n      // Instantiate a new Tabulator table in the element.\n      // This will also destroy any existing table in the element\n      // so we don't have to worry about adding and removing tables.\n      new Tabulator(el, {\n        data: data.map(zipRowWithColumns),\n        layout: \"fitColumns\",\n        columns: columnsDef,\n      });\n    }\n}\n\nShiny.outputBindings.register(...);",
      "// Import the Tabulator library\nimport { Tabulator } from \"./tabulator_esm.min.js\";\n\nclass TabulatorOutputBinding extends Shiny.OutputBinding {\n    find(scope) { ... }\n\n    renderValue(el, payload) {\n      // Unpack the info we get from the associated render function\n      const { columns, data, type_hints } = payload;\n\n      // Convert the column names to a format that Tabulator expects\n      const columnsDef = columns.map((col, i) => {\n        return {\n          title: col,\n          field: col,\n          hozAlign: type_hints[i] === \"numeric\" ? \"right\" : \"left\",\n        };\n      });\n\n      // Data comes in as a series of rows with each row having as many elements\n      // as there are columns in the data. We need to map this to a series of\n      // objects with keys corresponding to the column names.\n      function zipRowWithColumns(row) {\n        const obj = {};\n        row.forEach((val, i) => {\n          obj[columns[i]] = val;\n        });\n        return obj;\n      }\n\n      // Instantiate a new Tabulator table in the element.\n      // This will also destroy any existing table in the element\n      // so we don't have to worry about adding and removing tables.\n      new Tabulator(el, {\n        data: data.map(zipRowWithColumns),\n        layout: \"fitColumns\",\n        columns: columnsDef,\n      });\n    }\n}\n\nShiny.outputBindings.register(...);",
      "if (Shiny) {\n    class TabulatorOutputBinding extends Shiny.OutputBinding { ... }\n\n    Shiny.outputBindings.register(...);\n}",
      "if (Shiny) {\n    class TabulatorOutputBinding extends Shiny.OutputBinding { ... }\n\n    Shiny.outputBindings.register(...);\n}",
      "from shiny import App, Inputs, ui\nfrom shiny.module import resolve_id\n\nfrom htmltools import HTMLDependency\n\ntabulator_dep = HTMLDependency(\n    \"tabulator\",\n    \"5.5.2\",\n    source={\"subdir\": \"tabulator\"},\n    script={\"src\": \"tableComponent.js\", \"type\": \"module\"},\n    stylesheet={\"href\": \"tabulator.min.css\"},\n    all_files=True,\n)\n\ndef output_tabulator(id, height=\"200px\"):\n    return ui.div(\n        tabulator_dep,\n        # Use resolve_id so that our component will work in a module\n        id=resolve_id(id),\n        class_=\"shiny-tabulator-output\",\n        style=f\"height: {height}\",\n    )",
      "from shiny import App, Inputs, ui\nfrom shiny.module import resolve_id\n\nfrom htmltools import HTMLDependency\n\ntabulator_dep = HTMLDependency(\n    \"tabulator\",\n    \"5.5.2\",\n    source={\"subdir\": \"tabulator\"},\n    script={\"src\": \"tableComponent.js\", \"type\": \"module\"},\n    stylesheet={\"href\": \"tabulator.min.css\"},\n    all_files=True,\n)\n\ndef output_tabulator(id, height=\"200px\"):\n    return ui.div(\n        tabulator_dep,\n        # Use resolve_id so that our component will work in a module\n        id=resolve_id(id),\n        class_=\"shiny-tabulator-output\",\n        style=f\"height: {height}\",\n    )",
      "from shiny.render.renderer import Jsonifiable, Renderer\n\n\nclass render_tabulator(Renderer[pd.DataFrame]):\n    \"\"\"\n    Render a pandas dataframe as a tabulator table.\n    \"\"\"\n\n    def auto_output_ui(self):\n        \"\"\"\n        Express UI for the tabulator renderer\n        \"\"\"\n        return ui.output_tabulator(self.output_name)\n\n    async def transform(self, value: pd.DataFrame) -> Jsonifiable:\n        \"\"\"\n        Transform a pandas dataframe into a JSONifiable object that can be\n        passed to the tabulator HTML dependency.\n        \"\"\"\n        if not isinstance(value, pd.DataFrame):\n            # Throw an error if the value is not a dataframe\n            raise TypeError(f\"Expected a pandas.DataFrame, got {type(value)}. \")\n\n        # Get data from dataframe as a list of lists where each inner list is a\n        # row, column names as array of strings and types of each column as an\n        # array of strings\n        return {\n            \"data\": value.values.tolist(),\n            \"columns\": value.columns.tolist(),\n            \"type_hints\": value.dtypes.astype(str).tolist(),\n        }",
      "from shiny.render.renderer import Jsonifiable, Renderer\n\n\nclass render_tabulator(Renderer[pd.DataFrame]):\n    \"\"\"\n    Render a pandas dataframe as a tabulator table.\n    \"\"\"\n\n    def auto_output_ui(self):\n        \"\"\"\n        Express UI for the tabulator renderer\n        \"\"\"\n        return ui.output_tabulator(self.output_name)\n\n    async def transform(self, value: pd.DataFrame) -> Jsonifiable:\n        \"\"\"\n        Transform a pandas dataframe into a JSONifiable object that can be\n        passed to the tabulator HTML dependency.\n        \"\"\"\n        if not isinstance(value, pd.DataFrame):\n            # Throw an error if the value is not a dataframe\n            raise TypeError(f\"Expected a pandas.DataFrame, got {type(value)}. \")\n\n        # Get data from dataframe as a list of lists where each inner list is a\n        # row, column names as array of strings and types of each column as an\n        # array of strings\n        return {\n            \"data\": value.values.tolist(),\n            \"columns\": value.columns.tolist(),\n            \"type_hints\": value.dtypes.astype(str).tolist(),\n        }",
      "...\nif not isinstance(value, pd.DataFrame):\n    # Throw an error if the value is not a dataframe\n    raise TypeError(f\"Expected a pandas.DataFrame, got {type(value)}. \")\n...",
      "...\nif not isinstance(value, pd.DataFrame):\n    # Throw an error if the value is not a dataframe\n    raise TypeError(f\"Expected a pandas.DataFrame, got {type(value)}. \")\n...",
      "...\nreturn {\n    \"data\": value.values.tolist(),\n    \"columns\": value.columns.tolist(),\n    \"type_hints\": value.dtypes.astype(str).tolist(),\n}\n...",
      "...\nreturn {\n    \"data\": value.values.tolist(),\n    \"columns\": value.columns.tolist(),\n    \"type_hints\": value.dtypes.astype(str).tolist(),\n}\n...",
      "from pathlib import Path\nimport pandas as pd\nfrom shiny.express import input, ui\n\n# Code for the custom output\n...\n\n# App code\nui.input_slider(\"n\", \"Number of rows to show\", 1, 20, 10)\n\n@render_tabulator\ndef tabulatorTable():\n    return pd.read_csv(Path(__file__).parent / \"mtcars.csv\").head(input.n())",
      "from pathlib import Path\nimport pandas as pd\nfrom shiny.express import input, ui\n\n# Code for the custom output\n...\n\n# App code\nui.input_slider(\"n\", \"Number of rows to show\", 1, 20, 10)\n\n@render_tabulator\ndef tabulatorTable():\n    return pd.read_csv(Path(__file__).parent / \"mtcars.csv\").head(input.n())",
      "from pathlib import Path\nimport pandas as pd\nfrom shiny import App, Inputs, ui\n\n# Code for the custom output: output_tabulator and render_tabulator\n...\n\n# App code\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of rows to show\", 1, 20, 10),\n    output_tabulator(\"tabulatorTable\"),\n)\n\n\ndef server(input: Inputs):\n    @render_tabulator\n    def tabulatorTable():\n        csv_file = Path(__file__).parent / \"mtcars.csv\"\n        return pd.read_csv(csv_file).head(input.n())\n\n\napp = App(app_ui, server)",
      "from pathlib import Path\nimport pandas as pd\nfrom shiny import App, Inputs, ui\n\n# Code for the custom output: output_tabulator and render_tabulator\n...\n\n# App code\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of rows to show\", 1, 20, 10),\n    output_tabulator(\"tabulatorTable\"),\n)\n\n\ndef server(input: Inputs):\n    @render_tabulator\n    def tabulatorTable():\n        csv_file = Path(__file__).parent / \"mtcars.csv\"\n        return pd.read_csv(csv_file).head(input.n())\n\n\napp = App(app_ui, server)",
      "\n\n\n\nOur app with custom Tabulator component.\n\n\n"
    ]
  },
  {
    "id": "docs_custom-components-pkg_html",
    "url": "docs/custom-components-pkg.html",
    "title": "Custom components package ‚Äì Shiny for Python",
    "description": "",
    "content": "- üèóÔ∏è Extending\n- Custom components package\n\nCustom components package\n\nWhile there are a large number of pre-built components available for Shiny, there are times when you may want to create your own. In this article we‚Äôll walk through the process of creating a custom input component package for Shiny. We‚Äôll be using React and Typescript to build the component, but the process is similar for other languages and frameworks.\n\nIf you just want to build a one-off component for a single app, a full package may be overkill. See the accompanying article Custom JavaScript component for a simpler approach.\n\nWhat we‚Äôll build\n\nThe component we are going to build is a color picker that returns the hex-code of the chosen color as a string for the user to use in their app. The component will be built using React and Typescript and will be packaged as a python package that can be deployed to pypi and installed with pip so other users can easily use it in their apps.\n\nThe example here uses typescript. If you don‚Äôt want to use typescript, don‚Äôt worry! Javascript works just fine. To make this example JavaScript you can simply erase the type annotations, or run the typescript compiler on the source code to strip them out automatically.\n\nThe component itself is based on the library react-color. We‚Äôll be using the SketchPicker component from that library to build our custom component. The full code is as follows.\n\nYour component may look very different, but at the end of the day it just needs to be a self-contained react component.\n\nThis article touches on building an input component. However, it‚Äôs also possible to build output components. The process and project structure is very similar to inputs. Throughout this article look for the ‚ÄúWhat about an output binding?‚Äù tips for more information on how to build an output binding. You can generate an output template with shiny create --template js-output.\n\nThe quick version\n\nIf you just want to get up and running with the code, you can start with one of the available templates available with the shiny create --template js-react command and then run the commands provided after the template is created. You can also see the full list of JavaScript extension templates with shiny create --template js-component.\n\nDevelopment workflow\n\nWhile there are lots of ways to develop components with live-feedback (e.g. Storybook, dev servers like vite, etc) an easy way to develop a component with our package structure is to use the example app, an editable mode pip install, and the watch mode for our build step. We can do this with the following steps:\n\n- Install the package in ‚Äúeditable mode‚Äù with pip install -e .\n- Run the bundler in watch mode with npm run watch. This will watch the srcts directory for changes and automatically rebuild the JavaScript when it detects a change.\n- Run the example app in live-reload mode. If you‚Äôre using VScode, the Shiny extension enables this automatically when pressing the run button above the app script.\n\nInstall the package in ‚Äúeditable mode‚Äù with pip install -e .\n\nRun the bundler in watch mode with npm run watch. This will watch the srcts directory for changes and automatically rebuild the JavaScript when it detects a change.\n\nRun the example app in live-reload mode. If you‚Äôre using VScode, the Shiny extension enables this automatically when pressing the run button above the app script.\n\nNow you can update your component JavaScript/python functions and your app will automatically reload with the changes. Happy developing!\n\n- Once you‚Äôre happy with your component, you can deploy to PyPi. For instructions on doing this see the Python Packaging User Guide.\n\nIf you want to understand what‚Äôs going on under the hood, read on!\n\nThe component we‚Äôre creating here uses React, but there are templates for building components with plain JavaScript as well. The general concepts we talk about here apply to all of the templates so feel free to use whichever one you prefer.\n\nProject structure\n\nThe template from above contains the color picker component above, along with all the scaffolding neccesary to build and package it as a python package.Let‚Äôs take a look at the files that are created and talk through why they are there.\n\npackage.json\n\nThis is the standard package.json file for a JavaScript project. It contains the dependencies and build commands for the JavaScript code. The important sections are: - A dependency on the shiny-bindings-react package. This is a JavaScript package with helpers for making it easier to create input and output bindings using React. Later we use the function makeReactInput() from this package to make Shiny aware of the component and its role as an input binding. - build command. The build command (and accompanying watch command) use esbuild to transpile the typescript to JavaScript and bundle the dependencies (like shiny-bindings-react and react itself.\n\nThe .package-lock.json file is generated by npm and contains the exact versions of the dependencies used in the project. You shouldn‚Äôt need to modify this file by hand.\n\nsrcts/index.tsx\n\nThis is where all the typescript/JavaScript code lives. We talked about the react component - ColorPickerReact - above, but it‚Äôs worth touching on the code that binds that react component with Shiny so it functions as an input:\n\nIn here we declare the tagName of for our component. This name is used to generate the correct markup with python later. Under the hood makeReactInput() generates a webcomponent to hold our input. A webcomponent is a custom HTML element that allows us to bind custom markup and JavaScript logic to a point in our app by simply writing the custom tag into the app‚Äôs HTML. The tagName argument provided here represents the name of that custom component we‚Äôre generating. In this case we‚Äôre registering the component as <fancy-color-picker>.\n\nThis example uses the webcomponent based interface provided by the @posit-dev/shiny-bindings-react package, but if you want lower level access you can use the built-in class-based interface. See the Shiny for R documentation for more details.\n\nNext we provide an initialValue for the component. This is the value that will be used when the component is first rendered. In this case we‚Äôre using #fff.\n\nFinally, we provide a renderComp function. This function is called whenever the component needs to be rendered. It is passed an object with two properties, onNewValue and initialValue. onNewValue is a callback that should be called whenever the value of the component changes. In this case we‚Äôre just passing the value of the color picker to the callback. This will send the value to Shiny and update the value of the input. initialValue is the value that should be used to initialize the component. In this case we‚Äôre just passing the value we were given to the ColorPickerReact component.\n\nThe component we‚Äôre building here is an input. However, you may be interested in building an output binding. There is a template for this but the process is not too different. Just instead of using makeReactInput() you would use makeReactOutput(). Here‚Äôs how we would do it for a simple output that displays a color:\n\nfancy_color_picker/\n\ndistjs/*\n\nThis is where the bundled JavaScript from srcts gets placed. You shouldn‚Äôt ever need to modify anything in here by hand. It will be automatically generated when you run npm run build. It is important to note the path though, as we will need to tell Shiny where to find this JavaScript when we declare the HTMLDependency‚Ä¶\n\nfancy_color_picker.py\n\nThis is the main python script for the package. It contains the code that tells Shiny about the component and how to render it. The important parts are:\n\nfancy_color_picker_deps\n\nThis sets up an ‚Äúhtml-dependency‚Äù for our component. HTMLDependencies are Shiny‚Äôs way of keeping track of what resources are needed for the currently displayed elements. This html dependency is telling Shiny that whenever there is a fancy_color_picker on the page in an app, it needs to also have the bundled JavaScript at distjs/index.js as well.\n\nHere we just declare JavaScript dependencies, but you can also include style sheets with the stylesheet argument.\n\nfancy_color_picker\n\nThis is the actual UI function for our component. Aka the one that gets called by the user in their app‚Äôs UI to add our component to their app.\n\nBecause makeReactInput() works by creating a webcomponent, to render our input we just need to pass the tag name we set up in the tagName argument to makeReactInput(). Next, we pass the fancy_color_picker_deps html dependency we just made and the ID of the binding and we‚Äôre good to go!\n\nBy using the resolve_id(id) function here when declaring our ID, we make sure that the component works Shiny modules where the ID of the component needs to be prefixed with the module name.\n\nLike with the JavaScript, the process for setting up the python code for an output binding is not too different. Although there is a bit of extra work because we need to build both the ui and server components. Here‚Äôs how we would do that for the color shower output binding we defined above:\n\nMake sure you add these to your __init__.py file so they are exposed to users of your package. Again, there is an output binding template in the shiny create menu that can get you up and running quickly.\n\n__init__.py\n\nThis is how we tell python what functions/ variables our package exposes. In this case it‚Äôs a single function, fancy_color_picker. If you were to add more components you would also need to register them here for them to be importable by users in their apps. For more information on the structure of these files see the python docs site.\n\npyproject.toml\n\nThis file is used to tell python/pypi about our package. It contains the name of the package, the version, and the dependencies. A deep dive into the structure of this file is outside the scope of this article, but you can find more information in the [Python Packaging Authority docs.]https://packaging.python.org/en/latest/guides/writing-pyproject-toml/)\n\ntsconfig.json\n\nThis file is used to configure typescript, which we are using to write our component. Like the pyproject.toml file, a deep dive into the structure of this file is outside the scope of this article, but you can find more information in the typescript docs.\n\nexample-app/app.py\n\n- Express\n- Core\n\nThis is a simple example app that can be used to test the component while developing. It uses the fancy_color_picker function we defined in fancy_color_picker.py to add the component to the app. It also uses the render.text decorator to render the value of the input to the page.\n\nIn our output binding example we defined an output that conveniently displays colors. If we were packaging up two components like this we could/should modify the example app to showcase both of them.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "import { SketchPicker } from \"react-color\";\nimport React from \"react\";\n\nfunction ColorPickerReact({\n  initialValue,\n  onNewValue,\n}: {\n  // The initial value for the color picker\n  initialValue: string;\n  // A callback that should be called whenever the color is changed\n  onNewValue: (x: string) => void;\n}) {\n  const [currentColor, setCurrentColor] = React.useState(initialValue);\n\n  return (\n    <SketchPicker\n      color={currentColor}\n      onChange={(color) => {\n        setCurrentColor(color.hex);\n        onNewValue(color.hex);\n      }}\n    />\n  );\n}",
      "import { SketchPicker } from \"react-color\";\nimport React from \"react\";\n\nfunction ColorPickerReact({\n  initialValue,\n  onNewValue,\n}: {\n  // The initial value for the color picker\n  initialValue: string;\n  // A callback that should be called whenever the color is changed\n  onNewValue: (x: string) => void;\n}) {\n  const [currentColor, setCurrentColor] = React.useState(initialValue);\n\n  return (\n    <SketchPicker\n      color={currentColor}\n      onChange={(color) => {\n        setCurrentColor(color.hex);\n        onNewValue(color.hex);\n      }}\n    />\n  );\n}",
      "\n\n\n\nOutput of ColorPickerReact component\n\n\n",
      "‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ package-lock.json\n‚îú‚îÄ‚îÄ srcts\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.tsx\n‚îú‚îÄ‚îÄ example-app\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ app.py\n‚îú‚îÄ‚îÄ fancy_color_picker\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ distjs\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.js\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ fancy_color_picker.py\n‚îú‚îÄ‚îÄ pyproject.toml\n‚îú‚îÄ‚îÄ README.md\n‚îî‚îÄ‚îÄ tsconfig.json",
      "‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ package-lock.json\n‚îú‚îÄ‚îÄ srcts\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.tsx\n‚îú‚îÄ‚îÄ example-app\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ app.py\n‚îú‚îÄ‚îÄ fancy_color_picker\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ distjs\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.js\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ fancy_color_picker.py\n‚îú‚îÄ‚îÄ pyproject.toml\n‚îú‚îÄ‚îÄ README.md\n‚îî‚îÄ‚îÄ tsconfig.json",
      "import { SketchPicker } from \"react-color\";\nimport type { ColorResult } from \"react-color\";\nimport React from \"react\";\n\nimport { makeReactInput } from \"@posit-dev/shiny-bindings-react\";\n\n// Generates a new input binding that renders the supplied react component\n// into the root of the webcomponent.\nmakeReactInput({\n  tagName: \"fancy-color-picker\",\n  initialValue: \"#fff\",\n  renderComp: ({ initialValue, onNewValue }) => (\n    <ColorPickerReact\n      initialValue={initialValue}\n      onNewValue={(color) => onNewValue(color)}\n    />\n  ),\n});\n\n// Color Picker React component\nfunction ColorPickerReact(...) { ... }",
      "import { SketchPicker } from \"react-color\";\nimport type { ColorResult } from \"react-color\";\nimport React from \"react\";\n\nimport { makeReactInput } from \"@posit-dev/shiny-bindings-react\";\n\n// Generates a new input binding that renders the supplied react component\n// into the root of the webcomponent.\nmakeReactInput({\n  tagName: \"fancy-color-picker\",\n  initialValue: \"#fff\",\n  renderComp: ({ initialValue, onNewValue }) => (\n    <ColorPickerReact\n      initialValue={initialValue}\n      onNewValue={(color) => onNewValue(color)}\n    />\n  ),\n});\n\n// Color Picker React component\nfunction ColorPickerReact(...) { ... }",
      "// Simple react output binding that renders a div with the background color\nmakeReactOutput<{ value: string }>({\n  tagName: \"fancy-color-shower\",\n  renderComp: ({ value }) => (\n    <div\n      style={{\n        backgroundColor: value,\n        border: \"1px solid black\",\n        height: \"100px\",\n        width: \"100px\",\n      }}\n    />\n  ),\n});",
      "// Simple react output binding that renders a div with the background color\nmakeReactOutput<{ value: string }>({\n  tagName: \"fancy-color-shower\",\n  renderComp: ({ value }) => (\n    <div\n      style={{\n        backgroundColor: value,\n        border: \"1px solid black\",\n        height: \"100px\",\n        width: \"100px\",\n      }}\n    />\n  ),\n});",
      "from pathlib import PurePath\nfrom htmltools import HTMLDependency, Tag\nfrom shiny.module import resolve_id\n\n# This object is used to let Shiny know where the dependencies needed to run\n# our component all live. In this case, we're just using a single JavaScript\n# file but we could also include CSS.\nfancy_color_picker_deps = HTMLDependency(\n    \"fancy_color_picker\",\n    \"1.0.0\",\n    source={\n        \"package\": \"fancy_color_picker\",\n        \"subdir\": str(PurePath(__file__).parent / \"distjs\"),\n    },\n    script={\"src\": \"index.js\", \"type\": \"module\"},\n)\n\n\ndef fancy_color_picker(id: str):\n    \"\"\"\n    A shiny input.\n    \"\"\"\n    return Tag(\n        # This is the name of the custom tag we created with our webcomponent\n        \"fancy-color-picker\",\n        fancy_color_picker_deps,\n        # Use resolve_id so that our component will work in a module\n        id=resolve_id(id),\n    )",
      "from pathlib import PurePath\nfrom htmltools import HTMLDependency, Tag\nfrom shiny.module import resolve_id\n\n# This object is used to let Shiny know where the dependencies needed to run\n# our component all live. In this case, we're just using a single JavaScript\n# file but we could also include CSS.\nfancy_color_picker_deps = HTMLDependency(\n    \"fancy_color_picker\",\n    \"1.0.0\",\n    source={\n        \"package\": \"fancy_color_picker\",\n        \"subdir\": str(PurePath(__file__).parent / \"distjs\"),\n    },\n    script={\"src\": \"index.js\", \"type\": \"module\"},\n)\n\n\ndef fancy_color_picker(id: str):\n    \"\"\"\n    A shiny input.\n    \"\"\"\n    return Tag(\n        # This is the name of the custom tag we created with our webcomponent\n        \"fancy-color-picker\",\n        fancy_color_picker_deps,\n        # Use resolve_id so that our component will work in a module\n        id=resolve_id(id),\n    )",
      "fancy_color_picker_deps = HTMLDependency(\n    \"fancy_color_picker\",\n    \"1.0.0\",\n    source={\n        \"package\": \"fancy_color_picker\",\n        \"subdir\": str(PurePath(__file__).parent / \"distjs\"),\n    },\n    script={\"src\": \"index.js\", \"type\": \"module\"},\n)",
      "fancy_color_picker_deps = HTMLDependency(\n    \"fancy_color_picker\",\n    \"1.0.0\",\n    source={\n        \"package\": \"fancy_color_picker\",\n        \"subdir\": str(PurePath(__file__).parent / \"distjs\"),\n    },\n    script={\"src\": \"index.js\", \"type\": \"module\"},\n)",
      "def fancy_color_picker(id: str):\n    \"\"\"\n    A shiny input.\n    \"\"\"\n    return Tag(\n        # This is the name of the custom tag we created with our webcomponent\n        \"fancy-color-picker\",\n        fancy_color_picker_deps,\n        # Use resolve_id so that our component will work in a module\n        id=resolve_id(id),\n    )",
      "def fancy_color_picker(id: str):\n    \"\"\"\n    A shiny input.\n    \"\"\"\n    return Tag(\n        # This is the name of the custom tag we created with our webcomponent\n        \"fancy-color-picker\",\n        fancy_color_picker_deps,\n        # Use resolve_id so that our component will work in a module\n        id=resolve_id(id),\n    )",
      "from shiny.render.renderer import Renderer, Jsonifiable\n\nclass render_color(Renderer[str]):\n    \"\"\"\n    Render a color\n    \"\"\"\n\n    # Express mode UI\n    def auto_output_ui(self, id: str) -> Tag:\n        return output_color(self.output_id)\n\n    # Transform the app value into a JSONifiable object\n    async def transform(self, value: str) -> Jsonifiable:\n        if not isinstance(res, str):\n            # Throw an error if the value is not a string\n            raise TypeError(f\"Expected a string, got {type(res)}. \")\n\n        # Send the results to the client. Make sure that this is a serializable\n        # object and matches what is expected in the JavaScript code.\n        return {\"value\": value}\n\n\ndef output_color(id: str):\n    \"\"\"\n    Show a color\n    \"\"\"\n    return Tag(\n        \"fancy-color-shower\",\n        fancy_color_picker_deps,\n        id=resolve_id(id),\n    )",
      "from shiny.render.renderer import Renderer, Jsonifiable\n\nclass render_color(Renderer[str]):\n    \"\"\"\n    Render a color\n    \"\"\"\n\n    # Express mode UI\n    def auto_output_ui(self, id: str) -> Tag:\n        return output_color(self.output_id)\n\n    # Transform the app value into a JSONifiable object\n    async def transform(self, value: str) -> Jsonifiable:\n        if not isinstance(res, str):\n            # Throw an error if the value is not a string\n            raise TypeError(f\"Expected a string, got {type(res)}. \")\n\n        # Send the results to the client. Make sure that this is a serializable\n        # object and matches what is expected in the JavaScript code.\n        return {\"value\": value}\n\n\ndef output_color(id: str):\n    \"\"\"\n    Show a color\n    \"\"\"\n    return Tag(\n        \"fancy-color-shower\",\n        fancy_color_picker_deps,\n        id=resolve_id(id),\n    )",
      "from .fancy_color_picker import fancy_color_picker\n\n__all__ = [\n    \"fancy_color_picker\",\n]",
      "from .fancy_color_picker import fancy_color_picker\n\n__all__ = [\n    \"fancy_color_picker\",\n]",
      "from fancy_color_picker import fancy_color_picker\nfrom shiny.express import render\n\nfancy_color_picker(\"myComponent\")\n\n@render.text\ndef valueOut():\n    return f\"Value from input is {input.myComponent()}\"",
      "from fancy_color_picker import fancy_color_picker\nfrom shiny.express import render\n\nfancy_color_picker(\"myComponent\")\n\n@render.text\ndef valueOut():\n    return f\"Value from input is {input.myComponent()}\"",
      "from fancy_color_picker import fancy_color_picker\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    fancy_color_picker(\"myComponent\"),\n    ui.output_text(\"valueOut\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def valueOut():\n        return f\"Value from input is {input.myComponent()}\"\n\napp = App(app_ui, server)",
      "from fancy_color_picker import fancy_color_picker\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    fancy_color_picker(\"myComponent\"),\n    ui.output_text(\"valueOut\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def valueOut():\n        return f\"Value from input is {input.myComponent()}\"\n\napp = App(app_ui, server)",
      "\n\n\n\nExample app running with color picker\n\n\n",
      "from fancy_color_picker import fancy_color_picker, render_color\nimport shiny.express\n\nfancy_color_picker(\"myComponent\")\n\n@render_color\ndef myColor():\n    return input.myComponent()",
      "from fancy_color_picker import fancy_color_picker, render_color\nimport shiny.express\n\nfancy_color_picker(\"myComponent\")\n\n@render_color\ndef myColor():\n    return input.myComponent()",
      "from fancy_color_picker import fancy_color_picker, output_color, render_color\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    fancy_color_picker(\"myComponent\"),\n    output_color(\"myColor\"),\n)\n\ndef server(input, output, session):\n    @render_color\n    def myColor():\n        return input.myComponent()\n\napp = App(app_ui, server)",
      "from fancy_color_picker import fancy_color_picker, output_color, render_color\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    fancy_color_picker(\"myComponent\"),\n    output_color(\"myColor\"),\n)\n\ndef server(input, output, session):\n    @render_color\n    def myColor():\n        return input.myComponent()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "docs_comp-streamlit_html",
    "url": "docs/comp-streamlit.html",
    "title": "Streamlit ‚Äì Shiny for Python",
    "description": "",
    "content": "- üìä Comparisons\n- Streamlit\n\nStreamlit\n\nThe idea of Streamlit is to simplify application development by rerunning the entire application script whenever any user input changes. This strategy leads to a great initial user experience, but quickly becomes constricting as your application grows in scope.\n\nShiny and Streamlit differ in a few key ways:\n\n- Shiny‚Äôs reactive execution means that elements are minimally re-rendered.\n- You can build large Shiny applications without manually managing application state or caching data.\n- Shiny allows you to easily customize the look and feel of your application.\n\nShiny is designed to support your application‚Äôs growth without extensive rewriting; the patterns you learn when developing a simple app are robust enough to handle a complicated one.\n\nStreamlit example\n\nConsider this basic Streamlit application which filters a dataset and draws two plots. The nice thing about this application is that it‚Äôs very similar to a non-interactive script. This makes getting started very easy because all you need to do to turn this script into an application is to add some Streamlit function calls to your variables and outputs. At the beginning, Streamlit doesn‚Äôt demand that you change your code to fit into a particular structure.\n\nThe way Streamlit achieves this is by rerunning your script from start to finish every time the user takes an action. While this works okay for small applications it is inefficient, and becomes intractable for larger more complicated ones. In this case clicking the Add Smoother button will cause the entire app to reload, even though the button is only used by one plot.\n\nVideo\n\nShiny translation\n\nShiny express apps look very similar to Streamlit apps, but run much more efficiently. Unlike Streamlit, Shiny does not rerender the application every time an input is changed, but instead keeps track of the relationships between components and minimally rerenders the components which need to be updated. The framework does this automatically when the application is run, and so you don‚Äôt need to manually define the execution method for your app.\n\n- Express\n- Core\n\nThe main difference between Streamlit and Shiny is code organization. Since Streamlit runs everything from top to bottom it doesn‚Äôt particularly matter how your code is organized. In order to benefit from Shiny‚Äôs execution model, you need to organize your code into decorated functions.\n\nFor example, take this part of the application code:\n\nThese functions define the three main nodes of the application, as well as the relationships between them. The @render.plot and @reactive.calc decorators identify the functions as reactive functions which need to re-execute in response to upstream changes, and the filtered_data() and input.* calls define the relationships between these components. The decorators allow Shiny to construct a computation graph of the application as it runs, and only rerender an element when one of its upstream dependencies changes.\n\nExtending the application\n\nOrganizing your app this way means that you can extend the application without rewriting it. For example, let‚Äôs add a button which resets the slider. In Shiny you can do this by adding a @reactive.effect function which calls the ui.update_slider() function. This adds a node to the computation graph and everything works as you‚Äôd expect it to. Importantly, we can extend the application without changing how we think about the overall application.\n\n- Express\n- Core\n\nStreamlit requires rewriting\n\nStreamlit is optimized for very simple applications, but the cost of that is that Streamlit applications can be quite challenging to extend. For example, to add a reset button to Streamlit you might expect that something like this would work. After all, if your script runs from top-to-bottom whenever a button is pressed, shouldn‚Äôt you be able to redefine a slider using an if statement?\n\nUnfortunately, this doesn‚Äôt work because Streamlit maintains hidden application state, and resetting the slider value causes a name conflict. In order to get this to work you need to first initialize a state variable slider which matches the key of the slider input widget, then you need to define a callback function and pass that as an argument to the button function. Streamlit then uses the slider key to look for a variable with that same key session state. This variable defines the value of the slider.\n\nThe difficulty here is that in order to get the app to work you need to change your mental model of how the application runs. Instead of thinking about your app as a simple Python script which reruns when anything changes, you need to start thinking about manually manipulating the state variables which persist across runs. The limitations of the simple rerun-everything model will require you to add more and more workarounds like this as your application grows in complexity.\n\nCustomizing UI\n\nShiny embraces UI as HTML, and as a result it‚Äôs relatively easy to implement bespoke UI customizations. For example, lets change the color of one button without changing the colors of any other buttons in our app. Since Shiny allows you to add HTML attributes like class/style, and provides a CSS framework (Bootstrap), we can make primary button by just adding an appropriate class attribute.\n\nYou might not need to customize the CSS of your app that often, but it‚Äôs important to have the option if your application calls for it. For example, suppose your company wants to publish your application publicly on their website, but in order to do that you need to make sure that it matches their style guide. You can do that with Shiny because it supports the same styling patterns that your company is probably already using.\n\nStreamlit\n\nThis task is almost impossible in Streamlit, and requires a JavaScript workaround.\n\nDespite its complexity, this is the best way to change the style of an individual element in Streamlit. How this pattern works is:\n\n- Return an empty html component with a script tag\n- Use that script to break out of the iframe and access the parent document\n- Search through the parent elements for those which matches a string\n- Change the style of those elements\n\nThis pattern is fairly tricky to understand, and can lead to some unexpected bugs. For instance changes to page structure or button names can cause the styling to behave unpredictably.\n\nStreamlit was designed around simple applications which didn‚Äôt require customized styling, so it‚Äôs no surprise that this type of styling is difficult. It is, however, an example of how the up-front simplicity of Streamlit has a significant cost when you go outside the boundaries of that simplicity. The fact that this is a fairly common workaround is an indication that Streamlit users commonly exceed those boundaries.\n\nPrivacy and security\n\nStreamlit collects user information on everyone who visits a running Streamlit app unless you opt-out. The data is sent to a American server owned by Snowflake so that the company can analyze user behavior. This can cause legal and security problems because your application may be subject to data governance policies which forbid this type of data collection. For example, if your users do not explicitly provide consent to transfer data to a US company, sending data to Snowflake might be a GDPR violation. In order to prevent data collection you need to set gatherUsageStats = false in your Streamlit config file, which is an easy thing to forget to include in a given Streamlit deployment.\n\nShiny does not collect or report user data of any kind, and it never will. We do not believe that open-source tools should collect user data without explicit consent.\n\nConclusion\n\nShiny allows you to build much more performant and extensible applications than Streamlit. The patterns that you use to build a simple Shiny application are the same ones that you use to build a complex one, and you never need to change your mental model of how the application works. This design will let your application grow along with the scope of your problem, and you can have confidence that the framework has the tools that you need to handle almost any requirement.\n\n",
    "code_examples": [
      "import streamlit as st\nimport pandas as pd\nfrom plotnine import ggplot, geom_density, aes, theme_light, geom_point, stat_smooth\nfrom pathlib import Path\n\ninfile = Path(__file__).parent / \"penguins.csv\"\ndf = pd.read_csv(infile)\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"Body Mass (g)\", fill=\"Species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot.draw()\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"Bill Length (mm)\",\n                y=\"Bill Depth (mm)\",\n                color=\"Species\",\n                group=\"Species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot.draw()\n\n\nwith st.sidebar:\n    mass = st.slider(\"Mass\", 2000, 8000, 6000)\n    smoother = st.checkbox(\"Add Smoother\")\n\nfilt_df = df.loc[df[\"Body Mass (g)\"] < mass]\n\nst.pyplot(scatter_plot(filt_df, smoother))\nst.pyplot(dist_plot(filt_df))",
      "import streamlit as st\nimport pandas as pd\nfrom plotnine import ggplot, geom_density, aes, theme_light, geom_point, stat_smooth\nfrom pathlib import Path\n\ninfile = Path(__file__).parent / \"penguins.csv\"\ndf = pd.read_csv(infile)\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"Body Mass (g)\", fill=\"Species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot.draw()\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"Bill Length (mm)\",\n                y=\"Bill Depth (mm)\",\n                color=\"Species\",\n                group=\"Species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot.draw()\n\n\nwith st.sidebar:\n    mass = st.slider(\"Mass\", 2000, 8000, 6000)\n    smoother = st.checkbox(\"Add Smoother\")\n\nfilt_df = df.loc[df[\"Body Mass (g)\"] < mass]\n\nst.pyplot(scatter_plot(filt_df, smoother))\nst.pyplot(dist_plot(filt_df))",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\nfrom pathlib import Path\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom plots import dist_plot, scatter_plot\nfrom shiny import reactive, render, ui\nfrom shiny.express import input, ui\n\ndf = load_penguins()\n\nwith ui.sidebar():\n    ui.input_slider(\"mass\", \"Mass\", 2000, 8000, 6000)\n    ui.input_checkbox(\"smoother\", \"Add Smoother\")\n\n\n@reactive.calc\ndef filtered_data():\n    filt_df = df.copy()\n    filt_df = filt_df.loc[df[\"body_mass_g\"] < input.mass()]\n    return filt_df\n\n\nwith ui.card():\n\n    @render.plot\n    def scatter():\n        return scatter_plot(filtered_data(), input.smoother())\n\n\nwith ui.card():\n\n    @render.plot\n    def mass_distribution():\n        return dist_plot(filtered_data())\n\n## file: requirements.txt\nshiny\npalmerpenguins\nplotnine\npandas\n\n## file: plots.py\nfrom plotnine import aes, geom_density, geom_point, ggplot, stat_smooth, theme_light\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"body_mass_g\", fill=\"species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"bill_length_mm\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                group=\"species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\nfrom pathlib import Path\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom plots import dist_plot, scatter_plot\nfrom shiny import reactive, render, ui\nfrom shiny.express import input, ui\n\ndf = load_penguins()\n\nwith ui.sidebar():\n    ui.input_slider(\"mass\", \"Mass\", 2000, 8000, 6000)\n    ui.input_checkbox(\"smoother\", \"Add Smoother\")\n\n\n@reactive.calc\ndef filtered_data():\n    filt_df = df.copy()\n    filt_df = filt_df.loc[df[\"body_mass_g\"] < input.mass()]\n    return filt_df\n\n\nwith ui.card():\n\n    @render.plot\n    def scatter():\n        return scatter_plot(filtered_data(), input.smoother())\n\n\nwith ui.card():\n\n    @render.plot\n    def mass_distribution():\n        return dist_plot(filtered_data())\n\n## file: requirements.txt\nshiny\npalmerpenguins\nplotnine\npandas\n\n## file: plots.py\nfrom plotnine import aes, geom_density, geom_point, ggplot, stat_smooth, theme_light\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"body_mass_g\", fill=\"species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"bill_length_mm\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                group=\"species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\nfrom pathlib import Path\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom plots import dist_plot, scatter_plot\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_slider(\"mass\", \"Mass\", 2000, 8000, 6000),\n        ui.input_checkbox(\"smoother\", \"Add Smoother\"),\n    ),\n    ui.card(ui.output_plot(id=\"scatter\")),\n    ui.card(ui.output_plot(id=\"mass_distribution\")),\n)\n\n\ndef server(input, output, session):\n    df = load_penguins()\n    print(df)\n\n    @reactive.calc\n    def filtered_data():\n        filt_df = df.copy()\n        filt_df = filt_df.loc[df[\"body_mass_g\"] < input.mass()]\n        return filt_df\n\n    @render.plot\n    def mass_distribution():\n        return dist_plot(filtered_data())\n\n    @render.plot\n    def scatter():\n        return scatter_plot(filtered_data(), input.smoother())\n\n\napp = App(app_ui, server)\n\n## file: requirements.txt\nshiny\npalmerpenguins\nplotnine\npandas\n\n## file: plots.py\nfrom plotnine import aes, geom_density, geom_point, ggplot, stat_smooth, theme_light\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"body_mass_g\", fill=\"species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"bill_length_mm\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                group=\"species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\nfrom pathlib import Path\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom plots import dist_plot, scatter_plot\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_slider(\"mass\", \"Mass\", 2000, 8000, 6000),\n        ui.input_checkbox(\"smoother\", \"Add Smoother\"),\n    ),\n    ui.card(ui.output_plot(id=\"scatter\")),\n    ui.card(ui.output_plot(id=\"mass_distribution\")),\n)\n\n\ndef server(input, output, session):\n    df = load_penguins()\n    print(df)\n\n    @reactive.calc\n    def filtered_data():\n        filt_df = df.copy()\n        filt_df = filt_df.loc[df[\"body_mass_g\"] < input.mass()]\n        return filt_df\n\n    @render.plot\n    def mass_distribution():\n        return dist_plot(filtered_data())\n\n    @render.plot\n    def scatter():\n        return scatter_plot(filtered_data(), input.smoother())\n\n\napp = App(app_ui, server)\n\n## file: requirements.txt\nshiny\npalmerpenguins\nplotnine\npandas\n\n## file: plots.py\nfrom plotnine import aes, geom_density, geom_point, ggplot, stat_smooth, theme_light\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"body_mass_g\", fill=\"species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"bill_length_mm\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                group=\"species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot",
      "@reactive.calc\ndef filtered_data():\n    filt_df = df.copy()\n    filt_df = filt_df.loc[df[\"body_mass_g\"] < input.mass()]\n    return filt_df\n\n@render.plot\ndef mass_distribution():\n    return dist_plot(filtered_data())\n\n@render.plot\ndef scatter():\n    return scatter_plot(filtered_data(), input.smoother())",
      "@reactive.calc\ndef filtered_data():\n    filt_df = df.copy()\n    filt_df = filt_df.loc[df[\"body_mass_g\"] < input.mass()]\n    return filt_df\n\n@render.plot\ndef mass_distribution():\n    return dist_plot(filtered_data())\n\n@render.plot\ndef scatter():\n    return scatter_plot(filtered_data(), input.smoother())",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\nfrom pathlib import Path\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom plots import dist_plot, scatter_plot\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\ndf = load_penguins()\n\nwith ui.sidebar():\n    ui.input_slider(\"mass\", \"Mass\", 2000, 8000, 6000)\n    ui.input_checkbox(\"smoother\", \"Add Smoother\")\n    ui.input_action_button(\"reset\", \"Reset Slider\")\n\n\n@reactive.effect\n@reactive.event(input.reset)\ndef _():\n    ui.update_slider(\"mass\", value=6000)\n\n\n@reactive.calc\ndef filtered_data():\n    filt_df = df.copy()\n    filt_df = filt_df.loc[df[\"body_mass_g\"] < input.mass()]\n    return filt_df\n\n\nwith ui.card():\n\n    @render.plot\n    def scatter():\n        return scatter_plot(filtered_data(), input.smoother())\n\n\nwith ui.card():\n\n    @render.plot\n    def mass_distribution():\n        return dist_plot(filtered_data())\n\n## file: requirements.txt\nshiny\npalmerpenguins\nplotnine\npandas\n\n## file: plots.py\nfrom plotnine import aes, geom_density, geom_point, ggplot, stat_smooth, theme_light\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"body_mass_g\", fill=\"species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"bill_length_mm\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                group=\"species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\nfrom pathlib import Path\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom plots import dist_plot, scatter_plot\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\ndf = load_penguins()\n\nwith ui.sidebar():\n    ui.input_slider(\"mass\", \"Mass\", 2000, 8000, 6000)\n    ui.input_checkbox(\"smoother\", \"Add Smoother\")\n    ui.input_action_button(\"reset\", \"Reset Slider\")\n\n\n@reactive.effect\n@reactive.event(input.reset)\ndef _():\n    ui.update_slider(\"mass\", value=6000)\n\n\n@reactive.calc\ndef filtered_data():\n    filt_df = df.copy()\n    filt_df = filt_df.loc[df[\"body_mass_g\"] < input.mass()]\n    return filt_df\n\n\nwith ui.card():\n\n    @render.plot\n    def scatter():\n        return scatter_plot(filtered_data(), input.smoother())\n\n\nwith ui.card():\n\n    @render.plot\n    def mass_distribution():\n        return dist_plot(filtered_data())\n\n## file: requirements.txt\nshiny\npalmerpenguins\nplotnine\npandas\n\n## file: plots.py\nfrom plotnine import aes, geom_density, geom_point, ggplot, stat_smooth, theme_light\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"body_mass_g\", fill=\"species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"bill_length_mm\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                group=\"species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\nfrom pathlib import Path\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom plots import dist_plot, scatter_plot\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_slider(\"mass\", \"Mass\", 2000, 8000, 6000),\n        ui.input_checkbox(\"smoother\", \"Add Smoother\"),\n        ui.input_action_button(\"reset\", \"Reset Slider\"),\n    ),\n    ui.card(ui.output_plot(id=\"scatter\")),\n    ui.card(ui.output_plot(id=\"mass_distribution\")),\n)\n\n\ndef server(input, output, session):\n    df = load_penguins()\n\n    @reactive.calc\n    def filtered_data():\n        filt_df = df.copy()\n        filt_df = filt_df.loc[df[\"body_mass_g\"] < input.mass()]\n        return filt_df\n\n    @output\n    @render.plot\n    def mass_distribution():\n        return dist_plot(filtered_data())\n\n    @output\n    @render.plot\n    def scatter():\n        return scatter_plot(filtered_data(), input.smoother())\n\n\napp = App(app_ui, server)\n\n## file: requirements.txt\nshiny\npalmerpenguins\nplotnine\npandas\n\n## file: plots.py\nfrom plotnine import aes, geom_density, geom_point, ggplot, stat_smooth, theme_light\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"body_mass_g\", fill=\"species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"bill_length_mm\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                group=\"species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\nfrom pathlib import Path\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom plots import dist_plot, scatter_plot\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_slider(\"mass\", \"Mass\", 2000, 8000, 6000),\n        ui.input_checkbox(\"smoother\", \"Add Smoother\"),\n        ui.input_action_button(\"reset\", \"Reset Slider\"),\n    ),\n    ui.card(ui.output_plot(id=\"scatter\")),\n    ui.card(ui.output_plot(id=\"mass_distribution\")),\n)\n\n\ndef server(input, output, session):\n    df = load_penguins()\n\n    @reactive.calc\n    def filtered_data():\n        filt_df = df.copy()\n        filt_df = filt_df.loc[df[\"body_mass_g\"] < input.mass()]\n        return filt_df\n\n    @output\n    @render.plot\n    def mass_distribution():\n        return dist_plot(filtered_data())\n\n    @output\n    @render.plot\n    def scatter():\n        return scatter_plot(filtered_data(), input.smoother())\n\n\napp = App(app_ui, server)\n\n## file: requirements.txt\nshiny\npalmerpenguins\nplotnine\npandas\n\n## file: plots.py\nfrom plotnine import aes, geom_density, geom_point, ggplot, stat_smooth, theme_light\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"body_mass_g\", fill=\"species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"bill_length_mm\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                group=\"species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot",
      "import streamlit as st\n\nx = st.slider(\"x\", 0, 10, 5)\nbtn = st.button(\"Reset\")\nif btn:\n    x = st.slider(\"x\", 0, 10, 5)",
      "import streamlit as st\n\nx = st.slider(\"x\", 0, 10, 5)\nbtn = st.button(\"Reset\")\nif btn:\n    x = st.slider(\"x\", 0, 10, 5)",
      "import streamlit as st\nimport pandas as pd\nfrom plotnine import ggplot, geom_density, aes, theme_light, geom_point, stat_smooth\nfrom pathlib import Path\n\ninfile = Path(__file__).parent / \"penguins.csv\"\ndf = pd.read_csv(infile)\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"Body Mass (g)\", fill=\"Species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot.draw()\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"Bill Length (mm)\",\n                y=\"Bill Depth (mm)\",\n                color=\"Species\",\n                group=\"Species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot.draw()\n\n# You need to check for the variable in session state to avoid an error\nif \"slider\" not in st.session_state:\n    st.session_state[\"slider\"] = 6000\n\ndef reset_value():\n    st.session_state[\"slider\"] = 6000\n\n\nwith st.sidebar:\n    mass = st.slider(\n        label=\"Mass\",\n        min_value=2000,\n        max_value=8000,\n        key=\"slider\", # The `key` imports the number which is stored in `session_state`\n    )\n    smoother = st.checkbox(\"Add Smoother\")\n    reset = st.button(\"Reset Slider\", on_click=reset_value)\n\nfilt_df = df.loc[df[\"Body Mass (g)\"] < mass]\n\nst.pyplot(scatter_plot(filt_df, smoother))\nst.pyplot(dist_plot(filt_df))",
      "import streamlit as st\nimport pandas as pd\nfrom plotnine import ggplot, geom_density, aes, theme_light, geom_point, stat_smooth\nfrom pathlib import Path\n\ninfile = Path(__file__).parent / \"penguins.csv\"\ndf = pd.read_csv(infile)\n\n\ndef dist_plot(df):\n    plot = (\n        ggplot(df, aes(x=\"Body Mass (g)\", fill=\"Species\"))\n        + geom_density(alpha=0.2)\n        + theme_light()\n    )\n    return plot.draw()\n\n\ndef scatter_plot(df, smoother):\n    plot = (\n        ggplot(\n            df,\n            aes(\n                x=\"Bill Length (mm)\",\n                y=\"Bill Depth (mm)\",\n                color=\"Species\",\n                group=\"Species\",\n            ),\n        )\n        + geom_point()\n        + theme_light()\n    )\n\n    if smoother:\n        plot = plot + stat_smooth()\n\n    return plot.draw()\n\n# You need to check for the variable in session state to avoid an error\nif \"slider\" not in st.session_state:\n    st.session_state[\"slider\"] = 6000\n\ndef reset_value():\n    st.session_state[\"slider\"] = 6000\n\n\nwith st.sidebar:\n    mass = st.slider(\n        label=\"Mass\",\n        min_value=2000,\n        max_value=8000,\n        key=\"slider\", # The `key` imports the number which is stored in `session_state`\n    )\n    smoother = st.checkbox(\"Add Smoother\")\n    reset = st.button(\"Reset Slider\", on_click=reset_value)\n\nfilt_df = df.loc[df[\"Body Mass (g)\"] < mass]\n\nst.pyplot(scatter_plot(filt_df, smoother))\nst.pyplot(dist_plot(filt_df))",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 100\nfrom shiny.express import ui\n\nui.input_action_button(\"default\", \"Default Button\")\nui.input_action_button(\"primary\", \"Primary Button\", class_=\"btn-outline-primary\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 100\nfrom shiny.express import ui\n\nui.input_action_button(\"default\", \"Default Button\")\nui.input_action_button(\"primary\", \"Primary Button\", class_=\"btn-outline-primary\")",
      "import streamlit as st\nimport streamlit.components.v1 as components\n\nst.button(\"red\", \"Red Button\")\nst.button(\"white\", \"White Button\")\n\n\ndef ChangeButtonColour(widget_label, font_color, background_color=\"transparent\"):\n    htmlstr = f\"\"\"\n        <script>\n            var elements = window.parent.document.querySelectorAll('button');\n            for (var i = 0; i < elements.length; ++i) {{\n                if (elements[i].innerText == '{widget_label}') {{\n                    elements[i].style.color ='{font_color}';\n                    elements[i].style.background = '{background_color}'\n                }}\n            }}\n        </script>\n        \"\"\"\n    components.html(f\"{htmlstr}\", height=0, width=0)\n\n\nChangeButtonColour(\"red\", \"white\", \"red\")",
      "import streamlit as st\nimport streamlit.components.v1 as components\n\nst.button(\"red\", \"Red Button\")\nst.button(\"white\", \"White Button\")\n\n\ndef ChangeButtonColour(widget_label, font_color, background_color=\"transparent\"):\n    htmlstr = f\"\"\"\n        <script>\n            var elements = window.parent.document.querySelectorAll('button');\n            for (var i = 0; i < elements.length; ++i) {{\n                if (elements[i].innerText == '{widget_label}') {{\n                    elements[i].style.color ='{font_color}';\n                    elements[i].style.background = '{background_color}'\n                }}\n            }}\n        </script>\n        \"\"\"\n    components.html(f\"{htmlstr}\", height=0, width=0)\n\n\nChangeButtonColour(\"red\", \"white\", \"red\")"
    ]
  },
  {
    "id": "docs_comp-r-shiny_html",
    "url": "docs/comp-r-shiny.html",
    "title": "Shiny for R ‚Äì Shiny for Python",
    "description": "",
    "content": "- üìä Comparisons\n- Shiny for R\n\nShiny for R\n\nThe R and Python Shiny packages are quite similar, and as a result if you know how to build a Shiny app in R you are well on your way to building one in Python. All of the main components of Shiny like reactivity, rendering functions, and modules are the same, and both packages use the same JavaScript code. There are, however, a few differences that you need to keep in mind in order to build effective Shiny applications in Python. If you‚Äôre reading this, we expect that you are an existing R Shiny user with some Python knowledge.\n\nShiny express is a new, more expressive, way to build PyShiny apps. It is not available in R, so the comparisons drawn below are only relevant to core (i.e., non-express) apps.\n\nGetting started\n\nR users tend to use the R console to install and run Shiny while Python requires you to use the terminal. To get started you can do the following (or see the installation instructions for a more in-depth explanation):\n\n- In your terminal, create a new directory with mkdir <my_directory> and navigate into it with cd <my_directory>\n- Install Shiny. We strongly recommend using a virtual environment for this as it will eliminate dependency resolution headaches and make deployment easier.\n\n- Install with pip\n- Install with conda\n\n- Call shiny create . to create an example shiny app in your directory\n- Call shiny run --reload to run the app and reload when the source code changes\n\n- Always use a virtual environment with Python projects\n- Install and run shiny from the command line, not a Python process\n\nSyntax differences\n\nThere are five main syntax difference between the R and Python versions of Shiny:\n\n- Decorators instead of render functions\n- Function names are used to connect outputs to the UI\n- More precise namespaces\n- All inputs are invoked with input.<input_name>()\n- Some functions have different names\n\nDecorators\n\nShiny for Python uses decorators instead of top level rendering functions. Decorators are just python functions which take other functions and are invoked by putting @<decorator> above the function definition. While R doesn‚Äôt have an exact analog to decorators they are similar to function operators you like purrr::safely.\n\n- Use rendering decorators like @render.plot, @render.text, or @render.ui instead of renderPlot(), renderText, or renderUI\n- Reactive calculations (equivalent to reactive expressions in R) are decorated @reactive.calc, and reactive effects (equivalent to observers in R) are decorated with @reactive.effect.\n\nR\n\nPython\n\nConnecting outputs\n\nBoth R an Python use a special object type to connect server computations to UI components, but the interface is quite different. In R, we connect outputs to UI elements by assigning into the output object but since Python renderings are produced with decorators, we instead use the function name to connect the rendered object to its UI component.\n\n- In Python, we don‚Äôt define outputs by assigning to output$x\n- Use the function name to connect a server output to a UI element\n\nR\n\nPython\n\nSubmodules\n\nAll of the Shiny R functions are in a single package namespace. On the Python side we make use of submodules to keep related functions together. Note that ‚Äúsubmodules‚Äù in this case refers to the generic module which is not the same as shiny modules. For example, instead of sliderInput(), you would call ui.input_slider(), where the ui. refers to a submodule of the main shiny module.\n\n- Python submodules make autocomplete easier\n- Some important namespaces include: ui for the UI elements render includes the rendering decorators reactive has reactive expressions and observers\n\n- ui for the UI elements\n- render includes the rendering decorators\n- reactive has reactive expressions and observers\n\nR\n\nPython\n\nCall inputs with ()\n\nIn R reactive values and reactive expressions are retrieved with different syntax. Reactive values like input$value are retrieved like variables while reactive expressions are called like functions my_reactive().\n\nThis interface makes it seem like inputs and reactive expressions are different types of thing when in fact they‚Äôre the same type of thing. In Python we chose to require that all reactive objects be retrieved with a function call. So instead of calling input.value you use input.value().\n\nR\n\nPython\n\n- Access input values by calling the object like a function\n- input.x(), not input$x\n\nFunction name changes\n\nThe Python function names have been modified to make them easier to discover with tab completion. For example all python output functions start with output_ while the input functions start with input_. This means that you can type ui.ou and hit tab to see all of the available output functions. The Shiny R functions on the other hand all start with the element type (plotOutput, textInput), which makes it hard to see all of the input or output options. For the most part you can follow this naming pattern to find the function you‚Äôre looking for, but there are a number of functions that have different names in R and Python, the most important of which are listed below:\n\nReactive programming\n\nReactivity works mostly the same in R and Python, but there are a few small differences in naming and syntax.\n\nNew names for reactive() and observe()\n\nIn Shiny for R, reactive expressions (created by reactive(), which are used when you want to compute a value (which is then used in an output or an observer), and observers (created by observe()) are used for their side effects, like writing data to disk. This is a common source of confusion because the names reactive() and observe() do not clearly express when they should be used. To help clarify this confusion we‚Äôve renamed reactive() to @reactive.calc, and observe() to @reactive.effect in Python.\n\nR\n\nPython\n\nReactive Values\n\nIn R, there are two types of reactive objects which store values:\n\n- Items in a reactiveValues object. This is a list-like object that contains multiple reactive values. (Note that the input object is a reactiveValues.)\n- Standalone reactiveVal objects.\n\nItems in a reactiveValues object. This is a list-like object that contains multiple reactive values. (Note that the input object is a reactiveValues.)\n\nStandalone reactiveVal objects.\n\nIn R, the way that you get values from a reactiveValues object differs from how you get it from a reactiveVal. To get the value of an item‚Äôs in a reactiveValues object, you would simply access it with input$x. However, for a standalone reactiveVal, you would invoke it like a function, with x().\n\nIn Shiny for Python, we‚Äôve simplified things in the following ways:\n\n- There is no direct analog to R‚Äôs reactiveValues.\n- The analog of R‚Äôs standalone reactiveVal is reactive.value. (The input object in Python is a dictionary-like object containing individual reactive.value objects.)\n- Reactive values have can be retrieved with my_val() or my_val.get() and can be set with my_val.set().\n\nThere is no direct analog to R‚Äôs reactiveValues.\n\nThe analog of R‚Äôs standalone reactiveVal is reactive.value. (The input object in Python is a dictionary-like object containing individual reactive.value objects.)\n\nReactive values have can be retrieved with my_val() or my_val.get() and can be set with my_val.set().\n\nThere is no analog of reactiveValues in Python, but you can create something similar by using a dictionary of reactive.value objects.\n\nR\n\nPython\n\nMutability\n\nOne of the biggest differences between R and Python is the mutability of objects. In R, most objects are immutable. This means, for example, that if you pass a data frame to a function, that function cannot alter your copy of the data frame. In Python, many objects are mutable. This means that they can be modified in place‚Äîmodifying an object in one part of a program can cause it to be (unexpectedly) modified in another part of the program.\n\nThis difference in mutability has consequences for Shiny applications and for programming in general. In many cases, using .copy() in Python will help avoid bugs due to inadvertently altering mutable objects. See our page on mutability to understand the possible bugs and how to avoid them.\n\n",
    "code_examples": [
      "# Create a virtual environment in the .venv subdirectory\npython3 -m venv venv\nsource venv/bin/activate\n# Install shiny\npip install shiny",
      "# Create a virtual environment in the .venv subdirectory\npython3 -m venv venv\nsource venv/bin/activate\n# Install shiny\npip install shiny",
      "# Create a conda environment named 'myenv'\nconda create --name myenv\nconda activate myenv\nconda install -c conda-forge shiny",
      "# Create a conda environment named 'myenv'\nconda create --name myenv\nconda activate myenv\nconda install -c conda-forge shiny",
      "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output, session) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n, \" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
      "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output, session) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n, \" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
      "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n,\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
      "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n,\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
      "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n,\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
      "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n  output$txt <- renderText({\n    paste0(\"n*2 is \", input$n,\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)",
      "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n\n  n <- reactive({input$n})\n\n  output$txt <- renderText({\n    paste0(\"n*2 is \", n(),\" * 2\")\n  })\n}\n\n\nshinyApp(ui, server)",
      "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\")\n)\n\nserver <- function(input, output) {\n\n  n <- reactive({input$n})\n\n  output$txt <- renderText({\n    paste0(\"n*2 is \", n(),\" * 2\")\n  })\n}\n\n\nshinyApp(ui, server)",
      "from shiny import ui, render, reactive, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def n():\n      return input.n()\n\n    @render.text\n    def txt():\n        return f\"n*2 is {n() * 2}\"\n\napp = App(app_ui, server)",
      "from shiny import ui, render, reactive, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def n():\n      return input.n()\n\n    @render.text\n    def txt():\n        return f\"n*2 is {n() * 2}\"\n\napp = App(app_ui, server)",
      "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\"),\n  actionButton(\"reset\", \"Reset\")\n)\n\nserver <- function(input, output, session) {\n\n  val <- reactive({input$n})\n\n\n  observe({\n    input$reset\n    updateSliderInput(session, \"n\", value = 40)\n  })\n\n  output$txt <- renderText({\n    paste0(\"n*2 is \", val(),\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
      "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 0, 100, 40),\n  verbatimTextOutput(\"txt\"),\n  actionButton(\"reset\", \"Reset\")\n)\n\nserver <- function(input, output, session) {\n\n  val <- reactive({input$n})\n\n\n  observe({\n    input$reset\n    updateSliderInput(session, \"n\", value = 40)\n  })\n\n  output$txt <- renderText({\n    paste0(\"n*2 is \", val(),\" * 2\")\n  })\n}\n\nshinyApp(ui, server)",
      "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n    ui.input_action_button(\"reset\", \"Reset\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def val():\n        return input.n()\n\n    @reactive.effect\n    def _():\n        input.reset()\n        ui.update_slider(\"n\", value=40)\n\n    @render.text\n    def txt():\n        return f\"n*2 is {val() * 2}\"\n\napp = App(app_ui, server)",
      "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n    ui.input_action_button(\"reset\", \"Reset\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def val():\n        return input.n()\n\n    @reactive.effect\n    def _():\n        input.reset()\n        ui.update_slider(\"n\", value=40)\n\n    @render.text\n    def txt():\n        return f\"n*2 is {val() * 2}\"\n\napp = App(app_ui, server)",
      "vals <- reactiveValues(x = 1, y = 2)\nz <- reactiveVal(3)\n\n# Retrieve values\nprint(vals$x)\nprint(z())",
      "vals <- reactiveValues(x = 1, y = 2)\nz <- reactiveVal(3)\n\n# Retrieve values\nprint(vals$x)\nprint(z())",
      "vals = {\n  \"x\": reactive.value(1),\n  \"y\": reactive.value(2),\n}\n\nz = reactive.value(3)\n\n# Retrieve values\nprint(vals.x())\nprint(z())",
      "vals = {\n  \"x\": reactive.value(1),\n  \"y\": reactive.value(2),\n}\n\nz = reactive.value(3)\n\n# Retrieve values\nprint(vals.x())\nprint(z())",
      "library(shiny)\n\nui <- fluidPage(\n  actionButton(\"minus\", \"-1\"),\n  actionButton(\"plus\", \"+1\"),\n  br(),\n  textOutput(\"value\")\n)\n\nserver <- function(input, output, session) {\n  value <- reactiveVal(0)\n\n\n\n  observeEvent(input$minus, {\n    newValue <- value() - 1\n    value(newValue)\n  })\n\n\n  observeEvent(input$plus, {\n    newValue <- value() + 1\n    value(newValue)\n  })\n\n\n  output$value <- renderText({\n    value()\n  })\n}\nshinyApp(ui, server)",
      "library(shiny)\n\nui <- fluidPage(\n  actionButton(\"minus\", \"-1\"),\n  actionButton(\"plus\", \"+1\"),\n  br(),\n  textOutput(\"value\")\n)\n\nserver <- function(input, output, session) {\n  value <- reactiveVal(0)\n\n\n\n  observeEvent(input$minus, {\n    newValue <- value() - 1\n    value(newValue)\n  })\n\n\n  observeEvent(input$plus, {\n    newValue <- value() + 1\n    value(newValue)\n  })\n\n\n  output$value <- renderText({\n    value()\n  })\n}\nshinyApp(ui, server)",
      "from shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"minus\", \"-1\"),\n    ui.input_action_button(\"plus\", \"+1\"),\n    ui.br(),\n    ui.output_text(\"value\"),\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    val = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.minus)\n    def _():\n        newVal = val() - 1\n        val.set(newVal)\n\n    @reactive.effect\n    @reactive.event(input.plus)\n    def _():\n        newVal = val() + 1\n        val.set(newVal)\n\n    @render.text\n    def value():\n        return str(val())\n\n\napp = App(app_ui, server)",
      "from shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"minus\", \"-1\"),\n    ui.input_action_button(\"plus\", \"+1\"),\n    ui.br(),\n    ui.output_text(\"value\"),\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    val = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.minus)\n    def _():\n        newVal = val() - 1\n        val.set(newVal)\n\n    @reactive.effect\n    @reactive.event(input.plus)\n    def _():\n        newVal = val() + 1\n        val.set(newVal)\n\n    @render.text\n    def value():\n        return str(val())\n\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "docs_nonblocking_html",
    "url": "docs/nonblocking.html",
    "title": "Non-blocking operations ‚Äì Shiny for Python",
    "description": "",
    "content": "- üß© Miscellaneous\n- Non-blocking operations\n\nNon-blocking operations\n\nSometimes in a Shiny app, you need to perform a long-running operation, like loading a large dataset or doing an expensive computation. If you do this in a reactive context, it will block the rest of the application from running until the operation completes. This can be frustrating for users, who may think that the app has crashed.\n\nWorse, if you have multiple users, then one user‚Äôs long-running operation will block the other users‚Äô apps from running as well. These other users will not even be aware that their slow performance is due to another user‚Äôs actions.\n\nIn this article, we‚Äôll learn how to make Shiny apps more responsive by using non-blocking operations. We‚Äôll also go out of our way to explain why the usual Python async techniques don‚Äôt work the same way in Shiny as in other web frameworks.\n\nUsing async/await in Shiny\n\nAsynchronous programming is a technique used in many programming languages to increase scalability and responsiveness, usually in programs that do a lot of networking like web servers and clients. Python supports async programming at the language level, using the async/await keywords; in the standard library, with the asyncio module; and in third-party libraries, like FastAPI and aiohttp.\n\nShiny has async support as well, but it‚Äôs a bit different from your typical async Python framework. On the one hand, Shiny is built on top of Starlette, which is an async web framework, so it‚Äôs possible to use async functions in many parts of your Shiny app. On the other hand, Shiny is also designed around reactive programming concepts, and that creates constraints on how async functions can be used.\n\nReactive async/await\n\nShiny supports the use of async and await in your reactive code. You can use async functions in @reactive.effect, @reactive.calc, and render functions, and within those async functions you can use await to wait for the results of other async functions.\n\nHowever, you may be surprised to learn that this technique alone does not result in improved responsiveness in Shiny apps!\n\nIn the app below, the first thing in the UI is a reactive output that displays the current time. Click the button and notice that, during the five seconds that the app is waiting for the (artificially slow) sum calculation to complete, the time does not update.\n\nDespite being defined as an asynchronous function, the sum logic is still blocking the time output. You could replace await asyncio.sleep(5) with its synchronous equivalent, time.sleep(5), and you‚Äôd get exactly the same result.\n\nWhy does async block?\n\nWhile surprising, this behavior is intentional. Shiny goes out of its way to ensure that reactive functions are run in a serial fashion, never concurrently‚Äìeven if they are asynchronous. This means that if you have two (async) reactive effects that both call await asyncio.sleep(1), the second one will not even begin to start executing until the first one has finished. This is true even if the two reactive effects belong to two different Shiny sessions and one Python process is serving those sessions.\n\nThis may seem like a strange decision on the part of Shiny: why support async at all if the code is not going to run concurrently?\n\nThe reason for supporting async is simple: there are functions you may need to call from reactive contexts that are only available as async functions. This includes some functions in Shiny itself that are used to communicate with the browser, like Session.send_custom_message.\n\nThe reason for not allowing (reactive) async code to run concurrently is more nuanced. The main reason is that it would be very difficult to ensure that the application behaves predictably if async code were allowed to run concurrently. Concurrent code works best when tasks are largely independent of each other, and do not read or modify the same shared state. But Shiny reactive code is all about shared state and interconnected tasks.\n\nSo in summary, use async functions in your reactive code if you need to call async-only functions. Don‚Äôt expect your application to run faster, more responsively, or more efficiently.\n\nTrue non-blocking behavior with ExtendedTask\n\nTo achieve true non-blocking behavior in Shiny applications, and retain the ability to reason about how our apps will behave, we use the following strategy:\n\n- Read whatever reactive inputs and calcs will be needed to perform the task.\n- Perform the task asynchronously and concurrently, outside of the reactive graph.\n- When the task completes, bring the resulting value (or error, if the operation failed) back into the reactive graph.\n\nWe‚Äôve created a high-level class called ExtendedTask to make all of this pretty easy. To create an ExtendedTask, use the @reactive.extended_task decorator on an async function. Let‚Äôs adapt the example above to use an ExtendedTask:\n\nNote the sum_values function, which is where the actual (slow) work is done. It is decorated with @reactive.extended_task, which means that it will be run asynchronously and concurrently with other tasks, and that its result will be available as sum_values.result().\n\nWe‚Äôve also added a @ui.bind_task_button decorator on top of the @reactive.extended_task decorator.\n\nThis synchronizes the ExtendedTask object with the ui.input_task_button in the UI, so that the button will be in its ‚ÄúProcessing‚Ä¶‚Äù state while the task is running. It does not cause button clicks to invoke the task; we still need to do that manually, which we‚Äôll talk about next.\n\nIf you use some other UI gesture or condition besides ui.input_task_button to invoke the task, don‚Äôt include the @ui.bind_task_button decorator‚Äìit doesn‚Äôt work with ui.input_action_button, for example.\n\nInvoking the task\n\nUnlike a reactive effect, simply creating an extended task does not cause it to run. It needs to be invoked (called like a function).\n\nIn this case, the sum_values extended task is called from the btn_click reactive effect (@reactive.effect), which runs whenever the button is clicked (@reactive.event(input.btn)).\n\nNotice also that the sum_values logic no longer reads input.x() and input.y() directly in the function body. Because it is now an extended task, attempting to do so would result in an error. Instead, it takes x and y as arguments, which are passed in by btn_click based on reactive inputs.\n\nRetrieving results\n\nThe sum output is now a regular reactive calc, which reads sum_values.result() to get the result of the extended task. This output actually does not ‚Äúwait for‚Äù the extended task to complete, exactly; instead, it will run multiple times, as the extended task goes through different states. For each state, sum_values.result() will behave differently:\n\n- Not yet invoked: Raises a silent exception, which will cause the sum output to display nothing.\n- Running: Raises a special type of exception that tells Shiny to keep the output in the ‚Äúin progress‚Äù state.\n- Successfully completed: Returns the return value of sum_values, in this case an integer.\n- Completed with an exception: If sum_values raised an exception while processing, then re-raises that same exception, causing it to be displayed to the user in the sum output.\n\nIt‚Äôs not necessary to memorize these states. Just remember that sum_values.result() is a reactive, synchronous method that knows how to do right thing based on the state of the extended task.\n\nOther features of extended tasks\n\nCancel a running task\n\nAlthough it‚Äôs not shown in the example above, you can also cancel an extended task by calling the cancel() method (for example, sum_values.cancel()). This will attempt to cancel the asyncio task that is running the extended task, and will cause sum_values.result() to raise a silent exception.\n\nCalling sum_values.cancel() on a task that isn‚Äôt running will have no effect.\n\nMultiple invocations\n\nAn extended task can run concurrently to reactive code and to other extended tasks‚Äìthat‚Äôs its whole purpose. However, a single extended task object cannot run itself multiple times concurrently. If you call sum_values() while it is already running, it will enqueue the new invocation and run it after the first one completes.\n\nThis is often not the behavior you want, especially if the task takes a long time to complete. A user may accidentally click an action button twice, or they may click it again because they think the first click didn‚Äôt work. To prevent this, use ui.input_task_button instead of ui.input_action_button to invoke the task, since the former automatically prevents subsequent clicks until the task completes.\n\nExecuting on a different thread/process\n\nExtended task objects run their tasks using asyncio.create_task, which means that they will run on the same thread as the rest of the application. This is fine for logic that is truly asynchronous, like making a network request via an asyncio-aware library like aiohttp, but it‚Äôs not ideal for CPU-bound tasks or when performing I/O synchronously. Because CPU-bound or synchronous tasks will block the main thread, we‚Äôre back to where we started: the rest of the application cannot proceed until the task completes.\n\nFortunately, we can rely on Python‚Äôs built-in support for running asyncio tasks on different threads or processes.\n\nThe examples below work well in Shiny Core, but a naive port to Shiny Express will not work as well. The ThreadPoolExecutor and ProcessPoolExecutor objects need to be created as module-level variables, not as session-level variables, since we‚Äôd ideally like to pool resources across all sessions.\n\nProcessPoolExecutor is not available in Shinylive (e.g. WASM mode). ThreadPoolExecutor is available in Shinylive and appears to work, but doesn‚Äôt: it actually performs all of its work on the main thread.\n\nThe following example shows how to run a task on a different thread. This is a good strategy for code that does synchronous I/O, like reading from disk, a database, or a remote API endpoint. It‚Äôs not as good of a strategy for CPU-bound code, because Python‚Äôs global interpreter lock will prevent the task from running concurrently with other Python code.\n\nWith a small tweak, we can run the task on a different process instead of a different thread: just replace concurrent.futures.ThreadPoolExecutor with concurrent.futures.ProcessPoolExecutor. This is a good strategy for CPU-bound code, because it allows the task to run concurrently with other Python code.\n\nIn this example, the slow_sum function is defined at the module level, outside of the Shiny server function. This is critically important for ProcessPoolExecutor to work correctly because of how Python‚Äôs multiprocessing module works: only module-level functions can survive the trip to a worker Python subprocess. (It‚Äôs less critical for ThreadPoolExecutor, but still a good programming practice to define such logic at the module level when possible.)\n\nThere‚Äôs also the app.on_shutdown(pool.shutdown) line at the end of each example. This is necessary to ensure that the pool is shut down when the app stops running. In particular, if you‚Äôre using ProcessPoolExecutor and neglect to shut down the pool, you can end up with orphaned Python processes hanging around.\n\nSummary\n\nOnly use async functions in your reactive code if you need to call async-only functions. Don‚Äôt expect your application to run faster, more responsively, or more efficiently.\n\nTo achieve true non-blocking behavior in Shiny applications, factor your slow/async code into an ExtendedTask callable object, call it from a reactive effect, and read its result() from a render function or reactive calc.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nimport asyncio\nimport datetime\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.p(\"The time is \", ui.output_text(\"current_time\", inline=True)),\n    ui.hr(),\n    ui.input_numeric(\"x\", \"x\", value=1),\n    ui.input_numeric(\"y\", \"y\", value=2),\n    ui.input_task_button(\"btn\", \"Add numbers\"),\n    ui.output_text(\"sum\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def current_time():\n        reactive.invalidate_later(1)\n        return datetime.datetime.now().strftime(\"%H:%M:%S %p\")\n\n    @reactive.calc\n    @reactive.event(input.btn)\n    async def sum_values():\n        await asyncio.sleep(5)\n        return input.x() + input.y()\n\n    @render.text\n    async def sum():\n        return str(await sum_values())\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\nimport asyncio\nimport datetime\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.p(\"The time is \", ui.output_text(\"current_time\", inline=True)),\n    ui.hr(),\n    ui.input_numeric(\"x\", \"x\", value=1),\n    ui.input_numeric(\"y\", \"y\", value=2),\n    ui.input_task_button(\"btn\", \"Add numbers\"),\n    ui.output_text(\"sum\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def current_time():\n        reactive.invalidate_later(1)\n        return datetime.datetime.now().strftime(\"%H:%M:%S %p\")\n\n    @ui.bind_task_button(button_id=\"btn\")\n    @reactive.extended_task\n    async def sum_values(x, y):\n        await asyncio.sleep(5)\n        return x + y\n\n    @reactive.effect\n    @reactive.event(input.btn)\n    def btn_click():\n        sum_values(input.x(), input.y())\n\n    @render.text\n    def sum():\n        return str(sum_values.result())\n\napp = App(app_ui, server)",
      "import asyncio\nimport concurrent.futures\nimport time\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"x\", \"x\", value=1),\n    ui.input_numeric(\"y\", \"y\", value=2),\n    ui.input_task_button(\"btn\", \"Add numbers\"),\n    ui.output_text(\"sum\"),\n)\n\n# Execute the extended task logic on a different thread. To use a different\n# process instead, use concurrent.futures.ProcessPoolExecutor.\npool = concurrent.futures.ThreadPoolExecutor()\n\ndef slow_sum(x, y):\n    time.sleep(5)  # Simulate a slow synchronous task\n    return x + y\n\ndef server(input, output, session):\n    @ui.bind_task_button(button_id=\"btn\")\n    @reactive.extended_task\n    async def sum_values(x, y):\n        loop = asyncio.get_event_loop()\n        return await loop.run_in_executor(pool, slow_sum, x, y)\n\n    @reactive.effect\n    @reactive.event(input.btn)\n    def btn_click():\n        sum_values(input.x(), input.y())\n\n    @render.text\n    def sum():\n        return str(sum_values.result())\n\napp = App(app_ui, server)\napp.on_shutdown(pool.shutdown)",
      "import asyncio\nimport concurrent.futures\nimport time\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"x\", \"x\", value=1),\n    ui.input_numeric(\"y\", \"y\", value=2),\n    ui.input_task_button(\"btn\", \"Add numbers\"),\n    ui.output_text(\"sum\"),\n)\n\n# Execute the extended task logic on a different thread. To use a different\n# process instead, use concurrent.futures.ProcessPoolExecutor.\npool = concurrent.futures.ThreadPoolExecutor()\n\ndef slow_sum(x, y):\n    time.sleep(5)  # Simulate a slow synchronous task\n    return x + y\n\ndef server(input, output, session):\n    @ui.bind_task_button(button_id=\"btn\")\n    @reactive.extended_task\n    async def sum_values(x, y):\n        loop = asyncio.get_event_loop()\n        return await loop.run_in_executor(pool, slow_sum, x, y)\n\n    @reactive.effect\n    @reactive.event(input.btn)\n    def btn_click():\n        sum_values(input.x(), input.y())\n\n    @render.text\n    def sum():\n        return str(sum_values.result())\n\napp = App(app_ui, server)\napp.on_shutdown(pool.shutdown)"
    ]
  },
  {
    "id": "docs_routing_html",
    "url": "docs/routing.html",
    "title": "Routing ‚Äì Shiny for Python",
    "description": "",
    "content": "- üß© Miscellaneous\n- Routing\n\nRouting\n\nThis page covers how to access and extend a Shiny applications server, including adding new routes. Shiny is built on top of the web server framework Starlette, which allows a wide range of customization.\n\nAdding routes\n\nShiny apps can be put alongside each other, and other starlette applications.\n\nHere is an example.\n\nThis application can be run using tools like uvicorn, as discussed in deployment.\n\n",
    "code_examples": [
      "from starlette.applications import Starlette\nfrom starlette.routing import Mount\nfrom starlette.staticfiles import StaticFiles\n\nfrom shiny import App, ui\n\n# first starlette app, just serves static files ----\napp_static = StaticFiles(directory=\".\")\n\n# shiny app ----\napp_shiny = App(ui.page_fluid(\"hello from shiny!\"), None)\n\n\n# combine apps ----\nroutes = [\n    Mount('/static', app=app_static),\n    Mount('/shiny', app=app_shiny)\n]\n\napp = Starlette(routes=routes)",
      "from starlette.applications import Starlette\nfrom starlette.routing import Mount\nfrom starlette.staticfiles import StaticFiles\n\nfrom shiny import App, ui\n\n# first starlette app, just serves static files ----\napp_static = StaticFiles(directory=\".\")\n\n# shiny app ----\napp_shiny = App(ui.page_fluid(\"hello from shiny!\"), None)\n\n\n# combine apps ----\nroutes = [\n    Mount('/static', app=app_static),\n    Mount('/shiny', app=app_shiny)\n]\n\napp = Starlette(routes=routes)"
    ]
  },
  {
    "id": "get-started_shinylive_html",
    "url": "get-started/shinylive.html",
    "title": "Shinylive: Shiny + WebAssembly ‚Äì Shiny for Python",
    "description": "",
    "content": "- Deploy\n- Shinylive: Shiny + WebAssembly\n\nShinylive: Shiny + WebAssembly\n\nShinylive allows you to run Shiny applications entirely in a web browser, without the need for a separate server running Python.\n\nThe traditional way of deploying Shiny involves in a separate server and client: the server runs Python and Shiny, and clients connect via the web browser. Each client keeps an open websocket connection as long as they are using the application.\n\nWhen an application is deployed with Shinylive, Python and Shiny run in the web browser: the browser is effectively both the client and server for the application. There is a web server that serves files, but it does not run Python or Shiny‚Äîit can be a ‚Äúdumb‚Äù static web server.\n\nIf you‚Äôve looked at any of the documentation on this web site, or have played with any of the examples at shinylive.io, you have already used Shinylive. The examples on this site (with a handful of exceptions) and the shinylive.io examples all run using Shinylive, meaning that they run in your web browser.\n\nThis is all possible because of the magic of WebAssembly and Pyodide.\n\n- WebAssembly (wasm) is a binary format for compiled programs that can run in a web browser at near-native speeds.\n- Pyodide is a port of Python and many packages, compiled to WebAssembly.\n\nApplications deployed with Shinylive have some advantages and disadvantages compared to a traditional Shiny deployment. The advantages include:\n\n- No installation: No need to install Python or Shiny on a computer.\n- Easy sharing: Share applications with just a URL.\n- Easy deployment: Applications can be deployed to any static web hosting service.\n- Easy scaling: Since applications can be served as static files on a ‚Äúdumb‚Äù web server it is easy to scale to high traffic loads.\n- Security: Because the code is not running on a server, it eliminates a class of potential security risks. The code runs in the client web browser‚Äôs code sandbox, which a platform that has been battle tested over the years.\n\nSome of the disadvantages of using Shinylive deployments compared to traditional Shiny deployments:\n\n- Fewer packages: Not all Python packages are available in Pyodide.\n- Large download size: The downloaded payload size may be significantly larger. Downloading Pyodide and Python packages to run a Shiny application requires about 13MB of data. Other packages can significantly increase the amount of data. For example, numpy is 7.5 MB, pandas is 13 MB, and matplotlib is 11.5 MB. However, all of this data will be cached by the browser so that it will load quickly in subsequent runs.\n- No secrets: Code and data for the application must be sent to the browser, so it can‚Äôt be kept secret from the user.\n- Restricted network: For security reasons, the web browser itself imposes restrictions on network communication.\n\nFor certain types of Shiny applications, some of the limitations can be worked around by pre-processing a data set and including it with the application.\n\nOne important difference between traditional Shiny and Shinylive deployments is that compute power is shifted from the server to the client. In many cases, the client browser will have more compute power than a server, especially since the compute power of the user‚Äôs machine is not shared across multiple users. However, in other cases, this can be a roadblock, such as when a powerful server is needed to perform very intensive computations or requires access to a private data store.\n\nSharing and deploying Shinylive applications\n\nIn this document, we‚Äôll use the terms sharing and deploying Shiny applications. When we talk about sharing, we‚Äôre referring to a method of encoding the application in a URL so that others can run the application if they simply have the URL. Sharing an application via a URL does not require you to have a server‚Äîyou can simply use the server at shinylive.io.\n\nWhen we talk about deploying applications, we mean creating a set of files which are to be served up by a web server. This does require you to have a web server. For a traditional Shiny deployment, this means having a server that runs R or Python. For a Shinylive deployment, this only requires a server that can serve static files‚Äîit can be a ‚Äúdumb‚Äù web server which does not run Python. For example you could deploy your application to GitHub Pages or Netlify.\n\nSharing Shinylive applications\n\nThe easiest way to share an application is to create it on the Shinylive editor, and then click on the ‚ÄúCreate share link‚Äù button. This will encode the application in a URL, which you can then share with others.\n\nThe dialog box that appears will provide two links: one for the application in the Shinylive editor, and one with for the application running standalone.\n\nHere is an example of a Shiny application that is encoded in a share URL. This will lead to the application with an editor and Python console:\n\nhttps://shinylive.io/py/editor/#code=NobwRAdghgtgpmAXGKAHVA6VBPMAa‚Ä¶\n\nIf you want to share just the Shiny application, without the editor and console, use the other link, which contains /app/ instead of /editor/:\n\nhttps://shinylive.io/py/app/#code=NobwRAdghgtgpmAXGKAHVA6VBPMAa‚Ä¶\n\nThese URLs have a hash that includes #code=.... The code for the entire application is encoded in that hash. Notably, web browsers do not send the hash to the web server, so the server actually never sees the content of the Shiny application.\n\nThe sharing dialog shows how long the URL is, in bytes. If you want to share a link on Twitter, the maximum length of a URL is about 4000 bytes, and it will be shortened using their t.co service. If you use bit.ly, the maximum length is about 2000 bytes. These link shorteners redirect the user to the longer URL.\n\nSharing with gists\n\nAnother way of sharing Shinylive applications is by using a GitHub gist. For example, the gist here:\n\nhttps://gist.github.com/wch/e62218aa28bf26e785fc6cb99efe8efe\n\nCan be run with Shinylive here:\n\n- Editor: https://shinylive.io/py/editor/#gist=e62218aa28bf26e785fc6cb99efe8efe\n- App: https://shinylive.io/py/app/#gist=e62218aa28bf26e785fc6cb99efe8efe\n\nNotice that the #gist=... part of the URL simply uses the ID of the gist.\n\nTo create a gist, you can go to gist.github.com/, or you can use GitHub‚Äôs gh command-line tool to create a gist from files on disk. To do that, first install gh, then use gh gist create:\n\nSharing via gists has some important differences from sharing via encoded-app URL. If you use a gist, you can modify the gist, and the sharing URL will stay the same. If you are sharing an encoded-app URL, the URL itself contains the application code, so if you want modify the code, you will have to generate a new URL and share that.\n\nSharing via GitHub gist may not be appropriate for all use cases, because the GitHub API has rate limits: for a given IP address, the GitHub API allows 60 requests per hour. So an end user would only be able to load Shinylive applications 60 times in an hour. And if there are many users behind a single IP address with network address translation, they collectively would have a limit of 60 requests per hour.\n\nIf you are using GitHub gist for sharing, you can see your remaining requests at https://api.github.com/rate_limit.\n\nThe GitHub API has a much higher rate limit if the end user is authenticated, but Shinylive currently does not support authenticating with GitHub.\n\nDeploying Shinylive applications\n\nWith Quarto websites\n\nThe section below describes how to embed Shinylive applications in a Quarto document ‚Äì they can be thought of as Shiny applets in that mode. As of November 2023, the pre-release version of Quarto can work in a different mode: it can generate dashboards where the entire page is a single Shiny application. See this repository for an example and more information about how they work and how to deploy them. This page will be updated soon with more information about this mode.\n\nThe easiest way to deploy Shinylive applications is using the quarto-shinylive extension. This extension allows you to embed Shiny apps into a quarto html document, and deploy those applications anywhere that can host quarto websites. Once you have the extension installed, you can insert shinylive-python code blocks into the document.\n\nWithout Quarto\n\nIf you‚Äôre not using Quarto, you‚Äôll need to export and deploy your application yourself. This involves:\n\n- Exporting the application: Create a directory of files that includes the Shinylive distribution and the application code.\n- Deploying: Upload that directory to a static web host.\n\nThere are many ways to deploy to a static web server. For example, you could deploy to Netlify or GitHub Pages, or use Posit Connect, as described later in this page.\n\nFirst, install the shinylive package:\n\nNext, create a directory with a Shiny application. We‚Äôll use the shiny create command to create a basic application in a directory called myapp/.\n\nPick a Shiny app template to create in the myapp directory. Next, create the distribution with shinylive:\n\nThe resulting site directory will contain the following files (among others that are not shown for brevity):\n\nThis directory can now be deployed to a static web hosting service.\n\nYou can preview the application by serving the files in the site directory:\n\nThis will serve the files in the site directory on port 8008. Then point your browser at http://localhost:8008/. You can also see the application with an online editor by pointing your browser at http://localhost:8008/edit/. (Note that any changes to the files there are ephemeral‚Äîthey won‚Äôt be saved to disk.)\n\nTo run a Shinylive application, the files must be served with a web server; simply pointing your browser to the files on disk will not work. This is because security restrictions in web browsers require some assets to be retrieved from a web server instead of from disk.\n\nIf you have multiple applications, you may want to export them in subdirectories of the site, so that they can all share the same Shinylive assets. You can do this with the --subdir option:\n\nThe site/shinylive/pyodide/ directory will contain a Pyodide distribution containing just the Python packages needed to run the exported application(s). There are some cases where you may want to include other packages. For example, if you want users who visit the edit/ URL to be able to load more packages. In order to include extra packages, you have two options:\n\n- Add a requirements.txt file to an application which lists the extra packages.\n- Run shinylive export myapp site --full-shinylive. This will cause it to include all of the Python packages from the Shinylive distribution.\n\nThe Shinylive distribution is under rapid development, and the files in the distribution will change. The shinylive export command automatically downloads and caches a a copy of the Shinylive distribution on your computer. To make sure you are up to date, run:\n\nThen the next time you run shinylive export, it will download the latest version.\n\nDeploying to Posit Connect\n\nAfter creating the directory with the application and Shinylive bundle, you can deploy it to many different of static web hosting services. Posit Connect is one of those options, and allows you to control over who can access the application.\n\nIf you would like to deploy to a Posit Connect server, install and configure the rsconnect-python package as described in the Deploy page. Then you can deploy the application as a static website:\n\nPython packages\n\nThe Shinylive distribution is built on Pyodide, and contains a number of additional packages on top of the standard Pyodide distribution.\n\nIt is also possible to use other Python packages, provided that they are packaged as wheels, and contain no compiled code. Additionally, they must not use features that aren‚Äôt available in Pyodide. For example, if a package has code that uses urllib.request, it won‚Äôt work in Pyodide.\n\nInstalled packages\n\nThe Shinylive distribution includes packages from Pyodide 0.27.3, as well as some additional Shiny-related packages. See this page for a list of packages included in Pyodide.\n\nShinylive includes the following packages. Most are part of the Pyodide distribution, and a few of them are added by Shinylive.\n\nTesting whether a package is available\n\nThe Shinylive distribution includes many packages, but you may want to use one that is not included.\n\nIt is possible to install packages using Pyodide‚Äôs micropip package. To do that, simply visit the Shinylive examples page and run the following in the Python console:\n\nIf that works without errors, then your package is usable in a Shinylive application. (There are some exceptions, where a package will load but not be fully usable in Pyodide.)\n\nThe micropip.install command will install the package from PyPI by default. However, you can provide a URL that points directly to your package, like https://example.com/mypackage-1.0-py3-none-any.whl.\n\nRequiring extra packages with requirements.txt\n\nTo use extra packages as part of your application, you can add a requirements.txt file to your application, as demonstrated in the extra packages example. The format of the requirements.txt file is similar to a ‚Äúnormal‚Äù requirements.txt file. For example, it could look like this:\n\nEach time someone runs your Shiny application, their web browser will fetch those packages from PyPI. It will then install the packages to a virtual file system (VFS); when the user closes the page or navigates away from it, the VFS is discarded. If the user goes back and runs the application again, those files can be fetched from the browser cache instead of from PyPI.\n\n",
    "code_examples": [
      "gh gist create --public app.py",
      "gh gist create --public app.py",
      "```{shinylive-python}\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f\"The value of n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)\n```",
      "```{shinylive-python}\n#| standalone: true\n\nfrom shiny import *\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f\"The value of n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)\n```",
      "pip install shinylive",
      "pip install shinylive",
      "shiny create --dir myapp",
      "shiny create --dir myapp",
      "shinylive export myapp site",
      "shinylive export myapp site",
      "site\n‚îú‚îÄ‚îÄ app.json          # The application's files serialized to JSON\n‚îú‚îÄ‚îÄ index.html        # A web page for the application\n‚îú‚îÄ‚îÄ edit\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.html    # A web page for an editor view of the application\n‚îú‚îÄ‚îÄ shinylive-sw.js   # Shinylive service worker\n‚îî‚îÄ‚îÄ shinylive         # Shinylive content\n ¬†¬† ‚îî‚îÄ‚îÄ pyodide       # Pyodide files",
      "site\n‚îú‚îÄ‚îÄ app.json          # The application's files serialized to JSON\n‚îú‚îÄ‚îÄ index.html        # A web page for the application\n‚îú‚îÄ‚îÄ edit\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.html    # A web page for an editor view of the application\n‚îú‚îÄ‚îÄ shinylive-sw.js   # Shinylive service worker\n‚îî‚îÄ‚îÄ shinylive         # Shinylive content\n ¬†¬† ‚îî‚îÄ‚îÄ pyodide       # Pyodide files",
      "python3 -m http.server --directory site 8008",
      "python3 -m http.server --directory site 8008",
      "shinylive export myapp1 site --subdir app1\nshinylive export myapp2 site --subdir app2",
      "shinylive export myapp1 site --subdir app1\nshinylive export myapp2 site --subdir app2",
      "pip install shinylive --upgrade\nshinylive assets remove   # Remove old cached shinylive files",
      "pip install shinylive --upgrade\nshinylive assets remove   # Remove old cached shinylive files",
      "rsconnect deploy html site",
      "rsconnect deploy html site",
      "import micropip\nawait micropip.install(\"mypackage\")\nimport mypackage",
      "import micropip\nawait micropip.install(\"mypackage\")\nimport mypackage",
      "isodate\nattrs==21.4.0",
      "isodate\nattrs==21.4.0"
    ]
  },
  {
    "id": "get-started_install_html",
    "url": "get-started/install.html",
    "title": "Installation ‚Äì Shiny for Python",
    "description": "",
    "content": "Installation\n\nShiny for Python can be installed can be installed via pip or conda.\n\n- pip\n- conda\n- uv\n\nBefore installing you may want to upgrade pip and install wheel. This will help with making your installations faster and less error-prone.\n\nNext, install shiny from PyPI.\n\nIf you already have shiny installed, and you want to upgrade the shiny packages, you will need to use the --upgrade flag.\n\nWhen building Shiny applications, especially in a production environment, it is best practice to use a virtual environment.\n\nWhy use a virtual environment?\n\n- Keeps your application‚Äôs dependencies isolated from other global Python packages.\n- Makes your application easier to deploy and share.\n- Helps avoid version conflicts between different projects.\n\nPython already comes with a mechanism to create virtual environments with venv.\n\nSuppose you want to create a new Shiny app named myapp:\n\nYou are now ready to start building your app! All packages you install (e.g., shiny, pandas, plotly, etc) will now stay inside .venv, scoped to just this project. You can save a list of all the packages you want for this project in a requirements.txt file.\n\nIf you want to install the development versions, you can do so with:\n\nYou can install shiny from the conda-forge channel.\n\nIf you already have shiny installed, and you want to upgrade the shiny package you will use the conda update command.\n\nWhen building Shiny applications, especially in a production environment, it is best practice to use a virtual environment.\n\nWhy use a virtual environment?\n\n- Keeps your application‚Äôs dependencies isolated from other global Python packages.\n- Makes your application easier to deploy and share.\n- Helps avoid version conflicts between different projects.\n\nYou can also use conda to create virtual environments.\n\nUnlike some other tools, you don‚Äôt need to be inside a specific folder when you create a conda environment. Conda environments are managed separately and can be used from anywhere on your system once they are created.\n\nYou can install shiny using uv pip\n\nIf you already have shiny installed, and you want to upgrade the shiny packages, you will need to use the --upgrade flag.\n\nWhen building Shiny applications, especially in a production environment, it is best practice to use a virtual environment.\n\nWhy use a virtual environment?\n\n- Keeps your application‚Äôs dependencies isolated from other global Python packages.\n- Makes your application easier to deploy and share.\n- Helps avoid version conflicts between different projects.\n\nYou can also use uv to create virtual environments with uv venv to create a Python .venv directory.\n\nPositron\n\nWe recommend using Positron, a next-generation data science focused fork of Visual Studio Code.\n\nEven if you already have VS Code installed, Positron is worth trying out. It installs separately, so your existing VS Code extensions won‚Äôt conflict with Positron extensions.\n\nPositron already ships with many Python-focused VS Code extensions from Open VSX, including Quarto, Jupyter Notebooks, and Pyright.\n\nTo get started with Shiny for Python, you will need to install the Shiny Extension. This adds helpful features like a play ‚ñ∂Ô∏è button in the top-right corner of the editor to run your Shiny app with one click.\n\nVisual Studio Code\n\nFor for Visual Studio Code, you will need the Python and Shiny extensions.\n\nIf type checking is important to you, in addition to installing the Python VSCode extension, you may want to do some additional configuration for a smooth experience with types in Shiny. See the tip below for more details.\n\nWe recommend the following settings in your project‚Äôs .vscode/settings.json file:\n\nor alternatively, if your project keeps these settings in pyrightconfig.json:\n\nThe basic type checking mode will flag many potential problems in your code, but it does require an understanding of type hints in Python. This is the mode that is used by the Shinylive examples editor. If you want to make even greater use of type checking, you can use strict mode:\n\nIn the above configuration, we also disable the reportUnusedFunction diagnostic, as it‚Äôs idiomatic Shiny to create named functions that are never explicitly called by any code (i.e., @reactive.effect).\n\nYou can also modify these settings on a per-file basis with comments at the top of the file. For example, you might have something like this at the top of your app.py:\n\nA full list of configuration settings for Pyright/Pylance is available here.\n\n",
    "code_examples": [
      "pip install --upgrade pip wheel",
      "pip install --upgrade pip wheel",
      "pip install shiny",
      "pip install shiny",
      "pip install --upgrade shiny htmltools",
      "pip install --upgrade shiny htmltools",
      "# Create and move into your shiny application directory\nmkdir myapp\ncd myapp\n\n# Create a virtual environment in the .venv subdirectory\npython3 -m venv .venv\n\n# Activate the virtual environment\nsource .venv/bin/activate\n\n# Your prompt will change to have the .venv prefix\n\n# Now install Shiny in your environment\npip install shiny",
      "# Create and move into your shiny application directory\nmkdir myapp\ncd myapp\n\n# Create a virtual environment in the .venv subdirectory\npython3 -m venv .venv\n\n# Activate the virtual environment\nsource .venv/bin/activate\n\n# Your prompt will change to have the .venv prefix\n\n# Now install Shiny in your environment\npip install shiny",
      "pip install https://github.com/posit-dev/py-htmltools/tarball/main\npip install https://github.com/posit-dev/py-shiny/tarball/main",
      "pip install https://github.com/posit-dev/py-htmltools/tarball/main\npip install https://github.com/posit-dev/py-shiny/tarball/main",
      "conda install -c conda-forge shiny",
      "conda install -c conda-forge shiny",
      "conda update -c conda-forge shiny",
      "conda update -c conda-forge shiny",
      "# Create a conda environment named 'shiny' install the shiny package with latest python\nconda create --name shiny -c conda-forge shiny python\n\n# Activate the virtual environment\nconda activate shiny\n\n# Your prompt will be pre-pended with shiny",
      "# Create a conda environment named 'shiny' install the shiny package with latest python\nconda create --name shiny -c conda-forge shiny python\n\n# Activate the virtual environment\nconda activate shiny\n\n# Your prompt will be pre-pended with shiny",
      "uv pip install shiny",
      "uv pip install shiny",
      "uv pip install --upgrade shiny htmltools",
      "uv pip install --upgrade shiny htmltools",
      "# Create and move into your shiny application directory\nmkdir myapp\ncd myapp\n\n# Create a virtual environment, defaults to .venv\nuv venv\n\n# Activate the virtual environment\nsource .venv/bin/activate\n# .venv\\Scripts\\Activate.ps1 # on Windows (PowerShell)\n\n# Your prompt will prepend with the current directory name\n\n# Install into venv\nuv pip install shiny",
      "# Create and move into your shiny application directory\nmkdir myapp\ncd myapp\n\n# Create a virtual environment, defaults to .venv\nuv venv\n\n# Activate the virtual environment\nsource .venv/bin/activate\n# .venv\\Scripts\\Activate.ps1 # on Windows (PowerShell)\n\n# Your prompt will prepend with the current directory name\n\n# Install into venv\nuv pip install shiny",
      "{\n    \"python.analysis.typeCheckingMode\": \"basic\",\n    \"python.analysis.diagnosticSeverityOverrides\": {\n        \"reportUnusedFunction\": \"none\"\n    }\n}",
      "{\n    \"python.analysis.typeCheckingMode\": \"basic\",\n    \"python.analysis.diagnosticSeverityOverrides\": {\n        \"reportUnusedFunction\": \"none\"\n    }\n}",
      "{\n  \"typeCheckingMode\": \"basic\",\n  \"reportUnusedFunction\":  \"none\",\n}",
      "{\n  \"typeCheckingMode\": \"basic\",\n  \"reportUnusedFunction\":  \"none\",\n}",
      "   \"python.analysis.typeCheckingMode\": \"strict\"",
      "   \"python.analysis.typeCheckingMode\": \"strict\"",
      "# pyright: strict\n# pyright: reportUnusedFunction=false",
      "# pyright: strict\n# pyright: reportUnusedFunction=false"
    ]
  },
  {
    "id": "get-started_create-run_html",
    "url": "get-started/create-run.html",
    "title": "Create and Run ‚Äì Shiny for Python",
    "description": "",
    "content": "Create and Run\n\nWhen you install shiny, you also install the shiny command line interface (CLI). You can use this interface to help you create and run your Shiny applications.\n\nCreate a Shiny application\n\nThe best way to create a new Shiny app is with the shiny create command. This command asks you a series of questions about what kind of app you want to create, and then provides all the boilerplate code you need to get started with a working app.\n\nVideo\n\nYou can also get started faster by using one of our starter templates. There are templates for common use cases. For example, data dashboards, applications, streaming updates, or data entry.\n\nRun your Shiny application\n\nShiny apps can be launched from Positron, VS Code, or the command line via shiny run.\n\nWe recommend naming your shiny application app.py. This is the default file that shiny run will look for, so you can run the application in the terminal without any additional parameters.\n\nIf you need a more unique name, we recommend beginning the file name with app, because the Shiny extension expects this naming pattern.\n\nPositron and VS Code\n\nThe best way to run (and develop) Shiny apps is in Positron or Visual Studio Code with the Shiny extension. When you are editing a Shiny app.py file, the default behavior of the Run button (circled in red in the screenshot below) becomes ‚ÄúRun Shiny App‚Äù.\n\nWhen you run a Shiny app in Positron, it starts a Python process in a dedicated terminal and opens the app in an internal web browser. This lets you test and interact with your app without leaving the editor.\n\nWhenever you make changes to the app‚Äôs source code, the preview updates automatically. To view your app in a full browser window, click the icon to the right of the URL bar to open it externally.\n\nTo debug your app, use the dropdown next to the Run button and select Debug Shiny App. Before launching in debug mode, make sure to set breakpoints in your code. Once the app starts, you can step through your code starting from those breakpoints. See the debugging page for more details.\n\nCommand line\n\nTo run a Shiny app from the command line, use the shiny run command. The required argument is the path to your app‚Äôs entry point, usually a Python file like app.py.\n\nYou can also include optional flags to improve your development experience. For example, if your app‚Äôs entry point is app.py inside a folder called app_dir, you can run:\n\nThis will start the app and open it in your default web browser.\n\n- The --reload flag enables automatic reloading. When you save changes to your source files, the app will automatically restart and update in the browser.\n- The --launch-browser flag opens the app in a browser as soon as it starts.\n\n",
    "code_examples": [
      "shiny create",
      "shiny create",
      "shiny run --reload --launch-browser app_dir/app.py",
      "shiny run --reload --launch-browser app_dir/app.py"
    ]
  },
  {
    "id": "components_outputs_data-grid_html",
    "url": "components/outputs/data-grid.html",
    "title": "Data Grid ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Data Grid\n\nData Grid\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_data_frame ui.output_data_frame(id)\n- @render.data_frame render.data_frame(fn=None)\n- render.DataGrid render.DataGrid(self, data, *, width='fit-content', height='500px', summary=True, filters=False, row_selection_mode='none')\n\nui.output_data_frame ui.output_data_frame(id)\n\n@render.data_frame render.data_frame(fn=None)\n\nrender.DataGrid render.DataGrid(self, data, *, width='fit-content', height='500px', summary=True, filters=False, row_selection_mode='none')\n\nDetails\n\nA Data Grid presents tabular data in a spreadsheet-like view with cells separated by grid lines.\n\nTo make a reactive Data Grid, follow three steps:\n\n- Call ui.output_data_frame() in the UI of your app to create a div in which to display the table. Where you call this function within the UI functions will determine where the table will appear within the layout of the app. Set the id argument of ui.output_data_frame() to a unique value.\n- Within the server function, define a new function whose name matches the id used above. The function should assemble the table to display and then return the table wrapped in render.DataGrid(). Shiny will rerun this function whenever it needs to build or update the output that has the matching id.\n- Decorate the function with @render.data_frame.\n\nCall ui.output_data_frame() in the UI of your app to create a div in which to display the table. Where you call this function within the UI functions will determine where the table will appear within the layout of the app. Set the id argument of ui.output_data_frame() to a unique value.\n\nWithin the server function, define a new function whose name matches the id used above. The function should assemble the table to display and then return the table wrapped in render.DataGrid(). Shiny will rerun this function whenever it needs to build or update the output that has the matching id.\n\nDecorate the function with @render.data_frame.\n\nA Data Grid can also collect input from the user. To allow this, set render.DataGrid(selection_mode=\"row\") or render.DataGrid(selection_mode=\"rows\") to allow the user to select one or more rows of the Data Grid.\n\nThe indices of the selected rows will be accessible within the server function as a reactive variable returned by <name>.cell_selection()[\"rows\"], where is the name of the function decorated with @render.data_frame.\n\nThe value returned will be an empty tuple if no rows are selected, or a tuple of integers representing the indices of the selected rows. To filter a pandas data frame down to the selected rows, use df.iloc[list(<name>.cell_selection()[\"rows\"])].\n\nFor more information about interacting with data frames, see the API documentation for Express or Core syntax.\n\nIf your table is a data frame that uses the pandas styler, replace ui.output_data_frame() with ui.output_table() and @render.data_frame with @render.table.\n\nSee also: Data Tables\n\nVariations\n\nSelect Rows\n\nSet selection_mode in render.DataGrid() to \"row\" to allow the user to select one row at a time. Set it to \"rows\" to allow the user to select multiple rows at a time. Access the selection(s) as <id>.cell_selection()[\"rows\"].\n\n- Express\n- Core\n\nFilterable Table\n\nSet render.DataGrid(filters=True) to add a row of filter options to the header row. Users can interact with these options to filter the table.\n\n- Express\n- Core\n\nEdit Table Cells\n\nSet editable=True to be able to edit cell contents without re-rendering the data frame.\n\n- Express\n- Core\n\nUse Original Data\n\nThe reactive value .data() will reactively return the unaltered data.\n\n- Express\n- Core\n\nUse Edited Data\n\nThe reactive value .data_view() (or .data_view(selected=True)) will reactively return the edited data. The data will be updated as the user edits the table and the rows will be arranged to match the user‚Äôs sorting and filtering.\n\n- Express\n- Core\n\nSet Table Size\n\nSet the height and width parameters of render.DataGrid() to constrain the output size of the table.\n\n- Express\n- Core\n\nStyling\n\nSet styles in render.DataGrid() to a customize the table display. styles can take a list of dictionaries where each dictionary represents a style to be applied to the table (and thus should have at least a style (or class) key to apply CSS styles or classes to the relevant cells). To scope the styling to particular cells, use the rows and cols keys (with 0-based indexing). Note that if both rows and cols are specified, the style will be applied only to the intersection of the specified rows and columns.\n\n- Express\n- Core\n\nUpdate Filters\n\nThe data frame filters can be programmatically updated using the .update_filter() method. It takes a list of column filters to apply to the data frame. Each column filter is a dictionary with the following keys: col and value. The col key is the column index to filter on, and the value key is the value to filter for. The value key can be a single value for string columns or a list of values to filter for numeric columns. Note, to not set a minimum or maximum value for a numeric column, you can provide a None value. To reset filters, provide None for the filters (.update_filter(None)).\n\n- Express\n- Core\n\nUpdate Sorting\n\nThe data frame sorting can be programmatically updated using the .update_sort() method. It takes a list of sorting information or column numbers to apply to the data frame. When using a number, the default sorting direction will be applied. When providing a sorting info object, col and desc describe the column index and whether or not the sorting direction is descending. To reset the sorting, provide None for the sorting information (.update_sort(None)).\n\n- Express\n- Core\n\nUpdate Row Selection\n\nThe selected rows can be programmatically updated using the .update_cell_selection() method. .update_cell_selection() takes one argument, selection, which should be a dictionary specifying type, which can be either row (for a single row) or rows (for multiple rows), and row, a list of the row indices to select. Note that you will also need to set selection_mode in render.DataGrid() to \"row\" or \"rows\", since it is \"none\" by default.\n\n- Express\n- Core\n\nCustomize Summary Statement\n\nSet summary in render.DataGrid() to False to remove the statement ‚ÄúViewing rows 1 through 10 of 20‚Äù. Set it to a string template containing {start}, {end}, and {total} tokens, to customize the message.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 375\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 375\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame  \ndef penguins_df():\n    return render.DataGrid(penguins)  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame  \ndef penguins_df():\n    return render.DataGrid(penguins)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.ui()\ndef rows():\n    rows = penguins_df.cell_selection()[\"rows\"]  \n    selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n    return f\"Rows selected: {selected}\"\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.ui()\ndef rows():\n    rows = penguins_df.cell_selection()[\"rows\"]  \n    selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n    return f\"Rows selected: {selected}\"\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "# shiny.express\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  ",
      "# shiny.express\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        editable=True,  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        editable=True,  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data()  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data()  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the selected data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data_view(selected=True)  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the selected data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data_view(selected=True)  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins: pd.DataFrame = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n        # penguins,\n        styles=[  \n            # Center the text of each cell (using Bootstrap utility class) \n            {  \n                \"class\": \"text-center\",  \n            },  \n            # Bold the first column \n            {  \n                \"cols\": [0],  \n                \"style\": {\"font-weight\": \"bold\"},  \n            },  \n            # Highlight the penguin colors \n            {\n                \"rows\": [0, 1],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#ffdbaf\"},  \n            },  \n            {  \n                \"rows\": [2, 3],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#b1d6d6\"},  \n            },  \n            {  \n                \"rows\": [4, 5],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#d6a9f2\"},  \n            },  \n        ],  \n    )",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins: pd.DataFrame = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n        # penguins,\n        styles=[  \n            # Center the text of each cell (using Bootstrap utility class) \n            {  \n                \"class\": \"text-center\",  \n            },  \n            # Bold the first column \n            {  \n                \"cols\": [0],  \n                \"style\": {\"font-weight\": \"bold\"},  \n            },  \n            # Highlight the penguin colors \n            {\n                \"rows\": [0, 1],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#ffdbaf\"},  \n            },  \n            {  \n                \"rows\": [2, 3],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#b1d6d6\"},  \n            },  \n            {  \n                \"rows\": [4, 5],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#d6a9f2\"},  \n            },  \n        ],  \n    )",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_filters\", \"Update filters\")\nui.input_action_button(\"reset_filters\", \"Reset filters\")\n\nui.h5(\"Current filters: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.filter()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  \n\n@reactive.effect\n@reactive.event(input.update_filters)\nasync def _():\n    await penguins_df.update_filter(  \n        [  \n            # Set partial match \n            {\"col\": 0, \"value\": \"Gen\"},  \n            # Set min value \n            {\"col\": 2, \"value\": (50, None)},  \n            # Set max value \n            {\"col\": 3, \"value\": (None, 17)},  \n            # Set range \n            {\"col\": 4, \"value\": (220, 225)},  \n        ],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_filters)\nasync def _():\n    await penguins_df.update_filter(None)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_filters\", \"Update filters\")\nui.input_action_button(\"reset_filters\", \"Reset filters\")\n\nui.h5(\"Current filters: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.filter()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  \n\n@reactive.effect\n@reactive.event(input.update_filters)\nasync def _():\n    await penguins_df.update_filter(  \n        [  \n            # Set partial match \n            {\"col\": 0, \"value\": \"Gen\"},  \n            # Set min value \n            {\"col\": 2, \"value\": (50, None)},  \n            # Set max value \n            {\"col\": 3, \"value\": (None, 17)},  \n            # Set range \n            {\"col\": 4, \"value\": (220, 225)},  \n        ],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_filters)\nasync def _():\n    await penguins_df.update_filter(None)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_sorting\", \"Update sorting\")\nui.input_action_button(\"reset_sorting\", \"Reset sorting\")\n\nui.h5(\"Current sorting: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.sort()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)\n\n@reactive.effect\n@reactive.event(input.update_sorting)\nasync def _():\n    await penguins_df.update_sort(  \n        [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_sorting)\nasync def _():\n    await penguins_df.update_sort([])  ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_sorting\", \"Update sorting\")\nui.input_action_button(\"reset_sorting\", \"Reset sorting\")\n\nui.h5(\"Current sorting: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.sort()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)\n\n@reactive.effect\n@reactive.event(input.update_sorting)\nasync def _():\n    await penguins_df.update_sort(  \n        [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_sorting)\nasync def _():\n    await penguins_df.update_sort([])  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_selection\", \"Update row selection\")\nui.input_action_button(\"reset_selection\", \"Reset row selection\")\n\nui.h5(\"Current selection: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():  \n    return penguins_df.cell_selection()[\"rows\"]  \n\n@render.data_frame\ndef penguins_df():  \n    return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n@reactive.effect \n@reactive.event(input.update_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]})  \n\n@reactive.effect\n@reactive.event(input.reset_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_selection\", \"Update row selection\")\nui.input_action_button(\"reset_selection\", \"Reset row selection\")\n\nui.h5(\"Current selection: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():  \n    return penguins_df.cell_selection()[\"rows\"]  \n\n@render.data_frame\ndef penguins_df():  \n    return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n@reactive.effect \n@reactive.event(input.update_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]})  \n\n@reactive.effect\n@reactive.event(input.reset_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        summary=\"Viendo filas {start} a {end} de {total}\",  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        summary=\"Viendo filas {start} a {end} de {total}\",  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_dark-mode",
    "url": "components/inputs/dark-mode/",
    "title": "Dark Mode Switch ‚Äì Shiny for Python",
    "description": "",
    "content": "Dark Mode Switch\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_dark_mode ui.input_dark_mode(id=None, mode=None, **kwargs)\n\nui.input_dark_mode ui.input_dark_mode(id=None, mode=None, **kwargs)\n\nDetails\n\nA dark mode switch input toggles the app between dark and light modes.\n\nTo add a dark mode switch to your app:\n\n- Add ui.input_dark_mode() to the UI of your app to create a dark mode switch. Where you call this function will determine where the dark mode switch will appear within the app‚Äôs layout.\n- Optionally, specify the id parameter of ui.input_dark_mode() to define the identifier of the switch. When id is specified, you can use it to access the current color mode.\n- By default, the user‚Äôs system settings for the preferred color scheme will be used for the initial mode of the app. To force the initial mode, set the mode parameter to \"light\" or \"dark\".\n\nAdd ui.input_dark_mode() to the UI of your app to create a dark mode switch. Where you call this function will determine where the dark mode switch will appear within the app‚Äôs layout.\n\nOptionally, specify the id parameter of ui.input_dark_mode() to define the identifier of the switch. When id is specified, you can use it to access the current color mode.\n\nBy default, the user‚Äôs system settings for the preferred color scheme will be used for the initial mode of the app. To force the initial mode, set the mode parameter to \"light\" or \"dark\".\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a dark mode switch:\n\n- Use input.<dark_mode_switch_id>() (e.g., input.mode()) to access the value of the dark mode switch. The server value of a dark mode switch is a string: either \"light\" or \"dark\".\n\nVariations\n\nDark mode switch in a navbar\n\nTo add a dark mode switch to a navbar, use ui.page_navbar() to create a page with a navbar, and ui.nav_spacer() to push the dark mode switch to the right. Place the ui.input_dark_mode() element within a ui.nav_control() element, to add the control to the navbar without creating a corresponding panel.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(ui.input_dark_mode()).add_class(\"h-100 w-100 align-content-center text-center\")\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(ui.input_dark_mode()).add_class(\"h-100 w-100 align-content-center text-center\")\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_dark_mode() ",
      "from shiny.express import input, render, ui\n\nui.input_dark_mode() ",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_dark_mode() \n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_dark_mode() \n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_spacer(), \n    ui.nav_control(ui.input_dark_mode()), \n    title=\"Dark mode switch in navbar\"\n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_spacer(), \n    ui.nav_control(ui.input_dark_mode()), \n    title=\"Dark mode switch in navbar\"\n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "from shiny.express import ui\n\nui.page_opts(title=\"Dark mode switch in navbar\", fillable=True, id=\"page\")\n\nui.nav_spacer()  \nwith ui.nav_control():  \n    ui.input_dark_mode()  ",
      "from shiny.express import ui\n\nui.page_opts(title=\"Dark mode switch in navbar\", fillable=True, id=\"page\")\n\nui.nav_spacer()  \nwith ui.nav_control():  \n    ui.input_dark_mode()  ",
      "from shiny import App, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_spacer(), \n    ui.nav_control(ui.input_dark_mode()), \n    title=\"Dark mode switch in navbar\"\n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_spacer(), \n    ui.nav_control(ui.input_dark_mode()), \n    title=\"Dark mode switch in navbar\"\n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "get-started_what-is-shiny_html",
    "url": "get-started/what-is-shiny.html",
    "title": "What is Shiny? ‚Äì Shiny for Python",
    "description": "",
    "content": "What is Shiny?\n\nWhether you‚Äôre a data scientist, analyst, or developer, Shiny makes it easy to create rich, interactive experiences in pure Python with a fully reactive framework. No need to learn JavaScript or front-end frameworks.\n\nBatteries included\n\nShiny for Python comes fully equipped with everything you need to build a dashboard right out of the box, including a rich set of input and output components. There is an entire components gallery to help you quickly build interactive applications.\n\nLayout options let you organize your UI efficiently, while built-in theming (including dark mode) ensures your app looks great with minimal effort.\n\nAlready have a brand guideline? You can use brand.yml to apply consistent branding, colors, and logos across your application.\n\nInputs\n\nOutputs\n\nLayouts\n\nReactivity\n\nAt the heart of Shiny is reactivity, a system that automatically updates outputs when inputs change for seamless interactivity, without manually writing callbacks.\n\nShiny‚Äôs reactive engine avoids unnecessary computations by only re-calculating the outputs whose inputs have changed, making Shiny ideal for fast data-driven applications, enabling live updates for charts, tables, and reports with minimal effort.\n\nBelow is a live Shiny application and its accompanying code. The first output text shows the square of the first slider value, and the second row of text shows the sum of both slider values.\n\nTry updating the sliders below and see how the text reacts. Also change what value gets returned on lines 11 or 17 and click the play button ‚ñ∂Ô∏è for the app to refresh.\n\nJumpstart with templates\n\nHere‚Äôs a full Shiny application in action, complete with reactivity and a user interface!\n\nHit the ground running with one of our starter templates, like the app above, by using shiny create.\n\nThere are templates for common use cases. For example, data dashboards, data applications, streaming updates, or data entry.\n\nUse the terminal command below to create and run the same dashboard locally with shiny create, starting from a template.\n\nExtensibility\n\nWhile Shiny includes everything you need to build an app, it is also built on a foundation of web standards, making it highly extensible. Many of Shiny‚Äôs components are just plain HTML elements with the right classes to connect to Shiny‚Äôs client-side JavaScript.\n\nTake the action button, for example. You can print the input in the Python console to see that it‚Äôs just a regular HTML <button> element.\n\nThis means that you can use Shiny to learn web development‚Äîand many people have!\n\nBut this also means that Shiny doesn‚Äôt lock you into a particular front-end framework. At the more advanced end of the spectrum, Shiny components can be highly sophisticated and can leverage modern web frameworks. For example, Data Grids are React components that use the popular TanStack Table React library under the hood.\n\nIf you‚Äôre versed in web programming, you can use Shiny to build one-off custom components that integrate your favorite JavaScript framework directly from Python. For more advanced needs, you can develop a reusable component package or customize the user interface by incrementally adding JavaScript or custom HTML or CSS.\n\nInstall, create, and run\n\nNow that you know a little more about Shiny for Python, let‚Äôs go install Shiny so you can create your first application!\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n# | standalone: true\n# | components: [editor, viewer]\n# | layout: vertical\n# | viewerHeight: 250\n\nfrom shiny import reactive\nfrom shiny.express import ui, render, input\n\nui.input_slider(\"s1\", \"Slider 1\", min=0, max=10, value=5)\nui.input_slider(\"s2\", \"Slider 2\", min=0, max=100, value=50)\n\n\n# This output only reacts to the first slider\n@render.text\ndef result():\n    return f\"{input.s1()} squared is {input.s1() ** 2}.\"\n\n\n# This output reacts to both sliders\n@render.text\ndef both_sliders_output():\n    return f\"{input.s1()} + {input.s2()} is {input.s1() + input.s2()}.\"",
      "shiny create --template dashboard",
      "shiny create --template dashboard",
      ">>> from shiny import ui\n>>> ui.input_action_button(\"update_data\", \"Button\")",
      ">>> from shiny import ui\n>>> ui.input_action_button(\"update_data\", \"Button\")",
      "<button class=\"btn btn-default action-button\" id=\"update_data\" type=\"button\">Button</button>",
      "<button class=\"btn btn-default action-button\" id=\"update_data\" type=\"button\">Button</button>"
    ]
  },
  {
    "id": "get-started_debug_html",
    "url": "get-started/debug.html",
    "title": "Debug, troubleshoot, & help ‚Äì Shiny for Python",
    "description": "",
    "content": "Debug, troubleshoot, & help\n\nCommon issues\n\nBefore jumping into general debugging techniques, lets cover some common issues that you may encounter when developing Shiny applications, and explain why they happen.\n\nMissing output\n\nSometimes, output won‚Äôt appear at all. This most commonly happens when an output reads a non-existent input, for example:\n\nThis happens because, if a non-existent input is read, a SilentException is raised. That behavior is useful for events and dynamic ui, but it can be confusing when you mistype an input id.\n\nThese are live Shiny apps that you can edit. Try fixing the problem yourself! You can also take a look at the fixed.py file to see the solution. You will need to copy the code to app.py if you want to run the fixed solution.\n\nOutput errors\n\nWhen an error occurs inside a render decorator function, the relevant error message is displayed in red font where the output would normally be located, for example:\n\nThe error displayed in the app is only the final part of the stack trace, but the full trace can be read in the console where you used shiny run.\n\nWhen Shiny apps are deployed, error messages are sanitized to the eliminate the possibility of leaking sensitive information. To unsanitize error messages, you‚Äôll need to set sanitize_errors=False in the App constructor (of a Shiny core app).\n\nDebugging\n\nThere are many ways you can debug you code. Most likely, your IDE will have the ability to create breakpoints and debug your code. However, you can manual edit your code to help with debugging as well.\n\nPositron and VS Code debugger\n\nThe Positron and VS Code debugger is a powerful tool for debugging Python code. To set a breakpoint in Positron or VS Code, you will need to click the gutter next to the line number. The gutter is empty space immediately to the left of the line number. When you click this area, a red circle will mark that particular line.\n\nOnce the breakpoint is set, you can click the dropdown arrow next to the play button and select ‚ÄúDebug Shiny App‚Äù.\n\nThis will run the shiny application in debug mode, and will pause the application when it reaches the code you have just marked. From there you can open the Debug Console by click the 3 dots in the debug menu. Once you are in the debug console, you can explore all the variables at that moment in the application, including any input variables. You can Mark as many points in your application you want at the same time, and you can step through the code using the debugging toolbar.\n\nManual debugging methods\n\nHere we define manual debugging methods. These methods are less recommended because they require a manual change to your codebase, and potentially restarting your application.\n\nShiny debug mode\n\nAn advanced option for debugging is to use the debug mode when running your application.\n\nFor Shiny Express applications, you can use the shiny.express.app_opts(debug=True) function call at the top of your application after the imports.\n\nFor Shiny Core apps, pass the debug=True argument to the App() call, e.g., App(..., debug=True) at the bottom of your application.\n\nWhen you run a Shiny app in debug mode, you‚Äôll see detailed messages in the terminal. These messages show the communication between the server and the web browser.\n\nThis is an example of the raw data behind how your app works:\n\n- When a user changes an input, the browser sends a message to the server.\n- The server responds with updates, like re-running a calculation or updating a plot.\n\nNote also that Shiny applications use Python‚Äôs asyncio under the hood, so it may be useful to set asyncio‚Äôs debug mode.\n\nManual breakpoints\n\nYou can use breakpoint() to pause your app while it‚Äôs running and inspect what‚Äôs going on. This serves the same purpose as clicking and marking a breakpoint in the Positron IDE a, but requires you manually adding new code to the application. This lets you debug using the .\n\nWhen Python hits the breakpoint(), it will pause and open the debugger in your terminal.\n\nFrom there, you can run commands like:\n\n- continue: resume running the app\n- exit or Ctrl + D: exit the debugger and stop the app\n\nThis is helpful for figuring out where things go wrong in your code.\n\nPrint statements\n\nA quick and simple way to debug Shiny applications is to add print() statements. This lets you see the value of different variables, and how they change when you toggle different inputs.\n\nIf your Shiny application is running with Shinylive (Python in the browser), and there is not a visible Python console, then error messages will show up in your browser‚Äôs JavaScript console.\n\nGet Help\n\nShiny\n\n- The first place to look for help with Shiny is Posit Community, which is a warm and welcoming place to ask any questions you might have about Shiny (as well as tidyverse and all things Posit). The web site is running Discourse, which is an excellent community discussion platform. Our developers monitor Posit Community and answer questions periodically.\n- Shiny users (and the Shiny team!) regularly talk on Shiny‚Äôs Discord server. Discord has more of a chat interface than Posit Community, and is not indexed by search engines. It‚Äôs a great forum for casual conversations or networking with other Shiny developers.\n- You can also check the ‚Äúshiny+python‚Äù tag on Stack Overflow for existing answers, or post your own question. (Keep in mind that general Shiny for R answers may also point you in the right direction.) Note that questions posted on Stack Overflow are not closely monitored by our developers.\n\nThe first place to look for help with Shiny is Posit Community, which is a warm and welcoming place to ask any questions you might have about Shiny (as well as tidyverse and all things Posit). The web site is running Discourse, which is an excellent community discussion platform. Our developers monitor Posit Community and answer questions periodically.\n\nShiny users (and the Shiny team!) regularly talk on Shiny‚Äôs Discord server. Discord has more of a chat interface than Posit Community, and is not indexed by search engines. It‚Äôs a great forum for casual conversations or networking with other Shiny developers.\n\nYou can also check the ‚Äúshiny+python‚Äù tag on Stack Overflow for existing answers, or post your own question. (Keep in mind that general Shiny for R answers may also point you in the right direction.) Note that questions posted on Stack Overflow are not closely monitored by our developers.\n\nPosit Connect Cloud\n\n- For information about Posit Connect Cloud, see the Connect Cloud Documentation\n- For community support, there is a community forum for Connect Cloud.\n- Customers with Starter, Basic, Standard or Pro subscriptions can get direct access to our support engineers by opening a case on the Posit Support site. Questions are answered from 9AM - 5PM(EST) Monday - Friday.\n\nFor information about Posit Connect Cloud, see the Connect Cloud Documentation\n\nFor community support, there is a community forum for Connect Cloud.\n\nCustomers with Starter, Basic, Standard or Pro subscriptions can get direct access to our support engineers by opening a case on the Posit Support site. Questions are answered from 9AM - 5PM(EST) Monday - Friday.\n\nshinyapps.io\n\n- For documentation and instructions on how to use shinyapps.io, see the shinyapps.io user guide.\n- The best place to get community support for shinyapps.io is the shinyapps.io category on Posit Community. If you‚Äôre having difficulties with shinyapps.io, feel free to ask questions there. Another option is to file an issue in the rsconnect-python package repo.\n- Customers with Starter, Basic, Standard or Pro subscriptions can get direct access to our support engineers by opening a case on the Posit Support site. Questions are answered from 9AM - 5PM(EST) Monday - Friday.\n\nFor documentation and instructions on how to use shinyapps.io, see the shinyapps.io user guide.\n\nThe best place to get community support for shinyapps.io is the shinyapps.io category on Posit Community. If you‚Äôre having difficulties with shinyapps.io, feel free to ask questions there. Another option is to file an issue in the rsconnect-python package repo.\n\nCustomers with Starter, Basic, Standard or Pro subscriptions can get direct access to our support engineers by opening a case on the Posit Support site. Questions are answered from 9AM - 5PM(EST) Monday - Friday.\n\nPosit Connect and Shiny Server Pro\n\nCustomers with Posit Connect or Shiny Server Pro subscriptions can contact our dedicated support team for our commercial offerings.\n\nSales\n\nFor sales questions, please email sales@posit.co.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n# | standalone: true\n# | components: [editor, viewer]\n# | layout: vertical\n# | viewerHeight: 120\n\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"val\", \"Slider value\", min=0, max=10, value=5)\n\n\n# Nothing renders because input.wrong_id() doesn't exist!\n@render.text\ndef slider_val():\n    return f\"Slider value: {input.wrong_id()}\"\n\n\n## file: fixed.py\n# Copy this solution to the app.py and re-run the application to see the fix in action\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"val\", \"Slider value\", min=0, max=10, value=5)\n\n\n# Nothing renders because input.wrong_id() doesn't exist!\n@render.text\ndef slider_val():\n    return f\"Slider value: {input.val()}\"  \n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n# | standalone: true\n# | components: [editor, viewer]\n# | layout: vertical\n# | viewerHeight: 120\nfrom shiny.express import render\n\n\n@render.text\ndef good():\n    return \"This output is fine, but the next one is not.\"\n\n\n@render.text\ndef bad():\n    return str(a_missing_variable)\n\n\n## file: fixed.py\n# Copy this solution to the app.py and re-run the application to see the fix in action\nfrom shiny.express import render\n\n\n@render.text\ndef good():\n    return \"This output is fine, but the next one is not.\"\n\n\n@render.text\ndef bad_fixed():\n    a_missing_variable = \"Fixed by defining missing variable.\"\n    return str(a_missing_variable)\n",
      "SEND: {\"busy\": \"busy\"}\nSEND: {\"recalculating\": {\"name\": \"my_cool_output\", \"status\": \"recalculating\"}}\nSEND: {\"recalculating\": {\"name\": \"my_cool_output\", \"status\": \"recalculated\"}}\nSEND: {\"busy\": \"idle\"}\nSEND: {\"values\": {}, \"inputMessages\": [], \"errors\": {}}",
      "SEND: {\"busy\": \"busy\"}\nSEND: {\"recalculating\": {\"name\": \"my_cool_output\", \"status\": \"recalculating\"}}\nSEND: {\"recalculating\": {\"name\": \"my_cool_output\", \"status\": \"recalculated\"}}\nSEND: {\"busy\": \"idle\"}\nSEND: {\"values\": {}, \"inputMessages\": [], \"errors\": {}}",
      "@render.text\ndef bad():\n    breakpoint()\n    return str(a_missing_variable)",
      "@render.text\ndef bad():\n    breakpoint()\n    return str(a_missing_variable)"
    ]
  },
  {
    "id": "get-started_deploy_html",
    "url": "get-started/deploy.html",
    "title": "Hosting and deployment ‚Äì Shiny for Python",
    "description": "When it‚Äôs time to put your Shiny app on the web, you can choose to deploy on your own servers or on our hosting service.",
    "content": "- Deploy\n- Overview\n\nHosting and deployment\n\nWhen it‚Äôs time to put your Shiny app on the web, you can choose to deploy on your own servers or on our hosting service.\n\nCloud hosting\n\nThe easiest deployment option to get started with is cloud hosting. Since you don‚Äôt need to run your own server, you can have your Shiny app up and running in minutes!\n\nShiny cloud hosting may not be right for you if your app must run within your datacenter or virtual private cloud; please see the next option if that‚Äôs the case.\n\nLearn more\n\nSelf-hosted deployments\n\nIf you prefer to run your own server, or you must run your apps inside your network or virtual private cloud, then a self-hosted (or on-premises) deployment may be right for you. Posit offers both open source (Shiny Server) and commercial/enterprise (Posit Connect) options for Shiny app hosting.\n\nLearn more\n\nStatic hosting\n\nSome Shiny apps can be converted into completely static web pages (HTML, CSS, and JavaScript), with no need for Python to be running on the server. This is made possible by running the Shiny app‚Äôs Python logic entirely inside of the browser, using the magic of WebAssembly. We call this mode ShinyLive, and it has great benefits for making hosting cheaper, simpler, and practically infinitely scalable.\n\nLearn more\n\nMore resources\n\nSee a comparison of Posit‚Äôs hosting and deployment options for Shiny. If you have any questions about which product is the right fit for you, please email sales@posit.co.\n\n",
    "code_examples": []
  },
  {
    "id": "get-started_deploy-cloud_html",
    "url": "get-started/deploy-cloud.html",
    "title": "Cloud hosting ‚Äì Shiny for Python",
    "description": "",
    "content": "- Deploy\n- Cloud hosting\n\nCloud hosting\n\nPosit Connect Cloud\n\nThe quickest way to get started is Posit Connect Cloud, our next-generation online publishing platform.\n\nYou can deploy Shiny applications‚Äîand other data frameworks‚Äîfrom GitHub to Connect Cloud in under a minute. All you need is your code and a requirements.txt dependency file.\n\nQuickly showcase your work with a public portfolio and leverage powerful features such as secret environment variable management and automatic push-to-publish for seamless continuous deployment. Free and paid plans are available.\n\nTo get started, sign up for Connect Cloud, review the how-to guide, and join the community.\n\nShinyapps.io\n\nshinyapps.io also allows you to easily host applications without having to set up your own server, and has a variety of free and paid plans depending on your use case.\n\nTo use shinyapps.io, follow these steps:\n\n- Install the rsconnect-python package. pip install rsconnect-python Deploying Shiny Express applications requires version 1.22.0 or later of the rsconnect-python package.\n- Sign up for a free shinyapps.io account\n- When you log in for the first time, you will be shown a command to run that will configure rsconnect-python with a shinyapps.io API token. The command will look something like: rsconnect add --account <ACCOUNT> --name <NAME> --token <TOKEN> --secret <SECRET>\n- Deploy your application by calling rsconnect deploy. rsconnect deploy shiny /path/to/app --name <NAME> --title my-app\n\nInstall the rsconnect-python package.\n\nDeploying Shiny Express applications requires version 1.22.0 or later of the rsconnect-python package.\n\nSign up for a free shinyapps.io account\n\nWhen you log in for the first time, you will be shown a command to run that will configure rsconnect-python with a shinyapps.io API token. The command will look something like:\n\nDeploy your application by calling rsconnect deploy.\n\nAfter following these steps you will be able to manage and share the application on the cloud. Please see the full documentation for more information on how to deploy content to shinyapps.io.\n\nHugging Face\n\nHugging Face is an open-source platform that provides state-of-the-art natural language processing (NLP) tools and models. You can host a variety of applications, including Shiny apps, on Hugging Face using Hugging Face spaces which makes it easy to integrate their hosted models into your Shiny app without having to build everything from scratch. Hugging Face has implemented templated spaces for Shiny applications which will populate all the files you need to get started.\n\n",
    "code_examples": [
      "pip install rsconnect-python",
      "pip install rsconnect-python",
      "rsconnect add --account <ACCOUNT> --name <NAME> --token <TOKEN> --secret <SECRET>",
      "rsconnect add --account <ACCOUNT> --name <NAME> --token <TOKEN> --secret <SECRET>",
      "rsconnect deploy shiny /path/to/app --name <NAME> --title my-app",
      "rsconnect deploy shiny /path/to/app --name <NAME> --title my-app"
    ]
  },
  {
    "id": "get-started_deploy-on-prem_html",
    "url": "get-started/deploy-on-prem.html",
    "title": "Self-hosted deployments ‚Äì Shiny for Python",
    "description": "",
    "content": "- Deploy\n- Self-hosted deployments\n\nSelf-hosted deployments\n\nCommercial software\n\nPosit Connect is our flagship publishing platform for the work your teams create in Python or R. With Posit Connect, you can share Shiny applications, Quarto reports, dashboards and plots, as well as Flask, Dash, Streamlit and Bokeh apps, in one convenient place. Features include scheduled execution of reports and flexible security policies to bring the power of data science to your entire enterprise.\n\nSince Connect can host models, APIs, apps, and datasets, it lets you easily integrate Shiny apps with other other data science tools. For example, Connect can retrain a model on a schedule, expose that model through an API, and communicate the results with a Shiny app. Posit Connect is commonly used in highly regulated environments, so can fulfill most security and compliance requirements.\n\nThere are two main ways to deploy Shiny apps to Posit Connect:\n\nCommand line deployment\n\n- Install the rsconnect-python package using pip. pip install rsconnect-python Deploying Shiny Express applications requires version 1.22.0 or later of the rsconnect-python package.\n- Generate an API key on Connect.\n- At the command line add a nickname for your connect server with rsconnect add. rsconnect add -n my-connect -s <server_url> --api-key <YOUR_KEY>\n- Deploy your application with rsconnect deploy shiny rsconnect deploy shiny -n my-connect\n\nInstall the rsconnect-python package using pip.\n\nDeploying Shiny Express applications requires version 1.22.0 or later of the rsconnect-python package.\n\nGenerate an API key on Connect.\n\nAt the command line add a nickname for your connect server with rsconnect add.\n\nDeploy your application with rsconnect deploy shiny\n\nYou can also deploy shiny apps from a continuous integration system using rsconnect deploy.\n\nGit backed deployment\n\nPosit Connect can be set up to automatically deploy content from git with git-backed deployment. If your installation is configured to use git, Posit Connect can monitor a branch of a git repo and redeploy your content when that branch changes.\n\n- Use rsconnect write-manifest shiny to generate a manifest.json file and a requirements.txt. The manifest file is used by Connect to deploy your app using the correct version of Python.\n- Check your code into git, make sure to include the manifest and requirements file.\n- Follow the Connect instructions to link your branch with Connect.\n\nUse rsconnect write-manifest shiny to generate a manifest.json file and a requirements.txt. The manifest file is used by Connect to deploy your app using the correct version of Python.\n\nCheck your code into git, make sure to include the manifest and requirements file.\n\nFollow the Connect instructions to link your branch with Connect.\n\nOpen source options\n\nPosit‚Äôs mission is to create free and open-source software for data science, scientific research, and technical communication. We do this to enhance the production and consumption of knowledge by everyone, regardless of economic means, and to facilitate collaboration and reproducible research, both of which are critical to the integrity and efficacy of work in science, education, government, and industry. As a result we are committed to supporting open source hosting for all Shiny apps. You will always be able to host Shiny apps for free, and those apps will have the same capabilities as apps hosted on our commercial products. If you want to read more about our commitment to free and open source software, you can see our annual public benefit report.\n\nDeploy to Shiny Server (open source)\n\nShiny Server is an open source server written in Node.js that can host multiple Shiny apps on a single port, managing the starting/stopping/restarting of each app‚Äôs Python process.\n\n- Shiny Server v1.5.22 or later is required for Shiny for Python apps. You can find the latest version of Shiny Server here.\n- Linux only (see Platform Support for a list of supported distributions).\n\nCompared to Posit Connect, deploying apps on Shiny Server is less automated and more config-file based, similar in spirit to Apache or nginx. Also note that Shiny Server can handle less traffic on a single server node, as it doesn‚Äôt know how to start multiple Python processes per app, as Posit Connect can. To be clear, Shiny Server can serve multiple apps at once, and multiple concurrent users per app; each app is just limited to the traffic that a single Python process can support before it slows unacceptably. And note that Shiny Server is designed to work well behind any proxy or load balancer that supports sticky sessions.\n\nInstall\n\nFirst, download and install Shiny Server from a .deb or .rpm‚Äîbut skip the instructions for installing R and Shiny for R (unless you plan to deploy both Shiny for R and Shiny for Python apps). If all goes well, you should see a welcome page on http://hostname:3838/. (Don‚Äôt worry if you see iframes with greyed-out apps; they depend on R.)\n\nConfigure Python\n\nNext, you need to tell Shiny Server how to find Python. You can point Shiny Server at either a Python binary (e.g. /usr/bin/python3) or an absolute path to a virtualenv (e.g. /srv/shiny-server/python39-venv). You can also provide a relative path to a virtualenv (e.g. .venv) in which case, SSOS will look for that directory relative to app.py. (Don‚Äôt forget that you need to pip install shiny and any other Python packages needed by your app(s), into whichever Python installation or virtualenv(s) you intend to use.)\n\nEdit the file /etc/shiny-server/shiny-server.conf (root privileges are required). Add a line with python <path-to-python-or-venv>; to the top of the file, leaving the rest of the file alone (at least for now). For example, if you wanted to use /usr/bin/python3, the end result might look like this:\n\nPlace application files\n\nNow, clear out the contents of /srv/shiny-server/ and replace it with your own app(s).\n\n- If you‚Äôre only hosting a single app, you can put the app.py (and the rest of the app‚Äôs files) directly in /srv/shiny-server/, and it will be served from http://hostname:3838/.\n- If you have multiple apps, copy each app into a subdirectory; for example, /srv/shiny-server/foo/app.py would be served from http://hostname:3838/foo/. In this case, you can put static assets into the root /srv/shiny-server/ directory, like an index.html file.\n\nIf you elected to use a relative virtualenv path (e.g. python .venv;), then now is the time to create a virtualenv alongside each app.py and install the necessary Python packages. (Do not upload virtualenv directories created on other computers, as virtualenvs are not meant to be portable.)\n\nRestart and test\n\nFinally, you will need to restart Shiny Server for your changes to /etc/shiny-server/shiny-server.conf to take effect.\n\nNot working for you? Look for clues in /var/log/shiny-server.log and /var/log/shiny-server/*.log.\n\nSee the Shiny Server Administrator‚Äôs Guide for other options. (Note that the Admin Guide includes documentation for the commercially licensed Professional edition of Shiny Server, and includes features marked ‚ÄúPro Only‚Äù. Shiny Server Professional is no longer available for new customers, and doesn‚Äôt support Shiny for Python; our commercially licensed on-premises server these days is Posit Connect.)\n\nOther hosting options\n\nShiny is built on the well-known foundation of Starlette, ASGI, and Uvicorn‚Äîthe same exact stack as FastAPI. Even the shell command used to run an FastAPI server works just as well for a Shiny app:\n\nSo any FastAPI hosting arrangement should work for Shiny as well, right? Sorry, it‚Äôs not that simple. Despite the similarities, Shiny apps are a different beast than your typical web API and cannot be deployed with the mental model one would use for FastAPI.\n\nThe two main complications are:\n\n- Shiny uses WebSockets for most browser/server communication. Even as this is written in 2023, we have enterprise customers whose networks interfere with WebSocket traffic.\n- Shiny sessions hold state in memory. Therefore, from the moment a browser tab connects to a Shiny app to the moment it disconnects, all of its server communications must go to the same server and the same Python process on that server (‚Äústicky‚Äù load balancing).\n\nOur hosting solutions (the ones described above) are designed with both of these bullet points in mind, and we highly recommend you use them if possible.\n\nIf not, just remember: it‚Äôs very important that whatever deployment configuration you use can support sticky sessions wherever load balancing is introduced. Whether you use an AWS ALB, an nginx proxy, or even a CDN like CloudFlare, all must use sticky sessions. Notably, this rules out the use of Gunicorn (it doesn‚Äôt support sticky sessions), at least with >1 worker.\n\nYou can use this test application to make sure that your deployment has sticky sessions configured; the application does nothing but send repeated requests to the server, which will only succeed if they connect to the same Python process that the page was loaded on.\n\nHeroku\n\nWe have some users who have successfully deployed Shiny applications to Heroku. To test if this works on your setup, try deploying the Shiny test application using the instructions on this github repo.\n\nAWS, Google Cloud, Azure\n\nWe don‚Äôt have any particular recommendations for deploying on cloud platforms other than the general point about using sticky-session load balancing. If you have any recipes or tips, please share!\n\n",
    "code_examples": [
      "pip install rsconnect-python",
      "pip install rsconnect-python",
      "rsconnect add -n my-connect -s <server_url> --api-key <YOUR_KEY>",
      "rsconnect add -n my-connect -s <server_url> --api-key <YOUR_KEY>",
      "rsconnect deploy shiny -n my-connect",
      "rsconnect deploy shiny -n my-connect",
      "# Use system python3 to run Shiny apps\npython /usr/bin/python3;\n\n# Instruct Shiny Server to run applications as the user \"shiny\"\nrun_as shiny;\n\n# Define a server that listens on port 3838\nserver {\n  listen 3838;\n\n  # Define a location at the base URL\n  location / {\n\n    # Host the directory of Shiny Apps stored in this directory\n    site_dir /srv/shiny-server;\n\n    # Log all Shiny output to files in this directory\n    log_dir /var/log/shiny-server;\n\n    # When a user visits the base URL rather than a particular application,\n    # an index of the applications available in this directory will be shown.\n    directory_index on;\n  }\n}",
      "# Use system python3 to run Shiny apps\npython /usr/bin/python3;\n\n# Instruct Shiny Server to run applications as the user \"shiny\"\nrun_as shiny;\n\n# Define a server that listens on port 3838\nserver {\n  listen 3838;\n\n  # Define a location at the base URL\n  location / {\n\n    # Host the directory of Shiny Apps stored in this directory\n    site_dir /srv/shiny-server;\n\n    # Log all Shiny output to files in this directory\n    log_dir /var/log/shiny-server;\n\n    # When a user visits the base URL rather than a particular application,\n    # an index of the applications available in this directory will be shown.\n    directory_index on;\n  }\n}",
      "# Assuming you have a file named app.py, with a Shiny app named app.\nuvicorn app:app --host 0.0.0.0 --port 80",
      "# Assuming you have a file named app.py, with a Shiny app named app.\nuvicorn app:app --host 0.0.0.0 --port 80"
    ]
  },
  {
    "id": "templates",
    "url": "templates/",
    "title": "Shiny for Python ‚Äì Shiny Templates",
    "description": "",
    "content": "Shiny Templates\n\nA collection of useful apps built from a combination components, layouts, and reactivity. Compared to the gallery, templates provide a more minimal yet useful starting point for your next app.\n\nBasic Apps\n\nBasic starting points highlighting common layouts and components.\n\nGenerative AI\n\nGo from a basic Gen AI chatbot to something more sophisticated.\n\nDashboards\n\nAt their core, dashboards are a combination of sidebar layout with cards and value boxes.\n\nStreaming Updates\n\nReactive file reading and polling provide an easy and useful way to ‚Äústream‚Äù updates to files, folders, databases, and more.\n\nData Entry\n\nValidate and record user input to a questionnaire.\n\n",
    "code_examples": []
  },
  {
    "id": "components",
    "url": "components/",
    "title": "Shiny Components ‚Äì Shiny for Python",
    "description": "",
    "content": "Shiny Components\n\nInputs, outputs and display messages to make your data interactive on every device. Add these components to Shiny Layouts to give your app a navbar, sidebar, cards and more.\n\nInputs\n\nInputs allow users to interact with the webpage by clicking a button, entering text, selecting an option, and more.\n\nOutputs\n\nOutputs create a spot on the webpage to display results from the server, such as text, tables, plots, and more.\n\nDisplay Messages\n\nProvide feedback to your user with notifications, progress bars, and confirmation modals.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center px-4 flex-column\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center px-4 flex-column\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"uiElement\"),\n    {\"class\": \"vh-100 d-flex flex-column pt-4 px-4\"},\n)\n\ndef server(input, output, session):\n    @render.ui\n    def uiElement():\n        if input.show_slider():\n            return ui.input_slider(\"slider\", \"\", min=1, max=10, value=5)\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"uiElement\"),\n    {\"class\": \"vh-100 d-flex flex-column pt-4 px-4\"},\n)\n\ndef server(input, output, session):\n    @render.ui\n    def uiElement():\n        if input.show_slider():\n            return ui.input_slider(\"slider\", \"\", min=1, max=10, value=5)\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text_verbatim(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center flex-column px-4\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"x\", \"\", placeholder=\"Enter text\"),\n    ui.output_text_verbatim(\"txt\"),\n    {\n        \"class\": \"vh-100 d-flex justify-content-center align-items-center flex-column px-4\"\n    },\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f'x: \"{input.x()}\"'\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = ui.markdown(\n    \"\"\"\n    Hi! This is a simple Shiny `Chat` UI. Enter a message below and I will\n    simply repeat it back to you. For more examples, see this\n    [folder of examples](https://github.com/posit-dev/py-shiny/tree/main/shiny/templates/chat).\n    \"\"\"\n)\n\n# Create a chat instance\nchat = ui.Chat(\n    id=\"chat\",\n    messages=[welcome],\n)\n\n# Display it\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = ui.markdown(\n    \"\"\"\n    Hi! This is a simple Shiny `Chat` UI. Enter a message below and I will\n    simply repeat it back to you. For more examples, see this\n    [folder of examples](https://github.com/posit-dev/py-shiny/tree/main/shiny/templates/chat).\n    \"\"\"\n)\n\n# Create a chat instance\nchat = ui.Chat(\n    id=\"chat\",\n    messages=[welcome],\n)\n\n# Display it\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, reactive, ui\nfrom pathlib import Path\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\"Message \" + str(n), duration=None)\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, reactive, ui\nfrom pathlib import Path\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\"Message \" + str(n), duration=None)\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n## file: app.py\nimport asyncio\nfrom pathlib import Path\n\nfrom shiny import App, reactive, render, ui\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_text(\"compute\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n## file: app.py\nimport asyncio\nfrom pathlib import Path\n\nfrom shiny import App, reactive, render, ui\n\nappdir = Path(__file__).parent\napp_ui = ui.page_fillable(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_text(\"compute\"),\n    {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\napp = App(app_ui, server)\n\n## file: styles.css\n# shiny-notification-panel { max-width: 100%; }",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"tooltip\", \"Show tooltip\", class_=\"btn-primary\"),\n        {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n        \"A tooltip message\",  \n        id=\"btn_tooltip\",  \n        placement=\"top\",  \n    ),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"tooltip\", \"Show tooltip\", class_=\"btn-primary\"),\n        {\"class\": \"vh-100 d-flex justify-content-center align-items-center px-4\"},\n        \"A tooltip message\",  \n        id=\"btn_tooltip\",  \n        placement=\"top\",  \n    ),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "layouts",
    "url": "layouts/",
    "title": "Shiny Layouts ‚Äì Shiny for Python",
    "description": "",
    "content": "Shiny Layouts\n\nLayouts allow the simplest or most complicated app to be useable and scalable. Is it bursting at the seams with content? Quickly change the layout for a fresh start. Fill these layouts with Shiny Components to make your app reactive and interactive.\n\nNavbars\n\nA navbar adds a navigation bar to your app, allowing users to easily navigate your app.\n\nLearn Navbars\n\nSidebars\n\nA sidebar layout creates a sidebar, typically used for inputs, and a large main area, typically used for outputs.\n\nLearn Sidebars\n\nTabs\n\nTabs and navigation allow you to create apps that have multiple pages.\n\nLearn Tabs\n\nPanels & Cards\n\nUse panels and cards to define areas of related content.\n\nLearn Panels & Cards\n\nArrange Elements\n\nUse rows and columns to create your own layout for every device size.\n\nArrange Elements\n\n",
    "code_examples": []
  },
  {
    "id": "components_outputs_data-grid",
    "url": "components/outputs/data-grid/",
    "title": "Data Grid ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Data Grid\n\nData Grid\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_data_frame ui.output_data_frame(id)\n- @render.data_frame render.data_frame(fn=None)\n- render.DataGrid render.DataGrid(self, data, *, width='fit-content', height='500px', summary=True, filters=False, row_selection_mode='none')\n\nui.output_data_frame ui.output_data_frame(id)\n\n@render.data_frame render.data_frame(fn=None)\n\nrender.DataGrid render.DataGrid(self, data, *, width='fit-content', height='500px', summary=True, filters=False, row_selection_mode='none')\n\nDetails\n\nA Data Grid presents tabular data in a spreadsheet-like view with cells separated by grid lines.\n\nTo make a reactive Data Grid, follow three steps:\n\n- Call ui.output_data_frame() in the UI of your app to create a div in which to display the table. Where you call this function within the UI functions will determine where the table will appear within the layout of the app. Set the id argument of ui.output_data_frame() to a unique value.\n- Within the server function, define a new function whose name matches the id used above. The function should assemble the table to display and then return the table wrapped in render.DataGrid(). Shiny will rerun this function whenever it needs to build or update the output that has the matching id.\n- Decorate the function with @render.data_frame.\n\nCall ui.output_data_frame() in the UI of your app to create a div in which to display the table. Where you call this function within the UI functions will determine where the table will appear within the layout of the app. Set the id argument of ui.output_data_frame() to a unique value.\n\nWithin the server function, define a new function whose name matches the id used above. The function should assemble the table to display and then return the table wrapped in render.DataGrid(). Shiny will rerun this function whenever it needs to build or update the output that has the matching id.\n\nDecorate the function with @render.data_frame.\n\nA Data Grid can also collect input from the user. To allow this, set render.DataGrid(selection_mode=\"row\") or render.DataGrid(selection_mode=\"rows\") to allow the user to select one or more rows of the Data Grid.\n\nThe indices of the selected rows will be accessible within the server function as a reactive variable returned by <name>.cell_selection()[\"rows\"], where is the name of the function decorated with @render.data_frame.\n\nThe value returned will be an empty tuple if no rows are selected, or a tuple of integers representing the indices of the selected rows. To filter a pandas data frame down to the selected rows, use df.iloc[list(<name>.cell_selection()[\"rows\"])].\n\nFor more information about interacting with data frames, see the API documentation for Express or Core syntax.\n\nIf your table is a data frame that uses the pandas styler, replace ui.output_data_frame() with ui.output_table() and @render.data_frame with @render.table.\n\nSee also: Data Tables\n\nVariations\n\nSelect Rows\n\nSet selection_mode in render.DataGrid() to \"row\" to allow the user to select one row at a time. Set it to \"rows\" to allow the user to select multiple rows at a time. Access the selection(s) as <id>.cell_selection()[\"rows\"].\n\n- Express\n- Core\n\nFilterable Table\n\nSet render.DataGrid(filters=True) to add a row of filter options to the header row. Users can interact with these options to filter the table.\n\n- Express\n- Core\n\nEdit Table Cells\n\nSet editable=True to be able to edit cell contents without re-rendering the data frame.\n\n- Express\n- Core\n\nUse Original Data\n\nThe reactive value .data() will reactively return the unaltered data.\n\n- Express\n- Core\n\nUse Edited Data\n\nThe reactive value .data_view() (or .data_view(selected=True)) will reactively return the edited data. The data will be updated as the user edits the table and the rows will be arranged to match the user‚Äôs sorting and filtering.\n\n- Express\n- Core\n\nSet Table Size\n\nSet the height and width parameters of render.DataGrid() to constrain the output size of the table.\n\n- Express\n- Core\n\nStyling\n\nSet styles in render.DataGrid() to a customize the table display. styles can take a list of dictionaries where each dictionary represents a style to be applied to the table (and thus should have at least a style (or class) key to apply CSS styles or classes to the relevant cells). To scope the styling to particular cells, use the rows and cols keys (with 0-based indexing). Note that if both rows and cols are specified, the style will be applied only to the intersection of the specified rows and columns.\n\n- Express\n- Core\n\nUpdate Filters\n\nThe data frame filters can be programmatically updated using the .update_filter() method. It takes a list of column filters to apply to the data frame. Each column filter is a dictionary with the following keys: col and value. The col key is the column index to filter on, and the value key is the value to filter for. The value key can be a single value for string columns or a list of values to filter for numeric columns. Note, to not set a minimum or maximum value for a numeric column, you can provide a None value. To reset filters, provide None for the filters (.update_filter(None)).\n\n- Express\n- Core\n\nUpdate Sorting\n\nThe data frame sorting can be programmatically updated using the .update_sort() method. It takes a list of sorting information or column numbers to apply to the data frame. When using a number, the default sorting direction will be applied. When providing a sorting info object, col and desc describe the column index and whether or not the sorting direction is descending. To reset the sorting, provide None for the sorting information (.update_sort(None)).\n\n- Express\n- Core\n\nUpdate Row Selection\n\nThe selected rows can be programmatically updated using the .update_cell_selection() method. .update_cell_selection() takes one argument, selection, which should be a dictionary specifying type, which can be either row (for a single row) or rows (for multiple rows), and row, a list of the row indices to select. Note that you will also need to set selection_mode in render.DataGrid() to \"row\" or \"rows\", since it is \"none\" by default.\n\n- Express\n- Core\n\nCustomize Summary Statement\n\nSet summary in render.DataGrid() to False to remove the statement ‚ÄúViewing rows 1 through 10 of 20‚Äù. Set it to a string template containing {start}, {end}, and {total} tokens, to customize the message.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 375\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 375\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame  \ndef penguins_df():\n    return render.DataGrid(penguins)  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame  \ndef penguins_df():\n    return render.DataGrid(penguins)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.ui()\ndef rows():\n    rows = penguins_df.cell_selection()[\"rows\"]  \n    selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n    return f\"Rows selected: {selected}\"\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.ui()\ndef rows():\n    rows = penguins_df.cell_selection()[\"rows\"]  \n    selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n    return f\"Rows selected: {selected}\"\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "# shiny.express\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  ",
      "# shiny.express\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        editable=True,  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        editable=True,  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data()  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data()  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the selected data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data_view(selected=True)  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the selected data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data_view(selected=True)  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins: pd.DataFrame = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n        # penguins,\n        styles=[  \n            # Center the text of each cell (using Bootstrap utility class) \n            {  \n                \"class\": \"text-center\",  \n            },  \n            # Bold the first column \n            {  \n                \"cols\": [0],  \n                \"style\": {\"font-weight\": \"bold\"},  \n            },  \n            # Highlight the penguin colors \n            {\n                \"rows\": [0, 1],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#ffdbaf\"},  \n            },  \n            {  \n                \"rows\": [2, 3],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#b1d6d6\"},  \n            },  \n            {  \n                \"rows\": [4, 5],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#d6a9f2\"},  \n            },  \n        ],  \n    )",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins: pd.DataFrame = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n        # penguins,\n        styles=[  \n            # Center the text of each cell (using Bootstrap utility class) \n            {  \n                \"class\": \"text-center\",  \n            },  \n            # Bold the first column \n            {  \n                \"cols\": [0],  \n                \"style\": {\"font-weight\": \"bold\"},  \n            },  \n            # Highlight the penguin colors \n            {\n                \"rows\": [0, 1],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#ffdbaf\"},  \n            },  \n            {  \n                \"rows\": [2, 3],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#b1d6d6\"},  \n            },  \n            {  \n                \"rows\": [4, 5],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#d6a9f2\"},  \n            },  \n        ],  \n    )",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_filters\", \"Update filters\")\nui.input_action_button(\"reset_filters\", \"Reset filters\")\n\nui.h5(\"Current filters: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.filter()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  \n\n@reactive.effect\n@reactive.event(input.update_filters)\nasync def _():\n    await penguins_df.update_filter(  \n        [  \n            # Set partial match \n            {\"col\": 0, \"value\": \"Gen\"},  \n            # Set min value \n            {\"col\": 2, \"value\": (50, None)},  \n            # Set max value \n            {\"col\": 3, \"value\": (None, 17)},  \n            # Set range \n            {\"col\": 4, \"value\": (220, 225)},  \n        ],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_filters)\nasync def _():\n    await penguins_df.update_filter(None)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_filters\", \"Update filters\")\nui.input_action_button(\"reset_filters\", \"Reset filters\")\n\nui.h5(\"Current filters: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.filter()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  \n\n@reactive.effect\n@reactive.event(input.update_filters)\nasync def _():\n    await penguins_df.update_filter(  \n        [  \n            # Set partial match \n            {\"col\": 0, \"value\": \"Gen\"},  \n            # Set min value \n            {\"col\": 2, \"value\": (50, None)},  \n            # Set max value \n            {\"col\": 3, \"value\": (None, 17)},  \n            # Set range \n            {\"col\": 4, \"value\": (220, 225)},  \n        ],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_filters)\nasync def _():\n    await penguins_df.update_filter(None)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_sorting\", \"Update sorting\")\nui.input_action_button(\"reset_sorting\", \"Reset sorting\")\n\nui.h5(\"Current sorting: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.sort()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)\n\n@reactive.effect\n@reactive.event(input.update_sorting)\nasync def _():\n    await penguins_df.update_sort(  \n        [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_sorting)\nasync def _():\n    await penguins_df.update_sort([])  ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_sorting\", \"Update sorting\")\nui.input_action_button(\"reset_sorting\", \"Reset sorting\")\n\nui.h5(\"Current sorting: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.sort()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)\n\n@reactive.effect\n@reactive.event(input.update_sorting)\nasync def _():\n    await penguins_df.update_sort(  \n        [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_sorting)\nasync def _():\n    await penguins_df.update_sort([])  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_selection\", \"Update row selection\")\nui.input_action_button(\"reset_selection\", \"Reset row selection\")\n\nui.h5(\"Current selection: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():  \n    return penguins_df.cell_selection()[\"rows\"]  \n\n@render.data_frame\ndef penguins_df():  \n    return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n@reactive.effect \n@reactive.event(input.update_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]})  \n\n@reactive.effect\n@reactive.event(input.reset_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_selection\", \"Update row selection\")\nui.input_action_button(\"reset_selection\", \"Reset row selection\")\n\nui.h5(\"Current selection: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():  \n    return penguins_df.cell_selection()[\"rows\"]  \n\n@render.data_frame\ndef penguins_df():  \n    return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n@reactive.effect \n@reactive.event(input.update_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]})  \n\n@reactive.effect\n@reactive.event(input.reset_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        summary=\"Viendo filas {start} a {end} de {total}\",  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        summary=\"Viendo filas {start} a {end} de {total}\",  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_outputs_plot-matplotlib",
    "url": "components/outputs/plot-matplotlib/",
    "title": "Plot (Matplotlib) ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Plot (Matplotlib)\n\nPlot (Matplotlib)\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_plot ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)\n- @render.plot render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)\n\nui.output_plot ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)\n\n@render.plot render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)\n\nDetails\n\nMatplotlib is a popular Python library that can be used to create plots.\n\nFollow three steps to display a Matplotlib figure in your app:\n\n- Add ui.output_plot() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n- Define a function within the server() function that creates the figure. The name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI. If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion. If you use matplotlib.pyplot to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects: A matplotlib.figure.Figure instance A matplotlib.artist.Artist instance A list/tuple of Figure/Artist instances An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance A PIL.Image.Image instance\n- Decorate your plotting function with a @render.plot() decorator. If your plotting function is not the same as the id you used in the ui.output_plot(), you can add an additional @output(id=...) decorator. If you use the @output() decorator, make sure it is above the @render.plot() decorator.\n\nAdd ui.output_plot() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n\nDefine a function within the server() function that creates the figure.\n\n- The name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI.\n- If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n- If you use matplotlib.pyplot to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects: A matplotlib.figure.Figure instance A matplotlib.artist.Artist instance A list/tuple of Figure/Artist instances An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance A PIL.Image.Image instance\n\nThe name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI.\n\nIf your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n\nIf you use matplotlib.pyplot to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects:\n\n- A matplotlib.figure.Figure instance\n- A matplotlib.artist.Artist instance\n- A list/tuple of Figure/Artist instances\n- An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance\n- A PIL.Image.Image instance\n\nDecorate your plotting function with a @render.plot() decorator.\n\n- If your plotting function is not the same as the id you used in the ui.output_plot(), you can add an additional @output(id=...) decorator.\n- If you use the @output() decorator, make sure it is above the @render.plot() decorator.\n\nPlots as Inputs\n\nYou can use a plot as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, set one or more of the following arguments of ui.output_plot() to True:.\n\n- click - When click = True, the plot will allow the user to click in the plotting area, and will send the coordinates of the click to the server, where they can be accessed as a reactive variable named input.<id>_click(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.\n- dblclick - This is just like the click parameter, but for double-click events. The value can be accessed as input.<id>_dblclick().\n- hover - When hover = True, the plot will allow the user to hover over the plotting area, and will send the coordinates of the cursor to the server, where they can be accessed as a reactive variable named input.<id>_hover(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, set hover to hover_opts().\n- brush - When brush = True, the plot will allow the user to ‚Äúbrush‚Äù in the plotting area, and will send information about the brushed area to the server, where it can be accessed as a reactive variable named input.<id>_brush(), where <id> is the id of the plot. Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, set brush to brush_opts().\n\nclick - When click = True, the plot will allow the user to click in the plotting area, and will send the coordinates of the click to the server, where they can be accessed as a reactive variable named input.<id>_click(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.\n\ndblclick - This is just like the click parameter, but for double-click events. The value can be accessed as input.<id>_dblclick().\n\nhover - When hover = True, the plot will allow the user to hover over the plotting area, and will send the coordinates of the cursor to the server, where they can be accessed as a reactive variable named input.<id>_hover(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, set hover to hover_opts().\n\nbrush - When brush = True, the plot will allow the user to ‚Äúbrush‚Äù in the plotting area, and will send information about the brushed area to the server, where it can be accessed as a reactive variable named input.<id>_brush(), where <id> is the id of the plot. Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, set brush to brush_opts().\n\nMultiple output_image()/output_plot() calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.\n\nVariations\n\nPlot as input\n\nUse the click, dblclick, hover, and brush arguments of ui.output_plot() to collect information about the user‚Äôs mouse interactions as a reactive variable. The app below displays the values returned, but you can also call the values from within your computations to filter tables, perform calculations, and so on.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"n\", \"Number of bins\", 0, 100, 20)\n\n@render.plot(alt=\"A histogram\")  \ndef plot():  \n    df = load_penguins()\n    mass = df[\"body_mass_g\"]\n\n    fig, ax = plt.subplots()\n    ax.hist(mass, input.n(), density=True)\n    ax.set_title(\"Palmer Penguin Masses\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Density\")\n\n    return fig  ",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"n\", \"Number of bins\", 0, 100, 20)\n\n@render.plot(alt=\"A histogram\")  \ndef plot():  \n    df = load_penguins()\n    mass = df[\"body_mass_g\"]\n\n    fig, ax = plt.subplots()\n    ax.hist(mass, input.n(), density=True)\n    ax.set_title(\"Palmer Penguin Masses\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Density\")\n\n    return fig  ",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 720\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 720\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_code, output_plot\n\noutput_plot(\n    \"plot\",\n    click=True,  \n    dblclick=True,  \n    hover=True,  \n    brush=True,  \n)\n\n\"Click:\"\noutput_code(\"clk\", placeholder=True)\n\"Double Click:\"\noutput_code(\"dblclk\", placeholder=True)\n\"Hover:\"\noutput_code(\"hvr\", placeholder=True)\n\"Brush\"\noutput_code(\"brsh\", placeholder=True)\n\nwith ui.hold():\n    # Note that this Express app uses `ui.hold()` so that we can\n    # manually add the `output_plot()` and `output_code()` to the page.\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.code\n    def clk():\n        return input.plot_click()\n\n    @render.code\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.code\n    def hvr():\n        return input.plot_hover()\n\n    @render.code\n    def brsh():\n        return input.plot_brush()",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_code, output_plot\n\noutput_plot(\n    \"plot\",\n    click=True,  \n    dblclick=True,  \n    hover=True,  \n    brush=True,  \n)\n\n\"Click:\"\noutput_code(\"clk\", placeholder=True)\n\"Double Click:\"\noutput_code(\"dblclk\", placeholder=True)\n\"Hover:\"\noutput_code(\"hvr\", placeholder=True)\n\"Brush\"\noutput_code(\"brsh\", placeholder=True)\n\nwith ui.hold():\n    # Note that this Express app uses `ui.hold()` so that we can\n    # manually add the `output_plot()` and `output_code()` to the page.\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.code\n    def clk():\n        return input.plot_click()\n\n    @render.code\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.code\n    def hvr():\n        return input.plot_hover()\n\n    @render.code\n    def brsh():\n        return input.plot_brush()",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)"
    ]
  },
  {
    "id": "components_outputs_plot-seaborn",
    "url": "components/outputs/plot-seaborn/",
    "title": "Plot (Seaborn) ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Plot (Seaborn)\n\nPlot (Seaborn)\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_plot ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)\n- @render.plot render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)\n\nui.output_plot ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)\n\n@render.plot render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)\n\nDetails\n\nSeaborn is a statistical plotting library that builds on top of Matplotlib.\n\nFollow these steps to display a Seaborn figure in your app:\n\n- Add ui.output_plot() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n- Define a function within the server() function that creates the figure. The name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI. If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion. Your function should return one of the following objects: A matplotlib.figure.Figure instance A matplotlib.artist.Artist instance A list/tuple of Figure/Artist instances An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance A PIL.Image.Image instance\n- Decorate your plotting function with a @render.plot() decorator. If your plotting function is not the same as the id you used in the ui.output_plot(), you can add an additional @output(id=...) decorator. If you use the @output() decorator, make sure it is above the @render.plot() decorator.\n\nAdd ui.output_plot() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n\nDefine a function within the server() function that creates the figure.\n\n- The name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI.\n- If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n- Your function should return one of the following objects:\n\nThe name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI.\n\nIf your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n\nYour function should return one of the following objects:\n\n- A matplotlib.figure.Figure instance\n- A matplotlib.artist.Artist instance\n- A list/tuple of Figure/Artist instances\n- An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance\n- A PIL.Image.Image instance\n\nDecorate your plotting function with a @render.plot() decorator.\n\n- If your plotting function is not the same as the id you used in the ui.output_plot(), you can add an additional @output(id=...) decorator.\n- If you use the @output() decorator, make sure it is above the @render.plot() decorator.\n\nYou can use a plot as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, follow the instructions provided for plots as inputs.\n\nVariations\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n    def plot():  \n        ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n        ax.set_title(\"Palmer Penguins\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Count\")\n        return ax  \n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n    def plot():  \n        ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n        ax.set_title(\"Palmer Penguins\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Count\")\n        return ax  \n\napp = App(app_ui, server, debug=True)",
      "import seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.input_slider(\"n\", \"Number of bins\", 1, 100, 20)\n\n@render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \ndef plot():  \n    ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n    ax.set_title(\"Palmer Penguins\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Count\")\n    return ax  ",
      "import seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.input_slider(\"n\", \"Number of bins\", 1, 100, 20)\n\n@render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \ndef plot():  \n    ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n    ax.set_title(\"Palmer Penguins\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Count\")\n    return ax  ",
      "import seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n    def plot():  \n        ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n        ax.set_title(\"Palmer Penguins\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Count\")\n        return ax  \n\napp = App(app_ui, server, debug=True)",
      "import seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n    def plot():  \n        ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n        ax.set_title(\"Palmer Penguins\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Count\")\n        return ax  \n\napp = App(app_ui, server, debug=True)"
    ]
  },
  {
    "id": "components_outputs_plot-plotly_index_html",
    "url": "components/outputs/plot-plotly/index.html",
    "title": "Plot (Plotly) ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Plot (Plotly)\n\nPlot (Plotly)\n\n- Core\n- Express\n\nRelevant Functions\n\n- shinywidgets.output_widget shinywidgets.output_widget(id, width, height)\n- @shinywidgets.render_widget() shinywidgets.render_widget(fn)\n\nshinywidgets.output_widget shinywidgets.output_widget(id, width, height)\n\n@shinywidgets.render_widget() shinywidgets.render_widget(fn)\n\nDetails\n\nPlotly is an interactive graphics plotting library.\n\nTo make an interactive plot with Plotly in Shiny for Python, we will need to use the shinywidgets library to connect Shiny with ipywidgets.\n\nTo make a Plotly figure, we need to do the following steps:\n\n- Import the output_widget() and render_widget() functions from the shinywidgets library, from shinywidgets import output_widget, render_widget\n- Call output_widget() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n- Define a function within the server() function that creates the figure. The name of the function should be the same value you passed into the id parameter in your output_widget() function call in the UI. If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n- Decorate your plotting function with a @render_widget() decorator. If your plotting function is not the same as the id you used in the ui.output_widget(), you can add an additional @output(id=...) decorator. If you use the @output() decorator, make sure it is above the @render_widget() decorator.\n\nImport the output_widget() and render_widget() functions from the shinywidgets library, from shinywidgets import output_widget, render_widget\n\nCall output_widget() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n\nDefine a function within the server() function that creates the figure.\n\n- The name of the function should be the same value you passed into the id parameter in your output_widget() function call in the UI.\n- If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n\nThe name of the function should be the same value you passed into the id parameter in your output_widget() function call in the UI.\n\nIf your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n\nDecorate your plotting function with a @render_widget() decorator.\n\n- If your plotting function is not the same as the id you used in the ui.output_widget(), you can add an additional @output(id=...) decorator.\n- If you use the @output() decorator, make sure it is above the @render_widget() decorator.\n\nVisit shiny.posit.co/py/docs/ipywidgets.html to learn more about using ipywidgets with Shiny.\n\nPlots as Inputs\n\nYou can use a Plotly figure as an input widget, collecting the locations of user clicks, hovers, and selections.\n\n- Convert your Plotly figure to a FigureWidget using plotly.graph_objects.FigureWidget(), which extends the functionality of a standard Plotly figure and enables event handling.\n- Use the .data attribute of the FigureWidget to access its traces. The data attribute is a list that contains all the traces in the figure. Individual traces are accessible as .data[0], .data[1], etc., depending on how many traces are present in the figure.\n- Use event handlers to listen for user interactions with the plot. These handlers include methods like .on_click(), .on_hover(), and .on_selection(), which are available for individual traces within the figure. You attach these handlers to a specific trace (e.g., .data[0].on_click()) to capture interactions with the data points in that trace.\n- When you use an event handler like .on_click(), you need to pass it a callback function that defines what should happen when the event occurs. When defining the callback function, it should receive the parameters trace, points, and state, which provide information about the data points interacted with. In our example app below, our callback function updates a reactive value to contain the information about the points clicked, hovered over, or selected.\n\nConvert your Plotly figure to a FigureWidget using plotly.graph_objects.FigureWidget(), which extends the functionality of a standard Plotly figure and enables event handling.\n\nUse the .data attribute of the FigureWidget to access its traces. The data attribute is a list that contains all the traces in the figure. Individual traces are accessible as .data[0], .data[1], etc., depending on how many traces are present in the figure.\n\nUse event handlers to listen for user interactions with the plot. These handlers include methods like .on_click(), .on_hover(), and .on_selection(), which are available for individual traces within the figure. You attach these handlers to a specific trace (e.g., .data[0].on_click()) to capture interactions with the data points in that trace.\n\nWhen you use an event handler like .on_click(), you need to pass it a callback function that defines what should happen when the event occurs. When defining the callback function, it should receive the parameters trace, points, and state, which provide information about the data points interacted with. In our example app below, our callback function updates a reactive value to contain the information about the points clicked, hovered over, or selected.\n\nVariations\n\nPlot as input\n\nFirst, convert your Plotly figure to a FigureWidget using plotly.graph_objects.FigureWidget(). Then, you can use .on_click(), .on_hover(), .on_selection(), and other methods to control what happens when the user clicks, hover, or selects points. Capture the click, hover, and selection information as reactive variables. The app below displays the values returned, but you can also call the values from within your computations to filter tables, perform calculations, and so on.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    output_widget(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def plot():  \n        scatterplot = px.histogram(\n            data_frame=penguins,\n            x=\"body_mass_g\",\n            nbins=input.n(),\n        ).update_layout(\n            title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n            yaxis_title=\"Count\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n\n        return scatterplot  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    output_widget(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def plot():  \n        scatterplot = px.histogram(\n            data_frame=penguins,\n            x=\"body_mass_g\",\n            nbins=input.n(),\n        ).update_layout(\n            title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n            yaxis_title=\"Count\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n\n        return scatterplot  \n\napp = App(app_ui, server)",
      "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    output_widget(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def plot():  \n        scatterplot = px.histogram(\n            data_frame=penguins,\n            x=\"body_mass_g\",\n            nbins=input.n(),\n        ).update_layout(\n            title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n            yaxis_title=\"Count\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n\n        return scatterplot  \n\napp = App(app_ui, server)",
      "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    output_widget(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def plot():  \n        scatterplot = px.histogram(\n            data_frame=penguins,\n            x=\"body_mass_g\",\n            nbins=input.n(),\n        ).update_layout(\n            title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n            yaxis_title=\"Count\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n\n        return scatterplot  \n\napp = App(app_ui, server)",
      "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui\nfrom shinywidgets import render_widget  \n\npenguins = load_penguins()\n\nui.input_slider(\"n\", \"Number of bins\", 1, 100, 20)\n\n@render_widget  \ndef plot():  \n    scatterplot = px.histogram(\n        data_frame=penguins,\n        x=\"body_mass_g\",\n        nbins=input.n(),\n    ).update_layout(\n        title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n        yaxis_title=\"Count\",\n        xaxis_title=\"Body Mass (g)\",\n    )\n\n    return scatterplot  ",
      "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui\nfrom shinywidgets import render_widget  \n\npenguins = load_penguins()\n\nui.input_slider(\"n\", \"Number of bins\", 1, 100, 20)\n\n@render_widget  \ndef plot():  \n    scatterplot = px.histogram(\n        data_frame=penguins,\n        x=\"body_mass_g\",\n        nbins=input.n(),\n    ).update_layout(\n        title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n        yaxis_title=\"Count\",\n        xaxis_title=\"Body Mass (g)\",\n    )\n\n    return scatterplot  ",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 720\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.callbacks import Points\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    output_widget(\"plot\"),  \n    \"Click info\",\n    ui.output_text_verbatim(\"click_info\", placeholder=True),\n    \"Hover info\",\n    ui.output_text_verbatim(\"hover_info\", placeholder=True),   \n    \"Selection info (use box or lasso select)\",\n    ui.output_text_verbatim(\"selection_info\", placeholder=True)\n)\n\ndef server(input, output, session):\n\n    click_reactive = reactive.value() \n    hover_reactive = reactive.value() \n    selection_reactive = reactive.value() \n    \n    @render_widget  \n    def plot():  \n        fig = px.scatter(\n            data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n        ).update_layout(\n            yaxis_title=\"Bill Length (mm)\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n        w = go.FigureWidget(fig.data, fig.layout) \n        w.data[0].on_click(on_point_click) \n        w.data[0].on_hover(on_point_hover) \n        w.data[0].on_selection(on_point_selection) \n        return w \n\n    \n    def on_point_click(trace, points, state): \n        click_reactive.set(points) \n\n    def on_point_hover(trace, points, state): \n        hover_reactive.set(points) \n\n    def on_point_selection(trace, points, state): \n        selection_reactive.set(points) \n\n    @render.text\n    def click_info():\n        return click_reactive.get()\n\n    @render.text\n    def hover_info():\n        return hover_reactive.get()\n\n    @render.text\n    def selection_info():\n        return selection_reactive.get()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 720\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.callbacks import Points\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    output_widget(\"plot\"),  \n    \"Click info\",\n    ui.output_text_verbatim(\"click_info\", placeholder=True),\n    \"Hover info\",\n    ui.output_text_verbatim(\"hover_info\", placeholder=True),   \n    \"Selection info (use box or lasso select)\",\n    ui.output_text_verbatim(\"selection_info\", placeholder=True)\n)\n\ndef server(input, output, session):\n\n    click_reactive = reactive.value() \n    hover_reactive = reactive.value() \n    selection_reactive = reactive.value() \n    \n    @render_widget  \n    def plot():  \n        fig = px.scatter(\n            data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n        ).update_layout(\n            yaxis_title=\"Bill Length (mm)\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n        w = go.FigureWidget(fig.data, fig.layout) \n        w.data[0].on_click(on_point_click) \n        w.data[0].on_hover(on_point_hover) \n        w.data[0].on_selection(on_point_selection) \n        return w \n\n    \n    def on_point_click(trace, points, state): \n        click_reactive.set(points) \n\n    def on_point_hover(trace, points, state): \n        hover_reactive.set(points) \n\n    def on_point_selection(trace, points, state): \n        selection_reactive.set(points) \n\n    @render.text\n    def click_info():\n        return click_reactive.get()\n\n    @render.text\n    def hover_info():\n        return hover_reactive.get()\n\n    @render.text\n    def selection_info():\n        return selection_reactive.get()\n\napp = App(app_ui, server)",
      "import plotly.express as px\nimport plotly.graph_objects as go\nfrom palmerpenguins import load_penguins\nfrom plotly.callbacks import Points\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_code, output_plot\nfrom shinywidgets import render_plotly\n\npenguins = load_penguins()\n\n@render_plotly  \ndef plot():  \n    fig = px.scatter(\n        data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n    ).update_layout(\n        yaxis_title=\"Bill Length (mm)\",\n        xaxis_title=\"Body Mass (g)\",\n    )\n    # Need to create a FigureWidget() for on_click to work\n    w = go.FigureWidget(fig.data, fig.layout) \n    w.data[0].on_click(on_point_click) \n    w.data[0].on_hover(on_point_hover) \n    w.data[0].on_selection(on_point_selection) \n    return w \n\n# Capture the clicked point in a reactive value\nclick_reactive = reactive.value() \nhover_reactive = reactive.value() \nselection_reactive = reactive.value() \n\ndef on_point_click(trace, points, state): \n    click_reactive.set(points) \n\ndef on_point_hover(trace, points, state): \n    hover_reactive.set(points) \n\ndef on_point_selection(trace, points, state): \n    selection_reactive.set(points) \n\n\"Click info\"\n@render.code\ndef click_info():\n    return str(click_reactive.get())\n\n\"Hover info\"\n@render.code\ndef hover_info():\n    return str(hover_reactive.get())\n\n\"Selection info (use box or lasso select)\"\n@render.code\ndef selection_info():\n    return str(selection_reactive.get())",
      "import plotly.express as px\nimport plotly.graph_objects as go\nfrom palmerpenguins import load_penguins\nfrom plotly.callbacks import Points\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_code, output_plot\nfrom shinywidgets import render_plotly\n\npenguins = load_penguins()\n\n@render_plotly  \ndef plot():  \n    fig = px.scatter(\n        data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n    ).update_layout(\n        yaxis_title=\"Bill Length (mm)\",\n        xaxis_title=\"Body Mass (g)\",\n    )\n    # Need to create a FigureWidget() for on_click to work\n    w = go.FigureWidget(fig.data, fig.layout) \n    w.data[0].on_click(on_point_click) \n    w.data[0].on_hover(on_point_hover) \n    w.data[0].on_selection(on_point_selection) \n    return w \n\n# Capture the clicked point in a reactive value\nclick_reactive = reactive.value() \nhover_reactive = reactive.value() \nselection_reactive = reactive.value() \n\ndef on_point_click(trace, points, state): \n    click_reactive.set(points) \n\ndef on_point_hover(trace, points, state): \n    hover_reactive.set(points) \n\ndef on_point_selection(trace, points, state): \n    selection_reactive.set(points) \n\n\"Click info\"\n@render.code\ndef click_info():\n    return str(click_reactive.get())\n\n\"Hover info\"\n@render.code\ndef hover_info():\n    return str(hover_reactive.get())\n\n\"Selection info (use box or lasso select)\"\n@render.code\ndef selection_info():\n    return str(selection_reactive.get())",
      "import plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.callbacks import Points\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    output_widget(\"plot\"),  \n    \"Click info\",\n    ui.output_text_verbatim(\"click_info\", placeholder=True),\n    \"Hover info\",\n    ui.output_text_verbatim(\"hover_info\", placeholder=True),   \n    \"Selection info (use box or lasso select)\",\n    ui.output_text_verbatim(\"selection_info\", placeholder=True)\n)\n\ndef server(input, output, session):\n\n    click_reactive = reactive.value() \n    hover_reactive = reactive.value() \n    selection_reactive = reactive.value() \n    \n    @render_widget  \n    def plot():  \n        fig = px.scatter(\n            data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n        ).update_layout(\n            yaxis_title=\"Bill Length (mm)\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n        w = go.FigureWidget(fig.data, fig.layout) \n        w.data[0].on_click(on_point_click) \n        w.data[0].on_hover(on_point_hover) \n        w.data[0].on_selection(on_point_selection) \n        return w \n\n    \n    def on_point_click(trace, points, state): \n        click_reactive.set(points) \n\n    def on_point_hover(trace, points, state): \n        hover_reactive.set(points) \n\n    def on_point_selection(trace, points, state): \n        selection_reactive.set(points) \n\n    @render.text\n    def click_info():\n        return click_reactive.get()\n\n    @render.text\n    def hover_info():\n        return hover_reactive.get()\n\n    @render.text\n    def selection_info():\n        return selection_reactive.get()\n\napp = App(app_ui, server)",
      "import plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.callbacks import Points\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget  \n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    output_widget(\"plot\"),  \n    \"Click info\",\n    ui.output_text_verbatim(\"click_info\", placeholder=True),\n    \"Hover info\",\n    ui.output_text_verbatim(\"hover_info\", placeholder=True),   \n    \"Selection info (use box or lasso select)\",\n    ui.output_text_verbatim(\"selection_info\", placeholder=True)\n)\n\ndef server(input, output, session):\n\n    click_reactive = reactive.value() \n    hover_reactive = reactive.value() \n    selection_reactive = reactive.value() \n    \n    @render_widget  \n    def plot():  \n        fig = px.scatter(\n            data_frame=penguins, x=\"body_mass_g\", y=\"bill_length_mm\"\n        ).update_layout(\n            yaxis_title=\"Bill Length (mm)\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n        w = go.FigureWidget(fig.data, fig.layout) \n        w.data[0].on_click(on_point_click) \n        w.data[0].on_hover(on_point_hover) \n        w.data[0].on_selection(on_point_selection) \n        return w \n\n    \n    def on_point_click(trace, points, state): \n        click_reactive.set(points) \n\n    def on_point_hover(trace, points, state): \n        hover_reactive.set(points) \n\n    def on_point_selection(trace, points, state): \n        selection_reactive.set(points) \n\n    @render.text\n    def click_info():\n        return click_reactive.get()\n\n    @render.text\n    def hover_info():\n        return hover_reactive.get()\n\n    @render.text\n    def selection_info():\n        return selection_reactive.get()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "gallery",
    "url": "gallery/",
    "title": "Gallery ‚Äì Shiny for Python",
    "description": "",
    "content": "Shiny Gallery\n\nSuperzip explorer\n\n- View app\n- View source\n\nRestaurant tips dashboard\n\n- View app\n- View source\n\nStock prices\n\n- View app\n- View source\n\nRegularization strength\n\n- View app\n- View source\n\nNBA player stats\n\n- View app\n- View source\n\nReal-time model scoring\n\n- View app\n- View source\n\nRespiratory Disease data\n\n- View app\n- View source\n\nShiny Wordle\n\n- View app\n- View source\n\nOrbit simulation\n\n- View app\n- View source\n\nAirmass calculator\n\n- View app\n- View source\n\nCPU usage monitor\n\n- View app\n- View source\n\nSimulate data for a t-test\n\n- View app\n- View source\n\nAWS Community Builders Dashboard\n\n- View app\n- View source\n\nIdentify Outliers\n\n- View app\n- View source\n\n",
    "code_examples": []
  },
  {
    "id": "templates_dashboard-tips",
    "url": "templates/dashboard-tips/",
    "title": "Shiny for Python ‚Äì Restaurant tips dashboard",
    "description": "Use the dashboard-tips template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nRestaurant tips dashboard\n\n- Express\n- Core\n\nAn intermediate dashboard with input filters, value boxes, a plot, and table. This particular dashboard visualizes the tips dataset. In terms of the implementation, this dashboard is similar to the basic dashboard template, but adds output-specific input controls to card components. Those controls are made available via a popover by clicking on the icon in the top-right corner of the card. Another notable difference is the use of plotly for interactive plots.\n\nComponents:\n\n- Slider input\n- Checkbox group input\n- Action button\n- Popover\n- Value box\n- Plotly output\n- Data grid output\n\nLayouts:\n\n- Sidebar\n- Grid layout\n- Cards\n\nPackages:\n\n- faicons\n- pandas\n- plotly\n- shinywidgets\n\n",
    "code_examples": [
      "shiny create --template dashboard-tips --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template dashboard-tips --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template dashboard-tips --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template dashboard-tips --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_stock-app",
    "url": "templates/stock-app/",
    "title": "Shiny for Python ‚Äì Stock price tracker",
    "description": "Use the stock-app template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nStock price tracker\n\n- Express\n- Core\n\nA basic stock price tracker app. It allows the user to select a stock and a date range, and then displays the stock‚Äôs price and volume over time. The value boxes display the stock‚Äôs current price and change in price from the previous day. Note that the icon for the stock price change is a green arrow pointing up if the price has increased, and a red arrow pointing down if the price has decreased.\n\nComponents:\n\n- Select input\n- Date range input\n- Value box\n- Plotly\n- Data grid output\n\nLayouts:\n\n- Sidebar\n- Grid layout\n- Cards\n\nPackages:\n\n- cufflinks\n- faicons\n- pandas\n- plotly\n- shinywidgets\n- yfinance\n\n",
    "code_examples": [
      "shiny create --template stock-app --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template stock-app --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template stock-app --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template stock-app --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "components_inputs_action-button_index_html",
    "url": "components/inputs/action-button/index.html",
    "title": "Action Button ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Action Button\n\nAction Button\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_action_button ui.input_action_button(id, label, *, icon=None, width=None, **kwargs)\n- reactive.event reactive.event(*args, ignore_none=True, ignore_init=False)\n\nui.input_action_button ui.input_action_button(id, label, *, icon=None, width=None, **kwargs)\n\nreactive.event reactive.event(*args, ignore_none=True, ignore_init=False)\n\nDetails\n\nAn action button appears as a button and has a value that increments each time the user presses the button.\n\nFollow these steps to add an action button to your app:\n\n- Add ui.input_action_button() to the UI of your app to create an action button. Where you call this function will determine where the button will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_action_button() to define the button‚Äôs identifier and label.\n\nAdd ui.input_action_button() to the UI of your app to create an action button. Where you call this function will determine where the button will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_action_button() to define the button‚Äôs identifier and label.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of an action button:\n\n- Use input.<action_button_id()> (e.g., input.action_button()) to access the value of the action button. The server value of an action button is an integer representing the number of clicks.\n\nSee also: Action Link\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(6, ui.input_action_button(\"action_button\", \"Increase Number\")),\n        ui.column(6, ui.output_text(\"counter\").add_class(\"display-5 mb-0\")),\n        {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n    ).add_class(\"text-center\")\n)\n\ndef server(input, output, session):\n    count = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.action_button)\n    def _():\n        count.set(count() + 1)\n\n    @render.text\n    def counter():\n        return f\"{count()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(6, ui.input_action_button(\"action_button\", \"Increase Number\")),\n        ui.column(6, ui.output_text(\"counter\").add_class(\"display-5 mb-0\")),\n        {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n    ).add_class(\"text-center\")\n)\n\ndef server(input, output, session):\n    count = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.action_button)\n    def _():\n        count.set(count() + 1)\n\n    @render.text\n    def counter():\n        return f\"{count()}\"\n\napp = App(app_ui, server)",
      "from shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.input_action_button(\"action_button\", \"Action\")  \n\n@render.text()\n@reactive.event(input.action_button)\ndef counter():\n    return f\"{input.action_button()}\"",
      "from shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.input_action_button(\"action_button\", \"Action\")  \n\n@render.text()\n@reactive.event(input.action_button)\ndef counter():\n    return f\"{input.action_button()}\"",
      "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"action_button\", \"Action\"),  \n    ui.output_text(\"counter\"),\n)\n\ndef server(input, output, session):\n    @render.text()\n    @reactive.event(input.action_button)\n    def counter():\n        return f\"{input.action_button()}\"\n\napp = App(app_ui, server)",
      "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"action_button\", \"Action\"),  \n    ui.output_text(\"counter\"),\n)\n\ndef server(input, output, session):\n    @render.text()\n    @reactive.event(input.action_button)\n    def counter():\n        return f\"{input.action_button()}\"\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_action-link_index_html",
    "url": "components/inputs/action-link/index.html",
    "title": "Action Link ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Action Link\n\nAction Link\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_action_link ui.input_action_link(id, label, *, icon=None, **kwargs)\n- reactive.event reactive.event(*args, ignore_none=True, ignore_init=False)\n\nui.input_action_link ui.input_action_link(id, label, *, icon=None, **kwargs)\n\nreactive.event reactive.event(*args, ignore_none=True, ignore_init=False)\n\nDetails\n\nAn action link appears as a link in your app and has a value that increments each time the user presses the link.\n\nFollow these steps to add an action link to your app:\n\n- Add ui.input_action_link() to the UI of your app to create an action link. Where you call this function will determine where the link appears within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_action_link() to define the action link‚Äôs identifier and label.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of an action link:\n\n- Use input.<action_link_id()> (e.g., input.action_link()) to access the value of the action link. The server value of an action link is an integer representing the number of clicks.\n\nSee also: Action Button\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(6, ui.input_action_link(\"action_link\", \"Increase Number\")),\n        ui.column(6, ui.output_text(\"counter\").add_class(\"display-5 mb-0\")),\n        {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n    ).add_class(\"text-center\")\n)\n\ndef server(input, output, session):\n    count = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.action_link)\n    def _():\n        count.set(count() + 1)\n\n    @render.text()\n    def counter():\n        return f\"{count()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(6, ui.input_action_link(\"action_link\", \"Increase Number\")),\n        ui.column(6, ui.output_text(\"counter\").add_class(\"display-5 mb-0\")),\n        {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n    ).add_class(\"text-center\")\n)\n\ndef server(input, output, session):\n    count = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.action_link)\n    def _():\n        count.set(count() + 1)\n\n    @render.text()\n    def counter():\n        return f\"{count()}\"\n\napp = App(app_ui, server)",
      "from shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_action_link(\"action_link\", \"Increase Number\")  \n\ncount = reactive.value(0)\n\n@reactive.effect\n@reactive.event(input.action_link)\ndef _():\n    count.set(count() + 1)\n\n@render.text()\ndef counter():\n    return f\"{count()}\"",
      "from shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_action_link(\"action_link\", \"Increase Number\")  \n\ncount = reactive.value(0)\n\n@reactive.effect\n@reactive.event(input.action_link)\ndef _():\n    count.set(count() + 1)\n\n@render.text()\ndef counter():\n    return f\"{count()}\"",
      "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_link(\"action_link\", \"Increase Number\"),  \n    ui.output_text(\"counter\"),\n)\n\ndef server(input, output, session):\n    count = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.action_link)  \n    def _():\n        count.set(count() + 1)\n\n    @render.text()\n    def counter():\n        return f\"{count()}\"\n\napp = App(app_ui, server)",
      "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_link(\"action_link\", \"Increase Number\"),  \n    ui.output_text(\"counter\"),\n)\n\ndef server(input, output, session):\n    count = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.action_link)  \n    def _():\n        count.set(count() + 1)\n\n    @render.text()\n    def counter():\n        return f\"{count()}\"\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_checkbox_index_html",
    "url": "components/inputs/checkbox/index.html",
    "title": "Checkbox ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Checkbox\n\nCheckbox\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_checkbox() ui.input_checkbox(id, label, value=False, *, width=None)\n\nui.input_checkbox() ui.input_checkbox(id, label, value=False, *, width=None)\n\nDetails\n\nA checkbox creates a single checkbox that can be used to specify logical values.\n\nFollow these steps to add a checkbox to your app:\n\n- Add ui.input_checkbox() to the UI of your app to create a checkbox. Where you call this function will determine where the checkbox will appear within the app‚Äôs layout.\n- Supply values to ui.input_checkbox()‚Äôs first two parameters (id and label) to specify the id and label of the checkbox. Optionally, set the value argument to either True or False to specify the initial value of the checkbox. By default, the checkbox has value False and is un-checked.\n\nAdd ui.input_checkbox() to the UI of your app to create a checkbox. Where you call this function will determine where the checkbox will appear within the app‚Äôs layout.\n\nSupply values to ui.input_checkbox()‚Äôs first two parameters (id and label) to specify the id and label of the checkbox. Optionally, set the value argument to either True or False to specify the initial value of the checkbox. By default, the checkbox has value False and is un-checked.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a checkbox:\n\n- Use input.<checkbox_id>() (e.g., input.checkbox()) to access the value of a checkbox. The server value of a checkbox is True if checked and False if not checked.\n\nSee also: Checkbox Group(Checkbox\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 150\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(\n            6,\n            ui.input_checkbox(\"checkbox\", \"Checkbox\", True).add_class(\n                \"mb-0 text-center\"\n            ),\n        ),\n        ui.column(6, ui.output_ui(\"value\").add_class(\"mb-0 text-center\")),\n        {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n    )\n)\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.checkbox()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 150\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(\n            6,\n            ui.input_checkbox(\"checkbox\", \"Checkbox\", True).add_class(\n                \"mb-0 text-center\"\n            ),\n        ),\n        ui.column(6, ui.output_ui(\"value\").add_class(\"mb-0 text-center\")),\n        {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n    )\n)\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.checkbox()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_checkbox(\"checkbox\", \"Checkbox\", False)  \n\n@render.ui\ndef value():\n    return input.checkbox()",
      "from shiny.express import input, render, ui\n\nui.input_checkbox(\"checkbox\", \"Checkbox\", False)  \n\n@render.ui\ndef value():\n    return input.checkbox()",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"checkbox\", \"Checkbox\", False),  \n    ui.output_ui(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.checkbox()\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"checkbox\", \"Checkbox\", False),  \n    ui.output_ui(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.checkbox()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_checkbox-group_index_html",
    "url": "components/inputs/checkbox-group/index.html",
    "title": "Checkbox Group ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Checkbox Group\n\nCheckbox Group\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_checkbox_group ui.input_checkbox_group(id, label, choices, *, selected=None, inline=False, width=None)\n\nui.input_checkbox_group ui.input_checkbox_group(id, label, choices, *, selected=None, inline=False, width=None)\n\nDetails\n\nA checkbox group creates a group of checkboxes that can be used to toggle multiple choices independently.\n\nFollow these steps to display a checkbox group in your app:\n\n- Add ui.input_checkbox_group() to the UI of your app to create a checkbox group. Where you call this function will determine where the checkbox group will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_checkbox_group() to define the identifier and label of the checkbox group.\n- Supply the choices parameter with either a list or dictionary of choices. If choices is a list, its elements become the select list values and labels. If choices is a dictionary, ui.input_checkbox_group() uses the dictionary keys as the checkbox values and the dictionary values as the checkbox labels.\n\nAdd ui.input_checkbox_group() to the UI of your app to create a checkbox group. Where you call this function will determine where the checkbox group will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_checkbox_group() to define the identifier and label of the checkbox group.\n\nSupply the choices parameter with either a list or dictionary of choices. If choices is a list, its elements become the select list values and labels. If choices is a dictionary, ui.input_checkbox_group() uses the dictionary keys as the checkbox values and the dictionary values as the checkbox labels.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a checkbox group:\n\n- Use input.<checkbox_group_id>() (e.g., input.checkbox_group()) to access the value of a checkbox group. The server value of a checkbox group is a tuple of string(s) with the selected value(s).\n\nSee also: Checkbox\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox_group(\n        \"checkbox_group\",\n        \"Checkbox group\",\n        {\n            \"a\": \"A\",\n            \"b\": \"B\",\n            \"c\": \"C\",\n        },\n    ),\n    ui.output_text(\"value\"),\n    {\"class\": \"vh-100 d-flex align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return \", \".join(input.checkbox_group())\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox_group(\n        \"checkbox_group\",\n        \"Checkbox group\",\n        {\n            \"a\": \"A\",\n            \"b\": \"B\",\n            \"c\": \"C\",\n        },\n    ),\n    ui.output_text(\"value\"),\n    {\"class\": \"vh-100 d-flex align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return \", \".join(input.checkbox_group())\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_checkbox_group(  \n    \"checkbox_group\",  \n    \"Checkbox group\",  \n    {  \n        \"a\": \"A\",  \n        \"b\": \"B\",  \n        \"c\": \"C\",  \n    },  \n)  \n\n@render.text\ndef value():\n    return \", \".join(input.checkbox_group())",
      "from shiny.express import input, render, ui\n\nui.input_checkbox_group(  \n    \"checkbox_group\",  \n    \"Checkbox group\",  \n    {  \n        \"a\": \"A\",  \n        \"b\": \"B\",  \n        \"c\": \"C\",  \n    },  \n)  \n\n@render.text\ndef value():\n    return \", \".join(input.checkbox_group())",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox_group(  \n        \"checkbox_group\",  \n        \"Checkbox group\",  \n        {  \n            \"a\": \"A\",  \n            \"b\": \"B\",  \n            \"c\": \"C\",  \n        },  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return \", \".join(input.checkbox_group())\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox_group(  \n        \"checkbox_group\",  \n        \"Checkbox group\",  \n        {  \n            \"a\": \"A\",  \n            \"b\": \"B\",  \n            \"c\": \"C\",  \n        },  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return \", \".join(input.checkbox_group())\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_dark-mode_index_html",
    "url": "components/inputs/dark-mode/index.html",
    "title": "Dark Mode Switch ‚Äì Shiny for Python",
    "description": "",
    "content": "Dark Mode Switch\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_dark_mode ui.input_dark_mode(id=None, mode=None, **kwargs)\n\nui.input_dark_mode ui.input_dark_mode(id=None, mode=None, **kwargs)\n\nDetails\n\nA dark mode switch input toggles the app between dark and light modes.\n\nTo add a dark mode switch to your app:\n\n- Add ui.input_dark_mode() to the UI of your app to create a dark mode switch. Where you call this function will determine where the dark mode switch will appear within the app‚Äôs layout.\n- Optionally, specify the id parameter of ui.input_dark_mode() to define the identifier of the switch. When id is specified, you can use it to access the current color mode.\n- By default, the user‚Äôs system settings for the preferred color scheme will be used for the initial mode of the app. To force the initial mode, set the mode parameter to \"light\" or \"dark\".\n\nAdd ui.input_dark_mode() to the UI of your app to create a dark mode switch. Where you call this function will determine where the dark mode switch will appear within the app‚Äôs layout.\n\nOptionally, specify the id parameter of ui.input_dark_mode() to define the identifier of the switch. When id is specified, you can use it to access the current color mode.\n\nBy default, the user‚Äôs system settings for the preferred color scheme will be used for the initial mode of the app. To force the initial mode, set the mode parameter to \"light\" or \"dark\".\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a dark mode switch:\n\n- Use input.<dark_mode_switch_id>() (e.g., input.mode()) to access the value of the dark mode switch. The server value of a dark mode switch is a string: either \"light\" or \"dark\".\n\nVariations\n\nDark mode switch in a navbar\n\nTo add a dark mode switch to a navbar, use ui.page_navbar() to create a page with a navbar, and ui.nav_spacer() to push the dark mode switch to the right. Place the ui.input_dark_mode() element within a ui.nav_control() element, to add the control to the navbar without creating a corresponding panel.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(ui.input_dark_mode()).add_class(\"h-100 w-100 align-content-center text-center\")\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(ui.input_dark_mode()).add_class(\"h-100 w-100 align-content-center text-center\")\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_dark_mode() ",
      "from shiny.express import input, render, ui\n\nui.input_dark_mode() ",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_dark_mode() \n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_dark_mode() \n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_spacer(), \n    ui.nav_control(ui.input_dark_mode()), \n    title=\"Dark mode switch in navbar\"\n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_spacer(), \n    ui.nav_control(ui.input_dark_mode()), \n    title=\"Dark mode switch in navbar\"\n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "from shiny.express import ui\n\nui.page_opts(title=\"Dark mode switch in navbar\", fillable=True, id=\"page\")\n\nui.nav_spacer()  \nwith ui.nav_control():  \n    ui.input_dark_mode()  ",
      "from shiny.express import ui\n\nui.page_opts(title=\"Dark mode switch in navbar\", fillable=True, id=\"page\")\n\nui.nav_spacer()  \nwith ui.nav_control():  \n    ui.input_dark_mode()  ",
      "from shiny import App, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_spacer(), \n    ui.nav_control(ui.input_dark_mode()), \n    title=\"Dark mode switch in navbar\"\n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_spacer(), \n    ui.nav_control(ui.input_dark_mode()), \n    title=\"Dark mode switch in navbar\"\n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_date-range-selector_index_html",
    "url": "components/inputs/date-range-selector/index.html",
    "title": "Date Range Selector ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Date Range Selector\n\nDate Range Selector\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_date_range ui.input_date_range(id, label, *, start=None, end=None, min=None, max=None, format='yyyy-mm-dd', startview='month', weekstart=0, language='en', separator=' to ', width=None, autoclose=True)\n\nui.input_date_range ui.input_date_range(id, label, *, start=None, end=None, min=None, max=None, format='yyyy-mm-dd', startview='month', weekstart=0, language='en', separator=' to ', width=None, autoclose=True)\n\nDetails\n\nA date range selector allows you to select a pair of dates from two calendars.\n\nTo add a date range selector to your app:\n\n- Add ui.input_date_range() to the UI of your app to create a date range selector. Where you call this function will determine where the date range selector will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_date_range() to define the identifier and label of the daterange selector. ui.input_date_range() also includes various optional parameters, including start and end, which set the initial start and end dates.\n\nAdd ui.input_date_range() to the UI of your app to create a date range selector. Where you call this function will determine where the date range selector will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_date_range() to define the identifier and label of the daterange selector. ui.input_date_range() also includes various optional parameters, including start and end, which set the initial start and end dates.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a daterange selector:\n\n- Use input.<date_range_id>() to access the value of a daterange selector (e.g., input.daterange()). The server value of a daterange selector is a tuple of date objects. You can access the individual tuple elements using square brackets and indices (e.g., input.daterange()[0]).\n\nSee also: Date Selector\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 380\n\n## file: app.py\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date_range(\"daterange\", \"\", start=\"2020-01-01\").add_class(\n        \"pt-5 mx-auto text-center\"\n    ),\n    ui.output_text(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return f\"{input.daterange()[0]} to {input.daterange()[1]}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 380\n\n## file: app.py\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date_range(\"daterange\", \"\", start=\"2020-01-01\").add_class(\n        \"pt-5 mx-auto text-center\"\n    ),\n    ui.output_text(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return f\"{input.daterange()[0]} to {input.daterange()[1]}\"\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_date_range(\"daterange\", \"Date range\", start=\"2020-01-01\")  \n\n@render.text\ndef value():\n    return f\"{input.daterange()[0]} to {input.daterange()[1]}\"",
      "from shiny.express import input, render, ui\n\nui.input_date_range(\"daterange\", \"Date range\", start=\"2020-01-01\")  \n\n@render.text\ndef value():\n    return f\"{input.daterange()[0]} to {input.daterange()[1]}\"",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date_range(\"daterange\", \"Date range\", start=\"2020-01-01\"),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.daterange()[0]} to {input.daterange()[1]}\"\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date_range(\"daterange\", \"Date range\", start=\"2020-01-01\"),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.daterange()[0]} to {input.daterange()[1]}\"\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_date-selector_index_html",
    "url": "components/inputs/date-selector/index.html",
    "title": "Date Selector ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Date Selector\n\nDate Selector\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_date ui.input_date(id, label, *, value=None, min=None, max=None, format='yyyy-mm-dd', startview='month', weekstart=0, language='en', width=None, autoclose=True, datesdisabled=None, daysofweekdisabled=None)\n\nui.input_date ui.input_date(id, label, *, value=None, min=None, max=None, format='yyyy-mm-dd', startview='month', weekstart=0, language='en', width=None, autoclose=True, datesdisabled=None, daysofweekdisabled=None)\n\nDetails\n\nA date selector allows you to select a date from a calendar.\n\nTo add a date selector to your app:\n\n- Add ui.input_date() to the UI of your app to create a date selector. Where you call this function will determine where the date selector will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_date() to define the identifier and label of the date selector. ui.input_date() also includes various optional parameters, including min and max, which set the minimum and maximum allowed dates.\n\nAdd ui.input_date() to the UI of your app to create a date selector. Where you call this function will determine where the date selector will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_date() to define the identifier and label of the date selector. ui.input_date() also includes various optional parameters, including min and max, which set the minimum and maximum allowed dates.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a date selector:\n\n- Use input.<date_id>() to access the value of a daterange selector (e.g., input.date()). The server value of a date selector is a date object.\n\nSee also: Date Range Selector\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 380\n\n## file: app.py\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date(\"date\", \"\").add_class(\"pt-5 mx-auto text-center\"),\n    ui.output_text(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return input.date()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 380\n\n## file: app.py\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date(\"date\", \"\").add_class(\"pt-5 mx-auto text-center\"),\n    ui.output_text(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return input.date()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_date(\"date\", \"Date\")  \n\n@render.text\ndef value():\n    return input.date()",
      "from shiny.express import input, render, ui\n\nui.input_date(\"date\", \"Date\")  \n\n@render.text\ndef value():\n    return input.date()",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date(\"date\", \"Date\"),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.date()\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date(\"date\", \"Date\"),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.date()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_file_index_html",
    "url": "components/inputs/file/index.html",
    "title": "File Input ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- File Input\n\nFile Input\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_file ui.input_file(id, label, *, multiple=False, accept=None, width=None, button_label='Browse...', placeholder='No file selected', capture=None)\n- express.ui.input_file express.ui.input_file(id, label, *, multiple=False, accept=None, width=None, button_label='Browse...', placeholder='No file selected', capture=None)\n\nui.input_file ui.input_file(id, label, *, multiple=False, accept=None, width=None, button_label='Browse...', placeholder='No file selected', capture=None)\n\nexpress.ui.input_file express.ui.input_file(id, label, *, multiple=False, accept=None, width=None, button_label='Browse...', placeholder='No file selected', capture=None)\n\nDetails\n\nA file input allows you to upload one or more files.\n\nTo add a file input to your app:\n\n- Add ui.input_file() to the UI of your app to create a file upload component. Where you call this function will determine where the date selector will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_date() to define the identifier and label of the file upload. ui.input_file() also includes various optional parameters to control what kinds of files can be uploaded.\n\nAdd ui.input_file() to the UI of your app to create a file upload component. Where you call this function will determine where the date selector will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_date() to define the identifier and label of the file upload. ui.input_file() also includes various optional parameters to control what kinds of files can be uploaded.\n\nThe value of an input component is accessible as a reactive value within the server() function. The file input returns a list containing a dictionary of 4 keys:\n\n- Use input.<file_id>() to access the value of the file input (e.g., input.file()). The server value of of the file input is a list containing a dictionary.\n\nHere is an example of what the file input returns:\n\nYou will typically want to load the uploaded in your application, to access the path of the uploaded file, you will first need to get the dictionary from the list, and get the value from the 'datapath' key. For example, input.<file_id>()[0]['datapath'].\n\nRead a CSV file into pandas\n\nYou can limit the data type to only CSV files that can be read into pandas.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"f\", \"Pick a file, any file\"),\n    \"Input file data:\",\n    ui.output_text(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return input.f()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"f\", \"Pick a file, any file\"),\n    \"Input file data:\",\n    ui.output_text(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return input.f()\n\napp = App(app_ui, server)",
      "from shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_file(\"f\", \"Pick a file, any file\")  \n\"Input file data:\"\n\n@render.text\ndef txt():\n    return input.f()  ",
      "from shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_file(\"f\", \"Pick a file, any file\")  \n\"Input file data:\"\n\n@render.text\ndef txt():\n    return input.f()  ",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"f\", \"Pick a file, any file\"),  \n    \"Input file data:\",\n    ui.output_text(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return input.f()  \n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"f\", \"Pick a file, any file\"),  \n    \"Input file data:\",\n    ui.output_text(\"txt\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def txt():\n        return input.f()  \n\napp = App(app_ui, server)",
      "[{'name': 'my_file.csv', 'size': 525600, 'type': 'text/csv', 'datapath': '/tmp/fileupload-8khw0q6n/tmpeobuc_pj/0.csv'}]",
      "[{'name': 'my_file.csv', 'size': 525600, 'type': 'text/csv', 'datapath': '/tmp/fileupload-8khw0q6n/tmpeobuc_pj/0.csv'}]",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nimport pandas as pd\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_file(\n        \"input_file\", \"Choose CSV File\", accept=[\".csv\"], multiple=False\n    ),\n    ui.input_checkbox_group(\n        \"stats\",\n        \"Summary Stats\",\n        choices=[\"Row Count\", \"Column Count\", \"Column Names\"],\n        selected=[\"Row Count\", \"Column Count\", \"Column Names\"],\n    ),\n    ui.output_data_frame(\"summary\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def parsed_file():\n        file = input.input_file()\n        if file is None:\n            return pd.DataFrame()\n        return pd.read_csv(file[0][\"datapath\"])\n\n    @render.data_frame\n    def summary():\n        df = parsed_file()\n\n        if df.empty:\n            return pd.DataFrame()\n\n        # Get the row count, column count, and column names of the DataFrame\n        row_count = df.shape[0]\n        column_count = df.shape[1]\n        names = df.columns.tolist()\n        column_names = \", \".join(str(name) for name in names)\n\n        # Create a new DataFrame to display the information\n        info_df = pd.DataFrame({\n            \"Row Count\": [row_count],\n            \"Column Count\": [column_count],\n            \"Column Names\": [column_names],\n        })\n\n        # input.stats() is a list of strings; subset the columns based on the selected\n        # checkboxes\n        return info_df.loc[:, input.stats()]\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nimport pandas as pd\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_file(\n        \"input_file\", \"Choose CSV File\", accept=[\".csv\"], multiple=False\n    ),\n    ui.input_checkbox_group(\n        \"stats\",\n        \"Summary Stats\",\n        choices=[\"Row Count\", \"Column Count\", \"Column Names\"],\n        selected=[\"Row Count\", \"Column Count\", \"Column Names\"],\n    ),\n    ui.output_data_frame(\"summary\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def parsed_file():\n        file = input.input_file()\n        if file is None:\n            return pd.DataFrame()\n        return pd.read_csv(file[0][\"datapath\"])\n\n    @render.data_frame\n    def summary():\n        df = parsed_file()\n\n        if df.empty:\n            return pd.DataFrame()\n\n        # Get the row count, column count, and column names of the DataFrame\n        row_count = df.shape[0]\n        column_count = df.shape[1]\n        names = df.columns.tolist()\n        column_names = \", \".join(str(name) for name in names)\n\n        # Create a new DataFrame to display the information\n        info_df = pd.DataFrame({\n            \"Row Count\": [row_count],\n            \"Column Count\": [column_count],\n            \"Column Names\": [column_names],\n        })\n\n        # input.stats() is a list of strings; subset the columns based on the selected\n        # checkboxes\n        return info_df.loc[:, input.stats()]\n\napp = App(app_ui, server)",
      "import pandas as pd\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.types import FileInfo\n\nui.input_file(\"input_file\", \"Choose CSV File\", accept=[\".csv\"], multiple=False)\nui.input_checkbox_group(\n    \"stats\",\n    \"Summary Stats\",\n    choices=[\"Row Count\", \"Column Count\", \"Column Names\"],\n    selected=[\"Row Count\", \"Column Count\", \"Column Names\"],\n)\n\n@reactive.calc\ndef parsed_file():\n    file = input.input_file()\n    if file is None:\n        return pd.DataFrame()\n    return pd.read_csv(file[0][\"datapath\"])\n\n@render.data_frame\ndef summary():\n    df = parsed_file()\n\n    if df.empty:\n        return pd.DataFrame()\n\n    # Get the row count, column count, and column names of the DataFrame\n    row_count = df.shape[0]\n    column_count = df.shape[1]\n    names = df.columns.tolist()\n    column_names = \", \".join(str(name) for name in names)\n\n    # Create a new DataFrame to display the information\n    info_df = pd.DataFrame({\n        \"Row Count\": [row_count],\n        \"Column Count\": [column_count],\n        \"Column Names\": [column_names],\n    })\n\n    # input.stats() is a list of strings; subset the columns based on the selected\n    # checkboxes\n    return info_df.loc[:, input.stats()]",
      "import pandas as pd\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.types import FileInfo\n\nui.input_file(\"input_file\", \"Choose CSV File\", accept=[\".csv\"], multiple=False)\nui.input_checkbox_group(\n    \"stats\",\n    \"Summary Stats\",\n    choices=[\"Row Count\", \"Column Count\", \"Column Names\"],\n    selected=[\"Row Count\", \"Column Count\", \"Column Names\"],\n)\n\n@reactive.calc\ndef parsed_file():\n    file = input.input_file()\n    if file is None:\n        return pd.DataFrame()\n    return pd.read_csv(file[0][\"datapath\"])\n\n@render.data_frame\ndef summary():\n    df = parsed_file()\n\n    if df.empty:\n        return pd.DataFrame()\n\n    # Get the row count, column count, and column names of the DataFrame\n    row_count = df.shape[0]\n    column_count = df.shape[1]\n    names = df.columns.tolist()\n    column_names = \", \".join(str(name) for name in names)\n\n    # Create a new DataFrame to display the information\n    info_df = pd.DataFrame({\n        \"Row Count\": [row_count],\n        \"Column Count\": [column_count],\n        \"Column Names\": [column_names],\n    })\n\n    # input.stats() is a list of strings; subset the columns based on the selected\n    # checkboxes\n    return info_df.loc[:, input.stats()]",
      "import pandas as pd\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_file(\n        \"input_file\", \"Choose CSV File\", accept=[\".csv\"], multiple=False\n    ),\n    ui.input_checkbox_group(\n        \"stats\",\n        \"Summary Stats\",\n        choices=[\"Row Count\", \"Column Count\", \"Column Names\"],\n        selected=[\"Row Count\", \"Column Count\", \"Column Names\"],\n    ),\n    ui.output_data_frame(\"summary\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def parsed_file():\n        file = input.input_file()\n        if file is None:\n            return pd.DataFrame()\n        return pd.read_csv(file[0][\"datapath\"])\n\n    @render.data_frame\n    def summary():\n        df = parsed_file()\n\n        if df.empty:\n            return pd.DataFrame()\n\n        # Get the row count, column count, and column names of the DataFrame\n        row_count = df.shape[0]\n        column_count = df.shape[1]\n        names = df.columns.tolist()\n        column_names = \", \".join(str(name) for name in names)\n\n        # Create a new DataFrame to display the information\n        info_df = pd.DataFrame({\n            \"Row Count\": [row_count],\n            \"Column Count\": [column_count],\n            \"Column Names\": [column_names],\n        })\n\n        # input.stats() is a list of strings; subset the columns based on the selected\n        # checkboxes\n        return info_df.loc[:, input.stats()]\n\napp = App(app_ui, server)",
      "import pandas as pd\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_file(\n        \"input_file\", \"Choose CSV File\", accept=[\".csv\"], multiple=False\n    ),\n    ui.input_checkbox_group(\n        \"stats\",\n        \"Summary Stats\",\n        choices=[\"Row Count\", \"Column Count\", \"Column Names\"],\n        selected=[\"Row Count\", \"Column Count\", \"Column Names\"],\n    ),\n    ui.output_data_frame(\"summary\"),\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def parsed_file():\n        file = input.input_file()\n        if file is None:\n            return pd.DataFrame()\n        return pd.read_csv(file[0][\"datapath\"])\n\n    @render.data_frame\n    def summary():\n        df = parsed_file()\n\n        if df.empty:\n            return pd.DataFrame()\n\n        # Get the row count, column count, and column names of the DataFrame\n        row_count = df.shape[0]\n        column_count = df.shape[1]\n        names = df.columns.tolist()\n        column_names = \", \".join(str(name) for name in names)\n\n        # Create a new DataFrame to display the information\n        info_df = pd.DataFrame({\n            \"Row Count\": [row_count],\n            \"Column Count\": [column_count],\n            \"Column Names\": [column_names],\n        })\n\n        # input.stats() is a list of strings; subset the columns based on the selected\n        # checkboxes\n        return info_df.loc[:, input.stats()]\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_numeric-input_index_html",
    "url": "components/inputs/numeric-input/index.html",
    "title": "Numeric Input ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Numeric Input\n\nNumeric Input\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_numeric ui.input_numeric(id, label, value, *, min=None, max=None, step=None, width=None)\n\nui.input_numeric ui.input_numeric(id, label, value, *, min=None, max=None, step=None, width=None)\n\nDetails\n\nA numeric input control creates a way to specify a number.\n\nTo add a numeric input control to your app:\n\n- Add ui.input_numeric() to the UI of your app to create a numeric input. Where you call this function will determine where the numeric input control will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_numeric() to define the identifier and label of the numeric input. ui.input_numeric() also includes various optional parameters, including min and max, which set the minimum and maximum allowed values.\n\nAdd ui.input_numeric() to the UI of your app to create a numeric input. Where you call this function will determine where the numeric input control will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_numeric() to define the identifier and label of the numeric input. ui.input_numeric() also includes various optional parameters, including min and max, which set the minimum and maximum allowed values.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a numeric input control:\n\n- Use input.<numeric_input_id>() (e.g., input.numeric()) to access the specified numeric value. The server value of a numeric input control is a numeric value.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"numeric\", \"\", 1, min=1, max=10).add_class(\n        \"pt-5 mx-auto text-center\"\n    ),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.numeric()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"numeric\", \"\", 1, min=1, max=10).add_class(\n        \"pt-5 mx-auto text-center\"\n    ),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.numeric()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_numeric(\"numeric\", \"Numeric input\", 1, min=1, max=10)  \n\n@render.text\ndef value():\n    return input.numeric()",
      "from shiny.express import input, render, ui\n\nui.input_numeric(\"numeric\", \"Numeric input\", 1, min=1, max=10)  \n\n@render.text\ndef value():\n    return input.numeric()",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"numeric\", \"Numeric input\", 1, min=1, max=10),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.numeric()\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"numeric\", \"Numeric input\", 1, min=1, max=10),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.numeric()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_password-field_index_html",
    "url": "components/inputs/password-field/index.html",
    "title": "Password Field ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Password Field\n\nPassword Field\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_password ui.input_password(id, label, value='', *, width=None, placeholder=None)\n\nui.input_password ui.input_password(id, label, value='', *, width=None, placeholder=None)\n\nDetails\n\nA password field creates a text box for password entry.\n\nTo add a password field to your app:\n\n- Add ui.input_password() to the UI of your app to create a password field. Where you call this function will determine where the password field will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_password() to define the identifier and label of the passsword field. ui.input_password() also includes various optional parameters, including value, which set the initial value.\n\nAdd ui.input_password() to the UI of your app to create a password field. Where you call this function will determine where the password field will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_password() to define the identifier and label of the passsword field. ui.input_password() also includes various optional parameters, including value, which set the initial value.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a password field:\n\n- Use input.<password_field_id>() (e.g., input.password()) to access the value of the password field. The server value of a password field is a string.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_password(\"password\", \"\", \"mypassword1\").add_class(\n        \"pt-5 mx-auto text-center\"\n    ),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return input.password()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_password(\"password\", \"\", \"mypassword1\").add_class(\n        \"pt-5 mx-auto text-center\"\n    ),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return input.password()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_password(\"password\", \"Password\", \"mypassword1\")  \n\n@render.text\ndef value():\n    return input.password()",
      "from shiny.express import input, render, ui\n\nui.input_password(\"password\", \"Password\", \"mypassword1\")  \n\n@render.text\ndef value():\n    return input.password()",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_password(\"password\", \"Password\", \"mypassword1\"),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.password()\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_password(\"password\", \"Password\", \"mypassword1\"),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.password()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_radio-buttons_index_html",
    "url": "components/inputs/radio-buttons/index.html",
    "title": "Radio Buttons ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Radio Buttons\n\nRadio Buttons\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_radio_buttons ui.input_radio_buttons(id, label, choices, *, selected=None, inline=False, width=None)\n\nui.input_radio_buttons ui.input_radio_buttons(id, label, choices, *, selected=None, inline=False, width=None)\n\nDetails\n\nUse a set of radio buttons to select an item from a list.\n\nTo add radio buttons to your app:\n\n- Add ui.input_radio_buttons() to the UI of your app to create a set of radio buttons. Where you call this function will determine where the radio buttons will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_radio_buttons() to define the identifier and label of the set of radio buttons.\n- Specify the value and label that accompanies each radio button using the choices parameter. choices can be either a list or a dictionary. If choices is a list, the list elements become the radio button values and labels. If choices is a dictionary, ui.input_radio_buttons() uses the dictionary keys as the button values and the dictionary values as the button labels.\n\nAdd ui.input_radio_buttons() to the UI of your app to create a set of radio buttons. Where you call this function will determine where the radio buttons will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_radio_buttons() to define the identifier and label of the set of radio buttons.\n\nSpecify the value and label that accompanies each radio button using the choices parameter. choices can be either a list or a dictionary. If choices is a list, the list elements become the radio button values and labels. If choices is a dictionary, ui.input_radio_buttons() uses the dictionary keys as the button values and the dictionary values as the button labels.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a set of radio buttons:\n\n- Use input.<radio_buttons_id>() to access the value of a radio button set (e.g., input.radio()). The server value of a set of radio buttons is a string containing the selected value.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(\n        \"radio\",\n        \"Radio buttons\",\n        {\"1\": \"Option 1\", \"2\": \"Option 2\", \"3\": \"Option 3\"},\n    ),\n    ui.output_ui(\"value\"),\n    {\"class\": \"vh-100 d-flex align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.radio()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(\n        \"radio\",\n        \"Radio buttons\",\n        {\"1\": \"Option 1\", \"2\": \"Option 2\", \"3\": \"Option 3\"},\n    ),\n    ui.output_ui(\"value\"),\n    {\"class\": \"vh-100 d-flex align-items-center px-4\"},\n)\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.radio()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_radio_buttons(  \n    \"radio\",  \n    \"Radio buttons\",  \n    {\"1\": \"Option 1\", \"2\": \"Option 2\", \"3\": \"Option 3\"},  \n)  \n\n@render.ui\ndef value():\n    return input.radio()",
      "from shiny.express import input, render, ui\n\nui.input_radio_buttons(  \n    \"radio\",  \n    \"Radio buttons\",  \n    {\"1\": \"Option 1\", \"2\": \"Option 2\", \"3\": \"Option 3\"},  \n)  \n\n@render.ui\ndef value():\n    return input.radio()",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(  \n        \"radio\",  \n        \"Radio buttons\",  \n        {\"1\": \"Option 1\", \"2\": \"Option 2\", \"3\": \"Option 3\"},  \n    ),  \n    ui.output_ui(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.radio()\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(  \n        \"radio\",  \n        \"Radio buttons\",  \n        {\"1\": \"Option 1\", \"2\": \"Option 2\", \"3\": \"Option 3\"},  \n    ),  \n    ui.output_ui(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.radio()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_select-multiple_index_html",
    "url": "components/inputs/select-multiple/index.html",
    "title": "Select (Multiple) ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Select (Multiple)\n\nSelect (Multiple)\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_select ui.input_select(id, label, choices, *, selected=None, multiple=False, selectize=False, width=None, size=None)\n\nui.input_select ui.input_select(id, label, choices, *, selected=None, multiple=False, selectize=False, width=None, size=None)\n\nDetails\n\nA select list creates a way to select one or more items from a list.\n\nTo add a select list that allows you to select multiple items to your app:\n\n- Add ui.input_select() to the UI of your app to create a select list. Where you call this function will determine where the select list appears within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_select() to define the identifier and label of the select list.\n- Supply the choices parameter with either a list or dictionary of choices. If choices is a list, its elements become the select list values and labels. If choices is a dictionary, ui.input_select() uses the dictionary keys as the list values and the dictionary values as the list labels.\n\nAdd ui.input_select() to the UI of your app to create a select list. Where you call this function will determine where the select list appears within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_select() to define the identifier and label of the select list.\n\nSupply the choices parameter with either a list or dictionary of choices. If choices is a list, its elements become the select list values and labels. If choices is a dictionary, ui.input_select() uses the dictionary keys as the list values and the dictionary values as the list labels.\n\nYou can also supply with choices a dictionary of dictionaries. ui.input_selectize() will use the top-level keys as group labels. See Selectize with grouped choices variation.\n\n- Set the multiple parameter to True to allow the user to select multiple items at once. By default, multiple is False.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a select list:\n\n- Use input.<select_id>() (e.g., input.select()) to access the selected value(s). The server value of a select list is a list of strings.\n\nSee also: Select (Single) and Selectize (Multiple). Select inputs and selectize inputs are similar, but have different interfaces and provide different ways of selecting multiple options. Selectize inputs also allow you to deselect items.\n\nVariations\n\nSelect list with grouped choices\n\nTo group the choices into categories, supply the choices argument with a dictionary of dictionaries. ui.input_select() will use the top-level keys as group labels.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(  \n        \"select\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(  \n        \"select\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_select(  \n    \"select\",  \n    \"Select options below:\",  \n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    multiple=True,  \n)  \n\n@render.text\ndef value():\n    return f\"{input.select()}\"",
      "from shiny.express import input, render, ui\n\nui.input_select(  \n    \"select\",  \n    \"Select options below:\",  \n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    multiple=True,  \n)  \n\n@render.text\ndef value():\n    return f\"{input.select()}\"",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(  \n        \"select\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(  \n        \"select\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(  \n        \"select\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(  \n        \"select\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_select(  \n    \"select\",  \n    \"Select options below:\",  \n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    multiple=True,  \n)  \n\n@render.text\ndef value():\n    return f\"{input.select()}\"",
      "from shiny.express import input, render, ui\n\nui.input_select(  \n    \"select\",  \n    \"Select options below:\",  \n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    multiple=True,  \n)  \n\n@render.text\ndef value():\n    return f\"{input.select()}\"",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(  \n        \"select\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(  \n        \"select\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_select-single_index_html",
    "url": "components/inputs/select-single/index.html",
    "title": "Select (Single) ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Select (Single)\n\nSelect (Single)\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_select ui.input_select(id, label, choices, *, selected=None, multiple=False, selectize=False, width=None, size=None)\n\nui.input_select ui.input_select(id, label, choices, *, selected=None, multiple=False, selectize=False, width=None, size=None)\n\nDetails\n\nA select list creates a way to select one or more items from a list.\n\nTo use a select list that allows you to select a single item:\n\n- Add ui.input_select() to the UI of your app to create a select list. Where you call this function will determine where the select list appears within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_select() to define the identifier and label of the select list.\n- Supply the choices parameter with either a list or dictionary of choices. If choices is a list, its elements become the select list values and labels. If choices is a dictionary, ui.input_select() uses the dictionary keys as the list values and the dictionary values as the list labels.\n\nAdd ui.input_select() to the UI of your app to create a select list. Where you call this function will determine where the select list appears within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_select() to define the identifier and label of the select list.\n\nSupply the choices parameter with either a list or dictionary of choices. If choices is a list, its elements become the select list values and labels. If choices is a dictionary, ui.input_select() uses the dictionary keys as the list values and the dictionary values as the list labels.\n\nYou can also supply with choices a dictionary of dictionaries. ui.input_select() will use the top-level keys as group labels. See the Select list with grouped choices variation.\n\n- The multiple parameter controls whether you can select multiple items at once. By default, multiple is False.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a select list:\n\n- Use input.<select_id>() (e.g., input.select()) to access the selected value. The server value of a select list is a list of strings. When multiple=False, this list will have length 1.\n\nSee also: Select (Multiple) and Selectize (Multiple). Select inputs and selectize inputs are similar, but have different interfaces and provide different ways of selecting multiple options. Selectize inputs also allow you to deselect items.\n\nVariations\n\nSelect list with grouped choices\n\nTo group the choices into categories, supply the choices argument with a dictionary of dictionaries. ui.input_select() will use the top-level keys as group labels.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(\n    ui.input_select(  \n        \"select\",  \n        \"Select an option below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(\n    ui.input_select(  \n        \"select\",  \n        \"Select an option below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_select(  \n    \"select\",  \n    \"Select an option below:\",  \n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n)  \n\n@render.text\ndef value():\n    return f\"{input.select()}\"",
      "from shiny.express import input, render, ui\n\nui.input_select(  \n    \"select\",  \n    \"Select an option below:\",  \n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n)  \n\n@render.text\ndef value():\n    return f\"{input.select()}\"",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fixed(\n    ui.input_select(  \n        \"select\",  \n        \"Select an option below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fixed(\n    ui.input_select(  \n        \"select\",  \n        \"Select an option below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_select(\n    \"select\",\n    \"Select an option below:\",\n    {\n        \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},\n        \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},\n    },\n)\n\n@render.text\ndef value():\n    return f\"{input.select()}\"",
      "from shiny.express import input, render, ui\n\nui.input_select(\n    \"select\",\n    \"Select an option below:\",\n    {\n        \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},\n        \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},\n    },\n)\n\n@render.text\ndef value():\n    return f\"{input.select()}\"",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(\n        \"select\",\n        \"Select an option below:\",\n        {\n            \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},\n            \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},\n        },\n    ),\n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(\n        \"select\",\n        \"Select an option below:\",\n        {\n            \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},\n            \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},\n        },\n    ),\n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_selectize-multiple_index_html",
    "url": "components/inputs/selectize-multiple/index.html",
    "title": "Selectize (Multiple) ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Selectize (Multiple)\n\nSelectize (Multiple)\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_selectize ui.input_selectize(id, label, choices, *, selected=None, multiple=False, width=None)\n\nui.input_selectize ui.input_selectize(id, label, choices, *, selected=None, multiple=False, width=None)\n\nDetails\n\nA selectize list creates a way to select one or more items from a list.\n\nTo use a selectize list that allows you to select multiple items:\n\n- Add ui.input_selectize() to the UI of your app to create a selectize list. Where you call this function will determine where the selectize list appears within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_selectize() to define the identifier and label of the select list.\n- Supply the choices parameter with either a list or dictionary of choices. If choices is a list, its elements become the select list values and labels. If choices is a dictionary, ui.input_selectize() uses the dictionary keys as the list values and the dictionary values as the list labels.\n\nAdd ui.input_selectize() to the UI of your app to create a selectize list. Where you call this function will determine where the selectize list appears within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_selectize() to define the identifier and label of the select list.\n\nSupply the choices parameter with either a list or dictionary of choices. If choices is a list, its elements become the select list values and labels. If choices is a dictionary, ui.input_selectize() uses the dictionary keys as the list values and the dictionary values as the list labels.\n\nYou can also supply with choices a dictionary of dictionaries. ui.input_selectize() will use the top-level keys as group labels. See Selectize with grouped choices variation.\n\n- The multiple parameter controls whether you can select multiple items at once. Set multiple=True to allow the user to select multiple values.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a selectize list:\n\n- Use input.<selectize_id>() (e.g., input.selectize()) to access the selected value(s). The server value of a selectize list is a list of strings.\n\nSee also: Selectize (Single) and Select (Multiple). Select inputs and selectize inputs are similar, but have different interfaces and provide different ways of selecting multiple options. Selectize inputs also allow you to deselect items.\n\nVariations\n\nSelectize with grouped choices\n\nTo group the choices into categories, supply the choices argument with a dictionary of dictionaries. ui.input_selectize() will use the top-level keys as group labels.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_selectize(  \n    \"selectize\",  \n    \"Select options below:\",  \n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    multiple=True,  \n)  \n\n@render.text\ndef value():\n    return f\"{input.selectize()}\"",
      "from shiny.express import input, render, ui\n\nui.input_selectize(  \n    \"selectize\",  \n    \"Select options below:\",  \n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    multiple=True,  \n)  \n\n@render.text\ndef value():\n    return f\"{input.selectize()}\"",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select options below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select options below:\",  \n        {  \n            \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n            \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},  \n        },  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select options below:\",  \n        {  \n            \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n            \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},  \n        },  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_selectize(  \n    \"selectize\",  \n    \"Select options below:\",  \n    {  \n        \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},  \n    },  \n    multiple=True,  \n)  \n\n@render.text\ndef value():\n    return f\"{input.selectize()}\"",
      "from shiny.express import input, render, ui\n\nui.input_selectize(  \n    \"selectize\",  \n    \"Select options below:\",  \n    {  \n        \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n        \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},  \n    },  \n    multiple=True,  \n)  \n\n@render.text\ndef value():\n    return f\"{input.selectize()}\"",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select options below:\",  \n        {  \n            \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n            \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},  \n        },  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select options below:\",  \n        {  \n            \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n            \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},  \n        },  \n        multiple=True,  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_selectize-single_index_html",
    "url": "components/inputs/selectize-single/index.html",
    "title": "Selectize (Single) ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Selectize (Single)\n\nSelectize (Single)\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_selectize ui.input_selectize(id, label, choices, *, selected=None, multiple=False, width=None)\n\nui.input_selectize ui.input_selectize(id, label, choices, *, selected=None, multiple=False, width=None)\n\nDetails\n\nA selectize list creates a way to select one or more items from a list.\n\nTo use a selectize list that allows you to select a single item:\n\n- Add ui.input_selectize() to the UI of your app to create a selectize list. Where you call this function will determine where the selectize list appears within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_selectize() to define the identifier and label of the select list.\n- Supply the choices parameter with either a list or dictionary of choices. If choices is a list, its elements become the select list values and labels. If choices is a dictionary, ui.input_selectize() uses the dictionary keys as the list values and the dictionary values as the list labels.\n\nAdd ui.input_selectize() to the UI of your app to create a selectize list. Where you call this function will determine where the selectize list appears within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_selectize() to define the identifier and label of the select list.\n\nSupply the choices parameter with either a list or dictionary of choices. If choices is a list, its elements become the select list values and labels. If choices is a dictionary, ui.input_selectize() uses the dictionary keys as the list values and the dictionary values as the list labels.\n\nYou can also supply with choices a dictionary of dictionaries. ui.input_selectize() will use the top-level keys as group labels. See Selectize with grouped choices variation.\n\n- The multiple parameter controls whether you can select multiple items at once. By default, multiple is False and the user can only select one value at a time.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a selectize list:\n\n- Use input.<selectize_id>() (e.g., input.selectize()) to access the selected value. The server value of a selectize list is a list of strings. When multiple=False, this list will have length 1.\n\nSee also: Selectize (Multiple) and Select (Single). Select inputs and selectize inputs are similar, but have different interfaces and provide different ways of selecting multiple options. Selectize inputs also allow you to deselect items.\n\nVariations\n\nSelectize with grouped choices\n\nTo group the choices into categories, supply the choices argument with a dictionary of dictionaries. ui.input_selectize() will use the top-level keys as group labels.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select an option below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select an option below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_selectize(  \n    \"selectize\",  \n    \"Select an option below:\",  \n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n)  \n\n@render.text\ndef value():\n    return f\"{input.selectize()}\"",
      "from shiny.express import input, render, ui\n\nui.input_selectize(  \n    \"selectize\",  \n    \"Select an option below:\",  \n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n)  \n\n@render.text\ndef value():\n    return f\"{input.selectize()}\"",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select an option below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  \n        \"selectize\",  \n        \"Select an option below:\",  \n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  \n    ),  \n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(\n        \"selectize\",\n        \"Select an option below:\",\n        {\n            \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},\n            \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},\n        },\n    ),\n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(\n        \"selectize\",\n        \"Select an option below:\",\n        {\n            \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},\n            \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},\n        },\n    ),\n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_selectize(\n    \"selectize\",\n    \"Select an option below:\",\n    {\n        \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},\n        \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},\n    },\n)\n\n@render.text\ndef value():\n    return f\"{input.selectize()}\"",
      "from shiny.express import input, render, ui\n\nui.input_selectize(\n    \"selectize\",\n    \"Select an option below:\",\n    {\n        \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},\n        \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},\n    },\n)\n\n@render.text\ndef value():\n    return f\"{input.selectize()}\"",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(\n        \"selectize\",\n        \"Select an option below:\",\n        {\n            \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},\n            \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},\n        },\n    ),\n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(\n        \"selectize\",\n        \"Select an option below:\",\n        {\n            \"1\": {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},\n            \"2\": {\"2A\": \"Choice 2A\", \"2B\": \"Choice 2B\", \"2C\": \"Choice 2C\"},\n        },\n    ),\n    ui.output_text(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_slider_index_html",
    "url": "components/inputs/slider/index.html",
    "title": "Slider ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Slider\n\nSlider\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_slider ui.input_slider(id, label, min, max, value, *, step=None, ticks=False, animate=False, width=None, sep=',', pre=None, post=None, time_format=None, timezone=None, drag_range=True)\n\nui.input_slider ui.input_slider(id, label, min, max, value, *, step=None, ticks=False, animate=False, width=None, sep=',', pre=None, post=None, time_format=None, timezone=None, drag_range=True)\n\nDetails\n\nA slider is a widget that lets you drag to select a number, date, or date-time from a specified range.\n\nTo add a slider to your app:\n\n- Add ui.input_slider() to the UI of your app to create a slider. Where you call this function will determine where the slider will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_slider() to define the identifier and label of the slider.\n- Use the min and max parameters to define the minimum and maximum values of the slider.\n- Set the value parameter to define the starting slider value. min, max, and value can be numbers, dates, or date-times. Dates and date-times can be provided from the datetime module with the date() or datetime() functions, respectively.\n\nAdd ui.input_slider() to the UI of your app to create a slider. Where you call this function will determine where the slider will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_slider() to define the identifier and label of the slider.\n\nUse the min and max parameters to define the minimum and maximum values of the slider.\n\nSet the value parameter to define the starting slider value. min, max, and value can be numbers, dates, or date-times. Dates and date-times can be provided from the datetime module with the date() or datetime() functions, respectively.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a slider:\n\n- Use input.<slider_id>() (e.g., input.slider()) to access the value of the slider. The server value of a slider is a number, date, or date-time (depending on the class of value).\n\nSee also: Slider Range\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"slider\", \"\", 0, 100, 50).add_class(\"pt-5 mx-auto text-center\"),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return f\"{input.slider()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"slider\", \"\", 0, 100, 50).add_class(\"pt-5 mx-auto text-center\"),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return f\"{input.slider()}\"\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_slider(\"slider\", \"Slider\", 0, 100, 50)  \n\n@render.text\ndef value():\n    return f\"{input.slider()}\"",
      "from shiny.express import input, render, ui\n\nui.input_slider(\"slider\", \"Slider\", 0, 100, 50)  \n\n@render.text\ndef value():\n    return f\"{input.slider()}\"",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"slider\", \"Slider\", 0, 100, 50),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.slider()}\"\n\napp = App(app_ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"slider\", \"Slider\", 0, 100, 50),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.slider()}\"\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_slider-range_index_html",
    "url": "components/inputs/slider-range/index.html",
    "title": "Slider Range ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Slider Range\n\nSlider Range\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_slider ui.input_slider(id, label, min, max, value, *, step=None, ticks=False, animate=False, width=None, sep=',', pre=None, post=None, time_format=None, timezone=None, drag_range=True)\n- ui.output_data_frame ui.output_data_frame(id)\n- render.data_frame render.data_frame(fn=None)\n- render.DataTable render.DataTable(self, data, *, width='fit-content', height='500px', summary=True, filters=False, row_selection_mode='none')\n\nui.input_slider ui.input_slider(id, label, min, max, value, *, step=None, ticks=False, animate=False, width=None, sep=',', pre=None, post=None, time_format=None, timezone=None, drag_range=True)\n\nui.output_data_frame ui.output_data_frame(id)\n\nrender.data_frame render.data_frame(fn=None)\n\nrender.DataTable render.DataTable(self, data, *, width='fit-content', height='500px', summary=True, filters=False, row_selection_mode='none')\n\nDetails\n\nA slider is a widget that lets you drag to select numbers, dates, or date-tifrom a specified range. You can use a slider to select either a single value or a range of values.\n\nTo add a slider that lets the user select a range of values:\n\n- Add ui.input_slider() to the UI of your app to create a slider. Where you call this function will determine where the slider will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_slider() to define the identifier and label of the slider.\n- Use the min and max parameters to define the minimum and maximum values of the slider. min and max can be numbers, dates, or date-times. Dates and date-times can be provided from the datetime module with the date() or datetime() functions, respectively.\n- Pass a list with two elements to the value parameter. These elements define the initial range. value can be a list of numbers, dates, or date-times.\n\nAdd ui.input_slider() to the UI of your app to create a slider. Where you call this function will determine where the slider will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_slider() to define the identifier and label of the slider.\n\nUse the min and max parameters to define the minimum and maximum values of the slider. min and max can be numbers, dates, or date-times. Dates and date-times can be provided from the datetime module with the date() or datetime() functions, respectively.\n\nPass a list with two elements to the value parameter. These elements define the initial range. value can be a list of numbers, dates, or date-times.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a slider:\n\n- Use input.<slider_id>() (e.g., input.slider()) to access the value of the slider. If value is a list and the slider specifies a range, the server value of a slider will be a list of length 2.\n\nSee also: Slider\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"slider\", \"\", min=0, max=100, value=[35, 65]).add_class(\n        \"pt-5 mx-auto text-center\"\n    ),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return f\"{input.slider()}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"slider\", \"\", min=0, max=100, value=[35, 65]).add_class(\n        \"pt-5 mx-auto text-center\"\n    ),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return f\"{input.slider()}\"\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_slider(\"slider\", \"Slider\", min=0, max=100, value=[35, 65])  \n\n@render.text\ndef value():\n    return f\"{input.slider()}\"",
      "from shiny.express import input, render, ui\n\nui.input_slider(\"slider\", \"Slider\", min=0, max=100, value=[35, 65])  \n\n@render.text\ndef value():\n    return f\"{input.slider()}\"",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"slider\", \"Slider\", min=0, max=100, value=[35, 65]),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.slider()}\"\n\napp = App(app_ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"slider\", \"Slider\", min=0, max=100, value=[35, 65]),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.slider()}\"\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_switch_index_html",
    "url": "components/inputs/switch/index.html",
    "title": "Switch ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Switch\n\nSwitch\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_switch ui.input_switch(id, label, value=False, *, width=None)\n\nui.input_switch ui.input_switch(id, label, value=False, *, width=None)\n\nDetails\n\nA switch allows you to select between logical values.\n\nTo add a switch to your app:\n\n- Add ui.input_switch() to the UI of your app to create a switch. Where you call this function will determine where the switch will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_switch() to define the identifier and label of the switch.\n- By default, the value parameter, which defines the switch‚Äôs initial value, is False. If you‚Äôd like the initial value to be True, set value equal to True.\n\nAdd ui.input_switch() to the UI of your app to create a switch. Where you call this function will determine where the switch will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_switch() to define the identifier and label of the switch.\n\nBy default, the value parameter, which defines the switch‚Äôs initial value, is False. If you‚Äôd like the initial value to be True, set value equal to True.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a switch:\n\n- Use input.<switch_id>() (e.g., input.switch()) to access the value of the switch. The server value of a switch is True if checked and False otherwise.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"switch\", \"Switch\", True),\n    ui.output_ui(\"value\"),\n).add_class(\"p-5\")\n\ndef server(input, output, session):\n    @output\n    @render.ui\n    def value():\n        return input.switch()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"switch\", \"Switch\", True),\n    ui.output_ui(\"value\"),\n).add_class(\"p-5\")\n\ndef server(input, output, session):\n    @output\n    @render.ui\n    def value():\n        return input.switch()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_switch(\"switch\", \"Switch\", False)  \n\n@render.ui\ndef value():\n    return input.switch()",
      "from shiny.express import input, render, ui\n\nui.input_switch(\"switch\", \"Switch\", False)  \n\n@render.ui\ndef value():\n    return input.switch()",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"switch\", \"Switch\", False),  \n    ui.output_ui(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.switch()\n\napp = App(app_ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"switch\", \"Switch\", False),  \n    ui.output_ui(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.switch()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_text-area_index_html",
    "url": "components/inputs/text-area/index.html",
    "title": "Text Area ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Text Area\n\nText Area\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_text_area ui.input_text_area(id, label, value='', *, width=None, height=None, cols=None, rows=None, placeholder=None, resize=None, autoresize=False, autocomplete=None, spellcheck=None)\n\nui.input_text_area ui.input_text_area(id, label, value='', *, width=None, height=None, cols=None, rows=None, placeholder=None, resize=None, autoresize=False, autocomplete=None, spellcheck=None)\n\nDetails\n\nCreate a textarea input control for entry of unstructured text values.\n\nTo add a textarea to your app:\n\n- Add ui.input_text_area() to the UI of your app to create a textarea. Where you call this function will determine where the textarea will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_text_area() to define the identifier and label of the textarea.\n- By default, the value parameter, which defines the textarea‚Äôs initial value, is the empty string (''). Provide a different string to value to change the initial text.\n\nAdd ui.input_text_area() to the UI of your app to create a textarea. Where you call this function will determine where the textarea will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_text_area() to define the identifier and label of the textarea.\n\nBy default, the value parameter, which defines the textarea‚Äôs initial value, is the empty string (''). Provide a different string to value to change the initial text.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a textarea:\n\n- Use input.<textarea_id>() (e.g., input.textarea()) to access the value of the textarea. The server value of a textarea is a string containing the current text input.\n\nSee also: Text Box\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_text_area(\"textarea\", \"\", \"Hello World\").add_class(\n        \"pt-5 mx-auto text-center\"\n    ),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.textarea()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_text_area(\"textarea\", \"\", \"Hello World\").add_class(\n        \"pt-5 mx-auto text-center\"\n    ),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.textarea()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_text_area(\"textarea\", \"Text input\", \"Hello World\")  \n\n@render.text\ndef value():\n    return input.textarea()",
      "from shiny.express import input, render, ui\n\nui.input_text_area(\"textarea\", \"Text input\", \"Hello World\")  \n\n@render.text\ndef value():\n    return input.textarea()",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_text_area(\"textarea\", \"Text input\", \"Hello World\"),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.textarea()\n\napp = App(app_ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_text_area(\"textarea\", \"Text input\", \"Hello World\"),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.textarea()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_inputs_text-box_index_html",
    "url": "components/inputs/text-box/index.html",
    "title": "Text Box ‚Äì Shiny for Python",
    "description": "",
    "content": "- Inputs\n- Text Box\n\nText Box\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.input_text ui.input_text(id, label, value='', *, width=None, placeholder=None, autocomplete='off', spellcheck=None)\n\nui.input_text ui.input_text(id, label, value='', *, width=None, placeholder=None, autocomplete='off', spellcheck=None)\n\nDetails\n\nCreate input control for entry of text values.\n\nTo add a text box to your app:\n\n- Add ui.input_text() to the UI of your app to create a text box. Where you call this function will determine where the text box will appear within the app‚Äôs layout.\n- Specify the id and label parameters of ui.input_text_area() to define the identifier and label of the text box.\n- By default, the value parameter, which defines the text box‚Äôs initial value, is the empty string (''). Provide a different string to value to change the initial text.\n\nAdd ui.input_text() to the UI of your app to create a text box. Where you call this function will determine where the text box will appear within the app‚Äôs layout.\n\nSpecify the id and label parameters of ui.input_text_area() to define the identifier and label of the text box.\n\nBy default, the value parameter, which defines the text box‚Äôs initial value, is the empty string (''). Provide a different string to value to change the initial text.\n\nThe value of an input component is accessible as a reactive value within the server() function. To access the value of a text box:\n\n- Use input.<text_id>() (e.g., input.text()) to access the value of the text box. The server value of a text box is a string containing the current text input.\n\nSee also: Text Area\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"text\", \"\", \"Enter text...\").add_class(\"pt-5 mx-auto text-center\"),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return input.text()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"text\", \"\", \"Enter text...\").add_class(\"pt-5 mx-auto text-center\"),\n    ui.output_text_verbatim(\"value\"),\n    {\"class\": \"vh-100 justify-content-center align-items-center px-5\"},\n).add_class(\"my-auto text-center\")\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def value():\n        return input.text()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_text(\"text\", \"Text input\", \"Enter text...\")  \n\n@render.text\ndef value():\n    return input.text()",
      "from shiny.express import input, render, ui\n\nui.input_text(\"text\", \"Text input\", \"Enter text...\")  \n\n@render.text\ndef value():\n    return input.text()",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"text\", \"Text input\", \"Enter text...\"),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.text()\n\napp = App(app_ui, server)",
      "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"text\", \"Text input\", \"Enter text...\"),  \n    ui.output_text_verbatim(\"value\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.text()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_outputs_data-grid_index_html",
    "url": "components/outputs/data-grid/index.html",
    "title": "Data Grid ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Data Grid\n\nData Grid\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_data_frame ui.output_data_frame(id)\n- @render.data_frame render.data_frame(fn=None)\n- render.DataGrid render.DataGrid(self, data, *, width='fit-content', height='500px', summary=True, filters=False, row_selection_mode='none')\n\nui.output_data_frame ui.output_data_frame(id)\n\n@render.data_frame render.data_frame(fn=None)\n\nrender.DataGrid render.DataGrid(self, data, *, width='fit-content', height='500px', summary=True, filters=False, row_selection_mode='none')\n\nDetails\n\nA Data Grid presents tabular data in a spreadsheet-like view with cells separated by grid lines.\n\nTo make a reactive Data Grid, follow three steps:\n\n- Call ui.output_data_frame() in the UI of your app to create a div in which to display the table. Where you call this function within the UI functions will determine where the table will appear within the layout of the app. Set the id argument of ui.output_data_frame() to a unique value.\n- Within the server function, define a new function whose name matches the id used above. The function should assemble the table to display and then return the table wrapped in render.DataGrid(). Shiny will rerun this function whenever it needs to build or update the output that has the matching id.\n- Decorate the function with @render.data_frame.\n\nCall ui.output_data_frame() in the UI of your app to create a div in which to display the table. Where you call this function within the UI functions will determine where the table will appear within the layout of the app. Set the id argument of ui.output_data_frame() to a unique value.\n\nWithin the server function, define a new function whose name matches the id used above. The function should assemble the table to display and then return the table wrapped in render.DataGrid(). Shiny will rerun this function whenever it needs to build or update the output that has the matching id.\n\nDecorate the function with @render.data_frame.\n\nA Data Grid can also collect input from the user. To allow this, set render.DataGrid(selection_mode=\"row\") or render.DataGrid(selection_mode=\"rows\") to allow the user to select one or more rows of the Data Grid.\n\nThe indices of the selected rows will be accessible within the server function as a reactive variable returned by <name>.cell_selection()[\"rows\"], where is the name of the function decorated with @render.data_frame.\n\nThe value returned will be an empty tuple if no rows are selected, or a tuple of integers representing the indices of the selected rows. To filter a pandas data frame down to the selected rows, use df.iloc[list(<name>.cell_selection()[\"rows\"])].\n\nFor more information about interacting with data frames, see the API documentation for Express or Core syntax.\n\nIf your table is a data frame that uses the pandas styler, replace ui.output_data_frame() with ui.output_table() and @render.data_frame with @render.table.\n\nSee also: Data Tables\n\nVariations\n\nSelect Rows\n\nSet selection_mode in render.DataGrid() to \"row\" to allow the user to select one row at a time. Set it to \"rows\" to allow the user to select multiple rows at a time. Access the selection(s) as <id>.cell_selection()[\"rows\"].\n\n- Express\n- Core\n\nFilterable Table\n\nSet render.DataGrid(filters=True) to add a row of filter options to the header row. Users can interact with these options to filter the table.\n\n- Express\n- Core\n\nEdit Table Cells\n\nSet editable=True to be able to edit cell contents without re-rendering the data frame.\n\n- Express\n- Core\n\nUse Original Data\n\nThe reactive value .data() will reactively return the unaltered data.\n\n- Express\n- Core\n\nUse Edited Data\n\nThe reactive value .data_view() (or .data_view(selected=True)) will reactively return the edited data. The data will be updated as the user edits the table and the rows will be arranged to match the user‚Äôs sorting and filtering.\n\n- Express\n- Core\n\nSet Table Size\n\nSet the height and width parameters of render.DataGrid() to constrain the output size of the table.\n\n- Express\n- Core\n\nStyling\n\nSet styles in render.DataGrid() to a customize the table display. styles can take a list of dictionaries where each dictionary represents a style to be applied to the table (and thus should have at least a style (or class) key to apply CSS styles or classes to the relevant cells). To scope the styling to particular cells, use the rows and cols keys (with 0-based indexing). Note that if both rows and cols are specified, the style will be applied only to the intersection of the specified rows and columns.\n\n- Express\n- Core\n\nUpdate Filters\n\nThe data frame filters can be programmatically updated using the .update_filter() method. It takes a list of column filters to apply to the data frame. Each column filter is a dictionary with the following keys: col and value. The col key is the column index to filter on, and the value key is the value to filter for. The value key can be a single value for string columns or a list of values to filter for numeric columns. Note, to not set a minimum or maximum value for a numeric column, you can provide a None value. To reset filters, provide None for the filters (.update_filter(None)).\n\n- Express\n- Core\n\nUpdate Sorting\n\nThe data frame sorting can be programmatically updated using the .update_sort() method. It takes a list of sorting information or column numbers to apply to the data frame. When using a number, the default sorting direction will be applied. When providing a sorting info object, col and desc describe the column index and whether or not the sorting direction is descending. To reset the sorting, provide None for the sorting information (.update_sort(None)).\n\n- Express\n- Core\n\nUpdate Row Selection\n\nThe selected rows can be programmatically updated using the .update_cell_selection() method. .update_cell_selection() takes one argument, selection, which should be a dictionary specifying type, which can be either row (for a single row) or rows (for multiple rows), and row, a list of the row indices to select. Note that you will also need to set selection_mode in render.DataGrid() to \"row\" or \"rows\", since it is \"none\" by default.\n\n- Express\n- Core\n\nCustomize Summary Statement\n\nSet summary in render.DataGrid() to False to remove the statement ‚ÄúViewing rows 1 through 10 of 20‚Äù. Set it to a string template containing {start}, {end}, and {total} tokens, to customize the message.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 375\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 375\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame  \ndef penguins_df():\n    return render.DataGrid(penguins)  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame  \ndef penguins_df():\n    return render.DataGrid(penguins)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataGrid(penguins)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.ui()\ndef rows():\n    rows = penguins_df.cell_selection()[\"rows\"]  \n    selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n    return f\"Rows selected: {selected}\"\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.ui()\ndef rows():\n    rows = penguins_df.cell_selection()[\"rows\"]  \n    selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n    return f\"Rows selected: {selected}\"\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "# shiny.express\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  ",
      "# shiny.express\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        editable=True,  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        editable=True,  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data()  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data()  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the selected data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data_view(selected=True)  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the selected data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data_view(selected=True)  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, selection_mode=\"rows\")",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins: pd.DataFrame = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n        # penguins,\n        styles=[  \n            # Center the text of each cell (using Bootstrap utility class) \n            {  \n                \"class\": \"text-center\",  \n            },  \n            # Bold the first column \n            {  \n                \"cols\": [0],  \n                \"style\": {\"font-weight\": \"bold\"},  \n            },  \n            # Highlight the penguin colors \n            {\n                \"rows\": [0, 1],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#ffdbaf\"},  \n            },  \n            {  \n                \"rows\": [2, 3],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#b1d6d6\"},  \n            },  \n            {  \n                \"rows\": [4, 5],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#d6a9f2\"},  \n            },  \n        ],  \n    )",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins: pd.DataFrame = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n        # penguins,\n        styles=[  \n            # Center the text of each cell (using Bootstrap utility class) \n            {  \n                \"class\": \"text-center\",  \n            },  \n            # Bold the first column \n            {  \n                \"cols\": [0],  \n                \"style\": {\"font-weight\": \"bold\"},  \n            },  \n            # Highlight the penguin colors \n            {\n                \"rows\": [0, 1],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#ffdbaf\"},  \n            },  \n            {  \n                \"rows\": [2, 3],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#b1d6d6\"},  \n            },  \n            {  \n                \"rows\": [4, 5],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#d6a9f2\"},  \n            },  \n        ],  \n    )",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_filters\", \"Update filters\")\nui.input_action_button(\"reset_filters\", \"Reset filters\")\n\nui.h5(\"Current filters: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.filter()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  \n\n@reactive.effect\n@reactive.event(input.update_filters)\nasync def _():\n    await penguins_df.update_filter(  \n        [  \n            # Set partial match \n            {\"col\": 0, \"value\": \"Gen\"},  \n            # Set min value \n            {\"col\": 2, \"value\": (50, None)},  \n            # Set max value \n            {\"col\": 3, \"value\": (None, 17)},  \n            # Set range \n            {\"col\": 4, \"value\": (220, 225)},  \n        ],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_filters)\nasync def _():\n    await penguins_df.update_filter(None)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_filters\", \"Update filters\")\nui.input_action_button(\"reset_filters\", \"Reset filters\")\n\nui.h5(\"Current filters: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.filter()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  \n\n@reactive.effect\n@reactive.event(input.update_filters)\nasync def _():\n    await penguins_df.update_filter(  \n        [  \n            # Set partial match \n            {\"col\": 0, \"value\": \"Gen\"},  \n            # Set min value \n            {\"col\": 2, \"value\": (50, None)},  \n            # Set max value \n            {\"col\": 3, \"value\": (None, 17)},  \n            # Set range \n            {\"col\": 4, \"value\": (220, 225)},  \n        ],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_filters)\nasync def _():\n    await penguins_df.update_filter(None)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_sorting\", \"Update sorting\")\nui.input_action_button(\"reset_sorting\", \"Reset sorting\")\n\nui.h5(\"Current sorting: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.sort()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)\n\n@reactive.effect\n@reactive.event(input.update_sorting)\nasync def _():\n    await penguins_df.update_sort(  \n        [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_sorting)\nasync def _():\n    await penguins_df.update_sort([])  ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_sorting\", \"Update sorting\")\nui.input_action_button(\"reset_sorting\", \"Reset sorting\")\n\nui.h5(\"Current sorting: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.sort()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins)\n\n@reactive.effect\n@reactive.event(input.update_sorting)\nasync def _():\n    await penguins_df.update_sort(  \n        [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_sorting)\nasync def _():\n    await penguins_df.update_sort([])  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_selection\", \"Update row selection\")\nui.input_action_button(\"reset_selection\", \"Reset row selection\")\n\nui.h5(\"Current selection: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():  \n    return penguins_df.cell_selection()[\"rows\"]  \n\n@render.data_frame\ndef penguins_df():  \n    return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n@reactive.effect \n@reactive.event(input.update_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]})  \n\n@reactive.effect\n@reactive.event(input.reset_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_selection\", \"Update row selection\")\nui.input_action_button(\"reset_selection\", \"Reset row selection\")\n\nui.h5(\"Current selection: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():  \n    return penguins_df.cell_selection()[\"rows\"]  \n\n@render.data_frame\ndef penguins_df():  \n    return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n@reactive.effect \n@reactive.event(input.update_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]})  \n\n@reactive.effect\n@reactive.event(input.reset_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataGrid(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        summary=\"Viendo filas {start} a {end} de {total}\",  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(\n        penguins,\n        summary=\"Viendo filas {start} a {end} de {total}\",  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataGrid(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_outputs_data-table_index_html",
    "url": "components/outputs/data-table/index.html",
    "title": "Data Table ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Data Table\n\nData Table\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_data_frame ui.output_data_frame(id)\n- @render.data_frame render.data_frame(fn=None)\n- render.DataTable render.DataTable(self, data, *, width='fit-content', height='500px', summary=True, filters=False, row_selection_mode='none')\n\nui.output_data_frame ui.output_data_frame(id)\n\n@render.data_frame render.data_frame(fn=None)\n\nrender.DataTable render.DataTable(self, data, *, width='fit-content', height='500px', summary=True, filters=False, row_selection_mode='none')\n\nDetails\n\nA Data Table presents tabular data in a figure-like view with a minimum of grid lines.\n\nTo make a reactive Data Table, follow three steps:\n\n- Call ui.output_data_frame() in the UI of your app to create a div in which to display the table. Where you call this function within the UI functions will determine where the table will appear within the layout of the app. Set the id argument of ui.output_data_frame() to a unique value.\n- Within the server function, define a new function whose name matches the id used above. The function should assemble the table to display and then return the table wrapped in render.DataTable(). Shiny will rerun this function whenever it needs to build or update the output that has the matching id.\n- Decorate the function with @render.data_frame.\n\nCall ui.output_data_frame() in the UI of your app to create a div in which to display the table. Where you call this function within the UI functions will determine where the table will appear within the layout of the app. Set the id argument of ui.output_data_frame() to a unique value.\n\nWithin the server function, define a new function whose name matches the id used above. The function should assemble the table to display and then return the table wrapped in render.DataTable(). Shiny will rerun this function whenever it needs to build or update the output that has the matching id.\n\nDecorate the function with @render.data_frame.\n\nA Data Table can also collect input from the user. To allow this, set render.DataTable(selection_mode=\"row\") or render.DataTable(selection_mode=\"rows\") to allow the user to select one or more rows of the Data Table.\n\nThe indices of the selected rows will be accessible within the server function as a reactive variable returned by <name>.cell_selection()[\"rows\"], where is the name of the function decorated with @render.data_frame.\n\nThe value returned will be an empty tuple if no rows are selected, or a tuple of integers representing the indices of the selected rows. To filter a pandas data frame down to the selected rows, use df.iloc[list(<name>.cell_selection()[\"rows\"])].\n\nFor more information about interacting with data frames, see the API documentation for Express or Core syntax.\n\nIf your table is a data frame that uses the pandas styler, replace ui.output_data_frame() with ui.output_table() and @render.data_frame with @render.table.\n\nSee also Data Grids\n\nVariations\n\nSelect Rows\n\nSet selection_mode in render.DataTable() to \"row\" to allow the user to select one row at a time. Set it to \"rows\" to allow the user to select multiple rows at a time. Access the selection(s) as <id>.cell_selection()[\"rows\"].\n\n- Express\n- Core\n\nFilterable Table\n\nSet render.DataTable(filters=True) to add a row of filter options to the header row. Users can interact with these options to filter the table.\n\n- Express\n- Core\n\nEdit Table Cells\n\nSet editable=True to be able to edit cell contents without re-rendering the data frame.\n\n- Express\n- Core\n\nUse Original Data\n\nThe reactive value .data() will reactively return the unaltered data.\n\n- Express\n- Core\n\nUse Edited Data\n\nThe reactive value .data_view() (or .data_view(selected=True)) will reactively return the edited data. The data will be updated as the user edits the table and the rows will be arranged to match the user‚Äôs sorting and filtering.\n\n- Express\n- Core\n\nSet Table Size\n\nSet the height and width parameters of render.DataTable() to constrain the output size of the table.\n\n- Express\n- Core\n\nStyling\n\nSet styles in render.DataGrid() to a customize the table display. styles can take a list of dictionaries where each dictionary represents a style to be applied to the table (and thus should have at least a style (or class) key to apply CSS styles or classes to the relevant cells). To scope the styling to particular cells, use the rows and cols keys (with 0-based indexing). Note that if both rows and cols are specified, the style will be applied only to the intersection of the specified rows and columns.\n\n- Express\n- Core\n\nUpdate Filters\n\nThe data frame filters can be programmatically updated using the .update_filter() method. It takes a list of column filters to apply to the data frame. Each column filter is a dictionary with the following keys: col and value. The col key is the column index to filter on, and the value key is the value to filter for. The value key can be a single value for string columns or a list of values to filter for numeric columns. Note, to not set a minimum or maximum value for a numeric column, you can provide a None value. To reset filters, provide None for the filters (.update_filter(None)).\n\n- Express\n- Core\n\nUpdate Sorting\n\nThe data frame sorting can be programmatically updated using the .update_sort() method. It takes a list of sorting information or column numbers to apply to the data frame. When using a number, the default sorting direction will be applied. When providing a sorting info object, col and desc describe the column index and whether or not the sorting direction is descending. To reset the sorting, provide None for the sorting information (.update_sort(None)).\n\n- Express\n- Core\n\nUpdate Row Selection\n\nThe selected rows can be programmatically updated using the .update_cell_selection() method. .update_cell_select() takes one argument, selection, which should be a dictionary specifying type, which can be either row (for a single row) or rows (for multiple rows), and row, a list of the row indices to select. Note that you will also need to set selection_mode in render.DataTable() to \"row\" or \"rows\", since it is \"none\" by default.\n\n- Express\n- Core\n\nCustomize Summary Statement\n\nSet summary in render.DataGrid() to False to remove the statement ‚ÄúViewing rows 1 through 10 of 20‚Äù. Set it to a string template containing {start}, {end}, and {total} tokens, to customize the message.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataTable(penguins)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataTable(penguins)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame  \ndef penguins_df():\n    return render.DataTable(penguins)  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame  \ndef penguins_df():\n    return render.DataTable(penguins)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataTable(penguins)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  \n)\n\ndef server(input, output, session):\n    @render.data_frame  \n    def penguins_df():\n        return render.DataTable(penguins)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.ui\ndef rows():\n    rows = penguins_df.cell_selection()[\"rows\"]  \n    selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n    return f\"Rows selected: {selected}\"\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins, selection_mode=\"rows\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.ui\ndef rows():\n    rows = penguins_df.cell_selection()[\"rows\"]  \n    selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n    return f\"Rows selected: {selected}\"\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins, selection_mode=\"rows\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_ui(\"rows\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, selection_mode=\"rows\")  \n\n    @render.ui\n    def rows():\n        rows = penguins_df.cell_selection()[\"rows\"]  \n        selected = \", \".join(str(i) for i in sorted(rows)) if rows else \"None\"\n        return f\"Rows selected: {selected}\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins, filters=True)  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins, filters=True)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, filters=True)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(\n        penguins,\n        editable=True,  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(\n        penguins,\n        editable=True,  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins,\n            editable=True,  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data()  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data()  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins)\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data()  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the selected data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data_view(selected=True)  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins, selection_mode=\"rows\")",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\"The shape of the selected data frame is :\"\n\n@render.code\ndef penguins_shape():\n    data = penguins_df.data_view(selected=True)  \n    return data.shape\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins, selection_mode=\"rows\")",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    \"The shape of the selected data frame is :\",\n    ui.output_code(\"penguins_shape\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, selection_mode=\"rows\")\n\n    @render.code\n    def penguins_shape():\n        data = penguins_df.data_view(selected=True)  \n        return data.shape\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins, width=\"300px\", height=\"250px\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins, width=\"300px\", height=\"250px\")  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, width=\"300px\", height=\"250px\")  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins: pd.DataFrame = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(\n        penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n        # penguins,\n        styles=[  \n            # Center the text of each cell (using Bootstrap utility class) \n            {  \n                \"class\": \"text-center\",  \n            },  \n            # Bold the first column \n            {  \n                \"cols\": [0],  \n                \"style\": {\"font-weight\": \"bold\"},  \n            },  \n            # Highlight the penguin colors \n            {\n                \"rows\": [0, 1],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#ffdbaf\"},  \n            },  \n            {  \n                \"rows\": [2, 3],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#b1d6d6\"},  \n            },  \n            {  \n                \"rows\": [4, 5],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#d6a9f2\"},  \n            },  \n        ],  \n    )",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins: pd.DataFrame = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(\n        penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n        # penguins,\n        styles=[  \n            # Center the text of each cell (using Bootstrap utility class) \n            {  \n                \"class\": \"text-center\",  \n            },  \n            # Bold the first column \n            {  \n                \"cols\": [0],  \n                \"style\": {\"font-weight\": \"bold\"},  \n            },  \n            # Highlight the penguin colors \n            {\n                \"rows\": [0, 1],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#ffdbaf\"},  \n            },  \n            {  \n                \"rows\": [2, 3],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#b1d6d6\"},  \n            },  \n            {  \n                \"rows\": [4, 5],  \n                \"cols\": [0],  \n                \"style\": {\"background-color\": \"#d6a9f2\"},  \n            },  \n        ],  \n    )",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "import pandas as pd\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins.iloc[[0, 1, 200, 201, 300, 301], :],\n            styles=[  \n                # Center the text of each cell (using Bootstrap utility class) \n                {  \n                    \"class\": \"text-center\",  \n                },  \n                # Bold the first column \n                {  \n                    \"cols\": [0],  \n                    \"style\": {\"font-weight\": \"bold\"},  \n                },  \n                # Highlight the penguin colors \n                {\n                    \"rows\": [0, 1],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#ffdbaf\"},  \n                },  \n                {  \n                    \"rows\": [2, 3],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#b1d6d6\"},  \n                },  \n                {  \n                    \"rows\": [4, 5],  \n                    \"cols\": [0],  \n                    \"style\": {\"background-color\": \"#d6a9f2\"},  \n                },  \n            ],  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_filters\", \"Update filters\")\nui.input_action_button(\"reset_filters\", \"Reset filters\")\n\nui.h5(\"Current filters: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.filter()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  \n\n@reactive.effect\n@reactive.event(input.update_filters)\nasync def _():\n    await penguins_df.update_filter(  \n        [  \n            # Set partial match \n            {\"col\": 0, \"value\": \"Gen\"},  \n            # Set min value \n            {\"col\": 2, \"value\": (50, None)},  \n            # Set max value \n            {\"col\": 3, \"value\": (None, 17)},  \n            # Set range \n            {\"col\": 4, \"value\": (220, 225)},  \n        ],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_filters)\nasync def _():\n    await penguins_df.update_filter(None)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_filters\", \"Update filters\")\nui.input_action_button(\"reset_filters\", \"Reset filters\")\n\nui.h5(\"Current filters: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.filter()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataGrid(penguins, filters=True)  \n\n@reactive.effect\n@reactive.event(input.update_filters)\nasync def _():\n    await penguins_df.update_filter(  \n        [  \n            # Set partial match \n            {\"col\": 0, \"value\": \"Gen\"},  \n            # Set min value \n            {\"col\": 2, \"value\": (50, None)},  \n            # Set max value \n            {\"col\": 3, \"value\": (None, 17)},  \n            # Set range \n            {\"col\": 4, \"value\": (220, 225)},  \n        ],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_filters)\nasync def _():\n    await penguins_df.update_filter(None)  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_filters\", \"Update filters\"),\n    ui.input_action_button(\"reset_filters\", \"Reset filters\"),\n    ui.h5(\"Current filters: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_filter\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_filter():\n        return penguins_df.filter()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins, filters=True)  \n\n    @reactive.effect\n    @reactive.event(input.update_filters)\n    async def _():\n        await penguins_df.update_filter(  \n            [  \n                # Set partial match \n                {\"col\": 0, \"value\": \"Gen\"},  \n                # Set min value \n                {\"col\": 2, \"value\": (50, None)},  \n                # Set max value \n                {\"col\": 3, \"value\": (None, 17)},  \n                # Set range \n                {\"col\": 4, \"value\": (220, 225)},  \n            ],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_filters)\n    async def _():\n        await penguins_df.update_filter(None)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_sorting\", \"Update sorting\")\nui.input_action_button(\"reset_sorting\", \"Reset sorting\")\n\nui.h5(\"Current sorting: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.sort()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins)\n\n@reactive.effect\n@reactive.event(input.update_sorting)\nasync def _():\n    await penguins_df.update_sort(  \n        [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_sorting)\nasync def _():\n    await penguins_df.update_sort([])  ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_sorting\", \"Update sorting\")\nui.input_action_button(\"reset_sorting\", \"Reset sorting\")\n\nui.h5(\"Current sorting: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():\n    return penguins_df.sort()  \n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(penguins)\n\n@reactive.effect\n@reactive.event(input.update_sorting)\nasync def _():\n    await penguins_df.update_sort(  \n        [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n    )  \n\n@reactive.effect\n@reactive.event(input.reset_sorting)\nasync def _():\n    await penguins_df.update_sort([])  ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_sorting\", \"Update sorting\"),\n    ui.input_action_button(\"reset_sorting\", \"Reset sorting\"),\n    ui.h5(\"Current sorting: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_sort\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_sort():\n        return penguins_df.sort()  \n\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(penguins)\n\n    @reactive.effect\n    @reactive.event(input.update_sorting)\n    async def _():\n        await penguins_df.update_sort(  \n            [1, 0, {\"col\": 6, \"desc\": False}, 7],  \n        )  \n\n    @reactive.effect\n    @reactive.event(input.reset_sorting)\n    async def _():\n        await penguins_df.update_sort([])  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataTable(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataTable(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_selection\", \"Update row selection\")\nui.input_action_button(\"reset_selection\", \"Reset row selection\")\n\nui.h5(\"Current selection: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():  \n    return penguins_df.cell_selection()[\"rows\"]  \n\n@render.data_frame\ndef penguins_df():  \n    return render.DataTable(penguins, selection_mode=\"rows\")  \n\n@reactive.effect \n@reactive.event(input.update_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]})  \n\n@reactive.effect\n@reactive.event(input.reset_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   ",
      "from palmerpenguins import load_penguins\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\nui.input_action_button(\"update_selection\", \"Update row selection\")\nui.input_action_button(\"reset_selection\", \"Reset row selection\")\n\nui.h5(\"Current selection: \", {\"class\": \"pt-2\"})\n\n@render.code\ndef _():  \n    return penguins_df.cell_selection()[\"rows\"]  \n\n@render.data_frame\ndef penguins_df():  \n    return render.DataTable(penguins, selection_mode=\"rows\")  \n\n@reactive.effect \n@reactive.event(input.update_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]})  \n\n@reactive.effect\n@reactive.event(input.reset_selection)\nasync def _():  \n    await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   ",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataTable(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, reactive, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.input_action_button(\"update_selection\", \"Update selection\"),\n    ui.input_action_button(\"reset_selection\", \"Reset selection\"),\n    ui.h5(\"Current selection: \", {\"class\": \"pt-2\"}),\n    ui.output_code(\"penguins_selection\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n\n    @render.code\n    def penguins_selection():\n        return penguins_df.cell_selection()[\"rows\"] \n\n    @render.data_frame\n    def penguins_df():  \n        return render.DataTable(penguins, selection_mode=\"rows\")  \n\n    @reactive.effect  \n    @reactive.event(input.update_selection) \n    async def _():   \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": [1, 2, 8]}) \n    \n    @reactive.effect\n    @reactive.event(input.reset_selection)\n    async def _():  \n        await penguins_df.update_cell_selection({\"type\": \"row\", \"rows\": []})   \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(\n        penguins,\n        summary=\"Viendo filas {start} a {end} de {total}\",  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n@render.data_frame\ndef penguins_df():\n    return render.DataTable(\n        penguins,\n        summary=\"Viendo filas {start} a {end} de {total}\",  \n    )",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)",
      "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),\n)\n\ndef server(input, output, session):\n    @render.data_frame\n    def penguins_df():\n        return render.DataTable(\n            penguins,\n            summary=\"Viendo filas {start} a {end} de {total}\",  \n        )\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_outputs_image_index_html",
    "url": "components/outputs/image/index.html",
    "title": "Image ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Image\n\nImage\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_image ui.output_image(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=False)\n- @render.image render.image(_fn=None, *, delete_file=False)\n\nui.output_image ui.output_image(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=False)\n\n@render.image render.image(_fn=None, *, delete_file=False)\n\nDetails\n\nTo make a reactive image, follow three steps:\n\n- Call ui.output_image() in the app_ui section of your app to create a div in which to display the image. Set the id argument of ui.output_image() to a unique value. Optionally, set ui.output_image(inline=True) to place the image inline with the text or elements that precede it. Optionally, set ui.output_image(Fill=True) to allow the image to grow or shrink to fill its container as the app is resized.\n- Within your app‚Äôs server function, define a new function whose name matches the id used above. Shiny will rerun this function whenever it needs to build or update the output with the matching id. The function should return the image to display as a dictionary with the following keys: src - The file path to the image, relative to the app directory. Required. height- The image height in CSS, e.g. ‚Äò100%‚Äô or ‚Äò600px‚Äô. At least one of height or width must be provided. width - The image width in CSS, e.g. ‚Äò100%‚Äô or ‚Äò600px‚Äô. At least one of height or width must be provided. alt - Alt text to display for the image. Optional. style - A CSS style tag for the image. Optional.\n- Decorate the function with @render.image. Use @render.image(delete_file=True) to delete the image from the server after it has been rendered.\n\nCall ui.output_image() in the app_ui section of your app to create a div in which to display the image.\n\n- Set the id argument of ui.output_image() to a unique value.\n- Optionally, set ui.output_image(inline=True) to place the image inline with the text or elements that precede it.\n- Optionally, set ui.output_image(Fill=True) to allow the image to grow or shrink to fill its container as the app is resized.\n\nWithin your app‚Äôs server function, define a new function whose name matches the id used above. Shiny will rerun this function whenever it needs to build or update the output with the matching id. The function should return the image to display as a dictionary with the following keys:\n\n- src - The file path to the image, relative to the app directory. Required.\n- height- The image height in CSS, e.g. ‚Äò100%‚Äô or ‚Äò600px‚Äô. At least one of height or width must be provided.\n- width - The image width in CSS, e.g. ‚Äò100%‚Äô or ‚Äò600px‚Äô. At least one of height or width must be provided.\n- alt - Alt text to display for the image. Optional.\n- style - A CSS style tag for the image. Optional.\n\nDecorate the function with @render.image. Use @render.image(delete_file=True) to delete the image from the server after it has been rendered.\n\nYou can use an image as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, follow the instructions provided for plots as inputs.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n# ruff: noqa\n## file: app.py\nfrom shiny import App, render, ui\nfrom shiny.types import ImgData\nfrom pathlib import Path\nhere = Path(__file__).parent\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"show\", \"Show image?\", value = True),\n    ui.output_image(\"image\") \n)\n\ndef server(input, output, session):\n    @render.image \n    def image():\n        img = {\"src\": here/\"shiny.png\", \"width\": \"100px\"} \n        return img if input.show() else None\n\napp = App(app_ui, server)\n\n## file: shiny.png\n## type: binary\n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",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\n# ruff: noqa\n## file: app.py\nfrom shiny import App, render, ui\nfrom shiny.types import ImgData\nfrom pathlib import Path\nhere = Path(__file__).parent\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"show\", \"Show image?\", value = True),\n    ui.output_image(\"image\") \n)\n\ndef server(input, output, session):\n    @render.image \n    def image():\n        img = {\"src\": here/\"shiny.png\", \"width\": \"100px\"} \n        return img if input.show() else None\n\napp = App(app_ui, server)\n\n## file: shiny.png\n## type: binary\n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",
      "from pathlib import Path\n\nfrom shiny.express import input, render, ui\n\nhere = Path(__file__).parent\n\nui.input_checkbox(\"show\", \"Show image?\", value=True)\n\n@render.image  \ndef image():\n    img = {\"src\": here / \"shiny.png\", \"width\": \"100px\"}  \n    return img if input.show() else None",
      "from pathlib import Path\n\nfrom shiny.express import input, render, ui\n\nhere = Path(__file__).parent\n\nui.input_checkbox(\"show\", \"Show image?\", value=True)\n\n@render.image  \ndef image():\n    img = {\"src\": here / \"shiny.png\", \"width\": \"100px\"}  \n    return img if input.show() else None",
      "from pathlib import Path\n\nfrom shiny import App, render, ui\n\nhere = Path(__file__).parent\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"show\", \"Show image?\", value=True),\n    ui.output_image(\"image\"),  \n)\n\ndef server(input, output, session):\n    @render.image  \n    def image():\n        img = {\"src\": here / \"shiny.png\", \"width\": \"100px\"}  \n        return img if input.show() else None\n\napp = App(app_ui, server)",
      "from pathlib import Path\n\nfrom shiny import App, render, ui\n\nhere = Path(__file__).parent\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"show\", \"Show image?\", value=True),\n    ui.output_image(\"image\"),  \n)\n\ndef server(input, output, session):\n    @render.image  \n    def image():\n        img = {\"src\": here / \"shiny.png\", \"width\": \"100px\"}  \n        return img if input.show() else None\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_outputs_map-ipyleaflet_index_html",
    "url": "components/outputs/map-ipyleaflet/index.html",
    "title": "Map (ipyleaflet) ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Map (ipyleaflet)\n\nMap (ipyleaflet)\n\n- Express\n- Core\n\nRelevant Functions\n\n- shinywidgets.output_widget\n- shinywidgets.register_widget\n\nshinywidgets.output_widget\n\nshinywidgets.register_widget\n\nDetails\n\nipyleaflet allows us to create interactive maps via ipywidgets.\n\nTo insert an ipyleaflet map do the following tasks:\n\n- Add shinywidgets.output_widget() to the UI of your app to create a div in which to display the map. Where you call this function will determine where the map will appear within the layout of the app.\n- Provide an argument to the id parameter in the shinywidgets.output_widget() function call. This argument will be used to identify the map in the server function.\n- Within the server() function, create your ipyleaflet map and assign it to a variable. Your map does not need to be created within a nested function in server() like many other shiny for python components.\n- Register your map with shiny using shinywidgets.register_widget() by passing in the id of the map and the map variable.\n\nAdd shinywidgets.output_widget() to the UI of your app to create a div in which to display the map. Where you call this function will determine where the map will appear within the layout of the app.\n\nProvide an argument to the id parameter in the shinywidgets.output_widget() function call. This argument will be used to identify the map in the server function.\n\nWithin the server() function, create your ipyleaflet map and assign it to a variable. Your map does not need to be created within a nested function in server() like many other shiny for python components.\n\nRegister your map with shiny using shinywidgets.register_widget() by passing in the id of the map and the map variable.\n\nVisit shiny.posit.co/py/docs/ipywidgets.html to learn more about using ipywidgets with Shiny.\n\nVariations\n\nGeoJSON and Markers\n\nRead in country boundaries from a GeoJSON file and add markers to the map.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 410\n\nfrom ipyleaflet import Map  \nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\napp_ui = ui.page_fluid(output_widget(\"map\"))  \n\ndef server(input, output, session):\n    @render_widget  \n    def map():\n        return Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 410\n\nfrom ipyleaflet import Map  \nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\napp_ui = ui.page_fluid(output_widget(\"map\"))  \n\ndef server(input, output, session):\n    @render_widget  \n    def map():\n        return Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  \n\napp = App(app_ui, server)",
      "from ipyleaflet import Map  \nfrom shiny.express import ui\nfrom shinywidgets import render_widget  \n\nui.h2(\"An ipyleaflet Map\")\n\n@render_widget  \ndef map():\n    return Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  ",
      "from ipyleaflet import Map  \nfrom shiny.express import ui\nfrom shinywidgets import render_widget  \n\nui.h2(\"An ipyleaflet Map\")\n\n@render_widget  \ndef map():\n    return Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  ",
      "from ipyleaflet import Map  \nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\napp_ui = ui.page_fluid(output_widget(\"map\"))  \n\ndef server(input, output, session):\n    @render_widget  \n    def map():\n        return Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  \n\napp = App(app_ui, server)",
      "from ipyleaflet import Map  \nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\napp_ui = ui.page_fluid(output_widget(\"map\"))  \n\ndef server(input, output, session):\n    @render_widget  \n    def map():\n        return Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\n# ruff: noqa\n## file: app.py\n# example and data from:\n# https://ipyleaflet.readthedocs.io/en/latest/layers/geo_json.html\n# https://ipyleaflet.readthedocs.io/en/latest/layers/marker.html\nimport json\nimport pathlib\nimport random\n\nfrom ipyleaflet import GeoJSON, Map, Marker  \nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\nhere = pathlib.Path(__file__)\nwith open(here.parent / \"europe_110.geo.json\", \"r\") as f:\n    country_boundaries = json.load(f)\n\ndef random_color(feature):\n    return {\n        \"color\": \"black\",\n        \"fillColor\": random.choice([\"red\", \"yellow\", \"green\", \"orange\"]),\n    }\n\napp_ui = ui.page_fluid(\n    ui.h2(\"An ipyleaflet Map\"),\n    output_widget(\"map\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def map():\n        map = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  \n\n        geo_json = GeoJSON(  \n            data=country_boundaries,  \n            style={  \n                \"opacity\": 1,  \n                \"dashArray\": \"9\",  \n                \"fillOpacity\": 0.1,  \n                \"weight\": 1,  \n            },\n            hover_style={\"color\": \"white\", \"dashArray\": \"0\", \"fillOpacity\": 0.5},  \n            style_callback=random_color,  \n        )  \n        map.add_layer(geo_json)  \n\n        point = Marker(location=(52.204793, 0.121558), draggable=False)  \n        map.add_layer(point)  \n\n        return map  \n\napp = App(app_ui, server)\n\n## file: europe_110.geo.json\n{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Albania\",\"sov_a3\":\"ALB\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Albania\",\"adm0_a3\":\"ALB\",\"geou_dif\":0,\"geounit\":\"Albania\",\"gu_a3\":\"ALB\",\"su_dif\":0,\"subunit\":\"Albania\",\"su_a3\":\"ALB\",\"brk_diff\":0,\"name\":\"Albania\",\"name_long\":\"Albania\",\"brk_a3\":\"ALB\",\"brk_name\":\"Albania\",\"brk_group\":null,\"abbrev\":\"Alb.\",\"postal\":\"AL\",\"formal_en\":\"Republic of Albania\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Albania\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":4,\"mapcolor9\":1,\"mapcolor13\":6,\"pop_est\":3639453,\"gdp_md_est\":21810,\"pop_year\":-99,\"lastcensus\":2001,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"4. Lower middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"AL\",\"iso_a3\":\"ALB\",\"iso_n3\":\"008\",\"un_a3\":\"008\",\"wb_a2\":\"AL\",\"wb_a3\":\"ALB\",\"woe_id\":-99,\"adm0_a3_is\":\"ALB\",\"adm0_a3_us\":\"ALB\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.59024743010491,41.855404161133606],[20.463175083099202,41.51508901627534],[20.605181919037364,41.086226304685226],[21.0200403174764,40.84272695572588],[20.999989861747224,40.58000397395398],[20.674996779063633,40.43499990494303],[20.615000441172754,40.11000682225938],[20.15001590341052,39.62499766698397],[19.980000441170148,39.69499339452341],[19.960001661873207,39.91500580500605],[19.406081984136733,40.250773423822466],[19.319058872157143,40.72723012955356],[19.40354983895429,41.40956574153546],[19.540027296637106,41.71998607031276],[19.37176883309496,41.877547512370654],[19.304486118250793,42.19574514420782],[19.73805138517963,42.68824738216557],[19.801613396898688,42.50009349219084],[20.0707,42.58863],[20.283754510181893,42.32025950781508],[20.52295,42.21787],[20.59024743010491,41.855404161133606]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":4,\"sovereignt\":\"Austria\",\"sov_a3\":\"AUT\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Austria\",\"adm0_a3\":\"AUT\",\"geou_dif\":0,\"geounit\":\"Austria\",\"gu_a3\":\"AUT\",\"su_dif\":0,\"subunit\":\"Austria\",\"su_a3\":\"AUT\",\"brk_diff\":0,\"name\":\"Austria\",\"name_long\":\"Austria\",\"brk_a3\":\"AUT\",\"brk_name\":\"Austria\",\"brk_group\":null,\"abbrev\":\"Aust.\",\"postal\":\"A\",\"formal_en\":\"Republic of Austria\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Austria\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":1,\"mapcolor9\":3,\"mapcolor13\":4,\"pop_est\":8210281,\"gdp_md_est\":329500,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"AT\",\"iso_a3\":\"AUT\",\"iso_n3\":\"040\",\"un_a3\":\"040\",\"wb_a2\":\"AT\",\"wb_a3\":\"AUT\",\"woe_id\":-99,\"adm0_a3_is\":\"AUT\",\"adm0_a3_us\":\"AUT\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[16.979666782304037,48.123497015976305],[16.90375410326726,47.71486562762833],[16.340584344150415,47.71290192320123],[16.534267612380376,47.49617096616912],[16.202298211337364,46.85238597267696],[16.011663852612656,46.6836107448117],[15.137091912504985,46.65870270444703],[14.63247155117483,46.43181732846955],[13.806475457421527,46.509306138691215],[12.376485223040817,46.76755910906985],[12.153088006243054,47.11539317482645],[11.16482791509327,46.94157949481273],[11.048555942436536,46.75135854754634],[10.44270145024663,46.89354625099743],[9.932448357796659,46.92072805438296],[9.479969516649021,47.102809963563374],[9.632931756232978,47.34760122332999],[9.59422610844635,47.52505809182027],[9.89606814946319,47.580196845075704],[10.402083774465211,47.30248769793916],[10.544504021861627,47.56639923765377],[11.426414015354737,47.523766181012974],[12.141357456112788,47.703083401065776],[12.620759718484493,47.67238760028441],[12.932626987365948,47.467645575544],[13.02585127122049,47.63758352313583],[12.884102817443903,48.28914581968792],[13.243357374737,48.416114813829054],[13.595945672264437,48.87717194273715],[14.338897739324722,48.55530528420721],[14.901447381254057,48.964401760445824],[15.253415561593982,49.03907420510758],[16.02964725105022,48.73389903420793],[16.499282667718774,48.78580801044511],[16.960288120194576,48.5969823268506],[16.879982944413,48.47001333270947],[16.979666782304037,48.123497015976305]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":4,\"sovereignt\":\"Bulgaria\",\"sov_a3\":\"BGR\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Bulgaria\",\"adm0_a3\":\"BGR\",\"geou_dif\":0,\"geounit\":\"Bulgaria\",\"gu_a3\":\"BGR\",\"su_dif\":0,\"subunit\":\"Bulgaria\",\"su_a3\":\"BGR\",\"brk_diff\":0,\"name\":\"Bulgaria\",\"name_long\":\"Bulgaria\",\"brk_a3\":\"BGR\",\"brk_name\":\"Bulgaria\",\"brk_group\":null,\"abbrev\":\"Bulg.\",\"postal\":\"BG\",\"formal_en\":\"Republic of Bulgaria\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Bulgaria\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":5,\"mapcolor9\":1,\"mapcolor13\":8,\"pop_est\":7204687,\"gdp_md_est\":93750,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"BG\",\"iso_a3\":\"BGR\",\"iso_n3\":\"100\",\"un_a3\":\"100\",\"wb_a2\":\"BG\",\"wb_a3\":\"BGR\",\"woe_id\":-99,\"adm0_a3_is\":\"BGR\",\"adm0_a3_us\":\"BGR\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":8,\"long_len\":8,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[22.65714969248299,44.23492300066128],[22.944832391051847,43.82378530534713],[23.332302280376325,43.897010809904714],[24.100679152124172,43.74105133724785],[25.569271681426926,43.68844472917472],[26.065158725699746,43.94349376075127],[27.242399529740908,44.175986029632405],[27.970107049275075,43.81246816667522],[28.558081495891997,43.70746165625813],[28.03909508638472,43.293171698574184],[27.67389773937805,42.57789236100622],[27.99672041190539,42.00735871028779],[27.13573937349048,42.14148489030134],[26.1170418637208,41.82690460872456],[26.106138136507212,41.32889883072778],[25.197201368925448,41.23448598893053],[24.492644891058035,41.583896185872035],[23.692073601992348,41.309080918943856],[22.952377150166452,41.33799388281115],[22.88137373219743,41.99929718685026],[22.380525750424592,42.32025950781509],[22.54501183440962,42.46136200618804],[22.43659467946128,42.580321153323936],[22.60480146657133,42.898518785161144],[22.986018507588483,43.211161200526966],[22.50015669118028,43.64281443946099],[22.410446404721597,44.008063462899955],[22.65714969248299,44.23492300066128]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Belgium\",\"sov_a3\":\"BEL\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Belgium\",\"adm0_a3\":\"BEL\",\"geou_dif\":0,\"geounit\":\"Belgium\",\"gu_a3\":\"BEL\",\"su_dif\":0,\"subunit\":\"Belgium\",\"su_a3\":\"BEL\",\"brk_diff\":0,\"name\":\"Belgium\",\"name_long\":\"Belgium\",\"brk_a3\":\"BEL\",\"brk_name\":\"Belgium\",\"brk_group\":null,\"abbrev\":\"Belg.\",\"postal\":\"B\",\"formal_en\":\"Kingdom of Belgium\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Belgium\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":2,\"mapcolor9\":1,\"mapcolor13\":8,\"pop_est\":10414336,\"gdp_md_est\":389300,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"BE\",\"iso_a3\":\"BEL\",\"iso_n3\":\"056\",\"un_a3\":\"056\",\"wb_a2\":\"BE\",\"wb_a3\":\"BEL\",\"woe_id\":-99,\"adm0_a3_is\":\"BEL\",\"adm0_a3_us\":\"BEL\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[3.314971144228537,51.345780951536085],[4.047071160507528,51.26725861266857],[4.973991326526914,51.47502370869813],[5.606975945670001,51.03729848896978],[6.15665815595878,50.80372101501058],[6.043073357781111,50.128051662794235],[5.782417433300907,50.09032786722122],[5.674051954784829,49.529483547557504],[4.79922163251581,49.985373033236385],[4.286022983425084,49.907496649772554],[3.588184441755686,50.37899241800358],[3.123251580425801,50.780363267614575],[2.658422071960274,50.796848049515745],[2.513573032246143,51.14850617126183],[3.314971144228537,51.345780951536085]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Bosnia and Herzegovina\",\"sov_a3\":\"BIH\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Bosnia and Herzegovina\",\"adm0_a3\":\"BIH\",\"geou_dif\":0,\"geounit\":\"Bosnia and Herzegovina\",\"gu_a3\":\"BIH\",\"su_dif\":0,\"subunit\":\"Bosnia and Herzegovina\",\"su_a3\":\"BIH\",\"brk_diff\":0,\"name\":\"Bosnia and Herz.\",\"name_long\":\"Bosnia and Herzegovina\",\"brk_a3\":\"BIH\",\"brk_name\":\"Bosnia and Herz.\",\"brk_group\":null,\"abbrev\":\"B.H.\",\"postal\":\"BiH\",\"formal_en\":\"Bosnia and Herzegovina\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Bosnia and Herzegovina\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":1,\"mapcolor9\":1,\"mapcolor13\":2,\"pop_est\":4613414,\"gdp_md_est\":29700,\"pop_year\":-99,\"lastcensus\":1991,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"BA\",\"iso_a3\":\"BIH\",\"iso_n3\":\"070\",\"un_a3\":\"070\",\"wb_a2\":\"BA\",\"wb_a3\":\"BIH\",\"woe_id\":-99,\"adm0_a3_is\":\"BIH\",\"adm0_a3_us\":\"BIH\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":16,\"long_len\":22,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[19.00548628101012,44.86023366960916],[19.36803,44.863],[19.11761,44.42307000000011],[19.59976,44.03847],[19.454,43.56810000000013],[19.21852,43.52384],[19.03165,43.43253],[18.70648,43.20011],[18.56,42.65],[17.674921502358984,43.02856252702361],[17.297373488034452,43.44634064388737],[16.91615644701733,43.66772247982567],[16.456442905348865,44.04123973243128],[16.23966027188453,44.35114329688571],[15.750026075918981,44.818711656262565],[15.959367303133376,45.23377676043094],[16.318156772535872,45.00412669532591],[16.534939406000206,45.21160757097772],[17.002146030351014,45.23377676043094],[17.861783481526402,45.067740383477144],[18.553214145591653,45.08158966733146],[19.00548628101012,44.86023366960916]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":4,\"sovereignt\":\"Belarus\",\"sov_a3\":\"BLR\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Belarus\",\"adm0_a3\":\"BLR\",\"geou_dif\":0,\"geounit\":\"Belarus\",\"gu_a3\":\"BLR\",\"su_dif\":0,\"subunit\":\"Belarus\",\"su_a3\":\"BLR\",\"brk_diff\":0,\"name\":\"Belarus\",\"name_long\":\"Belarus\",\"brk_a3\":\"BLR\",\"brk_name\":\"Belarus\",\"brk_group\":null,\"abbrev\":\"Bela.\",\"postal\":\"BY\",\"formal_en\":\"Republic of Belarus\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Belarus\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":1,\"mapcolor9\":5,\"mapcolor13\":11,\"pop_est\":9648533,\"gdp_md_est\":114100,\"pop_year\":-99,\"lastcensus\":2009,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"BY\",\"iso_a3\":\"BLR\",\"iso_n3\":\"112\",\"un_a3\":\"112\",\"wb_a2\":\"BY\",\"wb_a3\":\"BLR\",\"woe_id\":-99,\"adm0_a3_is\":\"BLR\",\"adm0_a3_us\":\"BLR\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[23.48412763844985,53.91249766704114],[24.450683628037037,53.905702216194754],[25.536353794056993,54.28242340760253],[25.7684326514798,54.84696259217509],[26.58827924979039,55.16717560487167],[26.494331495883756,55.615106919977634],[27.10245975109453,55.783313707087686],[28.176709425577997,56.169129950578814],[29.229513380660308,55.91834422466636],[29.371571893030673,55.670090643936184],[29.896294386522356,55.78946320253041],[30.87390913262001,55.55097646750341],[30.971835971813135,55.08154775656404],[30.75753380709872,54.81177094178432],[31.38447228366374,54.157056382862436],[31.79142418796224,53.974638576872124],[31.731272820774507,53.79402944601202],[32.405598585751164,53.61804535584204],[32.69364301934604,53.35142080343212],[32.30451948418823,53.13272614197291],[31.49764367038293,53.1674268662569],[31.305200636528014,53.07399587667321],[31.54001834486226,52.74205231384636],[31.785998162571587,52.101677964885454],[30.927549269338982,52.04235342061439],[30.619454380014844,51.822806098022376],[30.555117221811457,51.31950348571566],[30.157363722460897,51.41613841410147],[29.254938185347925,51.368234361366895],[28.992835320763533,51.602044379271476],[28.61761274589225,51.42771393493484],[28.24161502453657,51.57222707783907],[27.454066196408434,51.59230337178447],[26.337958611768556,51.83228872334793],[25.32778771332701,51.91065603291855],[24.553106316839518,51.888461005249184],[24.00507775238421,51.61744395609446],[23.527070753684374,51.57845408793024],[23.508002150168693,52.02364655212473],[23.199493849386187,52.48697744405367],[23.79919884613338,52.69109935160657],[23.80493493011778,53.089731350306074],[23.527535841575002,53.470121568406555],[23.48412763844985,53.91249766704114]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":4,\"sovereignt\":\"Switzerland\",\"sov_a3\":\"CHE\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Switzerland\",\"adm0_a3\":\"CHE\",\"geou_dif\":0,\"geounit\":\"Switzerland\",\"gu_a3\":\"CHE\",\"su_dif\":0,\"subunit\":\"Switzerland\",\"su_a3\":\"CHE\",\"brk_diff\":0,\"name\":\"Switzerland\",\"name_long\":\"Switzerland\",\"brk_a3\":\"CHE\",\"brk_name\":\"Switzerland\",\"brk_group\":null,\"abbrev\":\"Switz.\",\"postal\":\"CH\",\"formal_en\":\"Swiss Confederation\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Switzerland\",\"name_alt\":null,\"mapcolor7\":5,\"mapcolor8\":2,\"mapcolor9\":7,\"mapcolor13\":3,\"pop_est\":7604467,\"gdp_md_est\":316700,\"pop_year\":-99,\"lastcensus\":2010,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"CH\",\"iso_a3\":\"CHE\",\"iso_n3\":\"756\",\"un_a3\":\"756\",\"wb_a2\":\"CH\",\"wb_a3\":\"CHE\",\"woe_id\":-99,\"adm0_a3_is\":\"CHE\",\"adm0_a3_us\":\"CHE\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":11,\"long_len\":11,\"abbrev_len\":6,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[9.59422610844635,47.52505809182027],[9.632931756232978,47.34760122332999],[9.479969516649021,47.102809963563374],[9.932448357796659,46.92072805438296],[10.44270145024663,46.89354625099743],[10.363378126678612,46.48357127540986],[9.922836541390382,46.31489940040919],[9.182881707403055,46.44021474871698],[8.966305779667806,46.03693187111119],[8.489952426801324,46.005150865251686],[8.31662967289438,46.16364248309086],[7.755992058959833,45.82449005795931],[7.273850945676656,45.776947740250776],[6.843592970414505,45.99114655210061],[6.500099724970426,46.42967275652944],[6.022609490593538,46.27298981382047],[6.037388950229001,46.725778713561866],[6.768713820023606,47.2877082383037],[6.736571079138059,47.541801255882845],[7.192202182655507,47.44976552997102],[7.466759067422231,47.62058197691181],[8.317301466514152,47.61357982033626],[8.522611932009767,47.83082754169129],[9.59422610844635,47.52505809182027]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Czech Republic\",\"sov_a3\":\"CZE\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Czech Republic\",\"adm0_a3\":\"CZE\",\"geou_dif\":0,\"geounit\":\"Czech Republic\",\"gu_a3\":\"CZE\",\"su_dif\":0,\"subunit\":\"Czech Republic\",\"su_a3\":\"CZE\",\"brk_diff\":0,\"name\":\"Czech Rep.\",\"name_long\":\"Czech Republic\",\"brk_a3\":\"CZE\",\"brk_name\":\"Czech Rep.\",\"brk_group\":null,\"abbrev\":\"Cz. Rep.\",\"postal\":\"CZ\",\"formal_en\":\"Czech Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Czech Republic\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":1,\"mapcolor9\":2,\"mapcolor13\":6,\"pop_est\":10211904,\"gdp_md_est\":265200,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"CZ\",\"iso_a3\":\"CZE\",\"iso_n3\":\"203\",\"un_a3\":\"203\",\"wb_a2\":\"CZ\",\"wb_a3\":\"CZE\",\"woe_id\":-99,\"adm0_a3_is\":\"CZE\",\"adm0_a3_us\":\"CZE\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":10,\"long_len\":14,\"abbrev_len\":8,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[16.960288120194576,48.5969823268506],[16.499282667718774,48.78580801044511],[16.02964725105022,48.73389903420793],[15.253415561593982,49.03907420510758],[14.901447381254057,48.964401760445824],[14.338897739324722,48.55530528420721],[13.595945672264437,48.87717194273715],[13.031328973043431,49.30706818297324],[12.521024204161193,49.547415269562734],[12.415190870827445,49.96912079528057],[12.240111118222558,50.266337795607285],[12.966836785543194,50.484076443069085],[13.338131951560285,50.73323436136435],[14.056227654688172,50.9269176295943],[14.307013380600637,51.117267767941414],[14.570718214586066,51.002339382524276],[15.01699588385867,51.10667409932158],[15.490972120839729,50.78472992614321],[16.23862674323857,50.69773265237984],[16.176253289462267,50.42260732685791],[16.719475945714436,50.21574656839354],[16.86876915860566,50.47397370055603],[17.55456709155112,50.36214590107642],[17.64944502123899,50.049038397819956],[18.392913852622172,49.98862864847075],[18.853144158613617,49.49622976337764],[18.554971144289482,49.495015367218784],[18.399993523846177,49.31500051533004],[18.170498488037964,49.271514797556435],[18.104972771891852,49.04398346617531],[17.913511590250465,48.996492824899086],[17.88648481616181,48.90347524677371],[17.545006951577108,48.80001902932537],[17.101984897538898,48.816968899117114],[16.960288120194576,48.5969823268506]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Germany\",\"sov_a3\":\"DEU\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Germany\",\"adm0_a3\":\"DEU\",\"geou_dif\":0,\"geounit\":\"Germany\",\"gu_a3\":\"DEU\",\"su_dif\":0,\"subunit\":\"Germany\",\"su_a3\":\"DEU\",\"brk_diff\":0,\"name\":\"Germany\",\"name_long\":\"Germany\",\"brk_a3\":\"DEU\",\"brk_name\":\"Germany\",\"brk_group\":null,\"abbrev\":\"Ger.\",\"postal\":\"D\",\"formal_en\":\"Federal Republic of Germany\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Germany\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":5,\"mapcolor9\":5,\"mapcolor13\":1,\"pop_est\":82329758,\"gdp_md_est\":2918000,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"1. Developed region: G7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"DE\",\"iso_a3\":\"DEU\",\"iso_n3\":\"276\",\"un_a3\":\"276\",\"wb_a2\":\"DE\",\"wb_a3\":\"DEU\",\"woe_id\":-99,\"adm0_a3_is\":\"DEU\",\"adm0_a3_us\":\"DEU\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[9.921906365609232,54.98310415304803],[9.9395797054529,54.596641954153256],[10.950112338920519,54.363607082733154],[10.93946699386845,54.00869334575259],[11.956252475643282,54.19648550070116],[12.518440382546714,54.470370591847995],[13.647467075259499,54.0755109727059],[14.119686313542559,53.75702912049104],[14.353315463934166,53.248171291713106],[14.074521111719434,52.98126251892535],[14.437599725002201,52.624850165408304],[14.685026482815715,52.089947414755216],[14.607098422919648,51.74518809671997],[15.016995883858783,51.10667409932171],[14.570718214586122,51.00233938252438],[14.307013380600665,51.11726776794137],[14.056227654688314,50.92691762959436],[13.338131951560399,50.73323436136428],[12.96683678554325,50.48407644306917],[12.240111118222671,50.26633779560723],[12.415190870827473,49.96912079528062],[12.521024204161336,49.54741526956275],[13.031328973043514,49.30706818297324],[13.595945672264577,48.877171942737164],[13.243357374737116,48.41611481382904],[12.884102817443875,48.28914581968786],[13.025851271220517,47.63758352313596],[12.932626987366064,47.467645575544],[12.620759718484521,47.672387600284424],[12.141357456112871,47.70308340106578],[11.426414015354851,47.52376618101306],[10.544504021861599,47.5663992376538],[10.402083774465325,47.30248769793917],[9.89606814946319,47.580196845075704],[9.594226108446378,47.5250580918202],[8.522611932009795,47.83082754169135],[8.317301466514095,47.61357982033627],[7.466759067422288,47.62058197691192],[7.593676385131062,48.33301911070373],[8.099278598674857,49.01778351500343],[6.65822960778371,49.20195831969164],[6.186320428094177,49.463802802114515],[6.242751092156993,49.90222565367873],[6.043073357781111,50.128051662794235],[6.15665815595878,50.80372101501058],[5.988658074577813,51.851615709025054],[6.589396599970826,51.852029120483394],[6.842869500362383,52.22844025329755],[7.092053256873896,53.144043280644894],[6.905139601274129,53.48216217713065],[7.100424838905269,53.69393219666267],[7.936239454793963,53.74829580343379],[8.121706170289485,53.52779246684429],[8.800734490604668,54.020785630908904],[8.57211795414537,54.39564647075406],[8.526229282270208,54.96274363872516],[9.282048780971138,54.83086538351631],[9.921906365609232,54.98310415304803]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":4,\"sovereignt\":\"Denmark\",\"sov_a3\":\"DN1\",\"adm0_dif\":1,\"level\":2,\"type\":\"Country\",\"admin\":\"Denmark\",\"adm0_a3\":\"DNK\",\"geou_dif\":0,\"geounit\":\"Denmark\",\"gu_a3\":\"DNK\",\"su_dif\":0,\"subunit\":\"Denmark\",\"su_a3\":\"DNK\",\"brk_diff\":0,\"name\":\"Denmark\",\"name_long\":\"Denmark\",\"brk_a3\":\"DNK\",\"brk_name\":\"Denmark\",\"brk_group\":null,\"abbrev\":\"Den.\",\"postal\":\"DK\",\"formal_en\":\"Kingdom of Denmark\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Denmark\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":1,\"mapcolor9\":3,\"mapcolor13\":12,\"pop_est\":5500510,\"gdp_md_est\":203600,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"DK\",\"iso_a3\":\"DNK\",\"iso_n3\":\"208\",\"un_a3\":\"208\",\"wb_a2\":\"DK\",\"wb_a3\":\"DNK\",\"woe_id\":-99,\"adm0_a3_is\":\"DNK\",\"adm0_a3_us\":\"DNK\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[12.690006137755631,55.609990953180784],[12.089991082414741,54.80001455343793],[11.043543328504228,55.364863796604254],[10.903913608451631,55.77995473898875],[12.370904168353292,56.111407375708836],[12.690006137755631,55.609990953180784]]],[[[10.912181837618363,56.458621324277914],[10.667803989309988,56.08138336854722],[10.369992710011985,56.19000722922473],[9.649984978889307,55.469999498102055],[9.921906365609175,54.98310415304806],[9.282048780971138,54.83086538351617],[8.526229282270236,54.96274363872499],[8.12031090661759,55.517722683323626],[8.08997684086225,56.5400117051376],[8.256581658571264,56.8099693874303],[8.543437534223386,57.110002753316905],[9.42446902836761,57.17206614849948],[9.775558709358563,57.44794078228966],[10.580005730846153,57.73001658795485],[10.546105991262692,57.215732733786155],[10.250000034230226,56.89001618105047],[10.369992710011985,56.609981594460834],[10.912181837618363,56.458621324277914]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Spain\",\"sov_a3\":\"ESP\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Spain\",\"adm0_a3\":\"ESP\",\"geou_dif\":0,\"geounit\":\"Spain\",\"gu_a3\":\"ESP\",\"su_dif\":0,\"subunit\":\"Spain\",\"su_a3\":\"ESP\",\"brk_diff\":0,\"name\":\"Spain\",\"name_long\":\"Spain\",\"brk_a3\":\"ESP\",\"brk_name\":\"Spain\",\"brk_group\":null,\"abbrev\":\"Sp.\",\"postal\":\"E\",\"formal_en\":\"Kingdom of Spain\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Spain\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":5,\"mapcolor9\":5,\"mapcolor13\":5,\"pop_est\":40525002,\"gdp_md_est\":1403000,\"pop_year\":-99,\"lastcensus\":2001,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"ES\",\"iso_a3\":\"ESP\",\"iso_n3\":\"724\",\"un_a3\":\"724\",\"wb_a2\":\"ES\",\"wb_a3\":\"ESP\",\"woe_id\":-99,\"adm0_a3_is\":\"ESP\",\"adm0_a3_us\":\"ESP\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":5,\"long_len\":5,\"abbrev_len\":3,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-9.034817674180246,41.880570583659676],[-8.984433152695672,42.59277517350627],[-9.392883673530648,43.0266246608127],[-7.97818966310831,43.74833771420099],[-6.754491746436756,43.567909450853925],[-5.411886359061597,43.57423981380968],[-4.347842779955783,43.40344920508504],[-3.517531704106091,43.4559007838613],[-1.901351284177764,43.42280202897834],[-1.502770961910528,43.03401439063043],[0.338046909190581,42.57954600683955],[0.701590610363894,42.795734361332606],[1.826793247087153,42.34338471126569],[2.985998976258458,42.47301504166986],[3.039484083680549,41.892120266276905],[2.091841668312185,41.226088568683096],[0.810524529635188,41.01473196060934],[0.721331007499401,40.678318386389236],[0.106691521819869,40.12393362076202],[-0.278711310212941,39.30997813573272],[0.111290724293838,38.73851430923304],[-0.467123582349103,38.29236583104115],[-0.683389451490598,37.642353827457825],[-1.438382127274849,37.44306366632422],[-2.146452602538119,36.67414419203729],[-3.415780808923387,36.65889964451118],[-4.368900926114719,36.677839056946155],[-4.995219285492212,36.32470815687964],[-5.377159796561457,35.946850083961465],[-5.866432257500904,36.02981659600606],[-6.236693894872175,36.367677110330334],[-6.520190802425404,36.94291331638732],[-7.453725551778092,37.09778758396607],[-7.537105475281024,37.42890432387624],[-7.166507941099865,37.803894354802225],[-7.029281175148796,38.07576406508977],[-7.374092169616318,38.37305858006492],[-7.098036668313128,39.03007274022379],[-7.498632371439726,39.62957103124181],[-7.066591559263529,39.711891587882775],[-7.026413133156595,40.184524237624245],[-6.864019944679385,40.33087189387483],[-6.851126674822552,41.11108266861753],[-6.389087693700915,41.381815497394655],[-6.668605515967656,41.883386949219584],[-7.251308966490824,41.91834605566505],[-7.422512986673795,41.79207469335984],[-8.013174607769912,41.790886135417125],[-8.263856980817792,42.28046865495034],[-8.67194576662672,42.13468943945496],[-9.034817674180246,41.880570583659676]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Estonia\",\"sov_a3\":\"EST\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Estonia\",\"adm0_a3\":\"EST\",\"geou_dif\":0,\"geounit\":\"Estonia\",\"gu_a3\":\"EST\",\"su_dif\":0,\"subunit\":\"Estonia\",\"su_a3\":\"EST\",\"brk_diff\":0,\"name\":\"Estonia\",\"name_long\":\"Estonia\",\"brk_a3\":\"EST\",\"brk_name\":\"Estonia\",\"brk_group\":null,\"abbrev\":\"Est.\",\"postal\":\"EST\",\"formal_en\":\"Republic of Estonia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Estonia\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":2,\"mapcolor9\":1,\"mapcolor13\":10,\"pop_est\":1299371,\"gdp_md_est\":27410,\"pop_year\":-99,\"lastcensus\":2000,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"EE\",\"iso_a3\":\"EST\",\"iso_n3\":\"233\",\"un_a3\":\"233\",\"wb_a2\":\"EE\",\"wb_a3\":\"EST\",\"woe_id\":-99,\"adm0_a3_is\":\"EST\",\"adm0_a3_us\":\"EST\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[24.312862583114622,57.79342357037697],[24.42892785004216,58.38341339785329],[24.061198357853186,58.25737457949341],[23.426560092876684,58.612753404364625],[23.339795363058645,59.187240302153384],[24.604214308376186,59.46585378685502],[25.86418908051664,59.61109039981133],[26.949135776484525,59.445803331125774],[27.981114129353244,59.475388088612874],[28.13169925305175,59.300825100330925],[27.420166456824944,58.72458120384424],[27.71668582531572,57.79189911562436],[27.288184848751513,57.47452830670383],[26.463532342237787,57.47638865826633],[25.60280968598437,57.84752879498657],[25.16459354014927,57.97015696881519],[24.312862583114622,57.79342357037697]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Finland\",\"sov_a3\":\"FI1\",\"adm0_dif\":1,\"level\":2,\"type\":\"Country\",\"admin\":\"Finland\",\"adm0_a3\":\"FIN\",\"geou_dif\":0,\"geounit\":\"Finland\",\"gu_a3\":\"FIN\",\"su_dif\":0,\"subunit\":\"Finland\",\"su_a3\":\"FIN\",\"brk_diff\":0,\"name\":\"Finland\",\"name_long\":\"Finland\",\"brk_a3\":\"FIN\",\"brk_name\":\"Finland\",\"brk_group\":null,\"abbrev\":\"Fin.\",\"postal\":\"FIN\",\"formal_en\":\"Republic of Finland\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Finland\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":1,\"mapcolor9\":4,\"mapcolor13\":6,\"pop_est\":5250275,\"gdp_md_est\":193500,\"pop_year\":-99,\"lastcensus\":2010,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"FI\",\"iso_a3\":\"FIN\",\"iso_n3\":\"246\",\"un_a3\":\"246\",\"wb_a2\":\"FI\",\"wb_a3\":\"FIN\",\"woe_id\":-99,\"adm0_a3_is\":\"FIN\",\"adm0_a3_us\":\"FIN\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[28.591929559043194,69.06477692328666],[28.445943637818658,68.36461294216404],[29.97742638522061,67.69829702419266],[29.054588657352326,66.94428620062193],[30.21765,65.80598],[29.54442955904699,64.94867157659048],[30.44468468600371,64.20445343693909],[30.035872430142717,63.55281362573855],[31.516092156711125,62.86768748641289],[31.139991082490894,62.35769277612441],[30.21110721204445,61.780027777749694],[28.069997592895277,60.50351654727584],[26.255172967236973,60.4239606797625],[24.496623976344523,60.05731639265166],[22.869694858499457,59.846373196036225],[22.290763787533592,60.39192129174154],[21.322244093519316,60.720169989659524],[21.544866163832694,61.70532949487179],[21.05921105315369,62.60739329695874],[21.536029493910803,63.18973501245587],[22.442744174903993,63.81781037053129],[24.730511508897536,64.90234365504084],[25.398067661243942,65.11142650009374],[25.294043003040404,65.53434642197045],[23.903378533633802,66.00692739527962],[23.565879754335583,66.39605093043743],[23.53947309743444,67.93600861273525],[21.978534783626117,68.6168456081807],[20.645592889089528,69.10624726020087],[21.244936150810673,69.37044302029308],[22.356237827247412,68.84174144151491],[23.66204959483076,68.89124746365054],[24.735679152126725,68.64955678982146],[25.689212680776365,69.09211375596904],[26.179622023226244,69.82529897732614],[27.732292107867863,70.16419302029625],[29.015572950971972,69.76649119737799],[28.591929559043194,69.06477692328666]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"France\",\"sov_a3\":\"FR1\",\"adm0_dif\":1,\"level\":2,\"type\":\"Country\",\"admin\":\"France\",\"adm0_a3\":\"FRA\",\"geou_dif\":0,\"geounit\":\"France\",\"gu_a3\":\"FRA\",\"su_dif\":0,\"subunit\":\"France\",\"su_a3\":\"FRA\",\"brk_diff\":0,\"name\":\"France\",\"name_long\":\"France\",\"brk_a3\":\"FRA\",\"brk_name\":\"France\",\"brk_group\":null,\"abbrev\":\"Fr.\",\"postal\":\"F\",\"formal_en\":\"French Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"France\",\"name_alt\":null,\"mapcolor7\":7,\"mapcolor8\":5,\"mapcolor9\":9,\"mapcolor13\":11,\"pop_est\":64057792,\"gdp_md_est\":2128000,\"pop_year\":-99,\"lastcensus\":-99,\"gdp_year\":-99,\"economy\":\"1. Developed region: G7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"FR\",\"iso_a3\":\"FRA\",\"iso_n3\":\"250\",\"un_a3\":\"250\",\"wb_a2\":\"FR\",\"wb_a3\":\"FRA\",\"woe_id\":-99,\"adm0_a3_is\":\"FRA\",\"adm0_a3_us\":\"FRA\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":3,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-52.55642473001839,2.504705308437053],[-52.93965715189498,2.124857692875622],[-53.418465135295264,2.053389187016037],[-53.554839240113495,2.334896551925965],[-53.778520677288896,2.376702785650053],[-54.08806250671728,2.105556545414629],[-54.52475419779975,2.311848863123785],[-54.27122962097579,2.738747870286943],[-54.18428402364475,3.194172268075235],[-54.01150387227682,3.622569891774859],[-54.399542202356514,4.212611395683481],[-54.47863298197922,4.896755682795643],[-53.95804460307093,5.756548163267809],[-53.618452928264844,5.646529038918402],[-52.88214128275408,5.409850979021599],[-51.82334286152593,4.565768133966145],[-51.65779741067888,4.156232408053029],[-52.249337531123984,3.241094468596287],[-52.55642473001839,2.504705308437053]]],[[[9.560016310269134,42.15249197037957],[9.229752231491773,41.38000682226445],[8.775723097375362,41.58361196549444],[8.54421268070783,42.256516628583086],[8.746009148807588,42.62812185319396],[9.390000848028905,43.00998484961474],[9.560016310269134,42.15249197037957]]],[[[3.588184441755715,50.37899241800358],[4.286022983425141,49.907496649772554],[4.799221632515753,49.98537303323633],[5.674051954784886,49.52948354755745],[5.897759230176376,49.44266714130717],[6.186320428094206,49.46380280211446],[6.658229607783539,49.201958319691556],[8.099278598674772,49.01778351500337],[7.593676385131062,48.33301911070373],[7.466759067422231,47.620581976911865],[7.192202182655535,47.44976552997099],[6.736571079138088,47.54180125588289],[6.768713820023635,47.28770823830368],[6.037388950228973,46.72577871356191],[6.022609490593567,46.272989813820516],[6.500099724970454,46.42967275652944],[6.843592970414562,45.99114655210067],[6.802355177445662,45.70857982032868],[7.096652459347837,45.333098863295874],[6.749955275101712,45.02851797136759],[7.007562290076663,44.25476675066139],[7.549596388386163,44.12790110938482],[7.435184767291844,43.69384491634918],[6.529245232783069,43.12889232031836],[4.556962517931396,43.39965098731159],[3.10041059735272,43.075200507167125],[2.985998976258486,42.473015041669896],[1.826793247087181,42.34338471126566],[0.701590610363922,42.79573436133265],[0.338046909190581,42.579546006839564],[-1.502770961910471,43.03401439063049],[-1.901351284177736,43.42280202897834],[-1.384225226232957,44.02261037859017],[-1.193797573237362,46.014917710954876],[-2.225724249673789,47.06436269793821],[-2.963276129559574,47.570326646507965],[-4.491554938159481,47.95495433205642],[-4.592349819344747,48.68416046812695],[-3.295813971357745,48.901692409859635],[-1.616510789384932,48.644421291694584],[-1.933494025063254,49.77634186461577],[-0.98946895995536,49.347375800160876],[1.338761020522753,50.12717316344526],[1.6390010921385,50.946606350297515],[2.513573032246171,51.14850617126186],[2.658422071960331,50.79684804951566],[3.123251580425716,50.78036326761452],[3.588184441755715,50.37899241800358]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"United Kingdom\",\"sov_a3\":\"GB1\",\"adm0_dif\":1,\"level\":2,\"type\":\"Country\",\"admin\":\"United Kingdom\",\"adm0_a3\":\"GBR\",\"geou_dif\":0,\"geounit\":\"United Kingdom\",\"gu_a3\":\"GBR\",\"su_dif\":0,\"subunit\":\"United Kingdom\",\"su_a3\":\"GBR\",\"brk_diff\":0,\"name\":\"United Kingdom\",\"name_long\":\"United Kingdom\",\"brk_a3\":\"GBR\",\"brk_name\":\"United Kingdom\",\"brk_group\":null,\"abbrev\":\"U.K.\",\"postal\":\"GB\",\"formal_en\":\"United Kingdom of Great Britain and Northern Ireland\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"United Kingdom\",\"name_alt\":null,\"mapcolor7\":6,\"mapcolor8\":6,\"mapcolor9\":6,\"mapcolor13\":3,\"pop_est\":62262000,\"gdp_md_est\":1977704,\"pop_year\":0,\"lastcensus\":2011,\"gdp_year\":2009,\"economy\":\"1. Developed region: G7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"GB\",\"iso_a3\":\"GBR\",\"iso_n3\":\"826\",\"un_a3\":\"826\",\"wb_a2\":\"GB\",\"wb_a3\":\"GBR\",\"woe_id\":-99,\"adm0_a3_is\":\"GBR\",\"adm0_a3_us\":\"GBR\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":14,\"long_len\":14,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-5.661948614921897,54.55460317648385],[-6.197884894220977,53.86756500916334],[-6.953730231137996,54.073702297575636],[-7.572167934591079,54.05995636658599],[-7.366030646178785,54.595840969452695],[-7.572167934591079,55.1316222194549],[-6.733847011736145,55.1728600124238],[-5.661948614921897,54.55460317648385]]],[[[-3.005004848635281,58.63500010846633],[-4.073828497728016,57.55302480735526],[-3.055001796877661,57.69001902936094],[-1.959280564776918,57.68479970969952],[-2.219988165689301,56.87001740175353],[-3.119003058271119,55.973793036515474],[-2.085009324543023,55.90999848085127],[-2.005675679673857,55.80490285035023],[-1.11499101399221,54.624986477265395],[-0.4304849918542,54.46437612570216],[0.184981316742039,53.32501414653103],[0.469976840831777,52.92999949809197],[1.681530795914739,52.739520168664],[1.559987827164377,52.09999848083601],[1.050561557630914,51.806760565795685],[1.449865349950301,51.28942780212196],[0.550333693045502,50.765738837275876],[-0.78751746255864,50.77498891865622],[-2.489997524414377,50.50001862243124],[-2.956273972984036,50.696879991247016],[-3.617448085942328,50.22835561787272],[-4.542507900399244,50.341837063185665],[-5.245023159191135,49.95999990498109],[-5.776566941745301,50.15967763935683],[-4.309989793301838,51.21000112568916],[-3.414850633142123,51.42600861266925],[-3.422719467108323,51.42684816740609],[-4.984367234710874,51.593466091510976],[-5.267295701508885,51.991400458374585],[-4.222346564134853,52.301355699261364],[-4.770013393564113,52.840004991255626],[-4.579999152026915,53.49500377055517],[-3.093830673788659,53.404547400669685],[-3.092079637047107,53.40444082296355],[-2.945008510744344,53.984999701546684],[-3.614700825433033,54.600936773292574],[-3.630005458989331,54.615012925833014],[-4.844169073903004,54.790971177786844],[-5.082526617849226,55.06160065369937],[-4.719112107756644,55.50847260194348],[-5.047980922862109,55.78398550070753],[-5.58639767091114,55.31114614523682],[-5.644998745130181,56.275014960344805],[-6.149980841486354,56.78500967063354],[-5.786824713555291,57.81884837506465],[-5.009998745127575,58.63001333275005],[-4.211494513353557,58.55084503847917],[-3.005004848635281,58.63500010846633]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Greece\",\"sov_a3\":\"GRC\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Greece\",\"adm0_a3\":\"GRC\",\"geou_dif\":0,\"geounit\":\"Greece\",\"gu_a3\":\"GRC\",\"su_dif\":0,\"subunit\":\"Greece\",\"su_a3\":\"GRC\",\"brk_diff\":0,\"name\":\"Greece\",\"name_long\":\"Greece\",\"brk_a3\":\"GRC\",\"brk_name\":\"Greece\",\"brk_group\":null,\"abbrev\":\"Greece\",\"postal\":\"GR\",\"formal_en\":\"Hellenic Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Greece\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":2,\"mapcolor9\":2,\"mapcolor13\":9,\"pop_est\":10737428,\"gdp_md_est\":343000,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"GR\",\"iso_a3\":\"GRC\",\"iso_n3\":\"300\",\"un_a3\":\"300\",\"wb_a2\":\"GR\",\"wb_a3\":\"GRC\",\"woe_id\":-99,\"adm0_a3_is\":\"GRC\",\"adm0_a3_us\":\"GRC\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":6,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[23.699980096133004,35.70500438083553],[24.24666507334868,35.368022365860156],[25.02501549652888,35.424995632461986],[25.769207797964185,35.35401805270908],[25.745023227651586,35.179997666966216],[26.290002882601726,35.29999034274792],[26.16499759288766,35.004995429009796],[24.724982130642303,34.91998769788961],[24.735007358506948,35.08499054619759],[23.514978468528113,35.27999156345098],[23.699980096133004,35.70500438083553]]],[[[26.604195590936285,41.562114569661105],[26.29460208507578,40.93626129817426],[26.056942172965506,40.824123440100834],[25.447677036244187,40.85254547786147],[24.92584842296094,40.94706167252323],[23.714811232200816,40.68712921809512],[24.407998894964066,40.1249929876241],[23.899967889102584,39.96200552017558],[23.3429993018608,39.96099782974579],[22.813987664488963,40.476005153966554],[22.62629886240478,40.25656118423919],[22.84974775563481,39.65931081802577],[23.3500272966526,39.19001129816726],[22.973099399515547,38.97090322524966],[23.530016310324953,38.51000112563847],[24.025024855248944,38.21999298761645],[24.040011020613605,37.655014553369426],[23.115002882589152,37.92001129816222],[23.409971958111072,37.409990749657396],[22.774971958108637,37.30501007745656],[23.15422529469862,36.422505804992056],[22.490028110451107,36.41000010837746],[21.670026482843696,36.8449864771942],[21.295010613701578,37.644989325504696],[21.120034213961333,38.31032339126273],[20.730032179454582,38.769985256498785],[20.217712029712857,39.340234686839636],[20.15001590341052,39.62499766698403],[20.615000441172782,40.110006822259436],[20.674996779063633,40.434999904943055],[20.99998986174728,40.58000397395398],[21.02004031747643,40.84272695572588],[21.674160597426976,40.93127452245798],[22.05537763844427,41.14986583105269],[22.597308383889015,41.130487168943205],[22.76177,41.3048],[22.95237715016657,41.33799388281122],[23.692073601992462,41.30908091894386],[24.492644891058035,41.58389618587205],[25.197201368925533,41.23448598893066],[26.106138136507184,41.32889883072784],[26.117041863720914,41.82690460872473],[26.604195590936285,41.562114569661105]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Croatia\",\"sov_a3\":\"HRV\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Croatia\",\"adm0_a3\":\"HRV\",\"geou_dif\":0,\"geounit\":\"Croatia\",\"gu_a3\":\"HRV\",\"su_dif\":0,\"subunit\":\"Croatia\",\"su_a3\":\"HRV\",\"brk_diff\":0,\"name\":\"Croatia\",\"name_long\":\"Croatia\",\"brk_a3\":\"HRV\",\"brk_name\":\"Croatia\",\"brk_group\":null,\"abbrev\":\"Cro.\",\"postal\":\"HR\",\"formal_en\":\"Republic of Croatia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Croatia\",\"name_alt\":null,\"mapcolor7\":5,\"mapcolor8\":4,\"mapcolor9\":5,\"mapcolor13\":1,\"pop_est\":4489409,\"gdp_md_est\":82390,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"2. High income: nonOECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"HR\",\"iso_a3\":\"HRV\",\"iso_n3\":\"191\",\"un_a3\":\"191\",\"wb_a2\":\"HR\",\"wb_a3\":\"HRV\",\"woe_id\":-99,\"adm0_a3_is\":\"HRV\",\"adm0_a3_us\":\"HRV\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[18.829838087650046,45.908877671891844],[19.072768995854176,45.52151113543209],[19.39047570158459,45.236515611342384],[19.00548628101012,44.86023366960916],[18.553214145591653,45.08158966733146],[17.861783481526402,45.067740383477144],[17.002146030351014,45.23377676043094],[16.534939406000206,45.21160757097772],[16.318156772535872,45.00412669532591],[15.959367303133376,45.23377676043094],[15.750026075918981,44.818711656262565],[16.23966027188453,44.35114329688571],[16.456442905348865,44.04123973243128],[16.91615644701733,43.66772247982567],[17.297373488034452,43.44634064388737],[17.674921502358984,43.02856252702361],[18.56,42.65],[18.450016310304818,42.47999136002932],[17.509970330483327,42.849994615239154],[16.930005730871642,43.20999848080038],[16.015384555737683,43.50721548112722],[15.174453973052096,44.243191229827914],[15.376250441151797,44.31791535092208],[14.92030927904051,44.73848399512946],[14.901602410550879,45.07606028907611],[14.258747592839995,45.23377676043094],[13.952254672917036,44.80212352149687],[13.656975538801191,45.13693512631596],[13.67940311041582,45.48414907488501],[13.715059848697251,45.500323798192426],[14.4119682145855,45.46616567644742],[14.59510949062792,45.63494090431283],[14.935243767972963,45.471695054702764],[15.327674594797429,45.45231639259333],[15.323953891672431,45.731782538427694],[15.671529575267641,45.83415355079791],[15.768732944408612,46.23810822202353],[16.564808383864943,46.50375092221981],[16.882515089595415,46.38063182228444],[17.630066359129557,45.9517691106941],[18.45606245288286,45.75948110613615],[18.829838087650046,45.908877671891844]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Hungary\",\"sov_a3\":\"HUN\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Hungary\",\"adm0_a3\":\"HUN\",\"geou_dif\":0,\"geounit\":\"Hungary\",\"gu_a3\":\"HUN\",\"su_dif\":0,\"subunit\":\"Hungary\",\"su_a3\":\"HUN\",\"brk_diff\":0,\"name\":\"Hungary\",\"name_long\":\"Hungary\",\"brk_a3\":\"HUN\",\"brk_name\":\"Hungary\",\"brk_group\":null,\"abbrev\":\"Hun.\",\"postal\":\"HU\",\"formal_en\":\"Republic of Hungary\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Hungary\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":6,\"mapcolor9\":1,\"mapcolor13\":5,\"pop_est\":9905596,\"gdp_md_est\":196600,\"pop_year\":-99,\"lastcensus\":2001,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"HU\",\"iso_a3\":\"HUN\",\"iso_n3\":\"348\",\"un_a3\":\"348\",\"wb_a2\":\"HU\",\"wb_a3\":\"HUN\",\"woe_id\":-99,\"adm0_a3_is\":\"HUN\",\"adm0_a3_us\":\"HUN\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[16.202298211337364,46.85238597267696],[16.534267612380376,47.49617096616912],[16.340584344150415,47.71290192320123],[16.90375410326726,47.71486562762833],[16.979666782304037,48.123497015976305],[17.48847293464982,47.867466132186216],[17.857132602620027,47.75842886005037],[18.696512892336926,47.880953681014404],[18.77702477384767,48.081768296900634],[19.17436486173989,48.11137889260387],[19.661363559658497,48.26661489520866],[19.769470656013112,48.202691148463614],[20.239054396249347,48.32756724709692],[20.473562045989866,48.562850043321816],[20.801293979584926,48.623854071642384],[21.872236362401736,48.31997081155002],[22.085608351334855,48.42226430927179],[22.640819939878753,48.15023956968736],[22.710531447040495,47.88219391538941],[22.099767693782837,47.6724392767167],[21.626514926853872,46.99423777931816],[21.02195234547125,46.3160879583519],[20.220192498462836,46.127468980486555],[19.596044549241583,46.17172984474454],[18.82983808764996,45.90887767189193],[18.45606245288286,45.759481106136136],[17.630066359129557,45.95176911069419],[16.8825150895953,46.38063182228444],[16.564808383864857,46.50375092221983],[16.370504998447416,46.841327216166505],[16.202298211337364,46.85238597267696]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Ireland\",\"sov_a3\":\"IRL\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Ireland\",\"adm0_a3\":\"IRL\",\"geou_dif\":0,\"geounit\":\"Ireland\",\"gu_a3\":\"IRL\",\"su_dif\":0,\"subunit\":\"Ireland\",\"su_a3\":\"IRL\",\"brk_diff\":0,\"name\":\"Ireland\",\"name_long\":\"Ireland\",\"brk_a3\":\"IRL\",\"brk_name\":\"Ireland\",\"brk_group\":null,\"abbrev\":\"Ire.\",\"postal\":\"IRL\",\"formal_en\":\"Ireland\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Ireland\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":3,\"mapcolor9\":2,\"mapcolor13\":2,\"pop_est\":4203200,\"gdp_md_est\":188400,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"IE\",\"iso_a3\":\"IRL\",\"iso_n3\":\"372\",\"un_a3\":\"372\",\"wb_a2\":\"IE\",\"wb_a3\":\"IRL\",\"woe_id\":-99,\"adm0_a3_is\":\"IRL\",\"adm0_a3_us\":\"IRL\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-6.197884894220991,53.867565009163364],[-6.032985398777611,53.15316417094435],[-6.788856573910849,52.260117906292336],[-8.56161658368356,51.669301255899356],[-9.977085740590269,51.82045482035308],[-9.166282517930782,52.86462881124268],[-9.688524542672454,53.8813626165853],[-8.327987433292009,54.66451894796863],[-7.572167934591064,55.13162221945487],[-7.366030646178785,54.59584096945272],[-7.572167934591064,54.059956366586],[-6.953730231138067,54.073702297575636],[-6.197884894220991,53.867565009163364]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Iceland\",\"sov_a3\":\"ISL\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Iceland\",\"adm0_a3\":\"ISL\",\"geou_dif\":0,\"geounit\":\"Iceland\",\"gu_a3\":\"ISL\",\"su_dif\":0,\"subunit\":\"Iceland\",\"su_a3\":\"ISL\",\"brk_diff\":0,\"name\":\"Iceland\",\"name_long\":\"Iceland\",\"brk_a3\":\"ISL\",\"brk_name\":\"Iceland\",\"brk_group\":null,\"abbrev\":\"Iceland\",\"postal\":\"IS\",\"formal_en\":\"Republic of Iceland\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Iceland\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":4,\"mapcolor9\":4,\"mapcolor13\":9,\"pop_est\":306694,\"gdp_md_est\":12710,\"pop_year\":-99,\"lastcensus\":-99,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"IS\",\"iso_a3\":\"ISL\",\"iso_n3\":\"352\",\"un_a3\":\"352\",\"wb_a2\":\"IS\",\"wb_a3\":\"ISL\",\"woe_id\":-99,\"adm0_a3_is\":\"ISL\",\"adm0_a3_us\":\"ISL\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":7,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-14.508695441129234,66.45589223903143],[-14.739637417041607,65.8087482774403],[-13.60973222497981,65.12667104761987],[-14.909833746794902,64.36408193628868],[-17.794438035543422,63.678749091233854],[-18.656245896874992,63.49638296167582],[-19.97275468594276,63.64363495549153],[-22.762971971110158,63.960178941495386],[-21.778484259517683,64.40211579045551],[-23.95504391121911,64.8911298692335],[-22.184402635170358,65.0849681667603],[-22.227423265053332,65.37859365504274],[-24.326184047939336,65.61118927678847],[-23.65051469572309,66.26251902939522],[-22.134922451250887,66.41046865504687],[-20.57628373867955,65.73211212835143],[-19.05684160000159,66.27660085719477],[-17.79862382655905,65.99385325790978],[-16.167818976292125,66.52679230413587],[-14.508695441129234,66.45589223903143]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Italy\",\"sov_a3\":\"ITA\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Italy\",\"adm0_a3\":\"ITA\",\"geou_dif\":0,\"geounit\":\"Italy\",\"gu_a3\":\"ITA\",\"su_dif\":0,\"subunit\":\"Italy\",\"su_a3\":\"ITA\",\"brk_diff\":0,\"name\":\"Italy\",\"name_long\":\"Italy\",\"brk_a3\":\"ITA\",\"brk_name\":\"Italy\",\"brk_group\":null,\"abbrev\":\"Italy\",\"postal\":\"I\",\"formal_en\":\"Italian Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Italy\",\"name_alt\":null,\"mapcolor7\":6,\"mapcolor8\":7,\"mapcolor9\":8,\"mapcolor13\":7,\"pop_est\":58126212,\"gdp_md_est\":1823000,\"pop_year\":-99,\"lastcensus\":2012,\"gdp_year\":-99,\"economy\":\"1. Developed region: G7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"IT\",\"iso_a3\":\"ITA\",\"iso_n3\":\"380\",\"un_a3\":\"380\",\"wb_a2\":\"IT\",\"wb_a3\":\"ITA\",\"woe_id\":-99,\"adm0_a3_is\":\"ITA\",\"adm0_a3_us\":\"ITA\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":5,\"long_len\":5,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[15.520376010813834,38.23115509699147],[15.160242954171736,37.44404551853782],[15.309897902089006,37.1342194687318],[15.09998823411945,36.6199872909954],[14.335228712632016,36.996630967754754],[13.82673261887993,37.1045313583802],[12.431003859108813,37.61294993748382],[12.570943637755136,38.12638113051969],[13.741156447004585,38.03496552179536],[14.76124922044616,38.143873602850505],[15.520376010813834,38.23115509699147]]],[[[9.210011834356266,41.20999136002422],[9.809975213264977,40.5000088567661],[9.669518670295673,39.177376410471794],[9.21481774255949,39.240473334300134],[8.80693566247973,38.90661774347848],[8.428302443077115,39.17184703221662],[8.38825320805094,40.378310858718805],[8.15999840661766,40.95000722916379],[8.709990675500109,40.89998444270523],[9.210011834356266,41.20999136002422]]],[[[12.376485223040845,46.76755910906988],[13.806475457421556,46.50930613869119],[13.698109978905478,46.016778062517375],[13.937630242578336,45.591015936864665],[13.141606479554298,45.73669179949542],[12.328581170306308,45.381778062514854],[12.383874952858605,44.88537425391908],[12.261453484759159,44.600482082694015],[12.589237094786483,44.091365871754476],[13.526905958722494,43.58772736263791],[14.029820997787027,42.76100779883248],[15.142569614327954,41.955139675456905],[15.926191033601896,41.96131500911574],[16.169897088290412,41.740294908203424],[15.889345737377795,41.5410822617182],[16.785001661860576,41.179605617836586],[17.519168735431208,40.87714345963224],[18.376687452882578,40.35562490494266],[18.480247023195403,40.168866278639825],[18.2933850440281,39.81077444107325],[17.738380161213286,40.2776710068303],[16.869595981522338,40.44223460546385],[16.448743116937322,39.79540070246648],[17.1714896989715,39.42469981542072],[17.052840610429342,38.902871202137305],[16.635088331781844,38.8435724960824],[16.100960727613057,37.98589874933418],[15.684086948314501,37.90884918878703],[15.68796268073632,38.214592800441864],[15.891981235424709,38.750942491199226],[16.109332309644316,38.96454702407769],[15.718813510814641,39.544072374014945],[15.413612501698822,40.04835683853517],[14.998495721098237,40.17294871679093],[14.70326826341477,40.604550279292624],[14.060671827865264,40.78634796809544],[13.627985060285397,41.188287258461656],[12.88808190273042,41.25308950455562],[12.10668257004491,41.70453481705741],[11.191906365614187,42.35542531998968],[10.511947869517797,42.931462510747224],[10.200028924204048,43.920006822274615],[9.702488234097814,44.03627879493132],[8.88894616052687,44.36633616797954],[8.428560825238577,44.23122813575242],[7.850766635783202,43.76714793555524],[7.435184767291844,43.69384491634918],[7.549596388386163,44.12790110938482],[7.007562290076663,44.25476675066139],[6.749955275101712,45.02851797136759],[7.096652459347837,45.333098863295874],[6.802355177445662,45.70857982032868],[6.843592970414562,45.99114655210067],[7.273850945676685,45.77694774025076],[7.755992058959833,45.82449005795928],[8.31662967289438,46.163642483090854],[8.489952426801295,46.00515086525175],[8.966305779667834,46.036931871111165],[9.182881707403112,46.44021474871698],[9.922836541390353,46.31489940040919],[10.363378126678668,46.483571275409844],[10.442701450246602,46.893546250997446],[11.048555942436508,46.7513585475464],[11.164827915093326,46.94157949481274],[12.153088006243081,47.11539317482644],[12.376485223040845,46.76755910906988]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Kosovo\",\"sov_a3\":\"KOS\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Kosovo\",\"adm0_a3\":\"KOS\",\"geou_dif\":0,\"geounit\":\"Kosovo\",\"gu_a3\":\"KOS\",\"su_dif\":0,\"subunit\":\"Kosovo\",\"su_a3\":\"KOS\",\"brk_diff\":1,\"name\":\"Kosovo\",\"name_long\":\"Kosovo\",\"brk_a3\":\"B57\",\"brk_name\":\"Kosovo\",\"brk_group\":null,\"abbrev\":\"Kos.\",\"postal\":\"KO\",\"formal_en\":\"Republic of Kosovo\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":\"Self admin.; Claimed by Serbia\",\"name_sort\":\"Kosovo\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":2,\"mapcolor9\":3,\"mapcolor13\":11,\"pop_est\":1804838,\"gdp_md_est\":5352,\"pop_year\":-99,\"lastcensus\":1981,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"4. Lower middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"-99\",\"iso_a3\":\"-99\",\"iso_n3\":\"-99\",\"un_a3\":\"-099\",\"wb_a2\":\"KV\",\"wb_a3\":\"KSV\",\"woe_id\":-99,\"adm0_a3_is\":\"SRB\",\"adm0_a3_us\":\"KOS\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.76216,42.05186],[20.71731000000011,41.84711],[20.59023,41.85541],[20.52295,42.21787],[20.28374,42.3202500000001],[20.0707,42.58863],[20.25758,42.81275000000011],[20.49679,42.88469],[20.63508,43.21671],[20.81448,43.27205],[20.95651,43.13094],[21.143395,43.06868500000013],[21.27421,42.90959],[21.43866,42.86255],[21.63302,42.67717],[21.77505,42.6827],[21.66292,42.43922],[21.54332,42.3202500000001],[21.57663598940212,42.24522439706186],[21.35270000000014,42.2068],[20.76216,42.05186]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Lithuania\",\"sov_a3\":\"LTU\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Lithuania\",\"adm0_a3\":\"LTU\",\"geou_dif\":0,\"geounit\":\"Lithuania\",\"gu_a3\":\"LTU\",\"su_dif\":0,\"subunit\":\"Lithuania\",\"su_a3\":\"LTU\",\"brk_diff\":0,\"name\":\"Lithuania\",\"name_long\":\"Lithuania\",\"brk_a3\":\"LTU\",\"brk_name\":\"Lithuania\",\"brk_group\":null,\"abbrev\":\"Lith.\",\"postal\":\"LT\",\"formal_en\":\"Republic of Lithuania\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Lithuania\",\"name_alt\":null,\"mapcolor7\":6,\"mapcolor8\":3,\"mapcolor9\":3,\"mapcolor13\":9,\"pop_est\":3555179,\"gdp_md_est\":63330,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"LT\",\"iso_a3\":\"LTU\",\"iso_n3\":\"440\",\"un_a3\":\"440\",\"wb_a2\":\"LT\",\"wb_a3\":\"LTU\",\"woe_id\":-99,\"adm0_a3_is\":\"LTU\",\"adm0_a3_us\":\"LTU\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":9,\"long_len\":9,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[22.731098667092652,54.327536932993326],[22.65105187347254,54.582740993866736],[22.75776370615526,54.85657440858138],[22.315723504330577,55.015298570365864],[21.268448927503467,55.190481675835315],[21.055800408622417,56.031076361711065],[22.201156853939494,56.33780182557949],[23.878263787539964,56.27367137310527],[24.86068444184076,56.37252838807963],[25.000934279080894,56.16453074810484],[25.533046502390334,56.100296942766036],[26.494331495883756,55.615106919977634],[26.58827924979039,55.16717560487167],[25.7684326514798,54.84696259217509],[25.536353794056993,54.28242340760253],[24.450683628037037,53.905702216194754],[23.48412763844985,53.91249766704114],[23.24398725758951,54.22056671814914],[22.731098667092652,54.327536932993326]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Luxembourg\",\"sov_a3\":\"LUX\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Luxembourg\",\"adm0_a3\":\"LUX\",\"geou_dif\":0,\"geounit\":\"Luxembourg\",\"gu_a3\":\"LUX\",\"su_dif\":0,\"subunit\":\"Luxembourg\",\"su_a3\":\"LUX\",\"brk_diff\":0,\"name\":\"Luxembourg\",\"name_long\":\"Luxembourg\",\"brk_a3\":\"LUX\",\"brk_name\":\"Luxembourg\",\"brk_group\":null,\"abbrev\":\"Lux.\",\"postal\":\"L\",\"formal_en\":\"Grand Duchy of Luxembourg\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Luxembourg\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":7,\"mapcolor9\":3,\"mapcolor13\":7,\"pop_est\":491775,\"gdp_md_est\":39370,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"LU\",\"iso_a3\":\"LUX\",\"iso_n3\":\"442\",\"un_a3\":\"442\",\"wb_a2\":\"LU\",\"wb_a3\":\"LUX\",\"woe_id\":-99,\"adm0_a3_is\":\"LUX\",\"adm0_a3_us\":\"LUX\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":10,\"long_len\":10,\"abbrev_len\":4,\"tiny\":5,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[6.043073357781111,50.128051662794235],[6.242751092156993,49.90222565367873],[6.186320428094177,49.463802802114515],[5.897759230176405,49.44266714130703],[5.674051954784829,49.529483547557504],[5.782417433300907,50.09032786722122],[6.043073357781111,50.128051662794235]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Latvia\",\"sov_a3\":\"LVA\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Latvia\",\"adm0_a3\":\"LVA\",\"geou_dif\":0,\"geounit\":\"Latvia\",\"gu_a3\":\"LVA\",\"su_dif\":0,\"subunit\":\"Latvia\",\"su_a3\":\"LVA\",\"brk_diff\":0,\"name\":\"Latvia\",\"name_long\":\"Latvia\",\"brk_a3\":\"LVA\",\"brk_name\":\"Latvia\",\"brk_group\":null,\"abbrev\":\"Lat.\",\"postal\":\"LV\",\"formal_en\":\"Republic of Latvia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Latvia\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":7,\"mapcolor9\":6,\"mapcolor13\":13,\"pop_est\":2231503,\"gdp_md_est\":38860,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"LV\",\"iso_a3\":\"LVA\",\"iso_n3\":\"428\",\"un_a3\":\"428\",\"wb_a2\":\"LV\",\"wb_a3\":\"LVA\",\"woe_id\":-99,\"adm0_a3_is\":\"LVA\",\"adm0_a3_us\":\"LVA\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[21.055800408622417,56.031076361711065],[21.090423618257972,56.78387278912294],[21.581866489353672,57.411870632549935],[22.52434126149288,57.75337433535076],[23.318452996522097,57.00623647727487],[24.12072960785343,57.02569265403277],[24.312862583114622,57.79342357037697],[25.16459354014927,57.97015696881519],[25.60280968598437,57.84752879498657],[26.463532342237787,57.47638865826633],[27.288184848751513,57.47452830670383],[27.77001590344093,57.24425812441123],[27.855282016722526,56.75932648378429],[28.176709425577997,56.169129950578814],[27.10245975109453,55.783313707087686],[26.494331495883756,55.615106919977634],[25.533046502390334,56.100296942766036],[25.000934279080894,56.16453074810484],[24.86068444184076,56.37252838807963],[23.878263787539964,56.27367137310527],[22.201156853939494,56.33780182557949],[21.055800408622417,56.031076361711065]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Moldova\",\"sov_a3\":\"MDA\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Moldova\",\"adm0_a3\":\"MDA\",\"geou_dif\":0,\"geounit\":\"Moldova\",\"gu_a3\":\"MDA\",\"su_dif\":0,\"subunit\":\"Moldova\",\"su_a3\":\"MDA\",\"brk_diff\":0,\"name\":\"Moldova\",\"name_long\":\"Moldova\",\"brk_a3\":\"MDA\",\"brk_name\":\"Moldova\",\"brk_group\":null,\"abbrev\":\"Mda.\",\"postal\":\"MD\",\"formal_en\":\"Republic of Moldova\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Moldova\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":5,\"mapcolor9\":4,\"mapcolor13\":12,\"pop_est\":4320748,\"gdp_md_est\":10670,\"pop_year\":-99,\"lastcensus\":2004,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"4. Lower middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"MD\",\"iso_a3\":\"MDA\",\"iso_n3\":\"498\",\"un_a3\":\"498\",\"wb_a2\":\"MD\",\"wb_a3\":\"MDA\",\"woe_id\":-99,\"adm0_a3_is\":\"MDA\",\"adm0_a3_us\":\"MDA\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[26.619336785597795,48.22072622333347],[26.857823520624805,48.368210761094495],[27.522537469195157,48.467119452501116],[28.259546746541844,48.15556224221342],[28.670891147585166,48.1181485052341],[29.12269819511303,47.849095160506465],[29.05086795422733,47.5102269557525],[29.415135125452736,47.34664520933258],[29.559674106573112,46.928582872091326],[29.908851759569302,46.67436066343146],[29.838210076626297,46.52532583270169],[30.024658644335375,46.42393667254504],[29.759971958136394,46.34998769793536],[29.170653924279886,46.3792623968287],[29.07210696789929,46.517677720722496],[28.862972446414062,46.43788930926383],[28.933717482221624,46.2588304713725],[28.65998742037158,45.93998688413164],[28.485269402792767,45.5969070501459],[28.233553501099042,45.488283189468376],[28.0544429867754,45.944586086605625],[28.160017937947714,46.37156260841722],[28.128030226359044,46.810476386088254],[27.551166212684848,47.40511709247083],[27.233872918412743,47.82677094175638],[26.924176059687568,48.123264472030996],[26.619336785597795,48.22072622333347]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Macedonia\",\"sov_a3\":\"MKD\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Macedonia\",\"adm0_a3\":\"MKD\",\"geou_dif\":0,\"geounit\":\"Macedonia\",\"gu_a3\":\"MKD\",\"su_dif\":0,\"subunit\":\"Macedonia\",\"su_a3\":\"MKD\",\"brk_diff\":0,\"name\":\"Macedonia\",\"name_long\":\"Macedonia\",\"brk_a3\":\"MKD\",\"brk_name\":\"Macedonia\",\"brk_group\":null,\"abbrev\":\"Mkd.\",\"postal\":\"MK\",\"formal_en\":\"Former Yugoslav Republic of Macedonia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Macedonia, FYR\",\"name_alt\":null,\"mapcolor7\":5,\"mapcolor8\":3,\"mapcolor9\":7,\"mapcolor13\":3,\"pop_est\":2066718,\"gdp_md_est\":18780,\"pop_year\":-99,\"lastcensus\":2010,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"MK\",\"iso_a3\":\"MKD\",\"iso_n3\":\"807\",\"un_a3\":\"807\",\"wb_a2\":\"MK\",\"wb_a3\":\"MKD\",\"woe_id\":-99,\"adm0_a3_is\":\"MKD\",\"adm0_a3_us\":\"MKD\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":9,\"long_len\":9,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.59023,41.85541],[20.71731000000011,41.84711],[20.76216,42.05186],[21.35270000000014,42.2068],[21.57663598940212,42.24522439706186],[21.917080000000112,42.30364],[22.38052575042468,42.32025950781508],[22.881373732197346,41.999297186850356],[22.952377150166512,41.33799388281119],[22.76177,41.3048],[22.597308383889015,41.130487168943205],[22.05537763844427,41.14986583105269],[21.674160597426976,40.931274522457954],[21.0200403174764,40.84272695572588],[20.60518,41.08622],[20.46315,41.5150900000001],[20.59023,41.85541]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Montenegro\",\"sov_a3\":\"MNE\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Montenegro\",\"adm0_a3\":\"MNE\",\"geou_dif\":0,\"geounit\":\"Montenegro\",\"gu_a3\":\"MNE\",\"su_dif\":0,\"subunit\":\"Montenegro\",\"su_a3\":\"MNE\",\"brk_diff\":0,\"name\":\"Montenegro\",\"name_long\":\"Montenegro\",\"brk_a3\":\"MNE\",\"brk_name\":\"Montenegro\",\"brk_group\":null,\"abbrev\":\"Mont.\",\"postal\":\"ME\",\"formal_en\":\"Montenegro\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Montenegro\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":1,\"mapcolor9\":4,\"mapcolor13\":5,\"pop_est\":672180,\"gdp_md_est\":6816,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"ME\",\"iso_a3\":\"MNE\",\"iso_n3\":\"499\",\"un_a3\":\"499\",\"wb_a2\":\"ME\",\"wb_a3\":\"MNE\",\"woe_id\":-99,\"adm0_a3_is\":\"MNE\",\"adm0_a3_us\":\"MNE\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":10,\"long_len\":10,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[19.801613396898688,42.50009349219084],[19.73805138517963,42.68824738216557],[19.3044900000001,42.19574],[19.37177000000014,41.87755],[19.16246,41.95502],[18.88214,42.28151],[18.45,42.48],[18.56,42.65],[18.70648,43.20011],[19.03165,43.43253],[19.21852,43.52384],[19.48389,43.35229],[19.63,43.21377997027054],[19.95857,43.10604],[20.3398,42.89852],[20.25758,42.81275000000011],[20.0707,42.58863],[19.801613396898688,42.50009349219084]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Netherlands\",\"sov_a3\":\"NL1\",\"adm0_dif\":1,\"level\":2,\"type\":\"Country\",\"admin\":\"Netherlands\",\"adm0_a3\":\"NLD\",\"geou_dif\":0,\"geounit\":\"Netherlands\",\"gu_a3\":\"NLD\",\"su_dif\":0,\"subunit\":\"Netherlands\",\"su_a3\":\"NLD\",\"brk_diff\":0,\"name\":\"Netherlands\",\"name_long\":\"Netherlands\",\"brk_a3\":\"NLD\",\"brk_name\":\"Netherlands\",\"brk_group\":null,\"abbrev\":\"Neth.\",\"postal\":\"NL\",\"formal_en\":\"Kingdom of the Netherlands\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Netherlands\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":2,\"mapcolor9\":2,\"mapcolor13\":9,\"pop_est\":16715999,\"gdp_md_est\":672000,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"NL\",\"iso_a3\":\"NLD\",\"iso_n3\":\"528\",\"un_a3\":\"528\",\"wb_a2\":\"NL\",\"wb_a3\":\"NLD\",\"woe_id\":-99,\"adm0_a3_is\":\"NLD\",\"adm0_a3_us\":\"NLD\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":11,\"long_len\":11,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[6.074182570020923,53.510403347378144],[6.905139601274129,53.48216217713065],[7.092053256873896,53.144043280644894],[6.842869500362383,52.22844025329755],[6.589396599970826,51.852029120483394],[5.988658074577813,51.851615709025054],[6.15665815595878,50.80372101501058],[5.606975945670001,51.03729848896978],[4.973991326526914,51.47502370869813],[4.047071160507528,51.26725861266857],[3.314971144228537,51.34575511331991],[3.830288527043137,51.62054454203195],[4.705997348661185,53.091798407597764],[6.074182570020923,53.510403347378144]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Norway\",\"sov_a3\":\"NOR\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Norway\",\"adm0_a3\":\"NOR\",\"geou_dif\":0,\"geounit\":\"Norway\",\"gu_a3\":\"NOR\",\"su_dif\":0,\"subunit\":\"Norway\",\"su_a3\":\"NOR\",\"brk_diff\":0,\"name\":\"Norway\",\"name_long\":\"Norway\",\"brk_a3\":\"NOR\",\"brk_name\":\"Norway\",\"brk_group\":null,\"abbrev\":\"Nor.\",\"postal\":\"N\",\"formal_en\":\"Kingdom of Norway\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Norway\",\"name_alt\":null,\"mapcolor7\":5,\"mapcolor8\":3,\"mapcolor9\":8,\"mapcolor13\":12,\"pop_est\":4676305,\"gdp_md_est\":276400,\"pop_year\":-99,\"lastcensus\":2001,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"NO\",\"iso_a3\":\"NOR\",\"iso_n3\":\"578\",\"un_a3\":\"578\",\"wb_a2\":\"NO\",\"wb_a3\":\"NOR\",\"woe_id\":-99,\"adm0_a3_is\":\"NOR\",\"adm0_a3_us\":\"NOR\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[28.165547316202918,71.18547435168051],[31.293418409965483,70.45378774685992],[30.005435011522792,70.1862588568849],[31.101078728975125,69.55808014594487],[29.399580519332886,69.15691600206307],[28.591929559043194,69.0647769232867],[29.015572950971972,69.76649119737797],[27.73229210786789,70.1641930202963],[26.1796220232263,69.82529897732616],[25.689212680776393,69.09211375596902],[24.73567915212672,68.64955678982145],[23.662049594830762,68.89124746365053],[22.356237827247412,68.84174144151496],[21.24493615081073,69.37044302029312],[20.645592889089585,69.10624726020086],[20.025268995857914,69.06513865831272],[19.878559604581255,68.40719432237262],[17.99386844246439,68.56739126247734],[17.729181756265348,68.01055186631623],[16.76887861498554,68.01393667263139],[16.108712192456835,67.3024555528369],[15.108411492583059,66.19386688909543],[13.55568973150909,64.78702769638147],[13.919905226302205,64.44542064071612],[13.57191613124877,64.04911408146967],[12.579935336973932,64.06621898055835],[11.930569288794231,63.12831757267699],[11.992064243221535,61.800362453856565],[12.631146681375242,61.2935716823701],[12.3003658382749,60.11793284773006],[11.468271925511175,59.432393296946],[11.027368605196926,58.8561494004594],[10.356556837616097,59.46980703392538],[8.382000359743643,58.31328847923328],[7.048748406613299,58.078884182357285],[5.665835402050419,58.58815542259367],[5.308234490590735,59.66323191999382],[4.992078077829007,61.970998033284275],[5.912900424837886,62.614472968182696],[8.553411085655767,63.45400828719647],[10.527709181366788,64.48603831649748],[12.358346795306375,65.87972585719316],[14.761145867581604,67.81064158799515],[16.43592736172897,68.56320547146169],[19.184028354578516,69.81744415961782],[21.378416375420613,70.25516937934606],[23.023742303161583,70.20207184516627],[24.546543409938522,71.03049673123724],[26.37004967622181,70.98626170519537],[28.165547316202918,71.18547435168051]]],[[[24.72412,77.85385],[22.49032,77.44493],[20.72601,77.67704],[21.41611,77.93504],[20.8119,78.25463],[22.88426,78.45494],[23.28134,78.07954],[24.72412,77.85385]]],[[[18.25183,79.70175],[21.54383,78.95611],[19.02737,78.5626],[18.47172,77.82669],[17.59441,77.63796],[17.1182,76.80941],[15.91315,76.77045],[13.76259,77.38035],[14.66956,77.73565],[13.1706,78.02493],[11.22231,78.8693],[10.44453,79.65239],[13.17077,80.01046],[13.71852,79.66039],[15.14282,79.67431],[15.52255,80.01608],[16.99085,80.05086],[18.25183,79.70175]]],[[[25.447625359811894,80.40734039989451],[27.4075057309135,80.05640574820046],[25.92465050629818,79.51783397085455],[23.02446577321362,79.4000117052291],[20.075188429451885,79.56682322866726],[19.897266473070914,79.84236196564751],[18.462263624757924,79.85988027619442],[17.368015170977458,80.31889618602702],[20.455992059010697,80.59815562613224],[21.907944777115404,80.35767934846209],[22.919252557067438,80.6571442735935],[25.447625359811894,80.40734039989451]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Poland\",\"sov_a3\":\"POL\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Poland\",\"adm0_a3\":\"POL\",\"geou_dif\":0,\"geounit\":\"Poland\",\"gu_a3\":\"POL\",\"su_dif\":0,\"subunit\":\"Poland\",\"su_a3\":\"POL\",\"brk_diff\":0,\"name\":\"Poland\",\"name_long\":\"Poland\",\"brk_a3\":\"POL\",\"brk_name\":\"Poland\",\"brk_group\":null,\"abbrev\":\"Pol.\",\"postal\":\"PL\",\"formal_en\":\"Republic of Poland\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Poland\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":7,\"mapcolor9\":1,\"mapcolor13\":2,\"pop_est\":38482919,\"gdp_md_est\":667900,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"PL\",\"iso_a3\":\"POL\",\"iso_n3\":\"616\",\"un_a3\":\"616\",\"wb_a2\":\"PL\",\"wb_a3\":\"POL\",\"woe_id\":-99,\"adm0_a3_is\":\"POL\",\"adm0_a3_us\":\"POL\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[15.01699588385867,51.10667409932158],[14.607098422919535,51.74518809671997],[14.685026482815687,52.0899474147552],[14.437599725002201,52.62485016540839],[14.074521111719491,52.98126251892543],[14.353315463934138,53.24817129171297],[14.119686313542587,53.75702912049104],[14.802900424873458,54.05070628520575],[16.36347700365573,54.513158677785725],[17.622831658608675,54.85153595643291],[18.62085859546164,54.68260569927078],[18.696254510175464,54.43871877706929],[19.660640089606403,54.42608388937393],[20.892244500418627,54.31252492941253],[22.731098667092652,54.327536932993326],[23.24398725758951,54.22056671814914],[23.48412763844985,53.91249766704114],[23.527535841575002,53.470121568406555],[23.80493493011778,53.089731350306074],[23.79919884613338,52.69109935160657],[23.199493849386187,52.48697744405367],[23.508002150168693,52.02364655212473],[23.527070753684374,51.57845408793024],[24.029985792748903,50.70540660257518],[23.922757195743262,50.42488108987875],[23.426508416444392,50.308505764357456],[22.518450148211603,49.47677358661974],[22.776418898212626,49.02739533140962],[22.558137648211755,49.085738023467144],[21.607808058364213,49.47010732685409],[20.887955356538413,49.32877228453583],[20.415839471119853,49.43145335549977],[19.825022820726872,49.21712535256923],[19.320712517990472,49.571574001659194],[18.90957482267632,49.435845852244576],[18.853144158613617,49.49622976337764],[18.392913852622172,49.98862864847075],[17.64944502123899,50.049038397819956],[17.55456709155112,50.36214590107642],[16.86876915860566,50.47397370055603],[16.719475945714436,50.21574656839354],[16.176253289462267,50.42260732685791],[16.23862674323857,50.69773265237984],[15.490972120839729,50.78472992614321],[15.01699588385867,51.10667409932158]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Portugal\",\"sov_a3\":\"PRT\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Portugal\",\"adm0_a3\":\"PRT\",\"geou_dif\":0,\"geounit\":\"Portugal\",\"gu_a3\":\"PRT\",\"su_dif\":1,\"subunit\":\"Portugal\",\"su_a3\":\"PR1\",\"brk_diff\":0,\"name\":\"Portugal\",\"name_long\":\"Portugal\",\"brk_a3\":\"PR1\",\"brk_name\":\"Portugal\",\"brk_group\":null,\"abbrev\":\"Port.\",\"postal\":\"P\",\"formal_en\":\"Portuguese Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Portugal\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":7,\"mapcolor9\":1,\"mapcolor13\":4,\"pop_est\":10707924,\"gdp_md_est\":208627,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":0,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"PT\",\"iso_a3\":\"PRT\",\"iso_n3\":\"620\",\"un_a3\":\"620\",\"wb_a2\":\"PT\",\"wb_a3\":\"PRT\",\"woe_id\":-99,\"adm0_a3_is\":\"PRT\",\"adm0_a3_us\":\"PRT\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":8,\"long_len\":8,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-9.034817674180246,41.880570583659676],[-8.67194576662672,42.13468943945496],[-8.263856980817792,42.28046865495034],[-8.013174607769912,41.790886135417125],[-7.422512986673795,41.79207469335984],[-7.251308966490824,41.91834605566505],[-6.668605515967656,41.883386949219584],[-6.389087693700915,41.381815497394655],[-6.851126674822552,41.11108266861753],[-6.864019944679385,40.33087189387483],[-7.026413133156595,40.184524237624245],[-7.066591559263529,39.711891587882775],[-7.498632371439726,39.62957103124181],[-7.098036668313128,39.03007274022379],[-7.374092169616318,38.37305858006492],[-7.029281175148796,38.07576406508977],[-7.166507941099865,37.803894354802225],[-7.537105475281024,37.42890432387624],[-7.453725551778092,37.09778758396607],[-7.855613165711986,36.83826854099627],[-8.382816127953689,36.97888011326246],[-8.898856980820327,36.86880931248078],[-8.746101446965554,37.65134552667661],[-8.83999752443988,38.266243394517616],[-9.287463751655224,38.3584858261586],[-9.526570603869715,38.73742910415491],[-9.446988898140233,39.39206614842837],[-9.048305223008427,39.75509308527877],[-8.977353481471681,40.15930613866581],[-8.768684047877102,40.76063894303019],[-8.79085323733031,41.18433401139126],[-8.99078935386757,41.54345937760364],[-9.034817674180246,41.880570583659676]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Romania\",\"sov_a3\":\"ROU\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Romania\",\"adm0_a3\":\"ROU\",\"geou_dif\":0,\"geounit\":\"Romania\",\"gu_a3\":\"ROU\",\"su_dif\":0,\"subunit\":\"Romania\",\"su_a3\":\"ROU\",\"brk_diff\":0,\"name\":\"Romania\",\"name_long\":\"Romania\",\"brk_a3\":\"ROU\",\"brk_name\":\"Romania\",\"brk_group\":null,\"abbrev\":\"Rom.\",\"postal\":\"RO\",\"formal_en\":\"Romania\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Romania\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":4,\"mapcolor9\":3,\"mapcolor13\":13,\"pop_est\":22215421,\"gdp_md_est\":271400,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"RO\",\"iso_a3\":\"ROU\",\"iso_n3\":\"642\",\"un_a3\":\"642\",\"wb_a2\":\"RO\",\"wb_a3\":\"ROM\",\"woe_id\":-99,\"adm0_a3_is\":\"ROU\",\"adm0_a3_us\":\"ROU\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[22.710531447040495,47.88219391538941],[23.142236362406805,48.09634105080695],[23.76095828623741,47.985598456405455],[24.40205610525038,47.98187775328043],[24.866317172960578,47.737525743188314],[25.20774336111299,47.89105642352747],[25.9459411964024,47.987148749374214],[26.19745039236693,48.22088125263035],[26.619336785597795,48.22072622333347],[26.924176059687568,48.123264472030996],[27.233872918412743,47.82677094175638],[27.551166212684848,47.40511709247083],[28.128030226359044,46.810476386088254],[28.160017937947714,46.37156260841722],[28.0544429867754,45.944586086605625],[28.233553501099042,45.488283189468376],[28.67977949393938,45.304030870131704],[29.149724969201653,45.464925442072456],[29.603289015427436,45.293308010431126],[29.62654340995877,45.0353909368624],[29.141611769331835,44.820210272799045],[28.8378577003202,44.913873806328056],[28.558081495891997,43.70746165625813],[27.970107049275075,43.81246816667522],[27.242399529740908,44.175986029632405],[26.065158725699746,43.94349376075127],[25.569271681426926,43.68844472917472],[24.100679152124172,43.74105133724785],[23.332302280376325,43.897010809904714],[22.944832391051847,43.82378530534713],[22.65714969248299,44.23492300066128],[22.4740084164406,44.40922760678177],[22.705725538837356,44.57800283464702],[22.459022251075936,44.7025171982543],[22.14508792490281,44.47842234962059],[21.56202273935361,44.7689472519655],[21.483526238702236,45.18117015235778],[20.874312778413355,45.416375433934235],[20.762174920339987,45.73457306577144],[20.220192498462836,46.127468980486555],[21.02195234547125,46.3160879583519],[21.626514926853872,46.99423777931816],[22.099767693782837,47.6724392767167],[22.710531447040495,47.88219391538941]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Republic of Serbia\",\"sov_a3\":\"SRB\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Republic of Serbia\",\"adm0_a3\":\"SRB\",\"geou_dif\":0,\"geounit\":\"Republic of Serbia\",\"gu_a3\":\"SRB\",\"su_dif\":0,\"subunit\":\"Republic of Serbia\",\"su_a3\":\"SRB\",\"brk_diff\":0,\"name\":\"Serbia\",\"name_long\":\"Serbia\",\"brk_a3\":\"SRB\",\"brk_name\":\"Serbia\",\"brk_group\":null,\"abbrev\":\"Serb.\",\"postal\":\"RS\",\"formal_en\":\"Republic of Serbia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Serbia\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":3,\"mapcolor9\":2,\"mapcolor13\":10,\"pop_est\":7379339,\"gdp_md_est\":80340,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"RS\",\"iso_a3\":\"SRB\",\"iso_n3\":\"688\",\"un_a3\":\"688\",\"wb_a2\":\"YF\",\"wb_a3\":\"SRB\",\"woe_id\":-99,\"adm0_a3_is\":\"SRB\",\"adm0_a3_us\":\"SRB\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.87431277841341,45.41637543393432],[21.48352623870221,45.18117015235788],[21.562022739353722,44.76894725196564],[22.145087924902896,44.47842234962059],[22.459022251075965,44.70251719825444],[22.70572553883744,44.57800283464701],[22.474008416440654,44.40922760678177],[22.657149692483074,44.234923000661354],[22.410446404721597,44.008063462900054],[22.500156691180223,43.642814439461006],[22.986018507588483,43.2111612005271],[22.60480146657136,42.898518785161116],[22.436594679461393,42.58032115332395],[22.54501183440965,42.46136200618804],[22.38052575042468,42.32025950781508],[21.917080000000112,42.30364],[21.57663598940212,42.24522439706186],[21.54332,42.3202500000001],[21.66292,42.43922],[21.77505,42.6827],[21.63302,42.67717],[21.43866,42.86255],[21.27421,42.90959],[21.143395,43.06868500000013],[20.95651,43.13094],[20.81448,43.27205],[20.63508,43.21671],[20.49679,42.88469],[20.25758,42.81275000000011],[20.3398,42.89852],[19.95857,43.10604],[19.63,43.21377997027054],[19.48389,43.35229],[19.21852,43.52384],[19.454,43.56810000000013],[19.59976,44.03847],[19.11761,44.42307000000011],[19.36803,44.863],[19.00548,44.86023],[19.39047570158459,45.236515611342384],[19.072768995854176,45.52151113543209],[18.82982,45.90888],[19.59604454924164,46.17172984474456],[20.220192498462893,46.12746898048658],[20.762174920339987,45.734573065771485],[20.87431277841341,45.41637543393432]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Russia\",\"sov_a3\":\"RUS\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Russia\",\"adm0_a3\":\"RUS\",\"geou_dif\":0,\"geounit\":\"Russia\",\"gu_a3\":\"RUS\",\"su_dif\":0,\"subunit\":\"Russia\",\"su_a3\":\"RUS\",\"brk_diff\":0,\"name\":\"Russia\",\"name_long\":\"Russian Federation\",\"brk_a3\":\"RUS\",\"brk_name\":\"Russia\",\"brk_group\":null,\"abbrev\":\"Rus.\",\"postal\":\"RUS\",\"formal_en\":\"Russian Federation\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Russian Federation\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":5,\"mapcolor9\":7,\"mapcolor13\":7,\"pop_est\":140041247,\"gdp_md_est\":2266000,\"pop_year\":-99,\"lastcensus\":2010,\"gdp_year\":-99,\"economy\":\"3. Emerging region: BRIC\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"RU\",\"iso_a3\":\"RUS\",\"iso_n3\":\"643\",\"un_a3\":\"643\",\"wb_a2\":\"RU\",\"wb_a3\":\"RUS\",\"woe_id\":-99,\"adm0_a3_is\":\"RUS\",\"adm0_a3_us\":\"RUS\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":18,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[143.64800744036287,50.74760040954152],[144.65414757708564,48.976390692737596],[143.17392785051723,49.30655141865037],[142.5586682476501,47.861575018904915],[143.53349246640406,46.83672801369249],[143.50527713437262,46.13790761980948],[142.74770063697392,46.74076487892657],[142.0920300640545,45.96675527605879],[141.90692508358504,46.80592886004655],[142.0184428244709,47.780132961612935],[141.90444461483506,48.85918854429957],[142.13580000220568,49.61516307229746],[142.1799833518153,50.95234243428192],[141.59407596249005,51.93543488220254],[141.68254601457366,53.30196645772878],[142.60693403541077,53.762145087287905],[142.2097489768154,54.22547597921687],[142.654786411713,54.36588084575388],[142.91461551327657,53.70457754171474],[143.26084760963207,52.74076040303905],[143.23526777564766,51.75666026468875],[143.64800744036287,50.74760040954152]]],[[[22.731098667092652,54.327536932993326],[20.892244500418656,54.312524929412575],[19.660640089606403,54.426083889373984],[19.888481479581344,54.8661603867715],[21.2684489275035,55.19048167583529],[22.315723504330606,55.0152985703659],[22.757763706155288,54.85657440858142],[22.651051873472568,54.58274099386671],[22.731098667092652,54.327536932993326]]],[[[-175.01425,66.58435],[-174.33983,66.33556],[-174.57182,67.06219],[-171.85731,66.91308],[-169.89958,65.97724],[-170.89107,65.54139],[-172.53025,65.43791],[-172.555,64.46079],[-172.95533,64.25269],[-173.89184,64.2826],[-174.65392,64.63125],[-175.98353,64.92288],[-176.20716,65.35667],[-177.22266,65.52024],[-178.35993,65.39052],[-178.90332,65.74044],[-178.68611,66.11211],[-179.88377,65.87456],[-179.43268,65.40411],[-180,64.97970870219837],[-180,68.96363636363637],[-177.55,68.2],[-174.92825,67.20589],[-175.01425,66.58435]]],[[[180.00000000000014,70.83219920854668],[178.9034250000001,70.78114],[178.7253,71.0988],[180.00000000000014,71.51571433642826],[180.00000000000014,70.83219920854668]]],[[[-178.69378,70.89302],[-180,70.83219920854668],[-180,71.51571433642826],[-179.87187,71.55762],[-179.02433,71.55553],[-177.577945,71.26948],[-177.663575,71.13277],[-178.69378,70.89302]]],[[[143.60385,73.21244],[142.08763,73.20544],[140.038155,73.31692],[139.86312,73.36983],[140.81171,73.76506],[142.06207,73.85758],[143.48283,73.47525],[143.60385,73.21244]]],[[[150.73167,75.08406],[149.575925,74.68892],[147.97746,74.778355],[146.11919,75.17298],[146.358485,75.49682],[148.22223,75.345845],[150.73167,75.08406]]],[[[145.086285,75.56262],[144.3,74.82],[140.61381,74.84768],[138.95544,74.61148],[136.97439,75.26167],[137.51176,75.94917],[138.831075,76.13676],[141.47161,76.09289],[145.086285,75.56262]]],[[[57.5356925799924,70.72046397570216],[56.94497928246395,70.63274323188668],[53.6773751157842,70.76265778266847],[53.41201663596539,71.2066616889202],[51.60189456564572,71.47475901965049],[51.45575361512422,72.01488108996514],[52.47827518088357,72.22944163684096],[52.444168735570855,72.77473135038485],[54.42761355979766,73.62754751249759],[53.50828982932515,73.74981395130015],[55.90245893740766,74.62748647734534],[55.631932814359715,75.08141225859717],[57.86864383324885,75.60939036732321],[61.170044386647504,76.25188345000814],[64.49836836127022,76.43905548776928],[66.2109770038551,76.80978221303124],[68.15705976753483,76.93969676381292],[68.85221113472514,76.54481130645462],[68.18057254422766,76.23364166940911],[64.63732628770302,75.73775462513623],[61.58350752141476,75.2608845079468],[58.47708214705338,74.30905630156283],[56.98678551618801,73.33304352486624],[55.419335971910954,72.37126760526598],[55.622837762276305,71.54059479439033],[57.5356925799924,70.72046397570216]]],[[[106.97013000000013,76.97419],[107.24000000000015,76.48],[108.1538,76.72335000000015],[111.07726000000017,76.71],[113.33151,76.22224],[114.13417,75.84764],[113.88539,75.32779000000014],[112.77918,75.03186],[110.1512500000002,74.47673],[109.4,74.18],[110.64,74.04],[112.11919,73.78774000000013],[113.01954000000026,73.97693000000015],[113.52958000000032,73.33505000000011],[113.96881,73.5948800000001],[115.56782,73.75285],[118.77633000000023,73.58772],[119.02,73.12],[123.20066000000011,72.97122],[123.25777000000019,73.73503000000011],[125.3800000000002,73.56],[126.97644,73.56549],[128.59126,73.03871],[129.05157,72.39872],[128.46000000000012,71.98],[129.71599000000023,71.19304],[131.28858000000028,70.78699000000012],[132.25350000000017,71.83630000000011],[133.85766000000032,71.38642000000016],[135.56193,71.65525000000014],[137.49755,71.34763],[138.23409000000018,71.62803],[139.86983000000012,71.48783000000014],[139.14791,72.41619000000011],[140.46817,72.84941000000015],[149.5,72.2],[150.3511800000002,71.60643],[152.96890000000022,70.84222],[157.00688,71.03141],[158.99779,70.86672],[159.83031000000025,70.45324],[159.70866,69.72198],[160.94053000000034,69.4372800000001],[162.27907000000013,69.64204],[164.05248000000014,69.66823],[165.94037000000023,69.47199],[167.83567,69.58269],[169.5776300000002,68.6938],[170.81688000000028,69.01363],[170.0082000000002,69.65276],[170.4534500000003,70.09703],[173.64391000000026,69.81743],[175.72403000000023,69.87725000000023],[178.6,69.4],[180.00000000000014,68.96363636363657],[180.00000000000014,64.97970870219848],[179.99281,64.97433],[178.70720000000026,64.53493],[177.41128000000018,64.60821],[178.31300000000024,64.07593],[178.9082500000002,63.25197000000014],[179.37034,62.98262000000011],[179.48636,62.56894],[179.22825000000014,62.30410000000015],[177.3643,62.5219],[174.56929000000022,61.76915],[173.68013,61.65261],[172.15,60.95],[170.6985000000001,60.33618],[170.3308500000003,59.88177],[168.90046,60.57355],[166.29498000000032,59.788550000000214],[165.84000000000023,60.16],[164.87674,59.7316],[163.53929000000014,59.86871],[163.21711000000025,59.21101],[162.0173300000001,58.24328],[162.05297,57.83912],[163.19191,57.615030000000104],[163.05794000000017,56.159240000000125],[162.12958000000023,56.12219],[161.70146,55.285680000000156],[162.11749000000017,54.85514],[160.36877000000035,54.34433],[160.02173000000025,53.20257],[158.5309400000002,52.95868000000024],[158.23118,51.94269],[156.7897900000003,51.01105],[156.42000000000016,51.7],[155.99182,53.15895],[155.43366000000012,55.38103000000012],[155.91442000000032,56.767920000000146],[156.75815,57.3647],[156.8103500000001,57.83204],[158.3643300000002,58.05575],[160.15064000000015,59.314770000000124],[161.87204,60.34300000000013],[163.66969,61.1409000000001],[164.47355000000013,62.55061],[163.2584200000002,62.46627],[162.65791,61.6425],[160.1214800000001,60.54423],[159.30232,61.7739600000001],[156.7206800000001,61.43442],[154.21806000000035,59.758180000000124],[155.04375,59.14495],[152.81185,58.88385],[151.26573000000027,58.78089],[151.33815000000013,59.50396],[149.78371,59.65573000000015],[148.54481,59.16448],[145.48722,59.33637],[142.19782000000018,59.03998],[138.95848000000032,57.08805],[135.12619,54.72959],[136.70171,54.603550000000126],[137.19342,53.97732],[138.1647,53.755010000000254],[138.80463,54.25455000000011],[139.90151,54.18968000000018],[141.34531,53.08957000000012],[141.37923,52.23877],[140.5974200000002,51.2396700000001],[140.51308,50.04553000000013],[140.06193000000022,48.44671000000017],[138.55472000000023,46.99965],[138.21971,46.30795],[136.86232,45.14350000000019],[135.5153500000002,43.989],[134.86939000000027,43.39821],[133.53687000000028,42.81147],[132.90627000000015,42.7984900000001],[132.27807000000027,43.28456000000011],[130.93587000000016,42.55274],[130.78,42.2200000000002],[130.64000000000019,42.395],[130.63386640840983,42.90301463477056],[131.144687941615,42.92998973242695],[131.28855512911562,44.111519680348266],[131.02519000000026,44.96796],[131.8834542176596,45.32116160743652],[133.09712000000022,45.14409],[133.7696439963132,46.116926988299156],[134.1123500000002,47.21248000000014],[134.50081,47.578450000000146],[135.0263114767868,48.47822988544391],[133.37359581922803,48.18344167743484],[132.50669000000013,47.78896],[130.98726000000013,47.79013],[130.58229332898267,48.729687404976204],[129.3978178244205,49.440600084015614],[127.65740000000037,49.76027],[127.28745568248493,50.73979726826545],[126.93915652883786,51.35389415140591],[126.564399041857,51.7842554795327],[125.94634891164648,52.79279857035695],[125.06821129771046,53.16104482686893],[123.57147,53.4588],[122.24574791879306,53.431725979213695],[121.00308475147037,53.25140106873124],[120.1770886577169,52.75388621684121],[120.725789015792,52.51622630473091],[120.7382,51.96411],[120.18208000000018,51.64355],[119.27939,50.58292],[119.28846072802585,50.14288279886196],[117.8792444194265,49.51098338479704],[116.67880089728621,49.888531399121405],[115.48569542853144,49.80517731383475],[114.9621098165504,50.14024730081513],[114.36245649623535,50.248302720737485],[112.89773969935439,49.54356537535699],[111.58123091028668,49.37796824807768],[110.66201053267886,49.13012807880585],[109.40244917199672,49.29296051695769],[108.47516727095129,49.28254771585071],[107.86817589725112,49.793705145865886],[106.88880415245532,50.27429596618029],[105.8865914245869,50.406019192092174],[104.62158,50.275320000000164],[103.67654544476036,50.089966132195144],[102.25589000000011,50.51056000000011],[102.06521,51.259910000000104],[100.88948042196265,51.51685578063842],[99.98173221232358,51.63400625264396],[98.8614905131005,52.04736603454671],[97.82573978067452,51.01099518493325],[98.23176150919173,50.42240062112873],[97.25976000000023,49.72605],[95.81402000000017,49.97746000000012],[94.81594933469879,50.01343333597089],[94.14756635943561,50.48053660745717],[93.10421,50.49529],[92.23471154171969,50.80217072204175],[90.71366743364078,50.331811835321105],[88.80556684769559,49.47052073831247],[87.75126427607685,49.29719798440556],[87.3599703307627,49.21498078062916],[86.82935672398966,49.82667470966814],[85.5412699726825,49.69285858824816],[85.11555952346211,50.11730296487764],[84.41637739455305,50.311399644565824],[83.93511478061893,50.88924551045358],[83.38300377801247,51.069182847693895],[81.94598554883996,50.81219594990634],[80.56844689323546,51.38833649352844],[80.03555952344172,50.864750881547224],[77.80091556184433,53.40441498474755],[76.52517947785478,54.17700348572714],[76.89110029491346,54.49052440044193],[74.38482000000013,53.54685000000012],[73.42567874542053,53.489810289109755],[73.50851606638437,54.0356167669766],[72.22415001820221,54.37665538188679],[71.1801310566095,54.13328522400826],[70.86526655465516,55.169733588270105],[69.0681669452729,55.3852501491435],[68.16910037625891,54.97039175070438],[65.6668700000001,54.601250000000164],[65.17853356309595,54.35422781027208],[61.43660000000014,54.00625],[60.97806644068325,53.66499339457914],[61.699986199800634,52.97999644633427],[60.73999311711455,52.71998647725775],[60.92726850774025,52.44754832621501],[59.967533807215574,51.960420437215674],[61.58800337102414,51.272658799843185],[61.33742435084102,50.79907013610426],[59.932807244715576,50.842194118851836],[59.64228234237058,50.545442206415714],[58.36332000000013,51.06364],[56.77798,51.04355],[55.71694000000011,50.62171000000015],[54.532878452376195,51.02623973245937],[52.32872358583106,51.718652248738096],[50.76664839051219,51.692762356159875],[48.70238162618105,50.60512848571284],[48.577841424357615,49.874759629915644],[47.549480421749394,50.454698391311126],[46.75159630716277,49.35600576435374],[47.0436715024766,49.152038886097586],[46.4664457537763,48.39415233010493],[47.31524000000016,47.71585],[48.05725,47.74377],[48.694733514201886,47.0756281601779],[48.593250000000154,46.561040000000105],[49.101160000000135,46.399330000000106],[48.64541000000011,45.80629],[47.67591,45.64149000000012],[46.68201,44.6092000000001],[47.59094,43.66016000000013],[47.49252,42.98658],[48.58437000000018,41.80888],[47.98728315612604,41.4058192001944],[47.81566572448466,41.15141612402135],[47.373315464066394,41.21973236751114],[46.686070591016716,41.827137152669906],[46.40495079934894,41.86067515722743],[45.7764,42.09244000000024],[45.470279168485916,42.50278066667005],[44.53762291848207,42.711992702803684],[43.93121000000011,42.55496000000011],[43.755990000000196,42.74083],[42.39440000000016,43.2203],[40.92219000000014,43.38215000000014],[40.07696495947985,43.553104153002494],[39.955008579271095,43.434997666999294],[38.68,44.28],[37.53912000000011,44.65721],[36.67546000000013,45.24469],[37.40317,45.4045100000001],[38.23295,46.24087],[37.67372,46.63657],[39.14767,47.044750000000136],[39.12120000000013,47.26336],[38.22353803889948,47.10218984637598],[38.25511233902981,47.54640045835697],[38.77057,47.82562000000024],[39.738277622238996,47.89893707945208],[39.89562000000015,48.23241],[39.67465,48.783820000000134],[40.08078901546949,49.30742991799937],[40.069040000000115,49.60105],[38.59498823421356,49.92646190042373],[38.010631137857075,49.91566152607473],[37.39345950699524,50.38395335550368],[36.626167840325394,50.225590928745135],[35.35611616388812,50.57719737405915],[35.37791,50.77394],[35.02218305841794,51.2075723333715],[34.22481570815441,51.255993150428935],[34.14197838719062,51.566413479206204],[34.391730584457235,51.768881740925906],[33.75269982273588,52.33507457133166],[32.71576053236717,52.238465481162166],[32.412058139787774,52.28869497334978],[32.15944000000022,52.061250000000115],[31.78597,52.10168],[31.54001834486226,52.74205231384644],[31.305200636527985,53.07399587667331],[31.49764,53.16743000000014],[32.304519484188376,53.13272614197285],[32.693643019346126,53.35142080343215],[32.405598585751164,53.618045355842014],[31.731272820774592,53.79402944601202],[31.791424187962406,53.974638576872195],[31.384472283663825,54.15705638286238],[30.75753380709878,54.8117709417844],[30.97183597181325,55.081547756564134],[30.87390913262007,55.55097646750352],[29.89629438652244,55.7894632025305],[29.37157189303079,55.67009064393628],[29.229513380660393,55.91834422466641],[28.17670942557794,56.16912995057879],[27.855282016722526,56.75932648378438],[27.770015903440992,57.2442581244112],[27.288184848751655,57.47452830670392],[27.71668582531578,57.79189911562446],[27.420150000000206,58.72457000000014],[28.131699253051863,59.300825100331],[27.98112,59.47537],[29.1177,60.02805000000012],[28.07,60.50352000000015],[30.211107212044652,61.780027777749694],[31.139991082491036,62.35769277612445],[31.516092156711267,62.867687486412905],[30.035872430142803,63.552813625738565],[30.44468468600374,64.20445343693908],[29.544429559047018,64.94867157659056],[30.21765,65.80598],[29.054588657352383,66.94428620062203],[29.977426385220696,67.69829702419275],[28.445943637818772,68.364612942164],[28.591929559043365,69.0647769232867],[29.39955,69.15692000000018],[31.10108000000011,69.55811],[32.13272000000026,69.90595000000025],[33.77547,69.30142000000012],[36.51396,69.06342],[40.292340000000166,67.9324],[41.05987000000013,67.45713000000012],[41.12595000000019,66.79158000000012],[40.01583,66.26618000000013],[38.38295,65.9995300000001],[33.918710000000175,66.75961],[33.18444,66.63253],[34.81477,65.90015000000014],[34.87857425307877,65.4362128770482],[34.94391000000016,64.41437000000016],[36.23129,64.10945],[37.01273000000012,63.84983000000011],[37.14197000000016,64.33471],[36.539579035089815,64.76446],[37.17604000000014,65.14322000000013],[39.59345,64.52079000000018],[40.43560000000011,64.76446],[39.76260000000016,65.49682],[42.0930900000001,66.47623],[43.01604000000012,66.4185800000001],[43.94975000000014,66.06908],[44.53226,66.75634000000014],[43.69839,67.35245],[44.18795000000014,67.95051],[43.45282,68.57079],[46.25000000000014,68.25],[46.82134000000016,67.68997],[45.55517,67.56652],[45.5620200000001,67.0100500000002],[46.34915000000015,66.6676700000001],[47.894160000000255,66.88455000000016],[48.13876,67.52238],[50.22766000000016,67.99867000000015],[53.71743000000018,68.85738000000012],[54.47171,68.80815],[53.48582000000013,68.20131],[54.72628,68.09702],[55.44268000000014,68.43866],[57.317020000000156,68.46628],[58.80200000000022,68.88082],[59.94142000000019,68.2784400000001],[61.07784000000018,68.94069],[60.03,69.52],[60.55,69.85],[63.50400000000016,69.54739],[64.888115,69.23483500000015],[68.51216000000014,68.09233000000017],[69.18068,68.61563000000012],[68.16444,69.14436],[68.13522,69.35649],[66.93008000000012,69.45461000000012],[67.25976,69.92873],[66.72492000000014,70.70889000000014],[66.69466,71.02897000000024],[68.54006000000012,71.93450000000024],[69.19636000000011,72.84336000000016],[69.94,73.04000000000013],[72.58754,72.7762900000001],[72.79603,72.22006],[71.8481100000001,71.40898],[72.47011,71.09019],[72.79188,70.39114],[72.56470000000022,69.02085],[73.66787,68.4079],[73.2387,67.7404],[71.28000000000011,66.32000000000016],[72.42301000000018,66.17267000000018],[72.82077,66.53267],[73.92099000000016,66.78946000000013],[74.1865100000002,67.28429],[75.052,67.76047000000017],[74.46926000000016,68.32899],[74.93584000000013,68.98918],[73.84236,69.07146],[73.60187000000022,69.62763],[74.3998,70.63175],[73.1011,71.44717000000026],[74.89082000000022,72.12119],[74.65926,72.83227],[75.15801000000019,72.85497000000012],[75.68351,72.30056000000013],[75.28898000000012,71.33556],[76.35911,71.15287000000015],[75.90313000000017,71.87401],[77.57665000000011,72.26717],[79.65202000000014,72.32011],[81.5,71.75],[80.61071000000013,72.58285000000012],[80.51109,73.6482],[82.25,73.85000000000011],[84.65526,73.80591000000018],[86.82230000000024,73.93688],[86.00956,74.45967000000016],[87.16682000000017,75.11643],[88.31571000000011,75.14393],[90.26,75.64],[92.90058,75.77333],[93.23421000000016,76.0472],[95.86000000000016,76.1400000000001],[96.67821,75.91548],[98.92254000000023,76.44689],[100.75967000000023,76.43028],[101.03532,76.86189],[101.99084000000013,77.2875400000002],[104.3516000000001,77.69792],[106.06664000000015,77.37389],[104.70500000000024,77.1274],[106.97013000000013,76.97419]]],[[[105.07547,78.30689],[99.43814,77.921],[101.2649,79.23399],[102.08635,79.34641],[102.837815,79.28129],[105.37243,78.71334],[105.07547,78.30689]]],[[[51.13618655783128,80.54728017854094],[49.79368452332071,80.41542776154822],[48.89441124857754,80.3395667589437],[48.754936557821765,80.17546824820084],[47.586119012244154,80.01018117951534],[46.502825962109654,80.24724681265437],[47.07245527526291,80.55942414012947],[44.846958042181114,80.58980988231718],[46.79913862487123,80.77191762971364],[48.318477410684665,80.78400991486996],[48.522806023966695,80.51456899690015],[49.09718956889091,80.75398590770843],[50.03976769389462,80.91888540315182],[51.52293297710369,80.69972565380192],[51.13618655783128,80.54728017854094]]],[[[99.93976,78.88094],[97.75794,78.7562],[94.97259,79.044745],[93.31288,79.4265],[92.5454,80.14379],[91.18107,80.34146],[93.77766,81.0246],[95.940895,81.2504],[97.88385,80.746975],[100.186655,79.780135],[99.93976,78.88094]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Slovakia\",\"sov_a3\":\"SVK\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Slovakia\",\"adm0_a3\":\"SVK\",\"geou_dif\":0,\"geounit\":\"Slovakia\",\"gu_a3\":\"SVK\",\"su_dif\":0,\"subunit\":\"Slovakia\",\"su_a3\":\"SVK\",\"brk_diff\":0,\"name\":\"Slovakia\",\"name_long\":\"Slovakia\",\"brk_a3\":\"SVK\",\"brk_name\":\"Slovakia\",\"brk_group\":null,\"abbrev\":\"Svk.\",\"postal\":\"SK\",\"formal_en\":\"Slovak Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Slovak Republic\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":4,\"mapcolor9\":4,\"mapcolor13\":9,\"pop_est\":5463046,\"gdp_md_est\":119500,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"SK\",\"iso_a3\":\"SVK\",\"iso_n3\":\"703\",\"un_a3\":\"703\",\"wb_a2\":\"SK\",\"wb_a3\":\"SVK\",\"woe_id\":-99,\"adm0_a3_is\":\"SVK\",\"adm0_a3_us\":\"SVK\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":8,\"long_len\":8,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[18.853144158613617,49.49622976337764],[18.90957482267632,49.435845852244576],[19.320712517990472,49.571574001659194],[19.825022820726872,49.21712535256923],[20.415839471119853,49.43145335549977],[20.887955356538413,49.32877228453583],[21.607808058364213,49.47010732685409],[22.558137648211755,49.085738023467144],[22.28084191253356,48.82539215758067],[22.085608351334855,48.42226430927179],[21.872236362401736,48.31997081155002],[20.801293979584926,48.623854071642384],[20.473562045989866,48.562850043321816],[20.239054396249347,48.32756724709692],[19.769470656013112,48.202691148463614],[19.661363559658497,48.26661489520866],[19.17436486173989,48.11137889260387],[18.77702477384767,48.081768296900634],[18.696512892336926,47.880953681014404],[17.857132602620027,47.75842886005037],[17.48847293464982,47.867466132186216],[16.979666782304037,48.123497015976305],[16.879982944413,48.47001333270947],[16.960288120194576,48.5969823268506],[17.101984897538898,48.816968899117114],[17.545006951577108,48.80001902932537],[17.88648481616181,48.90347524677371],[17.913511590250465,48.996492824899086],[18.104972771891852,49.04398346617531],[18.170498488037964,49.271514797556435],[18.399993523846177,49.31500051533004],[18.554971144289482,49.495015367218784],[18.853144158613617,49.49622976337764]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Slovenia\",\"sov_a3\":\"SVN\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Slovenia\",\"adm0_a3\":\"SVN\",\"geou_dif\":0,\"geounit\":\"Slovenia\",\"gu_a3\":\"SVN\",\"su_dif\":0,\"subunit\":\"Slovenia\",\"su_a3\":\"SVN\",\"brk_diff\":0,\"name\":\"Slovenia\",\"name_long\":\"Slovenia\",\"brk_a3\":\"SVN\",\"brk_name\":\"Slovenia\",\"brk_group\":null,\"abbrev\":\"Slo.\",\"postal\":\"SLO\",\"formal_en\":\"Republic of Slovenia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Slovenia\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":3,\"mapcolor9\":2,\"mapcolor13\":12,\"pop_est\":2005692,\"gdp_md_est\":59340,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"SI\",\"iso_a3\":\"SVN\",\"iso_n3\":\"705\",\"un_a3\":\"705\",\"wb_a2\":\"SI\",\"wb_a3\":\"SVN\",\"woe_id\":-99,\"adm0_a3_is\":\"SVN\",\"adm0_a3_us\":\"SVN\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":8,\"long_len\":8,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[13.806475457421527,46.509306138691215],[14.63247155117483,46.43181732846955],[15.137091912504985,46.65870270444703],[16.011663852612656,46.6836107448117],[16.202298211337364,46.85238597267696],[16.370504998447416,46.841327216166505],[16.564808383864857,46.50375092221983],[15.768732944408553,46.23810822202345],[15.671529575267556,45.83415355079788],[15.323953891672405,45.73178253842768],[15.327674594797429,45.45231639259323],[14.935243767972935,45.471695054702685],[14.595109490627806,45.634940904312714],[14.411968214585414,45.46616567644746],[13.715059848697223,45.500323798192376],[13.937630242578308,45.59101593686462],[13.698109978905478,46.01677806251735],[13.806475457421527,46.509306138691215]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Sweden\",\"sov_a3\":\"SWE\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Sweden\",\"adm0_a3\":\"SWE\",\"geou_dif\":0,\"geounit\":\"Sweden\",\"gu_a3\":\"SWE\",\"su_dif\":0,\"subunit\":\"Sweden\",\"su_a3\":\"SWE\",\"brk_diff\":0,\"name\":\"Sweden\",\"name_long\":\"Sweden\",\"brk_a3\":\"SWE\",\"brk_name\":\"Sweden\",\"brk_group\":null,\"abbrev\":\"Swe.\",\"postal\":\"S\",\"formal_en\":\"Kingdom of Sweden\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Sweden\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":4,\"mapcolor9\":2,\"mapcolor13\":4,\"pop_est\":9059651,\"gdp_md_est\":344300,\"pop_year\":-99,\"lastcensus\":-99,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"SE\",\"iso_a3\":\"SWE\",\"iso_n3\":\"752\",\"un_a3\":\"752\",\"wb_a2\":\"SE\",\"wb_a3\":\"SWE\",\"woe_id\":-99,\"adm0_a3_is\":\"SWE\",\"adm0_a3_us\":\"SWE\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[22.18317345550193,65.72374054632017],[21.21351687997722,65.02600535751527],[21.369631381930958,64.41358795842429],[19.77887576669022,63.60955434839504],[17.84777916837521,62.74940013289681],[17.119554884518124,61.34116567651097],[17.83134606290639,60.63658336042741],[18.78772179533209,60.081914374422595],[17.86922488777634,58.9537661810587],[16.829185011470088,58.71982697207339],[16.447709588291474,57.041118069071885],[15.879785597403783,56.10430186626866],[14.666681349352075,56.200885118222175],[14.100721062891465,55.40778107362265],[12.942910597392057,55.36173737245058],[12.625100538797028,56.30708018658197],[11.787942335668674,57.44181712506307],[11.027368605196868,58.85614940045936],[11.468271925511146,59.43239329694604],[12.3003658382749,60.11793284773003],[12.631146681375185,61.293571682370136],[11.992064243221563,61.80036245385655],[11.930569288794231,63.12831757267698],[12.579935336973934,64.06621898055833],[13.571916131248713,64.04911408146971],[13.919905226302204,64.44542064071608],[13.55568973150909,64.78702769638151],[15.108411492583002,66.19386688909547],[16.108712192456778,67.30245555283689],[16.768878614985482,68.0139366726314],[17.729181756265348,68.01055186631628],[17.993868442464333,68.56739126247736],[19.878559604581255,68.40719432237258],[20.025268995857886,69.0651386583127],[20.645592889089528,69.10624726020087],[21.978534783626117,68.6168456081807],[23.53947309743444,67.93600861273525],[23.565879754335583,66.39605093043743],[23.903378533633802,66.00692739527962],[22.18317345550193,65.72374054632017]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Ukraine\",\"sov_a3\":\"UKR\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Ukraine\",\"adm0_a3\":\"UKR\",\"geou_dif\":0,\"geounit\":\"Ukraine\",\"gu_a3\":\"UKR\",\"su_dif\":0,\"subunit\":\"Ukraine\",\"su_a3\":\"UKR\",\"brk_diff\":0,\"name\":\"Ukraine\",\"name_long\":\"Ukraine\",\"brk_a3\":\"UKR\",\"brk_name\":\"Ukraine\",\"brk_group\":null,\"abbrev\":\"Ukr.\",\"postal\":\"UA\",\"formal_en\":\"Ukraine\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Ukraine\",\"name_alt\":null,\"mapcolor7\":5,\"mapcolor8\":1,\"mapcolor9\":6,\"mapcolor13\":3,\"pop_est\":45700395,\"gdp_md_est\":339800,\"pop_year\":-99,\"lastcensus\":2001,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"4. Lower middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"UA\",\"iso_a3\":\"UKR\",\"iso_n3\":\"804\",\"un_a3\":\"804\",\"wb_a2\":\"UA\",\"wb_a3\":\"UKR\",\"woe_id\":-99,\"adm0_a3_is\":\"UKR\",\"adm0_a3_us\":\"UKR\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[31.785998162571587,52.101677964885454],[32.15941206231267,52.06126699483322],[32.41205813978763,52.28869497334975],[32.71576053236697,52.23846548116205],[33.75269982273571,52.335074571331695],[34.39173058445701,51.76888174092579],[34.14197838719039,51.56641347920623],[34.22481570815427,51.25599315042896],[35.02218305841788,51.20757233337146],[35.37792361831512,50.77395539001035],[35.35611616388795,50.57719737405906],[36.62616784032534,50.225590928745135],[37.39345950699507,50.38395335550359],[38.010631137856905,49.91566152607463],[38.59498823421342,49.92646190042363],[40.06905846533911,49.6010554062817],[40.08078901546935,49.307429917999286],[39.67466393408753,48.78381846780188],[39.89563235856758,48.23240509703143],[39.738277622238826,47.89893707945199],[38.7705847511412,47.825608222029814],[38.25511233902975,47.546400458356814],[38.22353803889942,47.102189846375886],[37.42513715998999,47.022220567404204],[36.75985477066439,46.698700263040934],[35.82368452326483,46.64596446388707],[34.96234174982388,46.27319651954964],[35.020787794745985,45.65121898048466],[35.51000857925317,45.40999339454619],[36.52999799983016,45.46998973243706],[36.33471276219916,45.113215643893966],[35.23999922052812,44.939996242851606],[33.882511020652885,44.36147858334407],[33.326420932760044,44.56487702084489],[33.54692426934946,45.03477081967489],[32.4541744321055,45.32746613217608],[32.630804477679135,45.51918569597891],[33.58816206231839,45.85156850848024],[33.29856733575471,46.080598456397844],[31.74414025241518,46.333347886737386],[31.675307244602408,46.70624502215554],[30.7487488136091,46.583100084004],[30.377608676888883,46.03241018328567],[29.603289015427436,45.293308010431126],[29.149724969201653,45.464925442072456],[28.67977949393938,45.304030870131704],[28.233553501099042,45.488283189468376],[28.485269402792767,45.5969070501459],[28.65998742037158,45.93998688413164],[28.933717482221624,46.2588304713725],[28.862972446414062,46.43788930926383],[29.07210696789929,46.517677720722496],[29.170653924279886,46.3792623968287],[29.759971958136394,46.34998769793536],[30.024658644335375,46.42393667254504],[29.838210076626297,46.52532583270169],[29.908851759569302,46.67436066343146],[29.559674106573112,46.928582872091326],[29.415135125452736,47.34664520933258],[29.05086795422733,47.5102269557525],[29.12269819511303,47.849095160506465],[28.670891147585166,48.1181485052341],[28.259546746541844,48.15556224221342],[27.522537469195157,48.467119452501116],[26.857823520624805,48.368210761094495],[26.619336785597795,48.22072622333347],[26.19745039236693,48.22088125263035],[25.9459411964024,47.987148749374214],[25.20774336111299,47.89105642352747],[24.866317172960578,47.737525743188314],[24.40205610525038,47.98187775328043],[23.76095828623741,47.985598456405455],[23.142236362406805,48.09634105080695],[22.710531447040495,47.88219391538941],[22.640819939878753,48.15023956968736],[22.085608351334855,48.42226430927179],[22.28084191253356,48.82539215758067],[22.558137648211755,49.085738023467144],[22.776418898212626,49.02739533140962],[22.518450148211603,49.47677358661974],[23.426508416444392,50.308505764357456],[23.922757195743262,50.42488108987875],[24.029985792748903,50.70540660257518],[23.527070753684374,51.57845408793024],[24.00507775238421,51.61744395609446],[24.553106316839518,51.888461005249184],[25.32778771332701,51.91065603291855],[26.337958611768556,51.83228872334793],[27.454066196408434,51.59230337178447],[28.24161502453657,51.57222707783907],[28.61761274589225,51.42771393493484],[28.992835320763533,51.602044379271476],[29.254938185347925,51.368234361366895],[30.157363722460897,51.41613841410147],[30.555117221811457,51.31950348571566],[30.619454380014844,51.822806098022376],[30.927549269338982,52.04235342061439],[31.785998162571587,52.101677964885454]]]}}]}",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\n# ruff: noqa\n## file: app.py\n# example and data from:\n# https://ipyleaflet.readthedocs.io/en/latest/layers/geo_json.html\n# https://ipyleaflet.readthedocs.io/en/latest/layers/marker.html\nimport json\nimport pathlib\nimport random\n\nfrom ipyleaflet import GeoJSON, Map, Marker  \nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\nhere = pathlib.Path(__file__)\nwith open(here.parent / \"europe_110.geo.json\", \"r\") as f:\n    country_boundaries = json.load(f)\n\ndef random_color(feature):\n    return {\n        \"color\": \"black\",\n        \"fillColor\": random.choice([\"red\", \"yellow\", \"green\", \"orange\"]),\n    }\n\napp_ui = ui.page_fluid(\n    ui.h2(\"An ipyleaflet Map\"),\n    output_widget(\"map\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def map():\n        map = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  \n\n        geo_json = GeoJSON(  \n            data=country_boundaries,  \n            style={  \n                \"opacity\": 1,  \n                \"dashArray\": \"9\",  \n                \"fillOpacity\": 0.1,  \n                \"weight\": 1,  \n            },\n            hover_style={\"color\": \"white\", \"dashArray\": \"0\", \"fillOpacity\": 0.5},  \n            style_callback=random_color,  \n        )  \n        map.add_layer(geo_json)  \n\n        point = Marker(location=(52.204793, 0.121558), draggable=False)  \n        map.add_layer(point)  \n\n        return map  \n\napp = App(app_ui, server)\n\n## file: europe_110.geo.json\n{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Albania\",\"sov_a3\":\"ALB\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Albania\",\"adm0_a3\":\"ALB\",\"geou_dif\":0,\"geounit\":\"Albania\",\"gu_a3\":\"ALB\",\"su_dif\":0,\"subunit\":\"Albania\",\"su_a3\":\"ALB\",\"brk_diff\":0,\"name\":\"Albania\",\"name_long\":\"Albania\",\"brk_a3\":\"ALB\",\"brk_name\":\"Albania\",\"brk_group\":null,\"abbrev\":\"Alb.\",\"postal\":\"AL\",\"formal_en\":\"Republic of Albania\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Albania\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":4,\"mapcolor9\":1,\"mapcolor13\":6,\"pop_est\":3639453,\"gdp_md_est\":21810,\"pop_year\":-99,\"lastcensus\":2001,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"4. Lower middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"AL\",\"iso_a3\":\"ALB\",\"iso_n3\":\"008\",\"un_a3\":\"008\",\"wb_a2\":\"AL\",\"wb_a3\":\"ALB\",\"woe_id\":-99,\"adm0_a3_is\":\"ALB\",\"adm0_a3_us\":\"ALB\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.59024743010491,41.855404161133606],[20.463175083099202,41.51508901627534],[20.605181919037364,41.086226304685226],[21.0200403174764,40.84272695572588],[20.999989861747224,40.58000397395398],[20.674996779063633,40.43499990494303],[20.615000441172754,40.11000682225938],[20.15001590341052,39.62499766698397],[19.980000441170148,39.69499339452341],[19.960001661873207,39.91500580500605],[19.406081984136733,40.250773423822466],[19.319058872157143,40.72723012955356],[19.40354983895429,41.40956574153546],[19.540027296637106,41.71998607031276],[19.37176883309496,41.877547512370654],[19.304486118250793,42.19574514420782],[19.73805138517963,42.68824738216557],[19.801613396898688,42.50009349219084],[20.0707,42.58863],[20.283754510181893,42.32025950781508],[20.52295,42.21787],[20.59024743010491,41.855404161133606]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":4,\"sovereignt\":\"Austria\",\"sov_a3\":\"AUT\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Austria\",\"adm0_a3\":\"AUT\",\"geou_dif\":0,\"geounit\":\"Austria\",\"gu_a3\":\"AUT\",\"su_dif\":0,\"subunit\":\"Austria\",\"su_a3\":\"AUT\",\"brk_diff\":0,\"name\":\"Austria\",\"name_long\":\"Austria\",\"brk_a3\":\"AUT\",\"brk_name\":\"Austria\",\"brk_group\":null,\"abbrev\":\"Aust.\",\"postal\":\"A\",\"formal_en\":\"Republic of Austria\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Austria\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":1,\"mapcolor9\":3,\"mapcolor13\":4,\"pop_est\":8210281,\"gdp_md_est\":329500,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"AT\",\"iso_a3\":\"AUT\",\"iso_n3\":\"040\",\"un_a3\":\"040\",\"wb_a2\":\"AT\",\"wb_a3\":\"AUT\",\"woe_id\":-99,\"adm0_a3_is\":\"AUT\",\"adm0_a3_us\":\"AUT\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[16.979666782304037,48.123497015976305],[16.90375410326726,47.71486562762833],[16.340584344150415,47.71290192320123],[16.534267612380376,47.49617096616912],[16.202298211337364,46.85238597267696],[16.011663852612656,46.6836107448117],[15.137091912504985,46.65870270444703],[14.63247155117483,46.43181732846955],[13.806475457421527,46.509306138691215],[12.376485223040817,46.76755910906985],[12.153088006243054,47.11539317482645],[11.16482791509327,46.94157949481273],[11.048555942436536,46.75135854754634],[10.44270145024663,46.89354625099743],[9.932448357796659,46.92072805438296],[9.479969516649021,47.102809963563374],[9.632931756232978,47.34760122332999],[9.59422610844635,47.52505809182027],[9.89606814946319,47.580196845075704],[10.402083774465211,47.30248769793916],[10.544504021861627,47.56639923765377],[11.426414015354737,47.523766181012974],[12.141357456112788,47.703083401065776],[12.620759718484493,47.67238760028441],[12.932626987365948,47.467645575544],[13.02585127122049,47.63758352313583],[12.884102817443903,48.28914581968792],[13.243357374737,48.416114813829054],[13.595945672264437,48.87717194273715],[14.338897739324722,48.55530528420721],[14.901447381254057,48.964401760445824],[15.253415561593982,49.03907420510758],[16.02964725105022,48.73389903420793],[16.499282667718774,48.78580801044511],[16.960288120194576,48.5969823268506],[16.879982944413,48.47001333270947],[16.979666782304037,48.123497015976305]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":4,\"sovereignt\":\"Bulgaria\",\"sov_a3\":\"BGR\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Bulgaria\",\"adm0_a3\":\"BGR\",\"geou_dif\":0,\"geounit\":\"Bulgaria\",\"gu_a3\":\"BGR\",\"su_dif\":0,\"subunit\":\"Bulgaria\",\"su_a3\":\"BGR\",\"brk_diff\":0,\"name\":\"Bulgaria\",\"name_long\":\"Bulgaria\",\"brk_a3\":\"BGR\",\"brk_name\":\"Bulgaria\",\"brk_group\":null,\"abbrev\":\"Bulg.\",\"postal\":\"BG\",\"formal_en\":\"Republic of Bulgaria\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Bulgaria\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":5,\"mapcolor9\":1,\"mapcolor13\":8,\"pop_est\":7204687,\"gdp_md_est\":93750,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"BG\",\"iso_a3\":\"BGR\",\"iso_n3\":\"100\",\"un_a3\":\"100\",\"wb_a2\":\"BG\",\"wb_a3\":\"BGR\",\"woe_id\":-99,\"adm0_a3_is\":\"BGR\",\"adm0_a3_us\":\"BGR\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":8,\"long_len\":8,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[22.65714969248299,44.23492300066128],[22.944832391051847,43.82378530534713],[23.332302280376325,43.897010809904714],[24.100679152124172,43.74105133724785],[25.569271681426926,43.68844472917472],[26.065158725699746,43.94349376075127],[27.242399529740908,44.175986029632405],[27.970107049275075,43.81246816667522],[28.558081495891997,43.70746165625813],[28.03909508638472,43.293171698574184],[27.67389773937805,42.57789236100622],[27.99672041190539,42.00735871028779],[27.13573937349048,42.14148489030134],[26.1170418637208,41.82690460872456],[26.106138136507212,41.32889883072778],[25.197201368925448,41.23448598893053],[24.492644891058035,41.583896185872035],[23.692073601992348,41.309080918943856],[22.952377150166452,41.33799388281115],[22.88137373219743,41.99929718685026],[22.380525750424592,42.32025950781509],[22.54501183440962,42.46136200618804],[22.43659467946128,42.580321153323936],[22.60480146657133,42.898518785161144],[22.986018507588483,43.211161200526966],[22.50015669118028,43.64281443946099],[22.410446404721597,44.008063462899955],[22.65714969248299,44.23492300066128]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Belgium\",\"sov_a3\":\"BEL\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Belgium\",\"adm0_a3\":\"BEL\",\"geou_dif\":0,\"geounit\":\"Belgium\",\"gu_a3\":\"BEL\",\"su_dif\":0,\"subunit\":\"Belgium\",\"su_a3\":\"BEL\",\"brk_diff\":0,\"name\":\"Belgium\",\"name_long\":\"Belgium\",\"brk_a3\":\"BEL\",\"brk_name\":\"Belgium\",\"brk_group\":null,\"abbrev\":\"Belg.\",\"postal\":\"B\",\"formal_en\":\"Kingdom of Belgium\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Belgium\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":2,\"mapcolor9\":1,\"mapcolor13\":8,\"pop_est\":10414336,\"gdp_md_est\":389300,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"BE\",\"iso_a3\":\"BEL\",\"iso_n3\":\"056\",\"un_a3\":\"056\",\"wb_a2\":\"BE\",\"wb_a3\":\"BEL\",\"woe_id\":-99,\"adm0_a3_is\":\"BEL\",\"adm0_a3_us\":\"BEL\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[3.314971144228537,51.345780951536085],[4.047071160507528,51.26725861266857],[4.973991326526914,51.47502370869813],[5.606975945670001,51.03729848896978],[6.15665815595878,50.80372101501058],[6.043073357781111,50.128051662794235],[5.782417433300907,50.09032786722122],[5.674051954784829,49.529483547557504],[4.79922163251581,49.985373033236385],[4.286022983425084,49.907496649772554],[3.588184441755686,50.37899241800358],[3.123251580425801,50.780363267614575],[2.658422071960274,50.796848049515745],[2.513573032246143,51.14850617126183],[3.314971144228537,51.345780951536085]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Bosnia and Herzegovina\",\"sov_a3\":\"BIH\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Bosnia and Herzegovina\",\"adm0_a3\":\"BIH\",\"geou_dif\":0,\"geounit\":\"Bosnia and Herzegovina\",\"gu_a3\":\"BIH\",\"su_dif\":0,\"subunit\":\"Bosnia and Herzegovina\",\"su_a3\":\"BIH\",\"brk_diff\":0,\"name\":\"Bosnia and Herz.\",\"name_long\":\"Bosnia and Herzegovina\",\"brk_a3\":\"BIH\",\"brk_name\":\"Bosnia and Herz.\",\"brk_group\":null,\"abbrev\":\"B.H.\",\"postal\":\"BiH\",\"formal_en\":\"Bosnia and Herzegovina\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Bosnia and Herzegovina\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":1,\"mapcolor9\":1,\"mapcolor13\":2,\"pop_est\":4613414,\"gdp_md_est\":29700,\"pop_year\":-99,\"lastcensus\":1991,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"BA\",\"iso_a3\":\"BIH\",\"iso_n3\":\"070\",\"un_a3\":\"070\",\"wb_a2\":\"BA\",\"wb_a3\":\"BIH\",\"woe_id\":-99,\"adm0_a3_is\":\"BIH\",\"adm0_a3_us\":\"BIH\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":16,\"long_len\":22,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[19.00548628101012,44.86023366960916],[19.36803,44.863],[19.11761,44.42307000000011],[19.59976,44.03847],[19.454,43.56810000000013],[19.21852,43.52384],[19.03165,43.43253],[18.70648,43.20011],[18.56,42.65],[17.674921502358984,43.02856252702361],[17.297373488034452,43.44634064388737],[16.91615644701733,43.66772247982567],[16.456442905348865,44.04123973243128],[16.23966027188453,44.35114329688571],[15.750026075918981,44.818711656262565],[15.959367303133376,45.23377676043094],[16.318156772535872,45.00412669532591],[16.534939406000206,45.21160757097772],[17.002146030351014,45.23377676043094],[17.861783481526402,45.067740383477144],[18.553214145591653,45.08158966733146],[19.00548628101012,44.86023366960916]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":4,\"sovereignt\":\"Belarus\",\"sov_a3\":\"BLR\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Belarus\",\"adm0_a3\":\"BLR\",\"geou_dif\":0,\"geounit\":\"Belarus\",\"gu_a3\":\"BLR\",\"su_dif\":0,\"subunit\":\"Belarus\",\"su_a3\":\"BLR\",\"brk_diff\":0,\"name\":\"Belarus\",\"name_long\":\"Belarus\",\"brk_a3\":\"BLR\",\"brk_name\":\"Belarus\",\"brk_group\":null,\"abbrev\":\"Bela.\",\"postal\":\"BY\",\"formal_en\":\"Republic of Belarus\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Belarus\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":1,\"mapcolor9\":5,\"mapcolor13\":11,\"pop_est\":9648533,\"gdp_md_est\":114100,\"pop_year\":-99,\"lastcensus\":2009,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"BY\",\"iso_a3\":\"BLR\",\"iso_n3\":\"112\",\"un_a3\":\"112\",\"wb_a2\":\"BY\",\"wb_a3\":\"BLR\",\"woe_id\":-99,\"adm0_a3_is\":\"BLR\",\"adm0_a3_us\":\"BLR\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[23.48412763844985,53.91249766704114],[24.450683628037037,53.905702216194754],[25.536353794056993,54.28242340760253],[25.7684326514798,54.84696259217509],[26.58827924979039,55.16717560487167],[26.494331495883756,55.615106919977634],[27.10245975109453,55.783313707087686],[28.176709425577997,56.169129950578814],[29.229513380660308,55.91834422466636],[29.371571893030673,55.670090643936184],[29.896294386522356,55.78946320253041],[30.87390913262001,55.55097646750341],[30.971835971813135,55.08154775656404],[30.75753380709872,54.81177094178432],[31.38447228366374,54.157056382862436],[31.79142418796224,53.974638576872124],[31.731272820774507,53.79402944601202],[32.405598585751164,53.61804535584204],[32.69364301934604,53.35142080343212],[32.30451948418823,53.13272614197291],[31.49764367038293,53.1674268662569],[31.305200636528014,53.07399587667321],[31.54001834486226,52.74205231384636],[31.785998162571587,52.101677964885454],[30.927549269338982,52.04235342061439],[30.619454380014844,51.822806098022376],[30.555117221811457,51.31950348571566],[30.157363722460897,51.41613841410147],[29.254938185347925,51.368234361366895],[28.992835320763533,51.602044379271476],[28.61761274589225,51.42771393493484],[28.24161502453657,51.57222707783907],[27.454066196408434,51.59230337178447],[26.337958611768556,51.83228872334793],[25.32778771332701,51.91065603291855],[24.553106316839518,51.888461005249184],[24.00507775238421,51.61744395609446],[23.527070753684374,51.57845408793024],[23.508002150168693,52.02364655212473],[23.199493849386187,52.48697744405367],[23.79919884613338,52.69109935160657],[23.80493493011778,53.089731350306074],[23.527535841575002,53.470121568406555],[23.48412763844985,53.91249766704114]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":4,\"sovereignt\":\"Switzerland\",\"sov_a3\":\"CHE\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Switzerland\",\"adm0_a3\":\"CHE\",\"geou_dif\":0,\"geounit\":\"Switzerland\",\"gu_a3\":\"CHE\",\"su_dif\":0,\"subunit\":\"Switzerland\",\"su_a3\":\"CHE\",\"brk_diff\":0,\"name\":\"Switzerland\",\"name_long\":\"Switzerland\",\"brk_a3\":\"CHE\",\"brk_name\":\"Switzerland\",\"brk_group\":null,\"abbrev\":\"Switz.\",\"postal\":\"CH\",\"formal_en\":\"Swiss Confederation\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Switzerland\",\"name_alt\":null,\"mapcolor7\":5,\"mapcolor8\":2,\"mapcolor9\":7,\"mapcolor13\":3,\"pop_est\":7604467,\"gdp_md_est\":316700,\"pop_year\":-99,\"lastcensus\":2010,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"CH\",\"iso_a3\":\"CHE\",\"iso_n3\":\"756\",\"un_a3\":\"756\",\"wb_a2\":\"CH\",\"wb_a3\":\"CHE\",\"woe_id\":-99,\"adm0_a3_is\":\"CHE\",\"adm0_a3_us\":\"CHE\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":11,\"long_len\":11,\"abbrev_len\":6,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[9.59422610844635,47.52505809182027],[9.632931756232978,47.34760122332999],[9.479969516649021,47.102809963563374],[9.932448357796659,46.92072805438296],[10.44270145024663,46.89354625099743],[10.363378126678612,46.48357127540986],[9.922836541390382,46.31489940040919],[9.182881707403055,46.44021474871698],[8.966305779667806,46.03693187111119],[8.489952426801324,46.005150865251686],[8.31662967289438,46.16364248309086],[7.755992058959833,45.82449005795931],[7.273850945676656,45.776947740250776],[6.843592970414505,45.99114655210061],[6.500099724970426,46.42967275652944],[6.022609490593538,46.27298981382047],[6.037388950229001,46.725778713561866],[6.768713820023606,47.2877082383037],[6.736571079138059,47.541801255882845],[7.192202182655507,47.44976552997102],[7.466759067422231,47.62058197691181],[8.317301466514152,47.61357982033626],[8.522611932009767,47.83082754169129],[9.59422610844635,47.52505809182027]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Czech Republic\",\"sov_a3\":\"CZE\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Czech Republic\",\"adm0_a3\":\"CZE\",\"geou_dif\":0,\"geounit\":\"Czech Republic\",\"gu_a3\":\"CZE\",\"su_dif\":0,\"subunit\":\"Czech Republic\",\"su_a3\":\"CZE\",\"brk_diff\":0,\"name\":\"Czech Rep.\",\"name_long\":\"Czech Republic\",\"brk_a3\":\"CZE\",\"brk_name\":\"Czech Rep.\",\"brk_group\":null,\"abbrev\":\"Cz. Rep.\",\"postal\":\"CZ\",\"formal_en\":\"Czech Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Czech Republic\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":1,\"mapcolor9\":2,\"mapcolor13\":6,\"pop_est\":10211904,\"gdp_md_est\":265200,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"CZ\",\"iso_a3\":\"CZE\",\"iso_n3\":\"203\",\"un_a3\":\"203\",\"wb_a2\":\"CZ\",\"wb_a3\":\"CZE\",\"woe_id\":-99,\"adm0_a3_is\":\"CZE\",\"adm0_a3_us\":\"CZE\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":10,\"long_len\":14,\"abbrev_len\":8,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[16.960288120194576,48.5969823268506],[16.499282667718774,48.78580801044511],[16.02964725105022,48.73389903420793],[15.253415561593982,49.03907420510758],[14.901447381254057,48.964401760445824],[14.338897739324722,48.55530528420721],[13.595945672264437,48.87717194273715],[13.031328973043431,49.30706818297324],[12.521024204161193,49.547415269562734],[12.415190870827445,49.96912079528057],[12.240111118222558,50.266337795607285],[12.966836785543194,50.484076443069085],[13.338131951560285,50.73323436136435],[14.056227654688172,50.9269176295943],[14.307013380600637,51.117267767941414],[14.570718214586066,51.002339382524276],[15.01699588385867,51.10667409932158],[15.490972120839729,50.78472992614321],[16.23862674323857,50.69773265237984],[16.176253289462267,50.42260732685791],[16.719475945714436,50.21574656839354],[16.86876915860566,50.47397370055603],[17.55456709155112,50.36214590107642],[17.64944502123899,50.049038397819956],[18.392913852622172,49.98862864847075],[18.853144158613617,49.49622976337764],[18.554971144289482,49.495015367218784],[18.399993523846177,49.31500051533004],[18.170498488037964,49.271514797556435],[18.104972771891852,49.04398346617531],[17.913511590250465,48.996492824899086],[17.88648481616181,48.90347524677371],[17.545006951577108,48.80001902932537],[17.101984897538898,48.816968899117114],[16.960288120194576,48.5969823268506]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Germany\",\"sov_a3\":\"DEU\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Germany\",\"adm0_a3\":\"DEU\",\"geou_dif\":0,\"geounit\":\"Germany\",\"gu_a3\":\"DEU\",\"su_dif\":0,\"subunit\":\"Germany\",\"su_a3\":\"DEU\",\"brk_diff\":0,\"name\":\"Germany\",\"name_long\":\"Germany\",\"brk_a3\":\"DEU\",\"brk_name\":\"Germany\",\"brk_group\":null,\"abbrev\":\"Ger.\",\"postal\":\"D\",\"formal_en\":\"Federal Republic of Germany\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Germany\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":5,\"mapcolor9\":5,\"mapcolor13\":1,\"pop_est\":82329758,\"gdp_md_est\":2918000,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"1. Developed region: G7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"DE\",\"iso_a3\":\"DEU\",\"iso_n3\":\"276\",\"un_a3\":\"276\",\"wb_a2\":\"DE\",\"wb_a3\":\"DEU\",\"woe_id\":-99,\"adm0_a3_is\":\"DEU\",\"adm0_a3_us\":\"DEU\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[9.921906365609232,54.98310415304803],[9.9395797054529,54.596641954153256],[10.950112338920519,54.363607082733154],[10.93946699386845,54.00869334575259],[11.956252475643282,54.19648550070116],[12.518440382546714,54.470370591847995],[13.647467075259499,54.0755109727059],[14.119686313542559,53.75702912049104],[14.353315463934166,53.248171291713106],[14.074521111719434,52.98126251892535],[14.437599725002201,52.624850165408304],[14.685026482815715,52.089947414755216],[14.607098422919648,51.74518809671997],[15.016995883858783,51.10667409932171],[14.570718214586122,51.00233938252438],[14.307013380600665,51.11726776794137],[14.056227654688314,50.92691762959436],[13.338131951560399,50.73323436136428],[12.96683678554325,50.48407644306917],[12.240111118222671,50.26633779560723],[12.415190870827473,49.96912079528062],[12.521024204161336,49.54741526956275],[13.031328973043514,49.30706818297324],[13.595945672264577,48.877171942737164],[13.243357374737116,48.41611481382904],[12.884102817443875,48.28914581968786],[13.025851271220517,47.63758352313596],[12.932626987366064,47.467645575544],[12.620759718484521,47.672387600284424],[12.141357456112871,47.70308340106578],[11.426414015354851,47.52376618101306],[10.544504021861599,47.5663992376538],[10.402083774465325,47.30248769793917],[9.89606814946319,47.580196845075704],[9.594226108446378,47.5250580918202],[8.522611932009795,47.83082754169135],[8.317301466514095,47.61357982033627],[7.466759067422288,47.62058197691192],[7.593676385131062,48.33301911070373],[8.099278598674857,49.01778351500343],[6.65822960778371,49.20195831969164],[6.186320428094177,49.463802802114515],[6.242751092156993,49.90222565367873],[6.043073357781111,50.128051662794235],[6.15665815595878,50.80372101501058],[5.988658074577813,51.851615709025054],[6.589396599970826,51.852029120483394],[6.842869500362383,52.22844025329755],[7.092053256873896,53.144043280644894],[6.905139601274129,53.48216217713065],[7.100424838905269,53.69393219666267],[7.936239454793963,53.74829580343379],[8.121706170289485,53.52779246684429],[8.800734490604668,54.020785630908904],[8.57211795414537,54.39564647075406],[8.526229282270208,54.96274363872516],[9.282048780971138,54.83086538351631],[9.921906365609232,54.98310415304803]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":4,\"sovereignt\":\"Denmark\",\"sov_a3\":\"DN1\",\"adm0_dif\":1,\"level\":2,\"type\":\"Country\",\"admin\":\"Denmark\",\"adm0_a3\":\"DNK\",\"geou_dif\":0,\"geounit\":\"Denmark\",\"gu_a3\":\"DNK\",\"su_dif\":0,\"subunit\":\"Denmark\",\"su_a3\":\"DNK\",\"brk_diff\":0,\"name\":\"Denmark\",\"name_long\":\"Denmark\",\"brk_a3\":\"DNK\",\"brk_name\":\"Denmark\",\"brk_group\":null,\"abbrev\":\"Den.\",\"postal\":\"DK\",\"formal_en\":\"Kingdom of Denmark\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Denmark\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":1,\"mapcolor9\":3,\"mapcolor13\":12,\"pop_est\":5500510,\"gdp_md_est\":203600,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"DK\",\"iso_a3\":\"DNK\",\"iso_n3\":\"208\",\"un_a3\":\"208\",\"wb_a2\":\"DK\",\"wb_a3\":\"DNK\",\"woe_id\":-99,\"adm0_a3_is\":\"DNK\",\"adm0_a3_us\":\"DNK\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[12.690006137755631,55.609990953180784],[12.089991082414741,54.80001455343793],[11.043543328504228,55.364863796604254],[10.903913608451631,55.77995473898875],[12.370904168353292,56.111407375708836],[12.690006137755631,55.609990953180784]]],[[[10.912181837618363,56.458621324277914],[10.667803989309988,56.08138336854722],[10.369992710011985,56.19000722922473],[9.649984978889307,55.469999498102055],[9.921906365609175,54.98310415304806],[9.282048780971138,54.83086538351617],[8.526229282270236,54.96274363872499],[8.12031090661759,55.517722683323626],[8.08997684086225,56.5400117051376],[8.256581658571264,56.8099693874303],[8.543437534223386,57.110002753316905],[9.42446902836761,57.17206614849948],[9.775558709358563,57.44794078228966],[10.580005730846153,57.73001658795485],[10.546105991262692,57.215732733786155],[10.250000034230226,56.89001618105047],[10.369992710011985,56.609981594460834],[10.912181837618363,56.458621324277914]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Spain\",\"sov_a3\":\"ESP\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Spain\",\"adm0_a3\":\"ESP\",\"geou_dif\":0,\"geounit\":\"Spain\",\"gu_a3\":\"ESP\",\"su_dif\":0,\"subunit\":\"Spain\",\"su_a3\":\"ESP\",\"brk_diff\":0,\"name\":\"Spain\",\"name_long\":\"Spain\",\"brk_a3\":\"ESP\",\"brk_name\":\"Spain\",\"brk_group\":null,\"abbrev\":\"Sp.\",\"postal\":\"E\",\"formal_en\":\"Kingdom of Spain\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Spain\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":5,\"mapcolor9\":5,\"mapcolor13\":5,\"pop_est\":40525002,\"gdp_md_est\":1403000,\"pop_year\":-99,\"lastcensus\":2001,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"ES\",\"iso_a3\":\"ESP\",\"iso_n3\":\"724\",\"un_a3\":\"724\",\"wb_a2\":\"ES\",\"wb_a3\":\"ESP\",\"woe_id\":-99,\"adm0_a3_is\":\"ESP\",\"adm0_a3_us\":\"ESP\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":5,\"long_len\":5,\"abbrev_len\":3,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-9.034817674180246,41.880570583659676],[-8.984433152695672,42.59277517350627],[-9.392883673530648,43.0266246608127],[-7.97818966310831,43.74833771420099],[-6.754491746436756,43.567909450853925],[-5.411886359061597,43.57423981380968],[-4.347842779955783,43.40344920508504],[-3.517531704106091,43.4559007838613],[-1.901351284177764,43.42280202897834],[-1.502770961910528,43.03401439063043],[0.338046909190581,42.57954600683955],[0.701590610363894,42.795734361332606],[1.826793247087153,42.34338471126569],[2.985998976258458,42.47301504166986],[3.039484083680549,41.892120266276905],[2.091841668312185,41.226088568683096],[0.810524529635188,41.01473196060934],[0.721331007499401,40.678318386389236],[0.106691521819869,40.12393362076202],[-0.278711310212941,39.30997813573272],[0.111290724293838,38.73851430923304],[-0.467123582349103,38.29236583104115],[-0.683389451490598,37.642353827457825],[-1.438382127274849,37.44306366632422],[-2.146452602538119,36.67414419203729],[-3.415780808923387,36.65889964451118],[-4.368900926114719,36.677839056946155],[-4.995219285492212,36.32470815687964],[-5.377159796561457,35.946850083961465],[-5.866432257500904,36.02981659600606],[-6.236693894872175,36.367677110330334],[-6.520190802425404,36.94291331638732],[-7.453725551778092,37.09778758396607],[-7.537105475281024,37.42890432387624],[-7.166507941099865,37.803894354802225],[-7.029281175148796,38.07576406508977],[-7.374092169616318,38.37305858006492],[-7.098036668313128,39.03007274022379],[-7.498632371439726,39.62957103124181],[-7.066591559263529,39.711891587882775],[-7.026413133156595,40.184524237624245],[-6.864019944679385,40.33087189387483],[-6.851126674822552,41.11108266861753],[-6.389087693700915,41.381815497394655],[-6.668605515967656,41.883386949219584],[-7.251308966490824,41.91834605566505],[-7.422512986673795,41.79207469335984],[-8.013174607769912,41.790886135417125],[-8.263856980817792,42.28046865495034],[-8.67194576662672,42.13468943945496],[-9.034817674180246,41.880570583659676]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Estonia\",\"sov_a3\":\"EST\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Estonia\",\"adm0_a3\":\"EST\",\"geou_dif\":0,\"geounit\":\"Estonia\",\"gu_a3\":\"EST\",\"su_dif\":0,\"subunit\":\"Estonia\",\"su_a3\":\"EST\",\"brk_diff\":0,\"name\":\"Estonia\",\"name_long\":\"Estonia\",\"brk_a3\":\"EST\",\"brk_name\":\"Estonia\",\"brk_group\":null,\"abbrev\":\"Est.\",\"postal\":\"EST\",\"formal_en\":\"Republic of Estonia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Estonia\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":2,\"mapcolor9\":1,\"mapcolor13\":10,\"pop_est\":1299371,\"gdp_md_est\":27410,\"pop_year\":-99,\"lastcensus\":2000,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"EE\",\"iso_a3\":\"EST\",\"iso_n3\":\"233\",\"un_a3\":\"233\",\"wb_a2\":\"EE\",\"wb_a3\":\"EST\",\"woe_id\":-99,\"adm0_a3_is\":\"EST\",\"adm0_a3_us\":\"EST\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[24.312862583114622,57.79342357037697],[24.42892785004216,58.38341339785329],[24.061198357853186,58.25737457949341],[23.426560092876684,58.612753404364625],[23.339795363058645,59.187240302153384],[24.604214308376186,59.46585378685502],[25.86418908051664,59.61109039981133],[26.949135776484525,59.445803331125774],[27.981114129353244,59.475388088612874],[28.13169925305175,59.300825100330925],[27.420166456824944,58.72458120384424],[27.71668582531572,57.79189911562436],[27.288184848751513,57.47452830670383],[26.463532342237787,57.47638865826633],[25.60280968598437,57.84752879498657],[25.16459354014927,57.97015696881519],[24.312862583114622,57.79342357037697]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Finland\",\"sov_a3\":\"FI1\",\"adm0_dif\":1,\"level\":2,\"type\":\"Country\",\"admin\":\"Finland\",\"adm0_a3\":\"FIN\",\"geou_dif\":0,\"geounit\":\"Finland\",\"gu_a3\":\"FIN\",\"su_dif\":0,\"subunit\":\"Finland\",\"su_a3\":\"FIN\",\"brk_diff\":0,\"name\":\"Finland\",\"name_long\":\"Finland\",\"brk_a3\":\"FIN\",\"brk_name\":\"Finland\",\"brk_group\":null,\"abbrev\":\"Fin.\",\"postal\":\"FIN\",\"formal_en\":\"Republic of Finland\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Finland\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":1,\"mapcolor9\":4,\"mapcolor13\":6,\"pop_est\":5250275,\"gdp_md_est\":193500,\"pop_year\":-99,\"lastcensus\":2010,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"FI\",\"iso_a3\":\"FIN\",\"iso_n3\":\"246\",\"un_a3\":\"246\",\"wb_a2\":\"FI\",\"wb_a3\":\"FIN\",\"woe_id\":-99,\"adm0_a3_is\":\"FIN\",\"adm0_a3_us\":\"FIN\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[28.591929559043194,69.06477692328666],[28.445943637818658,68.36461294216404],[29.97742638522061,67.69829702419266],[29.054588657352326,66.94428620062193],[30.21765,65.80598],[29.54442955904699,64.94867157659048],[30.44468468600371,64.20445343693909],[30.035872430142717,63.55281362573855],[31.516092156711125,62.86768748641289],[31.139991082490894,62.35769277612441],[30.21110721204445,61.780027777749694],[28.069997592895277,60.50351654727584],[26.255172967236973,60.4239606797625],[24.496623976344523,60.05731639265166],[22.869694858499457,59.846373196036225],[22.290763787533592,60.39192129174154],[21.322244093519316,60.720169989659524],[21.544866163832694,61.70532949487179],[21.05921105315369,62.60739329695874],[21.536029493910803,63.18973501245587],[22.442744174903993,63.81781037053129],[24.730511508897536,64.90234365504084],[25.398067661243942,65.11142650009374],[25.294043003040404,65.53434642197045],[23.903378533633802,66.00692739527962],[23.565879754335583,66.39605093043743],[23.53947309743444,67.93600861273525],[21.978534783626117,68.6168456081807],[20.645592889089528,69.10624726020087],[21.244936150810673,69.37044302029308],[22.356237827247412,68.84174144151491],[23.66204959483076,68.89124746365054],[24.735679152126725,68.64955678982146],[25.689212680776365,69.09211375596904],[26.179622023226244,69.82529897732614],[27.732292107867863,70.16419302029625],[29.015572950971972,69.76649119737799],[28.591929559043194,69.06477692328666]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"France\",\"sov_a3\":\"FR1\",\"adm0_dif\":1,\"level\":2,\"type\":\"Country\",\"admin\":\"France\",\"adm0_a3\":\"FRA\",\"geou_dif\":0,\"geounit\":\"France\",\"gu_a3\":\"FRA\",\"su_dif\":0,\"subunit\":\"France\",\"su_a3\":\"FRA\",\"brk_diff\":0,\"name\":\"France\",\"name_long\":\"France\",\"brk_a3\":\"FRA\",\"brk_name\":\"France\",\"brk_group\":null,\"abbrev\":\"Fr.\",\"postal\":\"F\",\"formal_en\":\"French Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"France\",\"name_alt\":null,\"mapcolor7\":7,\"mapcolor8\":5,\"mapcolor9\":9,\"mapcolor13\":11,\"pop_est\":64057792,\"gdp_md_est\":2128000,\"pop_year\":-99,\"lastcensus\":-99,\"gdp_year\":-99,\"economy\":\"1. Developed region: G7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"FR\",\"iso_a3\":\"FRA\",\"iso_n3\":\"250\",\"un_a3\":\"250\",\"wb_a2\":\"FR\",\"wb_a3\":\"FRA\",\"woe_id\":-99,\"adm0_a3_is\":\"FRA\",\"adm0_a3_us\":\"FRA\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":3,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-52.55642473001839,2.504705308437053],[-52.93965715189498,2.124857692875622],[-53.418465135295264,2.053389187016037],[-53.554839240113495,2.334896551925965],[-53.778520677288896,2.376702785650053],[-54.08806250671728,2.105556545414629],[-54.52475419779975,2.311848863123785],[-54.27122962097579,2.738747870286943],[-54.18428402364475,3.194172268075235],[-54.01150387227682,3.622569891774859],[-54.399542202356514,4.212611395683481],[-54.47863298197922,4.896755682795643],[-53.95804460307093,5.756548163267809],[-53.618452928264844,5.646529038918402],[-52.88214128275408,5.409850979021599],[-51.82334286152593,4.565768133966145],[-51.65779741067888,4.156232408053029],[-52.249337531123984,3.241094468596287],[-52.55642473001839,2.504705308437053]]],[[[9.560016310269134,42.15249197037957],[9.229752231491773,41.38000682226445],[8.775723097375362,41.58361196549444],[8.54421268070783,42.256516628583086],[8.746009148807588,42.62812185319396],[9.390000848028905,43.00998484961474],[9.560016310269134,42.15249197037957]]],[[[3.588184441755715,50.37899241800358],[4.286022983425141,49.907496649772554],[4.799221632515753,49.98537303323633],[5.674051954784886,49.52948354755745],[5.897759230176376,49.44266714130717],[6.186320428094206,49.46380280211446],[6.658229607783539,49.201958319691556],[8.099278598674772,49.01778351500337],[7.593676385131062,48.33301911070373],[7.466759067422231,47.620581976911865],[7.192202182655535,47.44976552997099],[6.736571079138088,47.54180125588289],[6.768713820023635,47.28770823830368],[6.037388950228973,46.72577871356191],[6.022609490593567,46.272989813820516],[6.500099724970454,46.42967275652944],[6.843592970414562,45.99114655210067],[6.802355177445662,45.70857982032868],[7.096652459347837,45.333098863295874],[6.749955275101712,45.02851797136759],[7.007562290076663,44.25476675066139],[7.549596388386163,44.12790110938482],[7.435184767291844,43.69384491634918],[6.529245232783069,43.12889232031836],[4.556962517931396,43.39965098731159],[3.10041059735272,43.075200507167125],[2.985998976258486,42.473015041669896],[1.826793247087181,42.34338471126566],[0.701590610363922,42.79573436133265],[0.338046909190581,42.579546006839564],[-1.502770961910471,43.03401439063049],[-1.901351284177736,43.42280202897834],[-1.384225226232957,44.02261037859017],[-1.193797573237362,46.014917710954876],[-2.225724249673789,47.06436269793821],[-2.963276129559574,47.570326646507965],[-4.491554938159481,47.95495433205642],[-4.592349819344747,48.68416046812695],[-3.295813971357745,48.901692409859635],[-1.616510789384932,48.644421291694584],[-1.933494025063254,49.77634186461577],[-0.98946895995536,49.347375800160876],[1.338761020522753,50.12717316344526],[1.6390010921385,50.946606350297515],[2.513573032246171,51.14850617126186],[2.658422071960331,50.79684804951566],[3.123251580425716,50.78036326761452],[3.588184441755715,50.37899241800358]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"United Kingdom\",\"sov_a3\":\"GB1\",\"adm0_dif\":1,\"level\":2,\"type\":\"Country\",\"admin\":\"United Kingdom\",\"adm0_a3\":\"GBR\",\"geou_dif\":0,\"geounit\":\"United Kingdom\",\"gu_a3\":\"GBR\",\"su_dif\":0,\"subunit\":\"United Kingdom\",\"su_a3\":\"GBR\",\"brk_diff\":0,\"name\":\"United Kingdom\",\"name_long\":\"United Kingdom\",\"brk_a3\":\"GBR\",\"brk_name\":\"United Kingdom\",\"brk_group\":null,\"abbrev\":\"U.K.\",\"postal\":\"GB\",\"formal_en\":\"United Kingdom of Great Britain and Northern Ireland\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"United Kingdom\",\"name_alt\":null,\"mapcolor7\":6,\"mapcolor8\":6,\"mapcolor9\":6,\"mapcolor13\":3,\"pop_est\":62262000,\"gdp_md_est\":1977704,\"pop_year\":0,\"lastcensus\":2011,\"gdp_year\":2009,\"economy\":\"1. Developed region: G7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"GB\",\"iso_a3\":\"GBR\",\"iso_n3\":\"826\",\"un_a3\":\"826\",\"wb_a2\":\"GB\",\"wb_a3\":\"GBR\",\"woe_id\":-99,\"adm0_a3_is\":\"GBR\",\"adm0_a3_us\":\"GBR\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":14,\"long_len\":14,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-5.661948614921897,54.55460317648385],[-6.197884894220977,53.86756500916334],[-6.953730231137996,54.073702297575636],[-7.572167934591079,54.05995636658599],[-7.366030646178785,54.595840969452695],[-7.572167934591079,55.1316222194549],[-6.733847011736145,55.1728600124238],[-5.661948614921897,54.55460317648385]]],[[[-3.005004848635281,58.63500010846633],[-4.073828497728016,57.55302480735526],[-3.055001796877661,57.69001902936094],[-1.959280564776918,57.68479970969952],[-2.219988165689301,56.87001740175353],[-3.119003058271119,55.973793036515474],[-2.085009324543023,55.90999848085127],[-2.005675679673857,55.80490285035023],[-1.11499101399221,54.624986477265395],[-0.4304849918542,54.46437612570216],[0.184981316742039,53.32501414653103],[0.469976840831777,52.92999949809197],[1.681530795914739,52.739520168664],[1.559987827164377,52.09999848083601],[1.050561557630914,51.806760565795685],[1.449865349950301,51.28942780212196],[0.550333693045502,50.765738837275876],[-0.78751746255864,50.77498891865622],[-2.489997524414377,50.50001862243124],[-2.956273972984036,50.696879991247016],[-3.617448085942328,50.22835561787272],[-4.542507900399244,50.341837063185665],[-5.245023159191135,49.95999990498109],[-5.776566941745301,50.15967763935683],[-4.309989793301838,51.21000112568916],[-3.414850633142123,51.42600861266925],[-3.422719467108323,51.42684816740609],[-4.984367234710874,51.593466091510976],[-5.267295701508885,51.991400458374585],[-4.222346564134853,52.301355699261364],[-4.770013393564113,52.840004991255626],[-4.579999152026915,53.49500377055517],[-3.093830673788659,53.404547400669685],[-3.092079637047107,53.40444082296355],[-2.945008510744344,53.984999701546684],[-3.614700825433033,54.600936773292574],[-3.630005458989331,54.615012925833014],[-4.844169073903004,54.790971177786844],[-5.082526617849226,55.06160065369937],[-4.719112107756644,55.50847260194348],[-5.047980922862109,55.78398550070753],[-5.58639767091114,55.31114614523682],[-5.644998745130181,56.275014960344805],[-6.149980841486354,56.78500967063354],[-5.786824713555291,57.81884837506465],[-5.009998745127575,58.63001333275005],[-4.211494513353557,58.55084503847917],[-3.005004848635281,58.63500010846633]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Greece\",\"sov_a3\":\"GRC\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Greece\",\"adm0_a3\":\"GRC\",\"geou_dif\":0,\"geounit\":\"Greece\",\"gu_a3\":\"GRC\",\"su_dif\":0,\"subunit\":\"Greece\",\"su_a3\":\"GRC\",\"brk_diff\":0,\"name\":\"Greece\",\"name_long\":\"Greece\",\"brk_a3\":\"GRC\",\"brk_name\":\"Greece\",\"brk_group\":null,\"abbrev\":\"Greece\",\"postal\":\"GR\",\"formal_en\":\"Hellenic Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Greece\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":2,\"mapcolor9\":2,\"mapcolor13\":9,\"pop_est\":10737428,\"gdp_md_est\":343000,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"GR\",\"iso_a3\":\"GRC\",\"iso_n3\":\"300\",\"un_a3\":\"300\",\"wb_a2\":\"GR\",\"wb_a3\":\"GRC\",\"woe_id\":-99,\"adm0_a3_is\":\"GRC\",\"adm0_a3_us\":\"GRC\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":6,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[23.699980096133004,35.70500438083553],[24.24666507334868,35.368022365860156],[25.02501549652888,35.424995632461986],[25.769207797964185,35.35401805270908],[25.745023227651586,35.179997666966216],[26.290002882601726,35.29999034274792],[26.16499759288766,35.004995429009796],[24.724982130642303,34.91998769788961],[24.735007358506948,35.08499054619759],[23.514978468528113,35.27999156345098],[23.699980096133004,35.70500438083553]]],[[[26.604195590936285,41.562114569661105],[26.29460208507578,40.93626129817426],[26.056942172965506,40.824123440100834],[25.447677036244187,40.85254547786147],[24.92584842296094,40.94706167252323],[23.714811232200816,40.68712921809512],[24.407998894964066,40.1249929876241],[23.899967889102584,39.96200552017558],[23.3429993018608,39.96099782974579],[22.813987664488963,40.476005153966554],[22.62629886240478,40.25656118423919],[22.84974775563481,39.65931081802577],[23.3500272966526,39.19001129816726],[22.973099399515547,38.97090322524966],[23.530016310324953,38.51000112563847],[24.025024855248944,38.21999298761645],[24.040011020613605,37.655014553369426],[23.115002882589152,37.92001129816222],[23.409971958111072,37.409990749657396],[22.774971958108637,37.30501007745656],[23.15422529469862,36.422505804992056],[22.490028110451107,36.41000010837746],[21.670026482843696,36.8449864771942],[21.295010613701578,37.644989325504696],[21.120034213961333,38.31032339126273],[20.730032179454582,38.769985256498785],[20.217712029712857,39.340234686839636],[20.15001590341052,39.62499766698403],[20.615000441172782,40.110006822259436],[20.674996779063633,40.434999904943055],[20.99998986174728,40.58000397395398],[21.02004031747643,40.84272695572588],[21.674160597426976,40.93127452245798],[22.05537763844427,41.14986583105269],[22.597308383889015,41.130487168943205],[22.76177,41.3048],[22.95237715016657,41.33799388281122],[23.692073601992462,41.30908091894386],[24.492644891058035,41.58389618587205],[25.197201368925533,41.23448598893066],[26.106138136507184,41.32889883072784],[26.117041863720914,41.82690460872473],[26.604195590936285,41.562114569661105]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Croatia\",\"sov_a3\":\"HRV\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Croatia\",\"adm0_a3\":\"HRV\",\"geou_dif\":0,\"geounit\":\"Croatia\",\"gu_a3\":\"HRV\",\"su_dif\":0,\"subunit\":\"Croatia\",\"su_a3\":\"HRV\",\"brk_diff\":0,\"name\":\"Croatia\",\"name_long\":\"Croatia\",\"brk_a3\":\"HRV\",\"brk_name\":\"Croatia\",\"brk_group\":null,\"abbrev\":\"Cro.\",\"postal\":\"HR\",\"formal_en\":\"Republic of Croatia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Croatia\",\"name_alt\":null,\"mapcolor7\":5,\"mapcolor8\":4,\"mapcolor9\":5,\"mapcolor13\":1,\"pop_est\":4489409,\"gdp_md_est\":82390,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"2. High income: nonOECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"HR\",\"iso_a3\":\"HRV\",\"iso_n3\":\"191\",\"un_a3\":\"191\",\"wb_a2\":\"HR\",\"wb_a3\":\"HRV\",\"woe_id\":-99,\"adm0_a3_is\":\"HRV\",\"adm0_a3_us\":\"HRV\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[18.829838087650046,45.908877671891844],[19.072768995854176,45.52151113543209],[19.39047570158459,45.236515611342384],[19.00548628101012,44.86023366960916],[18.553214145591653,45.08158966733146],[17.861783481526402,45.067740383477144],[17.002146030351014,45.23377676043094],[16.534939406000206,45.21160757097772],[16.318156772535872,45.00412669532591],[15.959367303133376,45.23377676043094],[15.750026075918981,44.818711656262565],[16.23966027188453,44.35114329688571],[16.456442905348865,44.04123973243128],[16.91615644701733,43.66772247982567],[17.297373488034452,43.44634064388737],[17.674921502358984,43.02856252702361],[18.56,42.65],[18.450016310304818,42.47999136002932],[17.509970330483327,42.849994615239154],[16.930005730871642,43.20999848080038],[16.015384555737683,43.50721548112722],[15.174453973052096,44.243191229827914],[15.376250441151797,44.31791535092208],[14.92030927904051,44.73848399512946],[14.901602410550879,45.07606028907611],[14.258747592839995,45.23377676043094],[13.952254672917036,44.80212352149687],[13.656975538801191,45.13693512631596],[13.67940311041582,45.48414907488501],[13.715059848697251,45.500323798192426],[14.4119682145855,45.46616567644742],[14.59510949062792,45.63494090431283],[14.935243767972963,45.471695054702764],[15.327674594797429,45.45231639259333],[15.323953891672431,45.731782538427694],[15.671529575267641,45.83415355079791],[15.768732944408612,46.23810822202353],[16.564808383864943,46.50375092221981],[16.882515089595415,46.38063182228444],[17.630066359129557,45.9517691106941],[18.45606245288286,45.75948110613615],[18.829838087650046,45.908877671891844]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Hungary\",\"sov_a3\":\"HUN\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Hungary\",\"adm0_a3\":\"HUN\",\"geou_dif\":0,\"geounit\":\"Hungary\",\"gu_a3\":\"HUN\",\"su_dif\":0,\"subunit\":\"Hungary\",\"su_a3\":\"HUN\",\"brk_diff\":0,\"name\":\"Hungary\",\"name_long\":\"Hungary\",\"brk_a3\":\"HUN\",\"brk_name\":\"Hungary\",\"brk_group\":null,\"abbrev\":\"Hun.\",\"postal\":\"HU\",\"formal_en\":\"Republic of Hungary\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Hungary\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":6,\"mapcolor9\":1,\"mapcolor13\":5,\"pop_est\":9905596,\"gdp_md_est\":196600,\"pop_year\":-99,\"lastcensus\":2001,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"HU\",\"iso_a3\":\"HUN\",\"iso_n3\":\"348\",\"un_a3\":\"348\",\"wb_a2\":\"HU\",\"wb_a3\":\"HUN\",\"woe_id\":-99,\"adm0_a3_is\":\"HUN\",\"adm0_a3_us\":\"HUN\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[16.202298211337364,46.85238597267696],[16.534267612380376,47.49617096616912],[16.340584344150415,47.71290192320123],[16.90375410326726,47.71486562762833],[16.979666782304037,48.123497015976305],[17.48847293464982,47.867466132186216],[17.857132602620027,47.75842886005037],[18.696512892336926,47.880953681014404],[18.77702477384767,48.081768296900634],[19.17436486173989,48.11137889260387],[19.661363559658497,48.26661489520866],[19.769470656013112,48.202691148463614],[20.239054396249347,48.32756724709692],[20.473562045989866,48.562850043321816],[20.801293979584926,48.623854071642384],[21.872236362401736,48.31997081155002],[22.085608351334855,48.42226430927179],[22.640819939878753,48.15023956968736],[22.710531447040495,47.88219391538941],[22.099767693782837,47.6724392767167],[21.626514926853872,46.99423777931816],[21.02195234547125,46.3160879583519],[20.220192498462836,46.127468980486555],[19.596044549241583,46.17172984474454],[18.82983808764996,45.90887767189193],[18.45606245288286,45.759481106136136],[17.630066359129557,45.95176911069419],[16.8825150895953,46.38063182228444],[16.564808383864857,46.50375092221983],[16.370504998447416,46.841327216166505],[16.202298211337364,46.85238597267696]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Ireland\",\"sov_a3\":\"IRL\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Ireland\",\"adm0_a3\":\"IRL\",\"geou_dif\":0,\"geounit\":\"Ireland\",\"gu_a3\":\"IRL\",\"su_dif\":0,\"subunit\":\"Ireland\",\"su_a3\":\"IRL\",\"brk_diff\":0,\"name\":\"Ireland\",\"name_long\":\"Ireland\",\"brk_a3\":\"IRL\",\"brk_name\":\"Ireland\",\"brk_group\":null,\"abbrev\":\"Ire.\",\"postal\":\"IRL\",\"formal_en\":\"Ireland\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Ireland\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":3,\"mapcolor9\":2,\"mapcolor13\":2,\"pop_est\":4203200,\"gdp_md_est\":188400,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"IE\",\"iso_a3\":\"IRL\",\"iso_n3\":\"372\",\"un_a3\":\"372\",\"wb_a2\":\"IE\",\"wb_a3\":\"IRL\",\"woe_id\":-99,\"adm0_a3_is\":\"IRL\",\"adm0_a3_us\":\"IRL\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-6.197884894220991,53.867565009163364],[-6.032985398777611,53.15316417094435],[-6.788856573910849,52.260117906292336],[-8.56161658368356,51.669301255899356],[-9.977085740590269,51.82045482035308],[-9.166282517930782,52.86462881124268],[-9.688524542672454,53.8813626165853],[-8.327987433292009,54.66451894796863],[-7.572167934591064,55.13162221945487],[-7.366030646178785,54.59584096945272],[-7.572167934591064,54.059956366586],[-6.953730231138067,54.073702297575636],[-6.197884894220991,53.867565009163364]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Iceland\",\"sov_a3\":\"ISL\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Iceland\",\"adm0_a3\":\"ISL\",\"geou_dif\":0,\"geounit\":\"Iceland\",\"gu_a3\":\"ISL\",\"su_dif\":0,\"subunit\":\"Iceland\",\"su_a3\":\"ISL\",\"brk_diff\":0,\"name\":\"Iceland\",\"name_long\":\"Iceland\",\"brk_a3\":\"ISL\",\"brk_name\":\"Iceland\",\"brk_group\":null,\"abbrev\":\"Iceland\",\"postal\":\"IS\",\"formal_en\":\"Republic of Iceland\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Iceland\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":4,\"mapcolor9\":4,\"mapcolor13\":9,\"pop_est\":306694,\"gdp_md_est\":12710,\"pop_year\":-99,\"lastcensus\":-99,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"IS\",\"iso_a3\":\"ISL\",\"iso_n3\":\"352\",\"un_a3\":\"352\",\"wb_a2\":\"IS\",\"wb_a3\":\"ISL\",\"woe_id\":-99,\"adm0_a3_is\":\"ISL\",\"adm0_a3_us\":\"ISL\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":7,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-14.508695441129234,66.45589223903143],[-14.739637417041607,65.8087482774403],[-13.60973222497981,65.12667104761987],[-14.909833746794902,64.36408193628868],[-17.794438035543422,63.678749091233854],[-18.656245896874992,63.49638296167582],[-19.97275468594276,63.64363495549153],[-22.762971971110158,63.960178941495386],[-21.778484259517683,64.40211579045551],[-23.95504391121911,64.8911298692335],[-22.184402635170358,65.0849681667603],[-22.227423265053332,65.37859365504274],[-24.326184047939336,65.61118927678847],[-23.65051469572309,66.26251902939522],[-22.134922451250887,66.41046865504687],[-20.57628373867955,65.73211212835143],[-19.05684160000159,66.27660085719477],[-17.79862382655905,65.99385325790978],[-16.167818976292125,66.52679230413587],[-14.508695441129234,66.45589223903143]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Italy\",\"sov_a3\":\"ITA\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Italy\",\"adm0_a3\":\"ITA\",\"geou_dif\":0,\"geounit\":\"Italy\",\"gu_a3\":\"ITA\",\"su_dif\":0,\"subunit\":\"Italy\",\"su_a3\":\"ITA\",\"brk_diff\":0,\"name\":\"Italy\",\"name_long\":\"Italy\",\"brk_a3\":\"ITA\",\"brk_name\":\"Italy\",\"brk_group\":null,\"abbrev\":\"Italy\",\"postal\":\"I\",\"formal_en\":\"Italian Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Italy\",\"name_alt\":null,\"mapcolor7\":6,\"mapcolor8\":7,\"mapcolor9\":8,\"mapcolor13\":7,\"pop_est\":58126212,\"gdp_md_est\":1823000,\"pop_year\":-99,\"lastcensus\":2012,\"gdp_year\":-99,\"economy\":\"1. Developed region: G7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"IT\",\"iso_a3\":\"ITA\",\"iso_n3\":\"380\",\"un_a3\":\"380\",\"wb_a2\":\"IT\",\"wb_a3\":\"ITA\",\"woe_id\":-99,\"adm0_a3_is\":\"ITA\",\"adm0_a3_us\":\"ITA\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":5,\"long_len\":5,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[15.520376010813834,38.23115509699147],[15.160242954171736,37.44404551853782],[15.309897902089006,37.1342194687318],[15.09998823411945,36.6199872909954],[14.335228712632016,36.996630967754754],[13.82673261887993,37.1045313583802],[12.431003859108813,37.61294993748382],[12.570943637755136,38.12638113051969],[13.741156447004585,38.03496552179536],[14.76124922044616,38.143873602850505],[15.520376010813834,38.23115509699147]]],[[[9.210011834356266,41.20999136002422],[9.809975213264977,40.5000088567661],[9.669518670295673,39.177376410471794],[9.21481774255949,39.240473334300134],[8.80693566247973,38.90661774347848],[8.428302443077115,39.17184703221662],[8.38825320805094,40.378310858718805],[8.15999840661766,40.95000722916379],[8.709990675500109,40.89998444270523],[9.210011834356266,41.20999136002422]]],[[[12.376485223040845,46.76755910906988],[13.806475457421556,46.50930613869119],[13.698109978905478,46.016778062517375],[13.937630242578336,45.591015936864665],[13.141606479554298,45.73669179949542],[12.328581170306308,45.381778062514854],[12.383874952858605,44.88537425391908],[12.261453484759159,44.600482082694015],[12.589237094786483,44.091365871754476],[13.526905958722494,43.58772736263791],[14.029820997787027,42.76100779883248],[15.142569614327954,41.955139675456905],[15.926191033601896,41.96131500911574],[16.169897088290412,41.740294908203424],[15.889345737377795,41.5410822617182],[16.785001661860576,41.179605617836586],[17.519168735431208,40.87714345963224],[18.376687452882578,40.35562490494266],[18.480247023195403,40.168866278639825],[18.2933850440281,39.81077444107325],[17.738380161213286,40.2776710068303],[16.869595981522338,40.44223460546385],[16.448743116937322,39.79540070246648],[17.1714896989715,39.42469981542072],[17.052840610429342,38.902871202137305],[16.635088331781844,38.8435724960824],[16.100960727613057,37.98589874933418],[15.684086948314501,37.90884918878703],[15.68796268073632,38.214592800441864],[15.891981235424709,38.750942491199226],[16.109332309644316,38.96454702407769],[15.718813510814641,39.544072374014945],[15.413612501698822,40.04835683853517],[14.998495721098237,40.17294871679093],[14.70326826341477,40.604550279292624],[14.060671827865264,40.78634796809544],[13.627985060285397,41.188287258461656],[12.88808190273042,41.25308950455562],[12.10668257004491,41.70453481705741],[11.191906365614187,42.35542531998968],[10.511947869517797,42.931462510747224],[10.200028924204048,43.920006822274615],[9.702488234097814,44.03627879493132],[8.88894616052687,44.36633616797954],[8.428560825238577,44.23122813575242],[7.850766635783202,43.76714793555524],[7.435184767291844,43.69384491634918],[7.549596388386163,44.12790110938482],[7.007562290076663,44.25476675066139],[6.749955275101712,45.02851797136759],[7.096652459347837,45.333098863295874],[6.802355177445662,45.70857982032868],[6.843592970414562,45.99114655210067],[7.273850945676685,45.77694774025076],[7.755992058959833,45.82449005795928],[8.31662967289438,46.163642483090854],[8.489952426801295,46.00515086525175],[8.966305779667834,46.036931871111165],[9.182881707403112,46.44021474871698],[9.922836541390353,46.31489940040919],[10.363378126678668,46.483571275409844],[10.442701450246602,46.893546250997446],[11.048555942436508,46.7513585475464],[11.164827915093326,46.94157949481274],[12.153088006243081,47.11539317482644],[12.376485223040845,46.76755910906988]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Kosovo\",\"sov_a3\":\"KOS\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Kosovo\",\"adm0_a3\":\"KOS\",\"geou_dif\":0,\"geounit\":\"Kosovo\",\"gu_a3\":\"KOS\",\"su_dif\":0,\"subunit\":\"Kosovo\",\"su_a3\":\"KOS\",\"brk_diff\":1,\"name\":\"Kosovo\",\"name_long\":\"Kosovo\",\"brk_a3\":\"B57\",\"brk_name\":\"Kosovo\",\"brk_group\":null,\"abbrev\":\"Kos.\",\"postal\":\"KO\",\"formal_en\":\"Republic of Kosovo\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":\"Self admin.; Claimed by Serbia\",\"name_sort\":\"Kosovo\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":2,\"mapcolor9\":3,\"mapcolor13\":11,\"pop_est\":1804838,\"gdp_md_est\":5352,\"pop_year\":-99,\"lastcensus\":1981,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"4. Lower middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"-99\",\"iso_a3\":\"-99\",\"iso_n3\":\"-99\",\"un_a3\":\"-099\",\"wb_a2\":\"KV\",\"wb_a3\":\"KSV\",\"woe_id\":-99,\"adm0_a3_is\":\"SRB\",\"adm0_a3_us\":\"KOS\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.76216,42.05186],[20.71731000000011,41.84711],[20.59023,41.85541],[20.52295,42.21787],[20.28374,42.3202500000001],[20.0707,42.58863],[20.25758,42.81275000000011],[20.49679,42.88469],[20.63508,43.21671],[20.81448,43.27205],[20.95651,43.13094],[21.143395,43.06868500000013],[21.27421,42.90959],[21.43866,42.86255],[21.63302,42.67717],[21.77505,42.6827],[21.66292,42.43922],[21.54332,42.3202500000001],[21.57663598940212,42.24522439706186],[21.35270000000014,42.2068],[20.76216,42.05186]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Lithuania\",\"sov_a3\":\"LTU\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Lithuania\",\"adm0_a3\":\"LTU\",\"geou_dif\":0,\"geounit\":\"Lithuania\",\"gu_a3\":\"LTU\",\"su_dif\":0,\"subunit\":\"Lithuania\",\"su_a3\":\"LTU\",\"brk_diff\":0,\"name\":\"Lithuania\",\"name_long\":\"Lithuania\",\"brk_a3\":\"LTU\",\"brk_name\":\"Lithuania\",\"brk_group\":null,\"abbrev\":\"Lith.\",\"postal\":\"LT\",\"formal_en\":\"Republic of Lithuania\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Lithuania\",\"name_alt\":null,\"mapcolor7\":6,\"mapcolor8\":3,\"mapcolor9\":3,\"mapcolor13\":9,\"pop_est\":3555179,\"gdp_md_est\":63330,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"LT\",\"iso_a3\":\"LTU\",\"iso_n3\":\"440\",\"un_a3\":\"440\",\"wb_a2\":\"LT\",\"wb_a3\":\"LTU\",\"woe_id\":-99,\"adm0_a3_is\":\"LTU\",\"adm0_a3_us\":\"LTU\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":9,\"long_len\":9,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[22.731098667092652,54.327536932993326],[22.65105187347254,54.582740993866736],[22.75776370615526,54.85657440858138],[22.315723504330577,55.015298570365864],[21.268448927503467,55.190481675835315],[21.055800408622417,56.031076361711065],[22.201156853939494,56.33780182557949],[23.878263787539964,56.27367137310527],[24.86068444184076,56.37252838807963],[25.000934279080894,56.16453074810484],[25.533046502390334,56.100296942766036],[26.494331495883756,55.615106919977634],[26.58827924979039,55.16717560487167],[25.7684326514798,54.84696259217509],[25.536353794056993,54.28242340760253],[24.450683628037037,53.905702216194754],[23.48412763844985,53.91249766704114],[23.24398725758951,54.22056671814914],[22.731098667092652,54.327536932993326]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Luxembourg\",\"sov_a3\":\"LUX\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Luxembourg\",\"adm0_a3\":\"LUX\",\"geou_dif\":0,\"geounit\":\"Luxembourg\",\"gu_a3\":\"LUX\",\"su_dif\":0,\"subunit\":\"Luxembourg\",\"su_a3\":\"LUX\",\"brk_diff\":0,\"name\":\"Luxembourg\",\"name_long\":\"Luxembourg\",\"brk_a3\":\"LUX\",\"brk_name\":\"Luxembourg\",\"brk_group\":null,\"abbrev\":\"Lux.\",\"postal\":\"L\",\"formal_en\":\"Grand Duchy of Luxembourg\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Luxembourg\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":7,\"mapcolor9\":3,\"mapcolor13\":7,\"pop_est\":491775,\"gdp_md_est\":39370,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"LU\",\"iso_a3\":\"LUX\",\"iso_n3\":\"442\",\"un_a3\":\"442\",\"wb_a2\":\"LU\",\"wb_a3\":\"LUX\",\"woe_id\":-99,\"adm0_a3_is\":\"LUX\",\"adm0_a3_us\":\"LUX\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":10,\"long_len\":10,\"abbrev_len\":4,\"tiny\":5,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[6.043073357781111,50.128051662794235],[6.242751092156993,49.90222565367873],[6.186320428094177,49.463802802114515],[5.897759230176405,49.44266714130703],[5.674051954784829,49.529483547557504],[5.782417433300907,50.09032786722122],[6.043073357781111,50.128051662794235]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Latvia\",\"sov_a3\":\"LVA\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Latvia\",\"adm0_a3\":\"LVA\",\"geou_dif\":0,\"geounit\":\"Latvia\",\"gu_a3\":\"LVA\",\"su_dif\":0,\"subunit\":\"Latvia\",\"su_a3\":\"LVA\",\"brk_diff\":0,\"name\":\"Latvia\",\"name_long\":\"Latvia\",\"brk_a3\":\"LVA\",\"brk_name\":\"Latvia\",\"brk_group\":null,\"abbrev\":\"Lat.\",\"postal\":\"LV\",\"formal_en\":\"Republic of Latvia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Latvia\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":7,\"mapcolor9\":6,\"mapcolor13\":13,\"pop_est\":2231503,\"gdp_md_est\":38860,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"LV\",\"iso_a3\":\"LVA\",\"iso_n3\":\"428\",\"un_a3\":\"428\",\"wb_a2\":\"LV\",\"wb_a3\":\"LVA\",\"woe_id\":-99,\"adm0_a3_is\":\"LVA\",\"adm0_a3_us\":\"LVA\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[21.055800408622417,56.031076361711065],[21.090423618257972,56.78387278912294],[21.581866489353672,57.411870632549935],[22.52434126149288,57.75337433535076],[23.318452996522097,57.00623647727487],[24.12072960785343,57.02569265403277],[24.312862583114622,57.79342357037697],[25.16459354014927,57.97015696881519],[25.60280968598437,57.84752879498657],[26.463532342237787,57.47638865826633],[27.288184848751513,57.47452830670383],[27.77001590344093,57.24425812441123],[27.855282016722526,56.75932648378429],[28.176709425577997,56.169129950578814],[27.10245975109453,55.783313707087686],[26.494331495883756,55.615106919977634],[25.533046502390334,56.100296942766036],[25.000934279080894,56.16453074810484],[24.86068444184076,56.37252838807963],[23.878263787539964,56.27367137310527],[22.201156853939494,56.33780182557949],[21.055800408622417,56.031076361711065]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Moldova\",\"sov_a3\":\"MDA\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Moldova\",\"adm0_a3\":\"MDA\",\"geou_dif\":0,\"geounit\":\"Moldova\",\"gu_a3\":\"MDA\",\"su_dif\":0,\"subunit\":\"Moldova\",\"su_a3\":\"MDA\",\"brk_diff\":0,\"name\":\"Moldova\",\"name_long\":\"Moldova\",\"brk_a3\":\"MDA\",\"brk_name\":\"Moldova\",\"brk_group\":null,\"abbrev\":\"Mda.\",\"postal\":\"MD\",\"formal_en\":\"Republic of Moldova\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Moldova\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":5,\"mapcolor9\":4,\"mapcolor13\":12,\"pop_est\":4320748,\"gdp_md_est\":10670,\"pop_year\":-99,\"lastcensus\":2004,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"4. Lower middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"MD\",\"iso_a3\":\"MDA\",\"iso_n3\":\"498\",\"un_a3\":\"498\",\"wb_a2\":\"MD\",\"wb_a3\":\"MDA\",\"woe_id\":-99,\"adm0_a3_is\":\"MDA\",\"adm0_a3_us\":\"MDA\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[26.619336785597795,48.22072622333347],[26.857823520624805,48.368210761094495],[27.522537469195157,48.467119452501116],[28.259546746541844,48.15556224221342],[28.670891147585166,48.1181485052341],[29.12269819511303,47.849095160506465],[29.05086795422733,47.5102269557525],[29.415135125452736,47.34664520933258],[29.559674106573112,46.928582872091326],[29.908851759569302,46.67436066343146],[29.838210076626297,46.52532583270169],[30.024658644335375,46.42393667254504],[29.759971958136394,46.34998769793536],[29.170653924279886,46.3792623968287],[29.07210696789929,46.517677720722496],[28.862972446414062,46.43788930926383],[28.933717482221624,46.2588304713725],[28.65998742037158,45.93998688413164],[28.485269402792767,45.5969070501459],[28.233553501099042,45.488283189468376],[28.0544429867754,45.944586086605625],[28.160017937947714,46.37156260841722],[28.128030226359044,46.810476386088254],[27.551166212684848,47.40511709247083],[27.233872918412743,47.82677094175638],[26.924176059687568,48.123264472030996],[26.619336785597795,48.22072622333347]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Macedonia\",\"sov_a3\":\"MKD\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Macedonia\",\"adm0_a3\":\"MKD\",\"geou_dif\":0,\"geounit\":\"Macedonia\",\"gu_a3\":\"MKD\",\"su_dif\":0,\"subunit\":\"Macedonia\",\"su_a3\":\"MKD\",\"brk_diff\":0,\"name\":\"Macedonia\",\"name_long\":\"Macedonia\",\"brk_a3\":\"MKD\",\"brk_name\":\"Macedonia\",\"brk_group\":null,\"abbrev\":\"Mkd.\",\"postal\":\"MK\",\"formal_en\":\"Former Yugoslav Republic of Macedonia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Macedonia, FYR\",\"name_alt\":null,\"mapcolor7\":5,\"mapcolor8\":3,\"mapcolor9\":7,\"mapcolor13\":3,\"pop_est\":2066718,\"gdp_md_est\":18780,\"pop_year\":-99,\"lastcensus\":2010,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"MK\",\"iso_a3\":\"MKD\",\"iso_n3\":\"807\",\"un_a3\":\"807\",\"wb_a2\":\"MK\",\"wb_a3\":\"MKD\",\"woe_id\":-99,\"adm0_a3_is\":\"MKD\",\"adm0_a3_us\":\"MKD\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":9,\"long_len\":9,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.59023,41.85541],[20.71731000000011,41.84711],[20.76216,42.05186],[21.35270000000014,42.2068],[21.57663598940212,42.24522439706186],[21.917080000000112,42.30364],[22.38052575042468,42.32025950781508],[22.881373732197346,41.999297186850356],[22.952377150166512,41.33799388281119],[22.76177,41.3048],[22.597308383889015,41.130487168943205],[22.05537763844427,41.14986583105269],[21.674160597426976,40.931274522457954],[21.0200403174764,40.84272695572588],[20.60518,41.08622],[20.46315,41.5150900000001],[20.59023,41.85541]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Montenegro\",\"sov_a3\":\"MNE\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Montenegro\",\"adm0_a3\":\"MNE\",\"geou_dif\":0,\"geounit\":\"Montenegro\",\"gu_a3\":\"MNE\",\"su_dif\":0,\"subunit\":\"Montenegro\",\"su_a3\":\"MNE\",\"brk_diff\":0,\"name\":\"Montenegro\",\"name_long\":\"Montenegro\",\"brk_a3\":\"MNE\",\"brk_name\":\"Montenegro\",\"brk_group\":null,\"abbrev\":\"Mont.\",\"postal\":\"ME\",\"formal_en\":\"Montenegro\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Montenegro\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":1,\"mapcolor9\":4,\"mapcolor13\":5,\"pop_est\":672180,\"gdp_md_est\":6816,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"ME\",\"iso_a3\":\"MNE\",\"iso_n3\":\"499\",\"un_a3\":\"499\",\"wb_a2\":\"ME\",\"wb_a3\":\"MNE\",\"woe_id\":-99,\"adm0_a3_is\":\"MNE\",\"adm0_a3_us\":\"MNE\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":10,\"long_len\":10,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[19.801613396898688,42.50009349219084],[19.73805138517963,42.68824738216557],[19.3044900000001,42.19574],[19.37177000000014,41.87755],[19.16246,41.95502],[18.88214,42.28151],[18.45,42.48],[18.56,42.65],[18.70648,43.20011],[19.03165,43.43253],[19.21852,43.52384],[19.48389,43.35229],[19.63,43.21377997027054],[19.95857,43.10604],[20.3398,42.89852],[20.25758,42.81275000000011],[20.0707,42.58863],[19.801613396898688,42.50009349219084]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Netherlands\",\"sov_a3\":\"NL1\",\"adm0_dif\":1,\"level\":2,\"type\":\"Country\",\"admin\":\"Netherlands\",\"adm0_a3\":\"NLD\",\"geou_dif\":0,\"geounit\":\"Netherlands\",\"gu_a3\":\"NLD\",\"su_dif\":0,\"subunit\":\"Netherlands\",\"su_a3\":\"NLD\",\"brk_diff\":0,\"name\":\"Netherlands\",\"name_long\":\"Netherlands\",\"brk_a3\":\"NLD\",\"brk_name\":\"Netherlands\",\"brk_group\":null,\"abbrev\":\"Neth.\",\"postal\":\"NL\",\"formal_en\":\"Kingdom of the Netherlands\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Netherlands\",\"name_alt\":null,\"mapcolor7\":4,\"mapcolor8\":2,\"mapcolor9\":2,\"mapcolor13\":9,\"pop_est\":16715999,\"gdp_md_est\":672000,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"NL\",\"iso_a3\":\"NLD\",\"iso_n3\":\"528\",\"un_a3\":\"528\",\"wb_a2\":\"NL\",\"wb_a3\":\"NLD\",\"woe_id\":-99,\"adm0_a3_is\":\"NLD\",\"adm0_a3_us\":\"NLD\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Western Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":11,\"long_len\":11,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[6.074182570020923,53.510403347378144],[6.905139601274129,53.48216217713065],[7.092053256873896,53.144043280644894],[6.842869500362383,52.22844025329755],[6.589396599970826,51.852029120483394],[5.988658074577813,51.851615709025054],[6.15665815595878,50.80372101501058],[5.606975945670001,51.03729848896978],[4.973991326526914,51.47502370869813],[4.047071160507528,51.26725861266857],[3.314971144228537,51.34575511331991],[3.830288527043137,51.62054454203195],[4.705997348661185,53.091798407597764],[6.074182570020923,53.510403347378144]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Norway\",\"sov_a3\":\"NOR\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Norway\",\"adm0_a3\":\"NOR\",\"geou_dif\":0,\"geounit\":\"Norway\",\"gu_a3\":\"NOR\",\"su_dif\":0,\"subunit\":\"Norway\",\"su_a3\":\"NOR\",\"brk_diff\":0,\"name\":\"Norway\",\"name_long\":\"Norway\",\"brk_a3\":\"NOR\",\"brk_name\":\"Norway\",\"brk_group\":null,\"abbrev\":\"Nor.\",\"postal\":\"N\",\"formal_en\":\"Kingdom of Norway\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Norway\",\"name_alt\":null,\"mapcolor7\":5,\"mapcolor8\":3,\"mapcolor9\":8,\"mapcolor13\":12,\"pop_est\":4676305,\"gdp_md_est\":276400,\"pop_year\":-99,\"lastcensus\":2001,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"NO\",\"iso_a3\":\"NOR\",\"iso_n3\":\"578\",\"un_a3\":\"578\",\"wb_a2\":\"NO\",\"wb_a3\":\"NOR\",\"woe_id\":-99,\"adm0_a3_is\":\"NOR\",\"adm0_a3_us\":\"NOR\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[28.165547316202918,71.18547435168051],[31.293418409965483,70.45378774685992],[30.005435011522792,70.1862588568849],[31.101078728975125,69.55808014594487],[29.399580519332886,69.15691600206307],[28.591929559043194,69.0647769232867],[29.015572950971972,69.76649119737797],[27.73229210786789,70.1641930202963],[26.1796220232263,69.82529897732616],[25.689212680776393,69.09211375596902],[24.73567915212672,68.64955678982145],[23.662049594830762,68.89124746365053],[22.356237827247412,68.84174144151496],[21.24493615081073,69.37044302029312],[20.645592889089585,69.10624726020086],[20.025268995857914,69.06513865831272],[19.878559604581255,68.40719432237262],[17.99386844246439,68.56739126247734],[17.729181756265348,68.01055186631623],[16.76887861498554,68.01393667263139],[16.108712192456835,67.3024555528369],[15.108411492583059,66.19386688909543],[13.55568973150909,64.78702769638147],[13.919905226302205,64.44542064071612],[13.57191613124877,64.04911408146967],[12.579935336973932,64.06621898055835],[11.930569288794231,63.12831757267699],[11.992064243221535,61.800362453856565],[12.631146681375242,61.2935716823701],[12.3003658382749,60.11793284773006],[11.468271925511175,59.432393296946],[11.027368605196926,58.8561494004594],[10.356556837616097,59.46980703392538],[8.382000359743643,58.31328847923328],[7.048748406613299,58.078884182357285],[5.665835402050419,58.58815542259367],[5.308234490590735,59.66323191999382],[4.992078077829007,61.970998033284275],[5.912900424837886,62.614472968182696],[8.553411085655767,63.45400828719647],[10.527709181366788,64.48603831649748],[12.358346795306375,65.87972585719316],[14.761145867581604,67.81064158799515],[16.43592736172897,68.56320547146169],[19.184028354578516,69.81744415961782],[21.378416375420613,70.25516937934606],[23.023742303161583,70.20207184516627],[24.546543409938522,71.03049673123724],[26.37004967622181,70.98626170519537],[28.165547316202918,71.18547435168051]]],[[[24.72412,77.85385],[22.49032,77.44493],[20.72601,77.67704],[21.41611,77.93504],[20.8119,78.25463],[22.88426,78.45494],[23.28134,78.07954],[24.72412,77.85385]]],[[[18.25183,79.70175],[21.54383,78.95611],[19.02737,78.5626],[18.47172,77.82669],[17.59441,77.63796],[17.1182,76.80941],[15.91315,76.77045],[13.76259,77.38035],[14.66956,77.73565],[13.1706,78.02493],[11.22231,78.8693],[10.44453,79.65239],[13.17077,80.01046],[13.71852,79.66039],[15.14282,79.67431],[15.52255,80.01608],[16.99085,80.05086],[18.25183,79.70175]]],[[[25.447625359811894,80.40734039989451],[27.4075057309135,80.05640574820046],[25.92465050629818,79.51783397085455],[23.02446577321362,79.4000117052291],[20.075188429451885,79.56682322866726],[19.897266473070914,79.84236196564751],[18.462263624757924,79.85988027619442],[17.368015170977458,80.31889618602702],[20.455992059010697,80.59815562613224],[21.907944777115404,80.35767934846209],[22.919252557067438,80.6571442735935],[25.447625359811894,80.40734039989451]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Poland\",\"sov_a3\":\"POL\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Poland\",\"adm0_a3\":\"POL\",\"geou_dif\":0,\"geounit\":\"Poland\",\"gu_a3\":\"POL\",\"su_dif\":0,\"subunit\":\"Poland\",\"su_a3\":\"POL\",\"brk_diff\":0,\"name\":\"Poland\",\"name_long\":\"Poland\",\"brk_a3\":\"POL\",\"brk_name\":\"Poland\",\"brk_group\":null,\"abbrev\":\"Pol.\",\"postal\":\"PL\",\"formal_en\":\"Republic of Poland\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Poland\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":7,\"mapcolor9\":1,\"mapcolor13\":2,\"pop_est\":38482919,\"gdp_md_est\":667900,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"PL\",\"iso_a3\":\"POL\",\"iso_n3\":\"616\",\"un_a3\":\"616\",\"wb_a2\":\"PL\",\"wb_a3\":\"POL\",\"woe_id\":-99,\"adm0_a3_is\":\"POL\",\"adm0_a3_us\":\"POL\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[15.01699588385867,51.10667409932158],[14.607098422919535,51.74518809671997],[14.685026482815687,52.0899474147552],[14.437599725002201,52.62485016540839],[14.074521111719491,52.98126251892543],[14.353315463934138,53.24817129171297],[14.119686313542587,53.75702912049104],[14.802900424873458,54.05070628520575],[16.36347700365573,54.513158677785725],[17.622831658608675,54.85153595643291],[18.62085859546164,54.68260569927078],[18.696254510175464,54.43871877706929],[19.660640089606403,54.42608388937393],[20.892244500418627,54.31252492941253],[22.731098667092652,54.327536932993326],[23.24398725758951,54.22056671814914],[23.48412763844985,53.91249766704114],[23.527535841575002,53.470121568406555],[23.80493493011778,53.089731350306074],[23.79919884613338,52.69109935160657],[23.199493849386187,52.48697744405367],[23.508002150168693,52.02364655212473],[23.527070753684374,51.57845408793024],[24.029985792748903,50.70540660257518],[23.922757195743262,50.42488108987875],[23.426508416444392,50.308505764357456],[22.518450148211603,49.47677358661974],[22.776418898212626,49.02739533140962],[22.558137648211755,49.085738023467144],[21.607808058364213,49.47010732685409],[20.887955356538413,49.32877228453583],[20.415839471119853,49.43145335549977],[19.825022820726872,49.21712535256923],[19.320712517990472,49.571574001659194],[18.90957482267632,49.435845852244576],[18.853144158613617,49.49622976337764],[18.392913852622172,49.98862864847075],[17.64944502123899,50.049038397819956],[17.55456709155112,50.36214590107642],[16.86876915860566,50.47397370055603],[16.719475945714436,50.21574656839354],[16.176253289462267,50.42260732685791],[16.23862674323857,50.69773265237984],[15.490972120839729,50.78472992614321],[15.01699588385867,51.10667409932158]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Portugal\",\"sov_a3\":\"PRT\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Portugal\",\"adm0_a3\":\"PRT\",\"geou_dif\":0,\"geounit\":\"Portugal\",\"gu_a3\":\"PRT\",\"su_dif\":1,\"subunit\":\"Portugal\",\"su_a3\":\"PR1\",\"brk_diff\":0,\"name\":\"Portugal\",\"name_long\":\"Portugal\",\"brk_a3\":\"PR1\",\"brk_name\":\"Portugal\",\"brk_group\":null,\"abbrev\":\"Port.\",\"postal\":\"P\",\"formal_en\":\"Portuguese Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Portugal\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":7,\"mapcolor9\":1,\"mapcolor13\":4,\"pop_est\":10707924,\"gdp_md_est\":208627,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":0,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"PT\",\"iso_a3\":\"PRT\",\"iso_n3\":\"620\",\"un_a3\":\"620\",\"wb_a2\":\"PT\",\"wb_a3\":\"PRT\",\"woe_id\":-99,\"adm0_a3_is\":\"PRT\",\"adm0_a3_us\":\"PRT\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":8,\"long_len\":8,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-9.034817674180246,41.880570583659676],[-8.67194576662672,42.13468943945496],[-8.263856980817792,42.28046865495034],[-8.013174607769912,41.790886135417125],[-7.422512986673795,41.79207469335984],[-7.251308966490824,41.91834605566505],[-6.668605515967656,41.883386949219584],[-6.389087693700915,41.381815497394655],[-6.851126674822552,41.11108266861753],[-6.864019944679385,40.33087189387483],[-7.026413133156595,40.184524237624245],[-7.066591559263529,39.711891587882775],[-7.498632371439726,39.62957103124181],[-7.098036668313128,39.03007274022379],[-7.374092169616318,38.37305858006492],[-7.029281175148796,38.07576406508977],[-7.166507941099865,37.803894354802225],[-7.537105475281024,37.42890432387624],[-7.453725551778092,37.09778758396607],[-7.855613165711986,36.83826854099627],[-8.382816127953689,36.97888011326246],[-8.898856980820327,36.86880931248078],[-8.746101446965554,37.65134552667661],[-8.83999752443988,38.266243394517616],[-9.287463751655224,38.3584858261586],[-9.526570603869715,38.73742910415491],[-9.446988898140233,39.39206614842837],[-9.048305223008427,39.75509308527877],[-8.977353481471681,40.15930613866581],[-8.768684047877102,40.76063894303019],[-8.79085323733031,41.18433401139126],[-8.99078935386757,41.54345937760364],[-9.034817674180246,41.880570583659676]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Romania\",\"sov_a3\":\"ROU\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Romania\",\"adm0_a3\":\"ROU\",\"geou_dif\":0,\"geounit\":\"Romania\",\"gu_a3\":\"ROU\",\"su_dif\":0,\"subunit\":\"Romania\",\"su_a3\":\"ROU\",\"brk_diff\":0,\"name\":\"Romania\",\"name_long\":\"Romania\",\"brk_a3\":\"ROU\",\"brk_name\":\"Romania\",\"brk_group\":null,\"abbrev\":\"Rom.\",\"postal\":\"RO\",\"formal_en\":\"Romania\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Romania\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":4,\"mapcolor9\":3,\"mapcolor13\":13,\"pop_est\":22215421,\"gdp_md_est\":271400,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"RO\",\"iso_a3\":\"ROU\",\"iso_n3\":\"642\",\"un_a3\":\"642\",\"wb_a2\":\"RO\",\"wb_a3\":\"ROM\",\"woe_id\":-99,\"adm0_a3_is\":\"ROU\",\"adm0_a3_us\":\"ROU\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[22.710531447040495,47.88219391538941],[23.142236362406805,48.09634105080695],[23.76095828623741,47.985598456405455],[24.40205610525038,47.98187775328043],[24.866317172960578,47.737525743188314],[25.20774336111299,47.89105642352747],[25.9459411964024,47.987148749374214],[26.19745039236693,48.22088125263035],[26.619336785597795,48.22072622333347],[26.924176059687568,48.123264472030996],[27.233872918412743,47.82677094175638],[27.551166212684848,47.40511709247083],[28.128030226359044,46.810476386088254],[28.160017937947714,46.37156260841722],[28.0544429867754,45.944586086605625],[28.233553501099042,45.488283189468376],[28.67977949393938,45.304030870131704],[29.149724969201653,45.464925442072456],[29.603289015427436,45.293308010431126],[29.62654340995877,45.0353909368624],[29.141611769331835,44.820210272799045],[28.8378577003202,44.913873806328056],[28.558081495891997,43.70746165625813],[27.970107049275075,43.81246816667522],[27.242399529740908,44.175986029632405],[26.065158725699746,43.94349376075127],[25.569271681426926,43.68844472917472],[24.100679152124172,43.74105133724785],[23.332302280376325,43.897010809904714],[22.944832391051847,43.82378530534713],[22.65714969248299,44.23492300066128],[22.4740084164406,44.40922760678177],[22.705725538837356,44.57800283464702],[22.459022251075936,44.7025171982543],[22.14508792490281,44.47842234962059],[21.56202273935361,44.7689472519655],[21.483526238702236,45.18117015235778],[20.874312778413355,45.416375433934235],[20.762174920339987,45.73457306577144],[20.220192498462836,46.127468980486555],[21.02195234547125,46.3160879583519],[21.626514926853872,46.99423777931816],[22.099767693782837,47.6724392767167],[22.710531447040495,47.88219391538941]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":5,\"sovereignt\":\"Republic of Serbia\",\"sov_a3\":\"SRB\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Republic of Serbia\",\"adm0_a3\":\"SRB\",\"geou_dif\":0,\"geounit\":\"Republic of Serbia\",\"gu_a3\":\"SRB\",\"su_dif\":0,\"subunit\":\"Republic of Serbia\",\"su_a3\":\"SRB\",\"brk_diff\":0,\"name\":\"Serbia\",\"name_long\":\"Serbia\",\"brk_a3\":\"SRB\",\"brk_name\":\"Serbia\",\"brk_group\":null,\"abbrev\":\"Serb.\",\"postal\":\"RS\",\"formal_en\":\"Republic of Serbia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Serbia\",\"name_alt\":null,\"mapcolor7\":3,\"mapcolor8\":3,\"mapcolor9\":2,\"mapcolor13\":10,\"pop_est\":7379339,\"gdp_md_est\":80340,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"RS\",\"iso_a3\":\"SRB\",\"iso_n3\":\"688\",\"un_a3\":\"688\",\"wb_a2\":\"YF\",\"wb_a3\":\"SRB\",\"woe_id\":-99,\"adm0_a3_is\":\"SRB\",\"adm0_a3_us\":\"SRB\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":5,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.87431277841341,45.41637543393432],[21.48352623870221,45.18117015235788],[21.562022739353722,44.76894725196564],[22.145087924902896,44.47842234962059],[22.459022251075965,44.70251719825444],[22.70572553883744,44.57800283464701],[22.474008416440654,44.40922760678177],[22.657149692483074,44.234923000661354],[22.410446404721597,44.008063462900054],[22.500156691180223,43.642814439461006],[22.986018507588483,43.2111612005271],[22.60480146657136,42.898518785161116],[22.436594679461393,42.58032115332395],[22.54501183440965,42.46136200618804],[22.38052575042468,42.32025950781508],[21.917080000000112,42.30364],[21.57663598940212,42.24522439706186],[21.54332,42.3202500000001],[21.66292,42.43922],[21.77505,42.6827],[21.63302,42.67717],[21.43866,42.86255],[21.27421,42.90959],[21.143395,43.06868500000013],[20.95651,43.13094],[20.81448,43.27205],[20.63508,43.21671],[20.49679,42.88469],[20.25758,42.81275000000011],[20.3398,42.89852],[19.95857,43.10604],[19.63,43.21377997027054],[19.48389,43.35229],[19.21852,43.52384],[19.454,43.56810000000013],[19.59976,44.03847],[19.11761,44.42307000000011],[19.36803,44.863],[19.00548,44.86023],[19.39047570158459,45.236515611342384],[19.072768995854176,45.52151113543209],[18.82982,45.90888],[19.59604454924164,46.17172984474456],[20.220192498462893,46.12746898048658],[20.762174920339987,45.734573065771485],[20.87431277841341,45.41637543393432]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":2,\"sovereignt\":\"Russia\",\"sov_a3\":\"RUS\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Russia\",\"adm0_a3\":\"RUS\",\"geou_dif\":0,\"geounit\":\"Russia\",\"gu_a3\":\"RUS\",\"su_dif\":0,\"subunit\":\"Russia\",\"su_a3\":\"RUS\",\"brk_diff\":0,\"name\":\"Russia\",\"name_long\":\"Russian Federation\",\"brk_a3\":\"RUS\",\"brk_name\":\"Russia\",\"brk_group\":null,\"abbrev\":\"Rus.\",\"postal\":\"RUS\",\"formal_en\":\"Russian Federation\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Russian Federation\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":5,\"mapcolor9\":7,\"mapcolor13\":7,\"pop_est\":140041247,\"gdp_md_est\":2266000,\"pop_year\":-99,\"lastcensus\":2010,\"gdp_year\":-99,\"economy\":\"3. Emerging region: BRIC\",\"income_grp\":\"3. Upper middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"RU\",\"iso_a3\":\"RUS\",\"iso_n3\":\"643\",\"un_a3\":\"643\",\"wb_a2\":\"RU\",\"wb_a3\":\"RUS\",\"woe_id\":-99,\"adm0_a3_is\":\"RUS\",\"adm0_a3_us\":\"RUS\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":18,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[143.64800744036287,50.74760040954152],[144.65414757708564,48.976390692737596],[143.17392785051723,49.30655141865037],[142.5586682476501,47.861575018904915],[143.53349246640406,46.83672801369249],[143.50527713437262,46.13790761980948],[142.74770063697392,46.74076487892657],[142.0920300640545,45.96675527605879],[141.90692508358504,46.80592886004655],[142.0184428244709,47.780132961612935],[141.90444461483506,48.85918854429957],[142.13580000220568,49.61516307229746],[142.1799833518153,50.95234243428192],[141.59407596249005,51.93543488220254],[141.68254601457366,53.30196645772878],[142.60693403541077,53.762145087287905],[142.2097489768154,54.22547597921687],[142.654786411713,54.36588084575388],[142.91461551327657,53.70457754171474],[143.26084760963207,52.74076040303905],[143.23526777564766,51.75666026468875],[143.64800744036287,50.74760040954152]]],[[[22.731098667092652,54.327536932993326],[20.892244500418656,54.312524929412575],[19.660640089606403,54.426083889373984],[19.888481479581344,54.8661603867715],[21.2684489275035,55.19048167583529],[22.315723504330606,55.0152985703659],[22.757763706155288,54.85657440858142],[22.651051873472568,54.58274099386671],[22.731098667092652,54.327536932993326]]],[[[-175.01425,66.58435],[-174.33983,66.33556],[-174.57182,67.06219],[-171.85731,66.91308],[-169.89958,65.97724],[-170.89107,65.54139],[-172.53025,65.43791],[-172.555,64.46079],[-172.95533,64.25269],[-173.89184,64.2826],[-174.65392,64.63125],[-175.98353,64.92288],[-176.20716,65.35667],[-177.22266,65.52024],[-178.35993,65.39052],[-178.90332,65.74044],[-178.68611,66.11211],[-179.88377,65.87456],[-179.43268,65.40411],[-180,64.97970870219837],[-180,68.96363636363637],[-177.55,68.2],[-174.92825,67.20589],[-175.01425,66.58435]]],[[[180.00000000000014,70.83219920854668],[178.9034250000001,70.78114],[178.7253,71.0988],[180.00000000000014,71.51571433642826],[180.00000000000014,70.83219920854668]]],[[[-178.69378,70.89302],[-180,70.83219920854668],[-180,71.51571433642826],[-179.87187,71.55762],[-179.02433,71.55553],[-177.577945,71.26948],[-177.663575,71.13277],[-178.69378,70.89302]]],[[[143.60385,73.21244],[142.08763,73.20544],[140.038155,73.31692],[139.86312,73.36983],[140.81171,73.76506],[142.06207,73.85758],[143.48283,73.47525],[143.60385,73.21244]]],[[[150.73167,75.08406],[149.575925,74.68892],[147.97746,74.778355],[146.11919,75.17298],[146.358485,75.49682],[148.22223,75.345845],[150.73167,75.08406]]],[[[145.086285,75.56262],[144.3,74.82],[140.61381,74.84768],[138.95544,74.61148],[136.97439,75.26167],[137.51176,75.94917],[138.831075,76.13676],[141.47161,76.09289],[145.086285,75.56262]]],[[[57.5356925799924,70.72046397570216],[56.94497928246395,70.63274323188668],[53.6773751157842,70.76265778266847],[53.41201663596539,71.2066616889202],[51.60189456564572,71.47475901965049],[51.45575361512422,72.01488108996514],[52.47827518088357,72.22944163684096],[52.444168735570855,72.77473135038485],[54.42761355979766,73.62754751249759],[53.50828982932515,73.74981395130015],[55.90245893740766,74.62748647734534],[55.631932814359715,75.08141225859717],[57.86864383324885,75.60939036732321],[61.170044386647504,76.25188345000814],[64.49836836127022,76.43905548776928],[66.2109770038551,76.80978221303124],[68.15705976753483,76.93969676381292],[68.85221113472514,76.54481130645462],[68.18057254422766,76.23364166940911],[64.63732628770302,75.73775462513623],[61.58350752141476,75.2608845079468],[58.47708214705338,74.30905630156283],[56.98678551618801,73.33304352486624],[55.419335971910954,72.37126760526598],[55.622837762276305,71.54059479439033],[57.5356925799924,70.72046397570216]]],[[[106.97013000000013,76.97419],[107.24000000000015,76.48],[108.1538,76.72335000000015],[111.07726000000017,76.71],[113.33151,76.22224],[114.13417,75.84764],[113.88539,75.32779000000014],[112.77918,75.03186],[110.1512500000002,74.47673],[109.4,74.18],[110.64,74.04],[112.11919,73.78774000000013],[113.01954000000026,73.97693000000015],[113.52958000000032,73.33505000000011],[113.96881,73.5948800000001],[115.56782,73.75285],[118.77633000000023,73.58772],[119.02,73.12],[123.20066000000011,72.97122],[123.25777000000019,73.73503000000011],[125.3800000000002,73.56],[126.97644,73.56549],[128.59126,73.03871],[129.05157,72.39872],[128.46000000000012,71.98],[129.71599000000023,71.19304],[131.28858000000028,70.78699000000012],[132.25350000000017,71.83630000000011],[133.85766000000032,71.38642000000016],[135.56193,71.65525000000014],[137.49755,71.34763],[138.23409000000018,71.62803],[139.86983000000012,71.48783000000014],[139.14791,72.41619000000011],[140.46817,72.84941000000015],[149.5,72.2],[150.3511800000002,71.60643],[152.96890000000022,70.84222],[157.00688,71.03141],[158.99779,70.86672],[159.83031000000025,70.45324],[159.70866,69.72198],[160.94053000000034,69.4372800000001],[162.27907000000013,69.64204],[164.05248000000014,69.66823],[165.94037000000023,69.47199],[167.83567,69.58269],[169.5776300000002,68.6938],[170.81688000000028,69.01363],[170.0082000000002,69.65276],[170.4534500000003,70.09703],[173.64391000000026,69.81743],[175.72403000000023,69.87725000000023],[178.6,69.4],[180.00000000000014,68.96363636363657],[180.00000000000014,64.97970870219848],[179.99281,64.97433],[178.70720000000026,64.53493],[177.41128000000018,64.60821],[178.31300000000024,64.07593],[178.9082500000002,63.25197000000014],[179.37034,62.98262000000011],[179.48636,62.56894],[179.22825000000014,62.30410000000015],[177.3643,62.5219],[174.56929000000022,61.76915],[173.68013,61.65261],[172.15,60.95],[170.6985000000001,60.33618],[170.3308500000003,59.88177],[168.90046,60.57355],[166.29498000000032,59.788550000000214],[165.84000000000023,60.16],[164.87674,59.7316],[163.53929000000014,59.86871],[163.21711000000025,59.21101],[162.0173300000001,58.24328],[162.05297,57.83912],[163.19191,57.615030000000104],[163.05794000000017,56.159240000000125],[162.12958000000023,56.12219],[161.70146,55.285680000000156],[162.11749000000017,54.85514],[160.36877000000035,54.34433],[160.02173000000025,53.20257],[158.5309400000002,52.95868000000024],[158.23118,51.94269],[156.7897900000003,51.01105],[156.42000000000016,51.7],[155.99182,53.15895],[155.43366000000012,55.38103000000012],[155.91442000000032,56.767920000000146],[156.75815,57.3647],[156.8103500000001,57.83204],[158.3643300000002,58.05575],[160.15064000000015,59.314770000000124],[161.87204,60.34300000000013],[163.66969,61.1409000000001],[164.47355000000013,62.55061],[163.2584200000002,62.46627],[162.65791,61.6425],[160.1214800000001,60.54423],[159.30232,61.7739600000001],[156.7206800000001,61.43442],[154.21806000000035,59.758180000000124],[155.04375,59.14495],[152.81185,58.88385],[151.26573000000027,58.78089],[151.33815000000013,59.50396],[149.78371,59.65573000000015],[148.54481,59.16448],[145.48722,59.33637],[142.19782000000018,59.03998],[138.95848000000032,57.08805],[135.12619,54.72959],[136.70171,54.603550000000126],[137.19342,53.97732],[138.1647,53.755010000000254],[138.80463,54.25455000000011],[139.90151,54.18968000000018],[141.34531,53.08957000000012],[141.37923,52.23877],[140.5974200000002,51.2396700000001],[140.51308,50.04553000000013],[140.06193000000022,48.44671000000017],[138.55472000000023,46.99965],[138.21971,46.30795],[136.86232,45.14350000000019],[135.5153500000002,43.989],[134.86939000000027,43.39821],[133.53687000000028,42.81147],[132.90627000000015,42.7984900000001],[132.27807000000027,43.28456000000011],[130.93587000000016,42.55274],[130.78,42.2200000000002],[130.64000000000019,42.395],[130.63386640840983,42.90301463477056],[131.144687941615,42.92998973242695],[131.28855512911562,44.111519680348266],[131.02519000000026,44.96796],[131.8834542176596,45.32116160743652],[133.09712000000022,45.14409],[133.7696439963132,46.116926988299156],[134.1123500000002,47.21248000000014],[134.50081,47.578450000000146],[135.0263114767868,48.47822988544391],[133.37359581922803,48.18344167743484],[132.50669000000013,47.78896],[130.98726000000013,47.79013],[130.58229332898267,48.729687404976204],[129.3978178244205,49.440600084015614],[127.65740000000037,49.76027],[127.28745568248493,50.73979726826545],[126.93915652883786,51.35389415140591],[126.564399041857,51.7842554795327],[125.94634891164648,52.79279857035695],[125.06821129771046,53.16104482686893],[123.57147,53.4588],[122.24574791879306,53.431725979213695],[121.00308475147037,53.25140106873124],[120.1770886577169,52.75388621684121],[120.725789015792,52.51622630473091],[120.7382,51.96411],[120.18208000000018,51.64355],[119.27939,50.58292],[119.28846072802585,50.14288279886196],[117.8792444194265,49.51098338479704],[116.67880089728621,49.888531399121405],[115.48569542853144,49.80517731383475],[114.9621098165504,50.14024730081513],[114.36245649623535,50.248302720737485],[112.89773969935439,49.54356537535699],[111.58123091028668,49.37796824807768],[110.66201053267886,49.13012807880585],[109.40244917199672,49.29296051695769],[108.47516727095129,49.28254771585071],[107.86817589725112,49.793705145865886],[106.88880415245532,50.27429596618029],[105.8865914245869,50.406019192092174],[104.62158,50.275320000000164],[103.67654544476036,50.089966132195144],[102.25589000000011,50.51056000000011],[102.06521,51.259910000000104],[100.88948042196265,51.51685578063842],[99.98173221232358,51.63400625264396],[98.8614905131005,52.04736603454671],[97.82573978067452,51.01099518493325],[98.23176150919173,50.42240062112873],[97.25976000000023,49.72605],[95.81402000000017,49.97746000000012],[94.81594933469879,50.01343333597089],[94.14756635943561,50.48053660745717],[93.10421,50.49529],[92.23471154171969,50.80217072204175],[90.71366743364078,50.331811835321105],[88.80556684769559,49.47052073831247],[87.75126427607685,49.29719798440556],[87.3599703307627,49.21498078062916],[86.82935672398966,49.82667470966814],[85.5412699726825,49.69285858824816],[85.11555952346211,50.11730296487764],[84.41637739455305,50.311399644565824],[83.93511478061893,50.88924551045358],[83.38300377801247,51.069182847693895],[81.94598554883996,50.81219594990634],[80.56844689323546,51.38833649352844],[80.03555952344172,50.864750881547224],[77.80091556184433,53.40441498474755],[76.52517947785478,54.17700348572714],[76.89110029491346,54.49052440044193],[74.38482000000013,53.54685000000012],[73.42567874542053,53.489810289109755],[73.50851606638437,54.0356167669766],[72.22415001820221,54.37665538188679],[71.1801310566095,54.13328522400826],[70.86526655465516,55.169733588270105],[69.0681669452729,55.3852501491435],[68.16910037625891,54.97039175070438],[65.6668700000001,54.601250000000164],[65.17853356309595,54.35422781027208],[61.43660000000014,54.00625],[60.97806644068325,53.66499339457914],[61.699986199800634,52.97999644633427],[60.73999311711455,52.71998647725775],[60.92726850774025,52.44754832621501],[59.967533807215574,51.960420437215674],[61.58800337102414,51.272658799843185],[61.33742435084102,50.79907013610426],[59.932807244715576,50.842194118851836],[59.64228234237058,50.545442206415714],[58.36332000000013,51.06364],[56.77798,51.04355],[55.71694000000011,50.62171000000015],[54.532878452376195,51.02623973245937],[52.32872358583106,51.718652248738096],[50.76664839051219,51.692762356159875],[48.70238162618105,50.60512848571284],[48.577841424357615,49.874759629915644],[47.549480421749394,50.454698391311126],[46.75159630716277,49.35600576435374],[47.0436715024766,49.152038886097586],[46.4664457537763,48.39415233010493],[47.31524000000016,47.71585],[48.05725,47.74377],[48.694733514201886,47.0756281601779],[48.593250000000154,46.561040000000105],[49.101160000000135,46.399330000000106],[48.64541000000011,45.80629],[47.67591,45.64149000000012],[46.68201,44.6092000000001],[47.59094,43.66016000000013],[47.49252,42.98658],[48.58437000000018,41.80888],[47.98728315612604,41.4058192001944],[47.81566572448466,41.15141612402135],[47.373315464066394,41.21973236751114],[46.686070591016716,41.827137152669906],[46.40495079934894,41.86067515722743],[45.7764,42.09244000000024],[45.470279168485916,42.50278066667005],[44.53762291848207,42.711992702803684],[43.93121000000011,42.55496000000011],[43.755990000000196,42.74083],[42.39440000000016,43.2203],[40.92219000000014,43.38215000000014],[40.07696495947985,43.553104153002494],[39.955008579271095,43.434997666999294],[38.68,44.28],[37.53912000000011,44.65721],[36.67546000000013,45.24469],[37.40317,45.4045100000001],[38.23295,46.24087],[37.67372,46.63657],[39.14767,47.044750000000136],[39.12120000000013,47.26336],[38.22353803889948,47.10218984637598],[38.25511233902981,47.54640045835697],[38.77057,47.82562000000024],[39.738277622238996,47.89893707945208],[39.89562000000015,48.23241],[39.67465,48.783820000000134],[40.08078901546949,49.30742991799937],[40.069040000000115,49.60105],[38.59498823421356,49.92646190042373],[38.010631137857075,49.91566152607473],[37.39345950699524,50.38395335550368],[36.626167840325394,50.225590928745135],[35.35611616388812,50.57719737405915],[35.37791,50.77394],[35.02218305841794,51.2075723333715],[34.22481570815441,51.255993150428935],[34.14197838719062,51.566413479206204],[34.391730584457235,51.768881740925906],[33.75269982273588,52.33507457133166],[32.71576053236717,52.238465481162166],[32.412058139787774,52.28869497334978],[32.15944000000022,52.061250000000115],[31.78597,52.10168],[31.54001834486226,52.74205231384644],[31.305200636527985,53.07399587667331],[31.49764,53.16743000000014],[32.304519484188376,53.13272614197285],[32.693643019346126,53.35142080343215],[32.405598585751164,53.618045355842014],[31.731272820774592,53.79402944601202],[31.791424187962406,53.974638576872195],[31.384472283663825,54.15705638286238],[30.75753380709878,54.8117709417844],[30.97183597181325,55.081547756564134],[30.87390913262007,55.55097646750352],[29.89629438652244,55.7894632025305],[29.37157189303079,55.67009064393628],[29.229513380660393,55.91834422466641],[28.17670942557794,56.16912995057879],[27.855282016722526,56.75932648378438],[27.770015903440992,57.2442581244112],[27.288184848751655,57.47452830670392],[27.71668582531578,57.79189911562446],[27.420150000000206,58.72457000000014],[28.131699253051863,59.300825100331],[27.98112,59.47537],[29.1177,60.02805000000012],[28.07,60.50352000000015],[30.211107212044652,61.780027777749694],[31.139991082491036,62.35769277612445],[31.516092156711267,62.867687486412905],[30.035872430142803,63.552813625738565],[30.44468468600374,64.20445343693908],[29.544429559047018,64.94867157659056],[30.21765,65.80598],[29.054588657352383,66.94428620062203],[29.977426385220696,67.69829702419275],[28.445943637818772,68.364612942164],[28.591929559043365,69.0647769232867],[29.39955,69.15692000000018],[31.10108000000011,69.55811],[32.13272000000026,69.90595000000025],[33.77547,69.30142000000012],[36.51396,69.06342],[40.292340000000166,67.9324],[41.05987000000013,67.45713000000012],[41.12595000000019,66.79158000000012],[40.01583,66.26618000000013],[38.38295,65.9995300000001],[33.918710000000175,66.75961],[33.18444,66.63253],[34.81477,65.90015000000014],[34.87857425307877,65.4362128770482],[34.94391000000016,64.41437000000016],[36.23129,64.10945],[37.01273000000012,63.84983000000011],[37.14197000000016,64.33471],[36.539579035089815,64.76446],[37.17604000000014,65.14322000000013],[39.59345,64.52079000000018],[40.43560000000011,64.76446],[39.76260000000016,65.49682],[42.0930900000001,66.47623],[43.01604000000012,66.4185800000001],[43.94975000000014,66.06908],[44.53226,66.75634000000014],[43.69839,67.35245],[44.18795000000014,67.95051],[43.45282,68.57079],[46.25000000000014,68.25],[46.82134000000016,67.68997],[45.55517,67.56652],[45.5620200000001,67.0100500000002],[46.34915000000015,66.6676700000001],[47.894160000000255,66.88455000000016],[48.13876,67.52238],[50.22766000000016,67.99867000000015],[53.71743000000018,68.85738000000012],[54.47171,68.80815],[53.48582000000013,68.20131],[54.72628,68.09702],[55.44268000000014,68.43866],[57.317020000000156,68.46628],[58.80200000000022,68.88082],[59.94142000000019,68.2784400000001],[61.07784000000018,68.94069],[60.03,69.52],[60.55,69.85],[63.50400000000016,69.54739],[64.888115,69.23483500000015],[68.51216000000014,68.09233000000017],[69.18068,68.61563000000012],[68.16444,69.14436],[68.13522,69.35649],[66.93008000000012,69.45461000000012],[67.25976,69.92873],[66.72492000000014,70.70889000000014],[66.69466,71.02897000000024],[68.54006000000012,71.93450000000024],[69.19636000000011,72.84336000000016],[69.94,73.04000000000013],[72.58754,72.7762900000001],[72.79603,72.22006],[71.8481100000001,71.40898],[72.47011,71.09019],[72.79188,70.39114],[72.56470000000022,69.02085],[73.66787,68.4079],[73.2387,67.7404],[71.28000000000011,66.32000000000016],[72.42301000000018,66.17267000000018],[72.82077,66.53267],[73.92099000000016,66.78946000000013],[74.1865100000002,67.28429],[75.052,67.76047000000017],[74.46926000000016,68.32899],[74.93584000000013,68.98918],[73.84236,69.07146],[73.60187000000022,69.62763],[74.3998,70.63175],[73.1011,71.44717000000026],[74.89082000000022,72.12119],[74.65926,72.83227],[75.15801000000019,72.85497000000012],[75.68351,72.30056000000013],[75.28898000000012,71.33556],[76.35911,71.15287000000015],[75.90313000000017,71.87401],[77.57665000000011,72.26717],[79.65202000000014,72.32011],[81.5,71.75],[80.61071000000013,72.58285000000012],[80.51109,73.6482],[82.25,73.85000000000011],[84.65526,73.80591000000018],[86.82230000000024,73.93688],[86.00956,74.45967000000016],[87.16682000000017,75.11643],[88.31571000000011,75.14393],[90.26,75.64],[92.90058,75.77333],[93.23421000000016,76.0472],[95.86000000000016,76.1400000000001],[96.67821,75.91548],[98.92254000000023,76.44689],[100.75967000000023,76.43028],[101.03532,76.86189],[101.99084000000013,77.2875400000002],[104.3516000000001,77.69792],[106.06664000000015,77.37389],[104.70500000000024,77.1274],[106.97013000000013,76.97419]]],[[[105.07547,78.30689],[99.43814,77.921],[101.2649,79.23399],[102.08635,79.34641],[102.837815,79.28129],[105.37243,78.71334],[105.07547,78.30689]]],[[[51.13618655783128,80.54728017854094],[49.79368452332071,80.41542776154822],[48.89441124857754,80.3395667589437],[48.754936557821765,80.17546824820084],[47.586119012244154,80.01018117951534],[46.502825962109654,80.24724681265437],[47.07245527526291,80.55942414012947],[44.846958042181114,80.58980988231718],[46.79913862487123,80.77191762971364],[48.318477410684665,80.78400991486996],[48.522806023966695,80.51456899690015],[49.09718956889091,80.75398590770843],[50.03976769389462,80.91888540315182],[51.52293297710369,80.69972565380192],[51.13618655783128,80.54728017854094]]],[[[99.93976,78.88094],[97.75794,78.7562],[94.97259,79.044745],[93.31288,79.4265],[92.5454,80.14379],[91.18107,80.34146],[93.77766,81.0246],[95.940895,81.2504],[97.88385,80.746975],[100.186655,79.780135],[99.93976,78.88094]]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Slovakia\",\"sov_a3\":\"SVK\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Slovakia\",\"adm0_a3\":\"SVK\",\"geou_dif\":0,\"geounit\":\"Slovakia\",\"gu_a3\":\"SVK\",\"su_dif\":0,\"subunit\":\"Slovakia\",\"su_a3\":\"SVK\",\"brk_diff\":0,\"name\":\"Slovakia\",\"name_long\":\"Slovakia\",\"brk_a3\":\"SVK\",\"brk_name\":\"Slovakia\",\"brk_group\":null,\"abbrev\":\"Svk.\",\"postal\":\"SK\",\"formal_en\":\"Slovak Republic\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Slovak Republic\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":4,\"mapcolor9\":4,\"mapcolor13\":9,\"pop_est\":5463046,\"gdp_md_est\":119500,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"SK\",\"iso_a3\":\"SVK\",\"iso_n3\":\"703\",\"un_a3\":\"703\",\"wb_a2\":\"SK\",\"wb_a3\":\"SVK\",\"woe_id\":-99,\"adm0_a3_is\":\"SVK\",\"adm0_a3_us\":\"SVK\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":8,\"long_len\":8,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[18.853144158613617,49.49622976337764],[18.90957482267632,49.435845852244576],[19.320712517990472,49.571574001659194],[19.825022820726872,49.21712535256923],[20.415839471119853,49.43145335549977],[20.887955356538413,49.32877228453583],[21.607808058364213,49.47010732685409],[22.558137648211755,49.085738023467144],[22.28084191253356,48.82539215758067],[22.085608351334855,48.42226430927179],[21.872236362401736,48.31997081155002],[20.801293979584926,48.623854071642384],[20.473562045989866,48.562850043321816],[20.239054396249347,48.32756724709692],[19.769470656013112,48.202691148463614],[19.661363559658497,48.26661489520866],[19.17436486173989,48.11137889260387],[18.77702477384767,48.081768296900634],[18.696512892336926,47.880953681014404],[17.857132602620027,47.75842886005037],[17.48847293464982,47.867466132186216],[16.979666782304037,48.123497015976305],[16.879982944413,48.47001333270947],[16.960288120194576,48.5969823268506],[17.101984897538898,48.816968899117114],[17.545006951577108,48.80001902932537],[17.88648481616181,48.90347524677371],[17.913511590250465,48.996492824899086],[18.104972771891852,49.04398346617531],[18.170498488037964,49.271514797556435],[18.399993523846177,49.31500051533004],[18.554971144289482,49.495015367218784],[18.853144158613617,49.49622976337764]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":6,\"sovereignt\":\"Slovenia\",\"sov_a3\":\"SVN\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Slovenia\",\"adm0_a3\":\"SVN\",\"geou_dif\":0,\"geounit\":\"Slovenia\",\"gu_a3\":\"SVN\",\"su_dif\":0,\"subunit\":\"Slovenia\",\"su_a3\":\"SVN\",\"brk_diff\":0,\"name\":\"Slovenia\",\"name_long\":\"Slovenia\",\"brk_a3\":\"SVN\",\"brk_name\":\"Slovenia\",\"brk_group\":null,\"abbrev\":\"Slo.\",\"postal\":\"SLO\",\"formal_en\":\"Republic of Slovenia\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Slovenia\",\"name_alt\":null,\"mapcolor7\":2,\"mapcolor8\":3,\"mapcolor9\":2,\"mapcolor13\":12,\"pop_est\":2005692,\"gdp_md_est\":59340,\"pop_year\":-99,\"lastcensus\":2011,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"SI\",\"iso_a3\":\"SVN\",\"iso_n3\":\"705\",\"un_a3\":\"705\",\"wb_a2\":\"SI\",\"wb_a3\":\"SVN\",\"woe_id\":-99,\"adm0_a3_is\":\"SVN\",\"adm0_a3_us\":\"SVN\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Southern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":8,\"long_len\":8,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[13.806475457421527,46.509306138691215],[14.63247155117483,46.43181732846955],[15.137091912504985,46.65870270444703],[16.011663852612656,46.6836107448117],[16.202298211337364,46.85238597267696],[16.370504998447416,46.841327216166505],[16.564808383864857,46.50375092221983],[15.768732944408553,46.23810822202345],[15.671529575267556,45.83415355079788],[15.323953891672405,45.73178253842768],[15.327674594797429,45.45231639259323],[14.935243767972935,45.471695054702685],[14.595109490627806,45.634940904312714],[14.411968214585414,45.46616567644746],[13.715059848697223,45.500323798192376],[13.937630242578308,45.59101593686462],[13.698109978905478,46.01677806251735],[13.806475457421527,46.509306138691215]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Sweden\",\"sov_a3\":\"SWE\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Sweden\",\"adm0_a3\":\"SWE\",\"geou_dif\":0,\"geounit\":\"Sweden\",\"gu_a3\":\"SWE\",\"su_dif\":0,\"subunit\":\"Sweden\",\"su_a3\":\"SWE\",\"brk_diff\":0,\"name\":\"Sweden\",\"name_long\":\"Sweden\",\"brk_a3\":\"SWE\",\"brk_name\":\"Sweden\",\"brk_group\":null,\"abbrev\":\"Swe.\",\"postal\":\"S\",\"formal_en\":\"Kingdom of Sweden\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Sweden\",\"name_alt\":null,\"mapcolor7\":1,\"mapcolor8\":4,\"mapcolor9\":2,\"mapcolor13\":4,\"pop_est\":9059651,\"gdp_md_est\":344300,\"pop_year\":-99,\"lastcensus\":-99,\"gdp_year\":-99,\"economy\":\"2. Developed region: nonG7\",\"income_grp\":\"1. High income: OECD\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"SE\",\"iso_a3\":\"SWE\",\"iso_n3\":\"752\",\"un_a3\":\"752\",\"wb_a2\":\"SE\",\"wb_a3\":\"SWE\",\"woe_id\":-99,\"adm0_a3_is\":\"SWE\",\"adm0_a3_us\":\"SWE\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Northern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":6,\"long_len\":6,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[22.18317345550193,65.72374054632017],[21.21351687997722,65.02600535751527],[21.369631381930958,64.41358795842429],[19.77887576669022,63.60955434839504],[17.84777916837521,62.74940013289681],[17.119554884518124,61.34116567651097],[17.83134606290639,60.63658336042741],[18.78772179533209,60.081914374422595],[17.86922488777634,58.9537661810587],[16.829185011470088,58.71982697207339],[16.447709588291474,57.041118069071885],[15.879785597403783,56.10430186626866],[14.666681349352075,56.200885118222175],[14.100721062891465,55.40778107362265],[12.942910597392057,55.36173737245058],[12.625100538797028,56.30708018658197],[11.787942335668674,57.44181712506307],[11.027368605196868,58.85614940045936],[11.468271925511146,59.43239329694604],[12.3003658382749,60.11793284773003],[12.631146681375185,61.293571682370136],[11.992064243221563,61.80036245385655],[11.930569288794231,63.12831757267698],[12.579935336973934,64.06621898055833],[13.571916131248713,64.04911408146971],[13.919905226302204,64.44542064071608],[13.55568973150909,64.78702769638151],[15.108411492583002,66.19386688909547],[16.108712192456778,67.30245555283689],[16.768878614985482,68.0139366726314],[17.729181756265348,68.01055186631628],[17.993868442464333,68.56739126247736],[19.878559604581255,68.40719432237258],[20.025268995857886,69.0651386583127],[20.645592889089528,69.10624726020087],[21.978534783626117,68.6168456081807],[23.53947309743444,67.93600861273525],[23.565879754335583,66.39605093043743],[23.903378533633802,66.00692739527962],[22.18317345550193,65.72374054632017]]]}},{\"type\":\"Feature\",\"properties\":{\"scalerank\":1,\"featurecla\":\"Admin-0 country\",\"labelrank\":3,\"sovereignt\":\"Ukraine\",\"sov_a3\":\"UKR\",\"adm0_dif\":0,\"level\":2,\"type\":\"Sovereign country\",\"admin\":\"Ukraine\",\"adm0_a3\":\"UKR\",\"geou_dif\":0,\"geounit\":\"Ukraine\",\"gu_a3\":\"UKR\",\"su_dif\":0,\"subunit\":\"Ukraine\",\"su_a3\":\"UKR\",\"brk_diff\":0,\"name\":\"Ukraine\",\"name_long\":\"Ukraine\",\"brk_a3\":\"UKR\",\"brk_name\":\"Ukraine\",\"brk_group\":null,\"abbrev\":\"Ukr.\",\"postal\":\"UA\",\"formal_en\":\"Ukraine\",\"formal_fr\":null,\"note_adm0\":null,\"note_brk\":null,\"name_sort\":\"Ukraine\",\"name_alt\":null,\"mapcolor7\":5,\"mapcolor8\":1,\"mapcolor9\":6,\"mapcolor13\":3,\"pop_est\":45700395,\"gdp_md_est\":339800,\"pop_year\":-99,\"lastcensus\":2001,\"gdp_year\":-99,\"economy\":\"6. Developing region\",\"income_grp\":\"4. Lower middle income\",\"wikipedia\":-99,\"fips_10\":null,\"iso_a2\":\"UA\",\"iso_a3\":\"UKR\",\"iso_n3\":\"804\",\"un_a3\":\"804\",\"wb_a2\":\"UA\",\"wb_a3\":\"UKR\",\"woe_id\":-99,\"adm0_a3_is\":\"UKR\",\"adm0_a3_us\":\"UKR\",\"adm0_a3_un\":-99,\"adm0_a3_wb\":-99,\"continent\":\"Europe\",\"region_un\":\"Europe\",\"subregion\":\"Eastern Europe\",\"region_wb\":\"Europe & Central Asia\",\"name_len\":7,\"long_len\":7,\"abbrev_len\":4,\"tiny\":-99,\"homepart\":1},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[31.785998162571587,52.101677964885454],[32.15941206231267,52.06126699483322],[32.41205813978763,52.28869497334975],[32.71576053236697,52.23846548116205],[33.75269982273571,52.335074571331695],[34.39173058445701,51.76888174092579],[34.14197838719039,51.56641347920623],[34.22481570815427,51.25599315042896],[35.02218305841788,51.20757233337146],[35.37792361831512,50.77395539001035],[35.35611616388795,50.57719737405906],[36.62616784032534,50.225590928745135],[37.39345950699507,50.38395335550359],[38.010631137856905,49.91566152607463],[38.59498823421342,49.92646190042363],[40.06905846533911,49.6010554062817],[40.08078901546935,49.307429917999286],[39.67466393408753,48.78381846780188],[39.89563235856758,48.23240509703143],[39.738277622238826,47.89893707945199],[38.7705847511412,47.825608222029814],[38.25511233902975,47.546400458356814],[38.22353803889942,47.102189846375886],[37.42513715998999,47.022220567404204],[36.75985477066439,46.698700263040934],[35.82368452326483,46.64596446388707],[34.96234174982388,46.27319651954964],[35.020787794745985,45.65121898048466],[35.51000857925317,45.40999339454619],[36.52999799983016,45.46998973243706],[36.33471276219916,45.113215643893966],[35.23999922052812,44.939996242851606],[33.882511020652885,44.36147858334407],[33.326420932760044,44.56487702084489],[33.54692426934946,45.03477081967489],[32.4541744321055,45.32746613217608],[32.630804477679135,45.51918569597891],[33.58816206231839,45.85156850848024],[33.29856733575471,46.080598456397844],[31.74414025241518,46.333347886737386],[31.675307244602408,46.70624502215554],[30.7487488136091,46.583100084004],[30.377608676888883,46.03241018328567],[29.603289015427436,45.293308010431126],[29.149724969201653,45.464925442072456],[28.67977949393938,45.304030870131704],[28.233553501099042,45.488283189468376],[28.485269402792767,45.5969070501459],[28.65998742037158,45.93998688413164],[28.933717482221624,46.2588304713725],[28.862972446414062,46.43788930926383],[29.07210696789929,46.517677720722496],[29.170653924279886,46.3792623968287],[29.759971958136394,46.34998769793536],[30.024658644335375,46.42393667254504],[29.838210076626297,46.52532583270169],[29.908851759569302,46.67436066343146],[29.559674106573112,46.928582872091326],[29.415135125452736,47.34664520933258],[29.05086795422733,47.5102269557525],[29.12269819511303,47.849095160506465],[28.670891147585166,48.1181485052341],[28.259546746541844,48.15556224221342],[27.522537469195157,48.467119452501116],[26.857823520624805,48.368210761094495],[26.619336785597795,48.22072622333347],[26.19745039236693,48.22088125263035],[25.9459411964024,47.987148749374214],[25.20774336111299,47.89105642352747],[24.866317172960578,47.737525743188314],[24.40205610525038,47.98187775328043],[23.76095828623741,47.985598456405455],[23.142236362406805,48.09634105080695],[22.710531447040495,47.88219391538941],[22.640819939878753,48.15023956968736],[22.085608351334855,48.42226430927179],[22.28084191253356,48.82539215758067],[22.558137648211755,49.085738023467144],[22.776418898212626,49.02739533140962],[22.518450148211603,49.47677358661974],[23.426508416444392,50.308505764357456],[23.922757195743262,50.42488108987875],[24.029985792748903,50.70540660257518],[23.527070753684374,51.57845408793024],[24.00507775238421,51.61744395609446],[24.553106316839518,51.888461005249184],[25.32778771332701,51.91065603291855],[26.337958611768556,51.83228872334793],[27.454066196408434,51.59230337178447],[28.24161502453657,51.57222707783907],[28.61761274589225,51.42771393493484],[28.992835320763533,51.602044379271476],[29.254938185347925,51.368234361366895],[30.157363722460897,51.41613841410147],[30.555117221811457,51.31950348571566],[30.619454380014844,51.822806098022376],[30.927549269338982,52.04235342061439],[31.785998162571587,52.101677964885454]]]}}]}",
      "# example and data from:\n# https://ipyleaflet.readthedocs.io/en/latest/layers/geo_json.html\n# https://ipyleaflet.readthedocs.io/en/latest/layers/marker.html\nimport json\nimport pathlib\nimport random\n\nfrom ipyleaflet import GeoJSON, Map, Marker  \nfrom shiny.express import ui\nfrom shinywidgets import render_widget  \n\nhere = pathlib.Path(__file__)\nwith open(here.parent / \"europe_110.geo.json\", \"r\") as f:\n    country_boundaries = json.load(f)\n\ndef random_color(feature):\n    return {\n        \"color\": \"black\",\n        \"fillColor\": random.choice([\"red\", \"yellow\", \"green\", \"orange\"]),\n    }\n\nui.h2(\"An ipyleaflet Map\")\n\n@render_widget  \ndef map():\n    map = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  \n\n    geo_json = GeoJSON(  \n        data=country_boundaries,  \n        style={  \n            \"opacity\": 1,  \n            \"dashArray\": \"9\",  \n            \"fillOpacity\": 0.1,  \n            \"weight\": 1,  \n        },\n        hover_style={\"color\": \"white\", \"dashArray\": \"0\", \"fillOpacity\": 0.5},  \n        style_callback=random_color,  \n    )  \n    map.add_layer(geo_json)  \n\n    point = Marker(location=(52.204793, 0.121558), draggable=False)  \n    map.add_layer(point)  \n\n    return map  ",
      "# example and data from:\n# https://ipyleaflet.readthedocs.io/en/latest/layers/geo_json.html\n# https://ipyleaflet.readthedocs.io/en/latest/layers/marker.html\nimport json\nimport pathlib\nimport random\n\nfrom ipyleaflet import GeoJSON, Map, Marker  \nfrom shiny.express import ui\nfrom shinywidgets import render_widget  \n\nhere = pathlib.Path(__file__)\nwith open(here.parent / \"europe_110.geo.json\", \"r\") as f:\n    country_boundaries = json.load(f)\n\ndef random_color(feature):\n    return {\n        \"color\": \"black\",\n        \"fillColor\": random.choice([\"red\", \"yellow\", \"green\", \"orange\"]),\n    }\n\nui.h2(\"An ipyleaflet Map\")\n\n@render_widget  \ndef map():\n    map = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  \n\n    geo_json = GeoJSON(  \n        data=country_boundaries,  \n        style={  \n            \"opacity\": 1,  \n            \"dashArray\": \"9\",  \n            \"fillOpacity\": 0.1,  \n            \"weight\": 1,  \n        },\n        hover_style={\"color\": \"white\", \"dashArray\": \"0\", \"fillOpacity\": 0.5},  \n        style_callback=random_color,  \n    )  \n    map.add_layer(geo_json)  \n\n    point = Marker(location=(52.204793, 0.121558), draggable=False)  \n    map.add_layer(point)  \n\n    return map  ",
      "# example and data from:\n# https://ipyleaflet.readthedocs.io/en/latest/layers/geo_json.html\n# https://ipyleaflet.readthedocs.io/en/latest/layers/marker.html\nimport json\nimport pathlib\nimport random\n\nfrom ipyleaflet import GeoJSON, Map, Marker  \nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\nhere = pathlib.Path(__file__)\nwith open(here.parent / \"europe_110.geo.json\", \"r\") as f:\n    country_boundaries = json.load(f)\n\ndef random_color(feature):\n    return {\n        \"color\": \"black\",\n        \"fillColor\": random.choice([\"red\", \"yellow\", \"green\", \"orange\"]),\n    }\n\napp_ui = ui.page_fluid(\n    ui.h2(\"An ipyleaflet Map\"),\n    output_widget(\"map\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def map():\n        map = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  \n\n        geo_json = GeoJSON(  \n            data=country_boundaries,  \n            style={  \n                \"opacity\": 1,  \n                \"dashArray\": \"9\",  \n                \"fillOpacity\": 0.1,  \n                \"weight\": 1,  \n            },\n            hover_style={\"color\": \"white\", \"dashArray\": \"0\", \"fillOpacity\": 0.5},  \n            style_callback=random_color,  \n        )  \n        map.add_layer(geo_json)  \n\n        point = Marker(location=(52.204793, 0.121558), draggable=False)  \n        map.add_layer(point)  \n\n        return map  \n\napp = App(app_ui, server)",
      "# example and data from:\n# https://ipyleaflet.readthedocs.io/en/latest/layers/geo_json.html\n# https://ipyleaflet.readthedocs.io/en/latest/layers/marker.html\nimport json\nimport pathlib\nimport random\n\nfrom ipyleaflet import GeoJSON, Map, Marker  \nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  \n\nhere = pathlib.Path(__file__)\nwith open(here.parent / \"europe_110.geo.json\", \"r\") as f:\n    country_boundaries = json.load(f)\n\ndef random_color(feature):\n    return {\n        \"color\": \"black\",\n        \"fillColor\": random.choice([\"red\", \"yellow\", \"green\", \"orange\"]),\n    }\n\napp_ui = ui.page_fluid(\n    ui.h2(\"An ipyleaflet Map\"),\n    output_widget(\"map\"),  \n)\n\ndef server(input, output, session):\n    @render_widget  \n    def map():\n        map = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  \n\n        geo_json = GeoJSON(  \n            data=country_boundaries,  \n            style={  \n                \"opacity\": 1,  \n                \"dashArray\": \"9\",  \n                \"fillOpacity\": 0.1,  \n                \"weight\": 1,  \n            },\n            hover_style={\"color\": \"white\", \"dashArray\": \"0\", \"fillOpacity\": 0.5},  \n            style_callback=random_color,  \n        )  \n        map.add_layer(geo_json)  \n\n        point = Marker(location=(52.204793, 0.121558), draggable=False)  \n        map.add_layer(point)  \n\n        return map  \n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_outputs_plot-matplotlib_index_html",
    "url": "components/outputs/plot-matplotlib/index.html",
    "title": "Plot (Matplotlib) ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Plot (Matplotlib)\n\nPlot (Matplotlib)\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_plot ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)\n- @render.plot render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)\n\nui.output_plot ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)\n\n@render.plot render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)\n\nDetails\n\nMatplotlib is a popular Python library that can be used to create plots.\n\nFollow three steps to display a Matplotlib figure in your app:\n\n- Add ui.output_plot() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n- Define a function within the server() function that creates the figure. The name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI. If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion. If you use matplotlib.pyplot to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects: A matplotlib.figure.Figure instance A matplotlib.artist.Artist instance A list/tuple of Figure/Artist instances An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance A PIL.Image.Image instance\n- Decorate your plotting function with a @render.plot() decorator. If your plotting function is not the same as the id you used in the ui.output_plot(), you can add an additional @output(id=...) decorator. If you use the @output() decorator, make sure it is above the @render.plot() decorator.\n\nAdd ui.output_plot() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n\nDefine a function within the server() function that creates the figure.\n\n- The name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI.\n- If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n- If you use matplotlib.pyplot to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects: A matplotlib.figure.Figure instance A matplotlib.artist.Artist instance A list/tuple of Figure/Artist instances An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance A PIL.Image.Image instance\n\nThe name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI.\n\nIf your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n\nIf you use matplotlib.pyplot to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects:\n\n- A matplotlib.figure.Figure instance\n- A matplotlib.artist.Artist instance\n- A list/tuple of Figure/Artist instances\n- An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance\n- A PIL.Image.Image instance\n\nDecorate your plotting function with a @render.plot() decorator.\n\n- If your plotting function is not the same as the id you used in the ui.output_plot(), you can add an additional @output(id=...) decorator.\n- If you use the @output() decorator, make sure it is above the @render.plot() decorator.\n\nPlots as Inputs\n\nYou can use a plot as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, set one or more of the following arguments of ui.output_plot() to True:.\n\n- click - When click = True, the plot will allow the user to click in the plotting area, and will send the coordinates of the click to the server, where they can be accessed as a reactive variable named input.<id>_click(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.\n- dblclick - This is just like the click parameter, but for double-click events. The value can be accessed as input.<id>_dblclick().\n- hover - When hover = True, the plot will allow the user to hover over the plotting area, and will send the coordinates of the cursor to the server, where they can be accessed as a reactive variable named input.<id>_hover(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, set hover to hover_opts().\n- brush - When brush = True, the plot will allow the user to ‚Äúbrush‚Äù in the plotting area, and will send information about the brushed area to the server, where it can be accessed as a reactive variable named input.<id>_brush(), where <id> is the id of the plot. Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, set brush to brush_opts().\n\nclick - When click = True, the plot will allow the user to click in the plotting area, and will send the coordinates of the click to the server, where they can be accessed as a reactive variable named input.<id>_click(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.\n\ndblclick - This is just like the click parameter, but for double-click events. The value can be accessed as input.<id>_dblclick().\n\nhover - When hover = True, the plot will allow the user to hover over the plotting area, and will send the coordinates of the cursor to the server, where they can be accessed as a reactive variable named input.<id>_hover(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, set hover to hover_opts().\n\nbrush - When brush = True, the plot will allow the user to ‚Äúbrush‚Äù in the plotting area, and will send information about the brushed area to the server, where it can be accessed as a reactive variable named input.<id>_brush(), where <id> is the id of the plot. Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, set brush to brush_opts().\n\nMultiple output_image()/output_plot() calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.\n\nVariations\n\nPlot as input\n\nUse the click, dblclick, hover, and brush arguments of ui.output_plot() to collect information about the user‚Äôs mouse interactions as a reactive variable. The app below displays the values returned, but you can also call the values from within your computations to filter tables, perform calculations, and so on.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"n\", \"Number of bins\", 0, 100, 20)\n\n@render.plot(alt=\"A histogram\")  \ndef plot():  \n    df = load_penguins()\n    mass = df[\"body_mass_g\"]\n\n    fig, ax = plt.subplots()\n    ax.hist(mass, input.n(), density=True)\n    ax.set_title(\"Palmer Penguin Masses\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Density\")\n\n    return fig  ",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"n\", \"Number of bins\", 0, 100, 20)\n\n@render.plot(alt=\"A histogram\")  \ndef plot():  \n    df = load_penguins()\n    mass = df[\"body_mass_g\"]\n\n    fig, ax = plt.subplots()\n    ax.hist(mass, input.n(), density=True)\n    ax.set_title(\"Palmer Penguin Masses\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Density\")\n\n    return fig  ",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 720\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 720\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_code, output_plot\n\noutput_plot(\n    \"plot\",\n    click=True,  \n    dblclick=True,  \n    hover=True,  \n    brush=True,  \n)\n\n\"Click:\"\noutput_code(\"clk\", placeholder=True)\n\"Double Click:\"\noutput_code(\"dblclk\", placeholder=True)\n\"Hover:\"\noutput_code(\"hvr\", placeholder=True)\n\"Brush\"\noutput_code(\"brsh\", placeholder=True)\n\nwith ui.hold():\n    # Note that this Express app uses `ui.hold()` so that we can\n    # manually add the `output_plot()` and `output_code()` to the page.\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.code\n    def clk():\n        return input.plot_click()\n\n    @render.code\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.code\n    def hvr():\n        return input.plot_hover()\n\n    @render.code\n    def brsh():\n        return input.plot_brush()",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_code, output_plot\n\noutput_plot(\n    \"plot\",\n    click=True,  \n    dblclick=True,  \n    hover=True,  \n    brush=True,  \n)\n\n\"Click:\"\noutput_code(\"clk\", placeholder=True)\n\"Double Click:\"\noutput_code(\"dblclk\", placeholder=True)\n\"Hover:\"\noutput_code(\"hvr\", placeholder=True)\n\"Brush\"\noutput_code(\"brsh\", placeholder=True)\n\nwith ui.hold():\n    # Note that this Express app uses `ui.hold()` so that we can\n    # manually add the `output_plot()` and `output_code()` to the page.\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.code\n    def clk():\n        return input.plot_click()\n\n    @render.code\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.code\n    def hvr():\n        return input.plot_hover()\n\n    @render.code\n    def brsh():\n        return input.plot_brush()",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)"
    ]
  },
  {
    "id": "components_outputs_plot-seaborn_index_html",
    "url": "components/outputs/plot-seaborn/index.html",
    "title": "Plot (Seaborn) ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Plot (Seaborn)\n\nPlot (Seaborn)\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_plot ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)\n- @render.plot render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)\n\nui.output_plot ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)\n\n@render.plot render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)\n\nDetails\n\nSeaborn is a statistical plotting library that builds on top of Matplotlib.\n\nFollow these steps to display a Seaborn figure in your app:\n\n- Add ui.output_plot() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n- Define a function within the server() function that creates the figure. The name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI. If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion. Your function should return one of the following objects: A matplotlib.figure.Figure instance A matplotlib.artist.Artist instance A list/tuple of Figure/Artist instances An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance A PIL.Image.Image instance\n- Decorate your plotting function with a @render.plot() decorator. If your plotting function is not the same as the id you used in the ui.output_plot(), you can add an additional @output(id=...) decorator. If you use the @output() decorator, make sure it is above the @render.plot() decorator.\n\nAdd ui.output_plot() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n\nDefine a function within the server() function that creates the figure.\n\n- The name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI.\n- If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n- Your function should return one of the following objects:\n\nThe name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI.\n\nIf your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n\nYour function should return one of the following objects:\n\n- A matplotlib.figure.Figure instance\n- A matplotlib.artist.Artist instance\n- A list/tuple of Figure/Artist instances\n- An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance\n- A PIL.Image.Image instance\n\nDecorate your plotting function with a @render.plot() decorator.\n\n- If your plotting function is not the same as the id you used in the ui.output_plot(), you can add an additional @output(id=...) decorator.\n- If you use the @output() decorator, make sure it is above the @render.plot() decorator.\n\nYou can use a plot as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, follow the instructions provided for plots as inputs.\n\nVariations\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n    def plot():  \n        ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n        ax.set_title(\"Palmer Penguins\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Count\")\n        return ax  \n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n    def plot():  \n        ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n        ax.set_title(\"Palmer Penguins\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Count\")\n        return ax  \n\napp = App(app_ui, server, debug=True)",
      "import seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.input_slider(\"n\", \"Number of bins\", 1, 100, 20)\n\n@render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \ndef plot():  \n    ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n    ax.set_title(\"Palmer Penguins\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Count\")\n    return ax  ",
      "import seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\npenguins = load_penguins()\n\nui.input_slider(\"n\", \"Number of bins\", 1, 100, 20)\n\n@render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \ndef plot():  \n    ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n    ax.set_title(\"Palmer Penguins\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Count\")\n    return ax  ",
      "import seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n    def plot():  \n        ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n        ax.set_title(\"Palmer Penguins\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Count\")\n        return ax  \n\napp = App(app_ui, server, debug=True)",
      "import seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n    def plot():  \n        ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  \n        ax.set_title(\"Palmer Penguins\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Count\")\n        return ax  \n\napp = App(app_ui, server, debug=True)"
    ]
  },
  {
    "id": "components_outputs_text_index_html",
    "url": "components/outputs/text/index.html",
    "title": "Text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Text\n\nText\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_text ui.output_text(id, inline=False, container=None)\n- @render.text render.text(fn=None)\n\nui.output_text ui.output_text(id, inline=False, container=None)\n\n@render.text render.text(fn=None)\n\nDetails\n\nText displays a character string as normal text.\n\nTo make reactive text, follow three steps:\n\n- Call ui.output_text() in the UI of your app to create a div in which to display the text. Where you call this function within the UI functions will determine where the text will appear within the layout of the app. Set the id argument of ui.output_text() to a unique value.\n- Within the server function, define a new function whose name matches the id used above. The function should return the text to display. Shiny will rerun this function whenever it needs to build or update the output that has the matching id.\n- Decorate the function with @render.text\n\nCall ui.output_text() in the UI of your app to create a div in which to display the text. Where you call this function within the UI functions will determine where the text will appear within the layout of the app. Set the id argument of ui.output_text() to a unique value.\n\nWithin the server function, define a new function whose name matches the id used above. The function should return the text to display. Shiny will rerun this function whenever it needs to build or update the output that has the matching id.\n\nDecorate the function with @render.text\n\nSee Verbatim Text to display string values as they would appear in a computer console, in monospaced font on a shaded background.\n\nVariations\n\nInline text\n\nSet inline=True within ui.output_text() to have text appear inline with the text that preceeds it.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    \"You entered:\",\n    ui.output_text_verbatim(\"text\"),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    \"You entered:\",\n    ui.output_text_verbatim(\"text\"),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\")\n\"You entered:\"\n\n@render.text  \ndef text():\n    return input.Text()",
      "from shiny.express import input, render, ui\n\nui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\")\n\"You entered:\"\n\n@render.text  \ndef text():\n    return input.Text()",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    \"You entered:\",\n    ui.output_text_verbatim(\"text\"),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    \"You entered:\",\n    ui.output_text_verbatim(\"text\"),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    \"You entered: \",\n    ui.output_text(\"text\", inline=True),  \n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    \"You entered: \",\n    ui.output_text(\"text\", inline=True),  \n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\")\n\"You entered:\"\n\n@render.text(inline=True)  \ndef text():\n    return input.Text()",
      "from shiny.express import input, render, ui\n\nui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\")\n\"You entered:\"\n\n@render.text(inline=True)  \ndef text():\n    return input.Text()",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    \"You entered: \",\n    ui.output_text(\"text\", inline=True),  \n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    \"You entered: \",\n    ui.output_text(\"text\", inline=True),  \n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return input.Text()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_outputs_ui_index_html",
    "url": "components/outputs/ui/index.html",
    "title": "UI ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- UI\n\nUI\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_ui ui.output_ui(id, inline=False, container=None, fill=False, fillable=False, **kwargs)\n- @render.ui render.ui(_fn=None)\n- @render.express express.render.express(self, _fn=None, *, inline=False, container=None, fill=False, fillable=False, **kwargs)\n\nui.output_ui ui.output_ui(id, inline=False, container=None, fill=False, fillable=False, **kwargs)\n\n@render.ui render.ui(_fn=None)\n\n@render.express express.render.express(self, _fn=None, *, inline=False, container=None, fill=False, fillable=False, **kwargs)\n\nDetails\n\nA UI output creates an output container for a UI (i.e., HTML) element, such as a set of additional controls. Adding a UI output allows you to show, hide, or update input controls within your app.\n\nTo add a UI output, follow three steps:\n\n- Call ui.output_ui() in the UI of your app to create a div in which to display the UI element. Where you call this function within the UI functions will determine where the table will appear within the layout of the app. Set the id argument of ui.output_ui() to a unique value.\n- Within the server function, define a new function whose name matches the id used above. The function should return a UI element, like an input control.\n- Decorate the function with @render.ui. If you‚Äôre using an action button or link to show the UI element, you‚Äôll also need to decorate with @reactive.event.\n\nCall ui.output_ui() in the UI of your app to create a div in which to display the UI element. Where you call this function within the UI functions will determine where the table will appear within the layout of the app. Set the id argument of ui.output_ui() to a unique value.\n\nWithin the server function, define a new function whose name matches the id used above. The function should return a UI element, like an input control.\n\nDecorate the function with @render.ui. If you‚Äôre using an action button or link to show the UI element, you‚Äôll also need to decorate with @reactive.event.\n\nSee also: Dynamic UI and UI and HTML.\n\nVariations\n\nCreate dependent controls\n\nYou can use @render.ui or @render.express and ui.output_ui() to create a set of controls that are dependent on a setting in your app. In this example, we show a different set of options when the app is in ‚Äúplot‚Äù or ‚Äútable‚Äù mode. Note that we use the current input values or a default value when creating the dependent controls. Without this, the values are re-initialized every time and forget previous user input.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"ui_slider\"),  \n)\n\ndef server(input, output, session):\n    @render.ui  \n    @reactive.event(input.show_slider)  \n    def ui_slider():  \n        if input.show_slider():\n            value = input.slider() if \"slider\" in input else 5\n            return ui.input_slider(\n                \"slider\", \"Choose a number\", min=1, max=10, value=value\n            )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"ui_slider\"),  \n)\n\ndef server(input, output, session):\n    @render.ui  \n    @reactive.event(input.show_slider)  \n    def ui_slider():  \n        if input.show_slider():\n            value = input.slider() if \"slider\" in input else 5\n            return ui.input_slider(\n                \"slider\", \"Choose a number\", min=1, max=10, value=value\n            )\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_switch(\"show_slider\", \"Show slider\", True)\n\n@render.express  \ndef ui_slider():  \n    if input.show_slider():\n        value = input.slider() if \"slider\" in input else 5\n        ui.input_slider(\"slider\", \"Choose a number\", min=1, max=10, value=value)",
      "from shiny.express import input, render, ui\n\nui.input_switch(\"show_slider\", \"Show slider\", True)\n\n@render.express  \ndef ui_slider():  \n    if input.show_slider():\n        value = input.slider() if \"slider\" in input else 5\n        ui.input_slider(\"slider\", \"Choose a number\", min=1, max=10, value=value)",
      "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"ui_slider\"),  \n)\n\ndef server(input, output, session):\n    @render.ui  \n    @reactive.event(input.show_slider)  \n    def ui_slider():  \n        if input.show_slider():\n            value = input.slider() if \"slider\" in input else 5\n            return ui.input_slider(\n                \"slider\", \"Choose a number\", min=1, max=10, value=value\n            )\n\napp = App(app_ui, server)",
      "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"ui_slider\"),  \n)\n\ndef server(input, output, session):\n    @render.ui  \n    @reactive.event(input.show_slider)  \n    def ui_slider():  \n        if input.show_slider():\n            value = input.slider() if \"slider\" in input else 5\n            return ui.input_slider(\n                \"slider\", \"Choose a number\", min=1, max=10, value=value\n            )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 225\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.input_radio_buttons(\n            \"mode\", \"Display mode\", [\"Table\", \"Plot\"], selected=\"Table\"\n        ),\n        ui.output_ui(\"mode_controls\"),\n    )\n)\n\ndef server(input, output, session):\n    @render.ui\n    def mode_controls():\n        if input.mode() == \"Table\":\n            rows = input.rows() if \"rows\" in input else 10\n            cols = input.cols() if \"cols\" in input else 4\n            return ui.TagList(\n                ui.input_slider(\"rows\", \"Rows:\", value=rows, min=1, max=10),\n                ui.input_slider(\"cols\", \"Columns:\", value=cols, min=1, max=10),\n            )\n        else:\n            height = input.height() if \"height\" in input else 500\n            width = input.width() if \"width\" in input else 500\n            return ui.TagList(\n                ui.input_slider(\"height\", \"Height:\", value=height, min=100, max=1000),\n                ui.input_slider(\"width\", \"Width:\", value=width, min=100, max=1000),\n            )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 225\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.input_radio_buttons(\n            \"mode\", \"Display mode\", [\"Table\", \"Plot\"], selected=\"Table\"\n        ),\n        ui.output_ui(\"mode_controls\"),\n    )\n)\n\ndef server(input, output, session):\n    @render.ui\n    def mode_controls():\n        if input.mode() == \"Table\":\n            rows = input.rows() if \"rows\" in input else 10\n            cols = input.cols() if \"cols\" in input else 4\n            return ui.TagList(\n                ui.input_slider(\"rows\", \"Rows:\", value=rows, min=1, max=10),\n                ui.input_slider(\"cols\", \"Columns:\", value=cols, min=1, max=10),\n            )\n        else:\n            height = input.height() if \"height\" in input else 500\n            width = input.width() if \"width\" in input else 500\n            return ui.TagList(\n                ui.input_slider(\"height\", \"Height:\", value=height, min=100, max=1000),\n                ui.input_slider(\"width\", \"Width:\", value=width, min=100, max=1000),\n            )\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nwith ui.layout_columns():\n    ui.input_radio_buttons(\"mode\", \"Display mode\", [\"Table\", \"Plot\"], selected=\"Table\")\n\n    @render.express\n    def mode_controls():\n        if input.mode() == \"Table\":\n            rows = input.rows() if \"rows\" in input else 10\n            cols = input.cols() if \"cols\" in input else 4\n            ui.input_slider(\"rows\", \"Rows:\", value=rows, min=1, max=10)\n            ui.input_slider(\"cols\", \"Columns:\", value=cols, min=1, max=10)\n        else:\n            height = input.height() if \"height\" in input else 500\n            width = input.width() if \"width\" in input else 500\n            ui.input_slider(\"height\", \"Height:\", value=height, min=100, max=1000)\n            ui.input_slider(\"width\", \"Width:\", value=width, min=100, max=1000)",
      "from shiny.express import input, render, ui\n\nwith ui.layout_columns():\n    ui.input_radio_buttons(\"mode\", \"Display mode\", [\"Table\", \"Plot\"], selected=\"Table\")\n\n    @render.express\n    def mode_controls():\n        if input.mode() == \"Table\":\n            rows = input.rows() if \"rows\" in input else 10\n            cols = input.cols() if \"cols\" in input else 4\n            ui.input_slider(\"rows\", \"Rows:\", value=rows, min=1, max=10)\n            ui.input_slider(\"cols\", \"Columns:\", value=cols, min=1, max=10)\n        else:\n            height = input.height() if \"height\" in input else 500\n            width = input.width() if \"width\" in input else 500\n            ui.input_slider(\"height\", \"Height:\", value=height, min=100, max=1000)\n            ui.input_slider(\"width\", \"Width:\", value=width, min=100, max=1000)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.input_radio_buttons(\n            \"mode\", \"Display mode\", [\"Table\", \"Plot\"], selected=\"Table\"\n        ),\n        ui.output_ui(\"mode_controls\"),\n    )\n)\n\ndef server(input, output, session):\n    @render.ui\n    def mode_controls():\n        if input.mode() == \"Table\":\n            rows = input.rows() if \"rows\" in input else 10\n            cols = input.cols() if \"cols\" in input else 4\n            return ui.TagList(\n                ui.input_slider(\"rows\", \"Rows:\", value=rows, min=1, max=10),\n                ui.input_slider(\"cols\", \"Columns:\", value=cols, min=1, max=10),\n            )\n        else:\n            height = input.height() if \"height\" in input else 500\n            width = input.width() if \"width\" in input else 500\n            return ui.TagList(\n                ui.input_slider(\"height\", \"Height:\", value=height, min=100, max=1000),\n                ui.input_slider(\"width\", \"Width:\", value=width, min=100, max=1000),\n            )\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.input_radio_buttons(\n            \"mode\", \"Display mode\", [\"Table\", \"Plot\"], selected=\"Table\"\n        ),\n        ui.output_ui(\"mode_controls\"),\n    )\n)\n\ndef server(input, output, session):\n    @render.ui\n    def mode_controls():\n        if input.mode() == \"Table\":\n            rows = input.rows() if \"rows\" in input else 10\n            cols = input.cols() if \"cols\" in input else 4\n            return ui.TagList(\n                ui.input_slider(\"rows\", \"Rows:\", value=rows, min=1, max=10),\n                ui.input_slider(\"cols\", \"Columns:\", value=cols, min=1, max=10),\n            )\n        else:\n            height = input.height() if \"height\" in input else 500\n            width = input.width() if \"width\" in input else 500\n            return ui.TagList(\n                ui.input_slider(\"height\", \"Height:\", value=height, min=100, max=1000),\n                ui.input_slider(\"width\", \"Width:\", value=width, min=100, max=1000),\n            )\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_outputs_value-box_index_html",
    "url": "components/outputs/value-box/index.html",
    "title": "Value Box ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Value Box\n\nValue Box\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.value_box ui.value_box(title, value, *args, showcase=None, showcase_layout='left center', full_screen=False, theme=None, height=None, max_height=None, fill=True, class_=None, **kwargs)\n- ui.card ui.card(*args, full_screen=False, height=None, max_height=None, min_height=None, fill=True, class_=None, **kwargs)\n\nui.value_box ui.value_box(title, value, *args, showcase=None, showcase_layout='left center', full_screen=False, theme=None, height=None, max_height=None, fill=True, class_=None, **kwargs)\n\nui.card ui.card(*args, full_screen=False, height=None, max_height=None, min_height=None, fill=True, class_=None, **kwargs)\n\nDetails\n\nValue boxes are special ‚Äúcards‚Äù that help group information together in an aesthetic way. You can read more about value boxes in the bslib R Package.\n\nValue boxes have 4 main parts:\n\n- value - text to display in the card\n- title - optional text that displays above the value\n- showcase - optional element to be shown next to the value text (e.g., an image or logo)\n- theme - optional theme to change the appearance of the value box\n\nThere is only a UI component for the value box. 1. Call ui.value_box() to the UI of your app to create a div in which to display the value box.\n\nSince the value box is only a UI component, if you want to make it interactive (i.e., reactive), you can pair it up with either a ui.output_ui() + @render.ui() pair or use ui.output_text() as an argument to the ui.value_box() function if you only need text changes.\n\nVariations\n\nTheme and Layout Examples\n\nValue boxes with different theme and showcase_layout locations. This value box uses multiple files, see how on Shinylive\n\n- Express\n- Core\n\nReactive Value Box\n\nConnecting a reactive input value to a value box.\n\n- Express\n- Core\n\nSparklines\n\nInteractive sparkline in the value box. This value box uses multiple files, see how on Shinylive.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 175\n\nfrom shiny import App, ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\napp_ui = ui.page_fluid(\n    ui.value_box(\n        \"KPI Title\",\n        \"$1 Billion Dollars\",\n        \"Up 30% VS PREVIOUS 30 DAYS\",\n        showcase=piggy_bank,\n        theme=\"bg-gradient-indigo-purple\",\n    ),\n)\n\napp = App(app_ui, server=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 175\n\nfrom shiny import App, ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\napp_ui = ui.page_fluid(\n    ui.value_box(\n        \"KPI Title\",\n        \"$1 Billion Dollars\",\n        \"Up 30% VS PREVIOUS 30 DAYS\",\n        showcase=piggy_bank,\n        theme=\"bg-gradient-indigo-purple\",\n    ),\n)\n\napp = App(app_ui, server=None)",
      "from shiny.express import ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\nwith ui.value_box(showcase=piggy_bank, theme=\"bg-gradient-indigo-purple\"):\n    \"KPI Title\"\n    \"$1 Billion Dollars\"\n    \"Up 30% VS PREVIOUS 30 DAYS\"",
      "from shiny.express import ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\nwith ui.value_box(showcase=piggy_bank, theme=\"bg-gradient-indigo-purple\"):\n    \"KPI Title\"\n    \"$1 Billion Dollars\"\n    \"Up 30% VS PREVIOUS 30 DAYS\"",
      "from shiny import App, ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\napp_ui = ui.page_fluid(\n    ui.value_box(\n        \"KPI Title\",\n        \"$1 Billion Dollars\",\n        \"Up 30% VS PREVIOUS 30 DAYS\",\n        showcase=piggy_bank,\n        theme=\"bg-gradient-indigo-purple\",\n    ),\n)\n\napp = App(app_ui, server=None)",
      "from shiny import App, ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\napp_ui = ui.page_fluid(\n    ui.value_box(\n        \"KPI Title\",\n        \"$1 Billion Dollars\",\n        \"Up 30% VS PREVIOUS 30 DAYS\",\n        showcase=piggy_bank,\n        theme=\"bg-gradient-indigo-purple\",\n    ),\n)\n\napp = App(app_ui, server=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 315\n\nimport faicons\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"bg-gradient-indigo-purple\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"text-green\",  \n            showcase_layout=\"top right\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"danger\",  \n            showcase_layout=\"bottom\",  \n        ),\n    )\n)\napp = App(app_ui, server=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 315\n\nimport faicons\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"bg-gradient-indigo-purple\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"text-green\",  \n            showcase_layout=\"top right\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"danger\",  \n            showcase_layout=\"bottom\",  \n        ),\n    )\n)\napp = App(app_ui, server=None)",
      "import faicons\nfrom shiny.express import ui\n\nwith ui.layout_column_wrap():\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"bg-gradient-indigo-purple\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"text-green\",  \n        showcase_layout=\"top right\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"danger\",  \n        showcase_layout=\"bottom\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"",
      "import faicons\nfrom shiny.express import ui\n\nwith ui.layout_column_wrap():\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"bg-gradient-indigo-purple\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"text-green\",  \n        showcase_layout=\"top right\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"danger\",  \n        showcase_layout=\"bottom\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"",
      "import faicons\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"bg-gradient-indigo-purple\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"text-green\",  \n            showcase_layout=\"top right\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"danger\",  \n            showcase_layout=\"bottom\",  \n        ),\n    )\n)\napp = App(app_ui, server=None)",
      "import faicons\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"bg-gradient-indigo-purple\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"text-green\",  \n            showcase_layout=\"top right\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"danger\",  \n            showcase_layout=\"bottom\",  \n        ),\n    )\n)\napp = App(app_ui, server=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 225\n\nimport faicons\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.h2(\"Spend Jeff's 2023 Earnings\"),\n        ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20),  \n        ui.value_box(\n            title=\"Save\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            value=ui.output_ui(\"save\"),  \n            theme=\"bg-gradient-orange-red\",\n        ),\n        ui.value_box(\n            title=\"Donate\",\n            showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n            value=ui.output_ui(\"donate\"),  \n            theme=\"bg-gradient-blue-purple\",\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @render.text  \n    def save():  \n        return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    @render.text  \n    def donate():  \n        return f\"${input.pct() / 100 * 70:.1f} Billion\"  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 225\n\nimport faicons\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.h2(\"Spend Jeff's 2023 Earnings\"),\n        ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20),  \n        ui.value_box(\n            title=\"Save\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            value=ui.output_ui(\"save\"),  \n            theme=\"bg-gradient-orange-red\",\n        ),\n        ui.value_box(\n            title=\"Donate\",\n            showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n            value=ui.output_ui(\"donate\"),  \n            theme=\"bg-gradient-blue-purple\",\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @render.text  \n    def save():  \n        return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    @render.text  \n    def donate():  \n        return f\"${input.pct() / 100 * 70:.1f} Billion\"  \n\napp = App(app_ui, server)",
      "import faicons\nfrom shiny.express import input, render, ui\n\nwith ui.layout_columns():\n    ui.h2(\"Spend Jeff's 2023 Earnings\")\n    ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20)  \n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"bg-gradient-orange-red\",\n    ):\n        \"Save\"\n\n        @render.ui  \n        def save():  \n            return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n        \"Donate\"\n\n        @render.ui  \n        def donate():  \n            return f\"${input.pct() / 100 * 70:.1f} Billion\"  ",
      "import faicons\nfrom shiny.express import input, render, ui\n\nwith ui.layout_columns():\n    ui.h2(\"Spend Jeff's 2023 Earnings\")\n    ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20)  \n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"bg-gradient-orange-red\",\n    ):\n        \"Save\"\n\n        @render.ui  \n        def save():  \n            return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n        \"Donate\"\n\n        @render.ui  \n        def donate():  \n            return f\"${input.pct() / 100 * 70:.1f} Billion\"  ",
      "import faicons\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.h2(\"Spend Jeff's 2023 Earnings\"),\n        ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20),  \n        ui.value_box(\n            title=\"Save\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            value=ui.output_ui(\"save\"),  \n            theme=\"bg-gradient-orange-red\",\n        ),\n        ui.value_box(\n            title=\"Donate\",\n            showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n            value=ui.output_ui(\"donate\"),  \n            theme=\"bg-gradient-blue-purple\",\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @render.text  \n    def save():  \n        return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    @render.text  \n    def donate():  \n        return f\"${input.pct() / 100 * 70:.1f} Billion\"  \n\napp = App(app_ui, server)",
      "import faicons\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.h2(\"Spend Jeff's 2023 Earnings\"),\n        ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20),  \n        ui.value_box(\n            title=\"Save\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            value=ui.output_ui(\"save\"),  \n            theme=\"bg-gradient-orange-red\",\n        ),\n        ui.value_box(\n            title=\"Donate\",\n            showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n            value=ui.output_ui(\"donate\"),  \n            theme=\"bg-gradient-blue-purple\",\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @render.text  \n    def save():  \n        return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    @render.text  \n    def donate():  \n        return f\"${input.pct() / 100 * 70:.1f} Billion\"  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 250\n\n# ruff: noqa\n## file: app.py\n# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny import App, ui\n\nappdir = Path(__file__).parent\n\napp_ui = ui.page_fixed(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.value_box(\n        \"Total Sales in Q2\",\n        \"$2.45M\",\n        showcase=sw.output_widget(\"sparkline\"),\n        showcase_layout=\"bottom\",\n    ),\n    fillable_mobile=True,\n)\n\ndef server(input, output, session):\n    @sw.render_widget\n    def sparkline():\n        economics = pd.read_csv(appdir / \"economics.csv\")\n        fig = px.line(economics, x=\"date\", y=\"psavert\")\n        fig.update_traces(\n            line_color=\"#406EF1\",\n            line_width=1,\n            fill=\"tozeroy\",\n            fillcolor=\"rgba(64,110,241,0.2)\",\n            hoverinfo=\"y\",\n        )\n        fig.update_xaxes(visible=False, showgrid=False)\n        fig.update_yaxes(visible=False, showgrid=False)\n        fig.update_layout(\n            height=100,\n            hovermode=\"x\",\n            margin=dict(t=0, r=0, l=0, b=0),\n            plot_bgcolor=\"rgba(0,0,0,0)\",\n            paper_bgcolor=\"rgba(0,0,0,0)\",\n        )\n        return fig\n\napp = App(app_ui, server)\n\n## file: economics.csv\ndate,pce,pop,psavert,uempmed,unemploy\n2000-01-01,6535.3,280976,5.4,5.8,5708\n2000-02-01,6619.7,281190,4.8,6.1,5858\n2000-03-01,6685.8,281409,4.5,6,5733\n2000-04-01,6671.1,281653,5,6.1,5481\n2000-05-01,6707.6,281877,4.9,5.8,5758\n2000-06-01,6743.9,282126,4.9,5.7,5651\n2000-07-01,6764.1,282385,5.2,6,5747\n2000-08-01,6799.1,282653,5.2,6.3,5853\n2000-09-01,6882.9,282932,4.5,5.2,5625\n2000-10-01,6888.2,283201,4.6,6.1,5534\n2000-11-01,6902.4,283453,4.5,6.1,5639\n2000-12-01,6945.7,283696,4.2,6,5634\n2001-01-01,6977,283920,4.8,5.8,6023\n2001-02-01,6995.8,284137,4.9,6.1,6089\n2001-03-01,6987.9,284350,5.3,6.6,6141\n2001-04-01,7001.2,284581,5,5.9,6271\n2001-05-01,7047.1,284810,4.5,6.3,6226\n2001-06-01,7060.7,285062,4.5,6,6484\n2001-07-01,7072.2,285309,5.6,6.8,6583\n2001-08-01,7108.9,285570,6.8,6.9,7042\n2001-09-01,7012.8,285843,7,7.2,7142\n2001-10-01,7208.4,286098,3.4,7.3,7694\n2001-11-01,7167.9,286341,4.1,7.7,8003\n2001-12-01,7147.7,286570,4.5,8.2,8258\n2002-01-01,7174.3,286788,6.1,8.4,8182\n2002-02-01,7218.3,286994,5.8,8.3,8215\n2002-03-01,7237.2,287190,5.9,8.4,8304\n2002-04-01,7305.4,287397,5.8,8.9,8599\n2002-05-01,7282.7,287623,6.5,9.5,8399\n2002-06-01,7318.2,287864,6.4,11,8393\n2002-07-01,7380.4,288105,5.5,8.9,8390\n2002-08-01,7401.5,288360,5.4,9,8304\n2002-09-01,7391,288618,5.7,9.5,8251\n2002-10-01,7430.7,288870,5.7,9.6,8307\n2002-11-01,7459.7,289106,5.7,9.3,8520\n2002-12-01,7512.8,289313,5.5,9.6,8640\n2003-01-01,7533.1,289518,5.5,9.6,8520\n2003-02-01,7535.9,289714,5.6,9.5,8618\n2003-03-01,7598.4,289911,5.3,9.7,8588\n2003-04-01,7621,290125,5.3,10.2,8842\n2003-05-01,7628.1,290346,5.8,9.9,8957\n2003-06-01,7678.6,290584,5.6,11.5,9266\n2003-07-01,7738.2,290820,6.3,10.3,9011\n2003-08-01,7834.5,291072,6,10.1,8896\n2003-09-01,7835,291321,5.2,10.2,8921\n2003-10-01,7845.7,291574,5.3,10.4,8732\n2003-11-01,7899.6,291807,5.4,10.3,8576\n2003-12-01,7929.2,292008,5.4,10.4,8317\n2004-01-01,7987.4,292192,5,10.6,8370\n2004-02-01,8019.8,292368,5,10.2,8167\n2004-03-01,8076,292561,4.9,10.2,8491\n2004-04-01,8088.6,292779,5.3,9.5,8170\n2004-05-01,8163.2,292997,5.3,9.9,8212\n2004-06-01,8147.2,293223,5.8,11,8286\n2004-07-01,8218.9,293463,5.3,8.9,8136\n2004-08-01,8253.1,293719,5.2,9.2,7990\n2004-09-01,8321.1,293971,4.6,9.6,7927\n2004-10-01,8374.6,294230,4.5,9.5,8061\n2004-11-01,8420.6,294466,4.1,9.7,7932\n2004-12-01,8481.5,294694,6.9,9.5,7934\n2005-01-01,8470.2,294914,3.7,9.4,7784\n2005-02-01,8529.2,295105,3.4,9.2,7980\n2005-03-01,8569.5,295287,3.6,9.3,7737\n2005-04-01,8645.6,295490,3.1,9,7672\n2005-05-01,8643.9,295704,3.5,9.1,7651\n2005-06-01,8724.8,295936,2.9,9,7524\n2005-07-01,8829.5,296186,2.2,8.8,7406\n2005-08-01,8832.4,296440,2.7,9.2,7345\n2005-09-01,8885.8,296707,2.7,8.4,7553\n2005-10-01,8926.6,296972,3.1,8.6,7453\n2005-11-01,8938.5,297207,3.5,8.5,7566\n2005-12-01,8969.6,297431,3.7,8.7,7279\n2006-01-01,9059.8,297647,4.2,8.6,7064\n2006-02-01,9090.1,297854,4.2,9.1,7184\n2006-03-01,9122.1,298060,4.2,8.7,7072\n2006-04-01,9174.8,298281,4,8.4,7120\n2006-05-01,9215.1,298496,3.8,8.5,6980\n2006-06-01,9240.8,298739,4,7.3,7001\n2006-07-01,9322.6,298996,3.4,8,7175\n2006-08-01,9321.8,299263,3.6,8.4,7091\n2006-09-01,9354.7,299554,3.6,8,6847\n2006-10-01,9373.2,299835,3.6,7.9,6727\n2006-11-01,9380.2,300094,3.9,8.3,6872\n2006-12-01,9469,300340,3.7,7.5,6762\n2007-01-01,9516.3,300574,3.7,8.3,7116\n2007-02-01,9546.8,300802,4.1,8.5,6927\n2007-03-01,9585.1,301021,4.4,9.1,6731\n2007-04-01,9615.7,301254,4.2,8.6,6850\n2007-05-01,9651.3,301483,4,8.2,6766\n2007-06-01,9667.3,301739,3.8,7.7,6979\n2007-07-01,9709.6,302004,3.7,8.7,7149\n2007-08-01,9753.9,302267,3.4,8.8,7067\n2007-09-01,9797.9,302546,3.5,8.7,7170\n2007-10-01,9827,302807,3.4,8.4,7237\n2007-11-01,9897.8,303054,3.1,8.6,7240\n2007-12-01,9908.4,303287,3.6,8.4,7645\n2008-01-01,9930,303506,3.7,9,7685\n2008-02-01,9913.4,303711,4.1,8.7,7497\n2008-03-01,9959.4,303907,4,8.7,7822\n2008-04-01,9996.8,304117,3.4,9.4,7637\n2008-05-01,10053.8,304323,7.8,7.9,8395\n2008-06-01,10107.9,304556,5.5,9,8575\n2008-07-01,10104.7,304798,4.4,9.7,8937\n2008-08-01,10094.7,305045,3.8,9.7,9438\n2008-09-01,10043.5,305309,4.7,10.2,9494\n2008-10-01,9960.3,305554,5.5,10.4,10074\n2008-11-01,9820.8,305786,6.4,9.8,10538\n2008-12-01,9730.7,306004,6.4,10.5,11286\n2009-01-01,9783.8,306208,6.2,10.7,12058\n2009-02-01,9766,306402,5.5,11.7,12898\n2009-03-01,9718.5,306588,5.9,12.3,13426\n2009-04-01,9724.8,306787,6.8,13.1,13853\n2009-05-01,9748.9,306984,8.2,14.2,14499\n2009-06-01,9806.9,307206,6.7,17.2,14707\n2009-07-01,9841.7,307439,6,16,14601\n2009-08-01,9961,307685,4.9,16.3,14814\n2009-09-01,9883.4,307946,5.9,17.8,15009\n2009-10-01,9931.9,308189,5.4,18.9,15352\n2009-11-01,9940.5,308418,5.9,19.8,15219\n2009-12-01,9998.9,308633,5.9,20.1,15098\n2010-01-01,10001.8,308833,6.1,20,15046\n2010-02-01,10030.6,309027,5.8,19.9,15113\n2010-03-01,10089.1,309212,5.7,20.4,15202\n2010-04-01,10112.9,309191.211,6.4,22.1,15325\n2010-05-01,10131,309369.053,7,22.3,14849\n2010-06-01,10151.4,309548.502,6.9,25.2,14474\n2010-07-01,10184.7,309745.698,6.8,22.3,14512\n2010-08-01,10228.2,309957.775,6.9,21,14648\n2010-09-01,10249,310176.466,6.7,20.3,14579\n2010-10-01,10304.7,310399.958,6.6,21.2,14516\n2010-11-01,10354.7,310595.764,6.6,21,15081\n2010-12-01,10392.1,310781.705,7.1,21.9,14348\n2011-01-01,10435.5,310960.74,7.4,21.5,14013\n2011-02-01,10470.1,311113.376,7.6,21.1,13820\n2011-03-01,10550.5,311265.404,7,21.5,13737\n2011-04-01,10587.6,311436.238,6.9,20.9,13957\n2011-05-01,10612,311607.08,6.9,21.6,13855\n2011-06-01,10636.8,311791.223,7.2,22.4,13962\n2011-07-01,10677.5,311997.049,7.3,22,13763\n2011-08-01,10700.6,312205.367,7.2,22.4,13818\n2011-09-01,10738.1,312429.118,6.8,22,13948\n2011-10-01,10753.1,312644.159,6.8,20.6,13594\n2011-11-01,10759.5,312829.523,7,20.8,13302\n2011-12-01,10772.2,313009.712,7.8,20.5,13093\n2012-01-01,10862.1,313183.179,8,20.8,12797\n2012-02-01,10953.5,313338.977,8,19.7,12813\n2012-03-01,10951.8,313499.369,8.5,19.2,12713\n2012-04-01,10979.7,313667.127,8.7,19.1,12646\n2012-05-01,10968.6,313830.53,8.8,19.9,12660\n2012-06-01,10946.3,314017.594,9.1,20.4,12692\n2012-07-01,10977.2,314210.786,8.2,17.5,12656\n2012-08-01,11004.1,314422.341,8,18.4,12471\n2012-09-01,11061.5,314646.749,8.2,18.8,12115\n2012-10-01,11099.8,314853.978,8.8,19.9,12124\n2012-11-01,11136.8,315053.863,9.7,18.6,12005\n2012-12-01,11140.5,315232.752,12,17.7,12298\n2013-01-01,11202.8,315389.595,6.3,15.8,12471\n2013-02-01,11239.6,315520.143,5.8,17.2,11950\n2013-03-01,11227.1,315662.224,5.9,17.6,11689\n2013-04-01,11205.4,315817.855,6.4,17.1,11760\n2013-05-01,11244.6,315983.654,6.7,17.1,11654\n2013-06-01,11268.8,316171.042,6.8,17,11751\n2013-07-01,11296.7,316358.778,6.6,16.2,11335\n2013-08-01,11329.2,316580.327,6.7,16.5,11279\n2013-09-01,11366.9,316806.125,6.8,16.5,11270\n2013-10-01,11419.8,317022.27,6.3,16.3,11136\n2013-11-01,11487.6,317228.026,6.2,17.1,10787\n2013-12-01,11517.9,317411.551,6.4,17.3,10404\n2014-01-01,11512.5,317593.923,7.1,15.4,10202\n2014-02-01,11566.2,317753.883,7.3,15.9,10349\n2014-03-01,11643,317917.203,7.4,15.8,10380\n2014-04-01,11702.6,318089.218,7.4,15.7,9702\n2014-05-01,11748.4,318269.505,7.4,14.6,9859\n2014-06-01,11817,318464.152,7.4,13.8,9460\n2014-07-01,11860.5,318662.368,7.5,13.1,9608\n2014-08-01,11944.3,318893.786,7.2,12.9,9599\n2014-09-01,11957.4,319125.296,7.4,13.4,9262\n2014-10-01,12023,319353.734,7.2,13.6,8990\n2014-11-01,12051.4,319564.209,7.3,13,9090\n2014-12-01,12062,319746.157,7.6,12.9,8717\n2015-01-01,12046,319928.646,7.7,13.2,8903\n2015-02-01,12082.4,320074.511,7.9,12.9,8610\n2015-03-01,12158.3,320230.786,7.4,12,8504\n2015-04-01,12193.8,320402.295,7.6,11.5,8526\n\n## file: styles.css\nbody {\n  padding-top: 1rem;\n}\n\n.bslib-value-box .plotly .modebar-container {\n  display: none;\n}\n\n.shiny-ipywidget-output {\n  display: flex;\n  flex: 1 1 auto !important;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * > * > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 250\n\n# ruff: noqa\n## file: app.py\n# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny import App, ui\n\nappdir = Path(__file__).parent\n\napp_ui = ui.page_fixed(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.value_box(\n        \"Total Sales in Q2\",\n        \"$2.45M\",\n        showcase=sw.output_widget(\"sparkline\"),\n        showcase_layout=\"bottom\",\n    ),\n    fillable_mobile=True,\n)\n\ndef server(input, output, session):\n    @sw.render_widget\n    def sparkline():\n        economics = pd.read_csv(appdir / \"economics.csv\")\n        fig = px.line(economics, x=\"date\", y=\"psavert\")\n        fig.update_traces(\n            line_color=\"#406EF1\",\n            line_width=1,\n            fill=\"tozeroy\",\n            fillcolor=\"rgba(64,110,241,0.2)\",\n            hoverinfo=\"y\",\n        )\n        fig.update_xaxes(visible=False, showgrid=False)\n        fig.update_yaxes(visible=False, showgrid=False)\n        fig.update_layout(\n            height=100,\n            hovermode=\"x\",\n            margin=dict(t=0, r=0, l=0, b=0),\n            plot_bgcolor=\"rgba(0,0,0,0)\",\n            paper_bgcolor=\"rgba(0,0,0,0)\",\n        )\n        return fig\n\napp = App(app_ui, server)\n\n## file: economics.csv\ndate,pce,pop,psavert,uempmed,unemploy\n2000-01-01,6535.3,280976,5.4,5.8,5708\n2000-02-01,6619.7,281190,4.8,6.1,5858\n2000-03-01,6685.8,281409,4.5,6,5733\n2000-04-01,6671.1,281653,5,6.1,5481\n2000-05-01,6707.6,281877,4.9,5.8,5758\n2000-06-01,6743.9,282126,4.9,5.7,5651\n2000-07-01,6764.1,282385,5.2,6,5747\n2000-08-01,6799.1,282653,5.2,6.3,5853\n2000-09-01,6882.9,282932,4.5,5.2,5625\n2000-10-01,6888.2,283201,4.6,6.1,5534\n2000-11-01,6902.4,283453,4.5,6.1,5639\n2000-12-01,6945.7,283696,4.2,6,5634\n2001-01-01,6977,283920,4.8,5.8,6023\n2001-02-01,6995.8,284137,4.9,6.1,6089\n2001-03-01,6987.9,284350,5.3,6.6,6141\n2001-04-01,7001.2,284581,5,5.9,6271\n2001-05-01,7047.1,284810,4.5,6.3,6226\n2001-06-01,7060.7,285062,4.5,6,6484\n2001-07-01,7072.2,285309,5.6,6.8,6583\n2001-08-01,7108.9,285570,6.8,6.9,7042\n2001-09-01,7012.8,285843,7,7.2,7142\n2001-10-01,7208.4,286098,3.4,7.3,7694\n2001-11-01,7167.9,286341,4.1,7.7,8003\n2001-12-01,7147.7,286570,4.5,8.2,8258\n2002-01-01,7174.3,286788,6.1,8.4,8182\n2002-02-01,7218.3,286994,5.8,8.3,8215\n2002-03-01,7237.2,287190,5.9,8.4,8304\n2002-04-01,7305.4,287397,5.8,8.9,8599\n2002-05-01,7282.7,287623,6.5,9.5,8399\n2002-06-01,7318.2,287864,6.4,11,8393\n2002-07-01,7380.4,288105,5.5,8.9,8390\n2002-08-01,7401.5,288360,5.4,9,8304\n2002-09-01,7391,288618,5.7,9.5,8251\n2002-10-01,7430.7,288870,5.7,9.6,8307\n2002-11-01,7459.7,289106,5.7,9.3,8520\n2002-12-01,7512.8,289313,5.5,9.6,8640\n2003-01-01,7533.1,289518,5.5,9.6,8520\n2003-02-01,7535.9,289714,5.6,9.5,8618\n2003-03-01,7598.4,289911,5.3,9.7,8588\n2003-04-01,7621,290125,5.3,10.2,8842\n2003-05-01,7628.1,290346,5.8,9.9,8957\n2003-06-01,7678.6,290584,5.6,11.5,9266\n2003-07-01,7738.2,290820,6.3,10.3,9011\n2003-08-01,7834.5,291072,6,10.1,8896\n2003-09-01,7835,291321,5.2,10.2,8921\n2003-10-01,7845.7,291574,5.3,10.4,8732\n2003-11-01,7899.6,291807,5.4,10.3,8576\n2003-12-01,7929.2,292008,5.4,10.4,8317\n2004-01-01,7987.4,292192,5,10.6,8370\n2004-02-01,8019.8,292368,5,10.2,8167\n2004-03-01,8076,292561,4.9,10.2,8491\n2004-04-01,8088.6,292779,5.3,9.5,8170\n2004-05-01,8163.2,292997,5.3,9.9,8212\n2004-06-01,8147.2,293223,5.8,11,8286\n2004-07-01,8218.9,293463,5.3,8.9,8136\n2004-08-01,8253.1,293719,5.2,9.2,7990\n2004-09-01,8321.1,293971,4.6,9.6,7927\n2004-10-01,8374.6,294230,4.5,9.5,8061\n2004-11-01,8420.6,294466,4.1,9.7,7932\n2004-12-01,8481.5,294694,6.9,9.5,7934\n2005-01-01,8470.2,294914,3.7,9.4,7784\n2005-02-01,8529.2,295105,3.4,9.2,7980\n2005-03-01,8569.5,295287,3.6,9.3,7737\n2005-04-01,8645.6,295490,3.1,9,7672\n2005-05-01,8643.9,295704,3.5,9.1,7651\n2005-06-01,8724.8,295936,2.9,9,7524\n2005-07-01,8829.5,296186,2.2,8.8,7406\n2005-08-01,8832.4,296440,2.7,9.2,7345\n2005-09-01,8885.8,296707,2.7,8.4,7553\n2005-10-01,8926.6,296972,3.1,8.6,7453\n2005-11-01,8938.5,297207,3.5,8.5,7566\n2005-12-01,8969.6,297431,3.7,8.7,7279\n2006-01-01,9059.8,297647,4.2,8.6,7064\n2006-02-01,9090.1,297854,4.2,9.1,7184\n2006-03-01,9122.1,298060,4.2,8.7,7072\n2006-04-01,9174.8,298281,4,8.4,7120\n2006-05-01,9215.1,298496,3.8,8.5,6980\n2006-06-01,9240.8,298739,4,7.3,7001\n2006-07-01,9322.6,298996,3.4,8,7175\n2006-08-01,9321.8,299263,3.6,8.4,7091\n2006-09-01,9354.7,299554,3.6,8,6847\n2006-10-01,9373.2,299835,3.6,7.9,6727\n2006-11-01,9380.2,300094,3.9,8.3,6872\n2006-12-01,9469,300340,3.7,7.5,6762\n2007-01-01,9516.3,300574,3.7,8.3,7116\n2007-02-01,9546.8,300802,4.1,8.5,6927\n2007-03-01,9585.1,301021,4.4,9.1,6731\n2007-04-01,9615.7,301254,4.2,8.6,6850\n2007-05-01,9651.3,301483,4,8.2,6766\n2007-06-01,9667.3,301739,3.8,7.7,6979\n2007-07-01,9709.6,302004,3.7,8.7,7149\n2007-08-01,9753.9,302267,3.4,8.8,7067\n2007-09-01,9797.9,302546,3.5,8.7,7170\n2007-10-01,9827,302807,3.4,8.4,7237\n2007-11-01,9897.8,303054,3.1,8.6,7240\n2007-12-01,9908.4,303287,3.6,8.4,7645\n2008-01-01,9930,303506,3.7,9,7685\n2008-02-01,9913.4,303711,4.1,8.7,7497\n2008-03-01,9959.4,303907,4,8.7,7822\n2008-04-01,9996.8,304117,3.4,9.4,7637\n2008-05-01,10053.8,304323,7.8,7.9,8395\n2008-06-01,10107.9,304556,5.5,9,8575\n2008-07-01,10104.7,304798,4.4,9.7,8937\n2008-08-01,10094.7,305045,3.8,9.7,9438\n2008-09-01,10043.5,305309,4.7,10.2,9494\n2008-10-01,9960.3,305554,5.5,10.4,10074\n2008-11-01,9820.8,305786,6.4,9.8,10538\n2008-12-01,9730.7,306004,6.4,10.5,11286\n2009-01-01,9783.8,306208,6.2,10.7,12058\n2009-02-01,9766,306402,5.5,11.7,12898\n2009-03-01,9718.5,306588,5.9,12.3,13426\n2009-04-01,9724.8,306787,6.8,13.1,13853\n2009-05-01,9748.9,306984,8.2,14.2,14499\n2009-06-01,9806.9,307206,6.7,17.2,14707\n2009-07-01,9841.7,307439,6,16,14601\n2009-08-01,9961,307685,4.9,16.3,14814\n2009-09-01,9883.4,307946,5.9,17.8,15009\n2009-10-01,9931.9,308189,5.4,18.9,15352\n2009-11-01,9940.5,308418,5.9,19.8,15219\n2009-12-01,9998.9,308633,5.9,20.1,15098\n2010-01-01,10001.8,308833,6.1,20,15046\n2010-02-01,10030.6,309027,5.8,19.9,15113\n2010-03-01,10089.1,309212,5.7,20.4,15202\n2010-04-01,10112.9,309191.211,6.4,22.1,15325\n2010-05-01,10131,309369.053,7,22.3,14849\n2010-06-01,10151.4,309548.502,6.9,25.2,14474\n2010-07-01,10184.7,309745.698,6.8,22.3,14512\n2010-08-01,10228.2,309957.775,6.9,21,14648\n2010-09-01,10249,310176.466,6.7,20.3,14579\n2010-10-01,10304.7,310399.958,6.6,21.2,14516\n2010-11-01,10354.7,310595.764,6.6,21,15081\n2010-12-01,10392.1,310781.705,7.1,21.9,14348\n2011-01-01,10435.5,310960.74,7.4,21.5,14013\n2011-02-01,10470.1,311113.376,7.6,21.1,13820\n2011-03-01,10550.5,311265.404,7,21.5,13737\n2011-04-01,10587.6,311436.238,6.9,20.9,13957\n2011-05-01,10612,311607.08,6.9,21.6,13855\n2011-06-01,10636.8,311791.223,7.2,22.4,13962\n2011-07-01,10677.5,311997.049,7.3,22,13763\n2011-08-01,10700.6,312205.367,7.2,22.4,13818\n2011-09-01,10738.1,312429.118,6.8,22,13948\n2011-10-01,10753.1,312644.159,6.8,20.6,13594\n2011-11-01,10759.5,312829.523,7,20.8,13302\n2011-12-01,10772.2,313009.712,7.8,20.5,13093\n2012-01-01,10862.1,313183.179,8,20.8,12797\n2012-02-01,10953.5,313338.977,8,19.7,12813\n2012-03-01,10951.8,313499.369,8.5,19.2,12713\n2012-04-01,10979.7,313667.127,8.7,19.1,12646\n2012-05-01,10968.6,313830.53,8.8,19.9,12660\n2012-06-01,10946.3,314017.594,9.1,20.4,12692\n2012-07-01,10977.2,314210.786,8.2,17.5,12656\n2012-08-01,11004.1,314422.341,8,18.4,12471\n2012-09-01,11061.5,314646.749,8.2,18.8,12115\n2012-10-01,11099.8,314853.978,8.8,19.9,12124\n2012-11-01,11136.8,315053.863,9.7,18.6,12005\n2012-12-01,11140.5,315232.752,12,17.7,12298\n2013-01-01,11202.8,315389.595,6.3,15.8,12471\n2013-02-01,11239.6,315520.143,5.8,17.2,11950\n2013-03-01,11227.1,315662.224,5.9,17.6,11689\n2013-04-01,11205.4,315817.855,6.4,17.1,11760\n2013-05-01,11244.6,315983.654,6.7,17.1,11654\n2013-06-01,11268.8,316171.042,6.8,17,11751\n2013-07-01,11296.7,316358.778,6.6,16.2,11335\n2013-08-01,11329.2,316580.327,6.7,16.5,11279\n2013-09-01,11366.9,316806.125,6.8,16.5,11270\n2013-10-01,11419.8,317022.27,6.3,16.3,11136\n2013-11-01,11487.6,317228.026,6.2,17.1,10787\n2013-12-01,11517.9,317411.551,6.4,17.3,10404\n2014-01-01,11512.5,317593.923,7.1,15.4,10202\n2014-02-01,11566.2,317753.883,7.3,15.9,10349\n2014-03-01,11643,317917.203,7.4,15.8,10380\n2014-04-01,11702.6,318089.218,7.4,15.7,9702\n2014-05-01,11748.4,318269.505,7.4,14.6,9859\n2014-06-01,11817,318464.152,7.4,13.8,9460\n2014-07-01,11860.5,318662.368,7.5,13.1,9608\n2014-08-01,11944.3,318893.786,7.2,12.9,9599\n2014-09-01,11957.4,319125.296,7.4,13.4,9262\n2014-10-01,12023,319353.734,7.2,13.6,8990\n2014-11-01,12051.4,319564.209,7.3,13,9090\n2014-12-01,12062,319746.157,7.6,12.9,8717\n2015-01-01,12046,319928.646,7.7,13.2,8903\n2015-02-01,12082.4,320074.511,7.9,12.9,8610\n2015-03-01,12158.3,320230.786,7.4,12,8504\n2015-04-01,12193.8,320402.295,7.6,11.5,8526\n\n## file: styles.css\nbody {\n  padding-top: 1rem;\n}\n\n.bslib-value-box .plotly .modebar-container {\n  display: none;\n}\n\n.shiny-ipywidget-output {\n  display: flex;\n  flex: 1 1 auto !important;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * > * > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}",
      "# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny.express import ui\n\nappdir = Path(__file__).parent\n\nui.include_css(appdir / \"styles.css\")\n\nwith ui.value_box(showcase=sw.output_widget(\"sparkline\"), showcase_layout=\"bottom\"):\n    \"Total Sales in Q2\"\n    \"$2.45M\"\n\n    with ui.hold():\n\n        @sw.render_widget\n        def sparkline():\n            economics = pd.read_csv(appdir / \"economics.csv\")\n            fig = px.line(economics, x=\"date\", y=\"psavert\")\n            fig.update_traces(\n                line_color=\"#406EF1\",\n                line_width=1,\n                fill=\"tozeroy\",\n                fillcolor=\"rgba(64,110,241,0.2)\",\n                hoverinfo=\"y\",\n            )\n            fig.update_xaxes(visible=False, showgrid=False)\n            fig.update_yaxes(visible=False, showgrid=False)\n            fig.update_layout(\n                height=100,\n                hovermode=\"x\",\n                margin=dict(t=0, r=0, l=0, b=0),\n                plot_bgcolor=\"rgba(0,0,0,0)\",\n                paper_bgcolor=\"rgba(0,0,0,0)\",\n            )\n            return fig",
      "# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny.express import ui\n\nappdir = Path(__file__).parent\n\nui.include_css(appdir / \"styles.css\")\n\nwith ui.value_box(showcase=sw.output_widget(\"sparkline\"), showcase_layout=\"bottom\"):\n    \"Total Sales in Q2\"\n    \"$2.45M\"\n\n    with ui.hold():\n\n        @sw.render_widget\n        def sparkline():\n            economics = pd.read_csv(appdir / \"economics.csv\")\n            fig = px.line(economics, x=\"date\", y=\"psavert\")\n            fig.update_traces(\n                line_color=\"#406EF1\",\n                line_width=1,\n                fill=\"tozeroy\",\n                fillcolor=\"rgba(64,110,241,0.2)\",\n                hoverinfo=\"y\",\n            )\n            fig.update_xaxes(visible=False, showgrid=False)\n            fig.update_yaxes(visible=False, showgrid=False)\n            fig.update_layout(\n                height=100,\n                hovermode=\"x\",\n                margin=dict(t=0, r=0, l=0, b=0),\n                plot_bgcolor=\"rgba(0,0,0,0)\",\n                paper_bgcolor=\"rgba(0,0,0,0)\",\n            )\n            return fig",
      "# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny import App, ui\n\nappdir = Path(__file__).parent\n\napp_ui = ui.page_fixed(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.value_box(\n        \"Total Sales in Q2\",\n        \"$2.45M\",\n        showcase=sw.output_widget(\"sparkline\"),\n        showcase_layout=\"bottom\",\n    ),\n    fillable_mobile=True,\n)\n\ndef server(input, output, session):\n    @sw.render_widget\n    def sparkline():\n        economics = pd.read_csv(appdir / \"economics.csv\")\n        fig = px.line(economics, x=\"date\", y=\"psavert\")\n        fig.update_traces(\n            line_color=\"#406EF1\",\n            line_width=1,\n            fill=\"tozeroy\",\n            fillcolor=\"rgba(64,110,241,0.2)\",\n            hoverinfo=\"y\",\n        )\n        fig.update_xaxes(visible=False, showgrid=False)\n        fig.update_yaxes(visible=False, showgrid=False)\n        fig.update_layout(\n            height=100,\n            hovermode=\"x\",\n            margin=dict(t=0, r=0, l=0, b=0),\n            plot_bgcolor=\"rgba(0,0,0,0)\",\n            paper_bgcolor=\"rgba(0,0,0,0)\",\n        )\n        return fig\n\napp = App(app_ui, server)",
      "# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny import App, ui\n\nappdir = Path(__file__).parent\n\napp_ui = ui.page_fixed(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.value_box(\n        \"Total Sales in Q2\",\n        \"$2.45M\",\n        showcase=sw.output_widget(\"sparkline\"),\n        showcase_layout=\"bottom\",\n    ),\n    fillable_mobile=True,\n)\n\ndef server(input, output, session):\n    @sw.render_widget\n    def sparkline():\n        economics = pd.read_csv(appdir / \"economics.csv\")\n        fig = px.line(economics, x=\"date\", y=\"psavert\")\n        fig.update_traces(\n            line_color=\"#406EF1\",\n            line_width=1,\n            fill=\"tozeroy\",\n            fillcolor=\"rgba(64,110,241,0.2)\",\n            hoverinfo=\"y\",\n        )\n        fig.update_xaxes(visible=False, showgrid=False)\n        fig.update_yaxes(visible=False, showgrid=False)\n        fig.update_layout(\n            height=100,\n            hovermode=\"x\",\n            margin=dict(t=0, r=0, l=0, b=0),\n            plot_bgcolor=\"rgba(0,0,0,0)\",\n            paper_bgcolor=\"rgba(0,0,0,0)\",\n        )\n        return fig\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_outputs_verbatim-text_index_html",
    "url": "components/outputs/verbatim-text/index.html",
    "title": "Verbatim Text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Verbatim Text\n\nVerbatim Text\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_text_verbatim ui.output_text_verbatim(id, placeholder=False)\n- @render.text render.text(fn=None)\n\nui.output_text_verbatim ui.output_text_verbatim(id, placeholder=False)\n\n@render.text render.text(fn=None)\n\nDetails\n\nVerbatim text displays a character string as monospaced code in a shaded rectangle.\n\nTo create reactive verbatim text, render the text in the server function with the decorators @render.text, just as you would to display normal text. Then place the rendered text in the ui with ui.output_verbatim_text().\n\nBy default, ui.output_verbatim_text() will display nothing when the string to display is empty. To ensure that ui.output_verbatim_text() displays an empty shaded rectangle as a placeholder even when when the string to display is empty, set placeholder=True.\n\nSee Text to display string values as normal text.\n\nVariations\n\nPlaceholder rectangle when string is empty\n\nVerbatim text with a placeholder when the string to display is empty (see Details above).\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    ui.output_text_verbatim(\"text\"),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    ui.output_text_verbatim(\"text\"),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\")\n\n@render.text  \ndef text():\n    return input.Text()",
      "from shiny.express import input, render, ui\n\nui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\")\n\n@render.text  \ndef text():\n    return input.Text()",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    ui.output_text_verbatim(\"text\"),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    ui.output_text_verbatim(\"text\"),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter Text\", \"\"),\n    ui.output_text_verbatim(\"text\", placeholder=True),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter Text\", \"\"),\n    ui.output_text_verbatim(\"text\", placeholder=True),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nui.input_text(\"Text\", \"Enter Text\", \"\")\nui.output_code(\"text\", placeholder=True)  \n\nwith ui.hold():  \n\n    @render.code  \n    def text():\n        return input.Text()",
      "from shiny.express import input, render, ui\n\nui.input_text(\"Text\", \"Enter Text\", \"\")\nui.output_code(\"text\", placeholder=True)  \n\nwith ui.hold():  \n\n    @render.code  \n    def text():\n        return input.Text()",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter Text\", \"\"),\n    ui.output_text_verbatim(\"text\", placeholder=True),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter Text\", \"\"),\n    ui.output_text_verbatim(\"text\", placeholder=True),  \n)\n\ndef server(input, output, session):\n    @render.text  \n    def text():\n        return input.Text()\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_display-messages_chat_index_html",
    "url": "components/display-messages/chat/index.html",
    "title": "Chat ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display Messages\n- Chat\n\nChat\n\n- Express\n- Core\n\nThe example above is a bare-bones chat interface where the ‚Äúassistant‚Äù simply echoes back the user‚Äôs input. Visit the article on chatbots to learn how to get Chat() working with an LLM provider of your choice. That article also covers features of the Chat() component in more detail.\n\nChatbots article\n\nRelevant Functions\n\n- chat = ui.Chat() ui.Chat(id, on_error=\"auto\")\n- chat.ui() chat.ui(placeholder=\"Enter a message...\", width=\"min(680px, 100%)\", height=\"auto\", fill=True)\n- @chat.on_user_submit chat.on_user_submit(fn)\n- chat.append_message_stream() chat.append_message_stream(message)\n- chat.append_message() chat.append_message(message)\n\nchat = ui.Chat() ui.Chat(id, on_error=\"auto\")\n\nchat.ui() chat.ui(placeholder=\"Enter a message...\", width=\"min(680px, 100%)\", height=\"auto\", fill=True)\n\n@chat.on_user_submit chat.on_user_submit(fn)\n\nchat.append_message_stream() chat.append_message_stream(message)\n\nchat.append_message() chat.append_message(message)\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a chat instance and display it\nchat = ui.Chat(id=\"chat\")\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 350\n\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a chat instance and display it\nchat = ui.Chat(id=\"chat\")\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")",
      "from shiny.express import ui\n\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a chat instance and display it \nchat = ui.Chat(id=\"chat\")  \nchat.ui()  \n\n# Define a callback to run when the user submits a message \n@chat.on_user_submit  \nasync def handle_user_input(user_input: str):  \n    # Simply echo the user's input back to them \n    await chat.append_message(f\"You said: {user_input}\")  ",
      "from shiny.express import ui\n\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a chat instance and display it \nchat = ui.Chat(id=\"chat\")  \nchat.ui()  \n\n# Define a callback to run when the user submits a message \n@chat.on_user_submit  \nasync def handle_user_input(user_input: str):  \n    # Simply echo the user's input back to them \n    await chat.append_message(f\"You said: {user_input}\")  ",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.panel_title(\"Hello Shiny Chat\"),\n    ui.chat_ui(\"chat\"),  \n    fillable_mobile=True,\n)\n\ndef server(input):\n    # Create a chat instance and display it\n    chat = ui.Chat(id=\"chat\")  \n\n    # Define a callback to run when the user submits a message\n    @chat.on_user_submit  \n    async def handle_user_input(user_input: str):  \n        # Simply echo the user's input back to them\n        await chat.append_message(f\"You said: {user_input}\")  \n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.panel_title(\"Hello Shiny Chat\"),\n    ui.chat_ui(\"chat\"),  \n    fillable_mobile=True,\n)\n\ndef server(input):\n    # Create a chat instance and display it\n    chat = ui.Chat(id=\"chat\")  \n\n    # Define a callback to run when the user submits a message\n    @chat.on_user_submit  \n    async def handle_user_input(user_input: str):  \n        # Simply echo the user's input back to them\n        await chat.append_message(f\"You said: {user_input}\")  \n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_display-messages_modal_index_html",
    "url": "components/display-messages/modal/index.html",
    "title": "Modal ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display Messages\n- Modal\n\nModal\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.modal ui.modal(*args, title=None, footer=MISSING, size='m', easy_close=False, fade=True, **kwargs)\n- ui.modal_show ui.modal_show(modal, session=None)\n- ui.modal_remove ui.modal_remove(session=None)\n- ui.modal_button ui.modal_button(label, icon=None, **kwargs)\n\nui.modal ui.modal(*args, title=None, footer=MISSING, size='m', easy_close=False, fade=True, **kwargs)\n\nui.modal_show ui.modal_show(modal, session=None)\n\nui.modal_remove ui.modal_remove(session=None)\n\nui.modal_button ui.modal_button(label, icon=None, **kwargs)\n\nDetails\n\nA modal is a dialog box that appears in front of the app. You can use modals to display messages, curate the user experience, or collect user input, like passwords and usernames.\n\nTo create a modal, first assemble the components of the modal with ui.modal() and save them to an object. Then call ui.modal_show() on the object to display the modal.\n\nTypically, you will want to create a reactive effect to call ui.modal_show() whenever a particular event occurs. For example, the reactive effect below will open a modal whenever the value of input.show() changes.\n\nModal contents\n\nTo add elements to a modal, pass them as unnamed arguments to ui.modal(). Modals can contain any UI elements recognized by Shiny.\n\nModals come in four sizes: small ('s'), medium ('m') (the default), large ('l'), and extra-large ('xl'). Set the size of a modal with the size argument of ui.modal().\n\nSee Also: Notifications provide a similar, but alternative way to display information to the user.\n\nVariations\n\nModal for authentication\n\nPlace inputs inside a modal to collect, and then login with, database credentials.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            title=\"Somewhat important message\",\n            easy_close=True,\n            footer=ui.modal_button(\"Dismiss\"),\n        )\n        ui.modal_show(m)\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            title=\"Somewhat important message\",\n            easy_close=True,\n            footer=ui.modal_button(\"Dismiss\"),\n        )\n        ui.modal_show(m)\n\napp = App(app_ui, server)",
      "from shiny import reactive\nfrom shiny.express import ui, input\n\nui.input_action_button(\"show\", \"Show modal dialog\")\n\n@reactive.effect\n@reactive.event(input.show)\ndef show_important_message():\n    m = ui.modal(  \n        \"This is a somewhat important message.\",  \n        easy_close=True,  \n        footer=None,  \n    )  \n    ui.modal_show(m)",
      "from shiny import reactive\nfrom shiny.express import ui, input\n\nui.input_action_button(\"show\", \"Show modal dialog\")\n\n@reactive.effect\n@reactive.event(input.show)\ndef show_important_message():\n    m = ui.modal(  \n        \"This is a somewhat important message.\",  \n        easy_close=True,  \n        footer=None,  \n    )  \n    ui.modal_show(m)",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fixed(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(  \n            \"This is a somewhat important message.\",  \n            title=\"Somewhat important message\",  \n            easy_close=True,  \n        )  \n        ui.modal_show(m)  \n\napp = App(app_ui, server)",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fixed(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(  \n            \"This is a somewhat important message.\",  \n            title=\"Somewhat important message\",  \n            easy_close=True,  \n        )  \n        ui.modal_show(m)  \n\napp = App(app_ui, server)",
      "@reactive.effect\n@reactive.event(input.show)\ndef _():\n    m = ui.modal( \n        \"This is a somewhat important message.\",\n        title=\"Somewhat important message\",\n        easy_close=True\n    )\n    ui.modal_show(m)",
      "@reactive.effect\n@reactive.event(input.show)\ndef _():\n    m = ui.modal( \n        \"This is a somewhat important message.\",\n        title=\"Somewhat important message\",\n        easy_close=True\n    )\n    ui.modal_show(m)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fixed(ui.input_action_button(\"login\", \"Login to database\"))\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.login)\n    def _():\n        m = ui.modal(  \n            ui.input_text(\"name\", \"Username:\"),\n            ui.input_password(\"password\", \"Password:\"),\n            ui.input_action_button(\"connect\", \"Connect\"),\n            title=\"Database Credentials\",  \n            easy_close=True,  \n            footer=None,  \n        )  \n        ui.modal_show(m)\n\n    @reactive.effect  \n    @reactive.event(input.connect)  \n    def __():  \n        ui.modal_remove()  \n        # Code to connect with input.name() and input.password() \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fixed(ui.input_action_button(\"login\", \"Login to database\"))\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.login)\n    def _():\n        m = ui.modal(  \n            ui.input_text(\"name\", \"Username:\"),\n            ui.input_password(\"password\", \"Password:\"),\n            ui.input_action_button(\"connect\", \"Connect\"),\n            title=\"Database Credentials\",  \n            easy_close=True,  \n            footer=None,  \n        )  \n        ui.modal_show(m)\n\n    @reactive.effect  \n    @reactive.event(input.connect)  \n    def __():  \n        ui.modal_remove()  \n        # Code to connect with input.name() and input.password() \n\napp = App(app_ui, server)",
      "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"login\", \"Login to database\")\n\n@reactive.effect\n@reactive.event(input.login)\ndef show_login_modal():\n    m = ui.modal(  \n        ui.input_text(\"name\", \"Username:\"),\n        ui.input_password(\"password\", \"Password:\"),\n        ui.input_action_button(\"connect\", \"Connect\"),\n        title=\"Database Credentials\",  \n        easy_close=True,  \n        footer=None,  \n    )  \n    ui.modal_show(m)\n\n@reactive.effect  \n@reactive.event(input.connect)  \ndef connect_to_databaset():  \n    ui.modal_remove()  \n    # Code to connect with input.name() and input.password() ",
      "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"login\", \"Login to database\")\n\n@reactive.effect\n@reactive.event(input.login)\ndef show_login_modal():\n    m = ui.modal(  \n        ui.input_text(\"name\", \"Username:\"),\n        ui.input_password(\"password\", \"Password:\"),\n        ui.input_action_button(\"connect\", \"Connect\"),\n        title=\"Database Credentials\",  \n        easy_close=True,  \n        footer=None,  \n    )  \n    ui.modal_show(m)\n\n@reactive.effect  \n@reactive.event(input.connect)  \ndef connect_to_databaset():  \n    ui.modal_remove()  \n    # Code to connect with input.name() and input.password() ",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fixed(ui.input_action_button(\"login\", \"Login to database\"))\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.login)\n    def _():\n        m = ui.modal(  \n            ui.input_text(\"name\", \"Username:\"),\n            ui.input_password(\"password\", \"Password:\"),\n            ui.input_action_button(\"connect\", \"Connect\"),\n            title=\"Database Credentials\",  \n            easy_close=True,  \n            footer=None,  \n        )  \n        ui.modal_show(m)\n\n    @reactive.effect  \n    @reactive.event(input.connect)  \n    def __():  \n        ui.modal_remove()  \n        # Code to connect with input.name() and input.password() \n\napp = App(app_ui, server)",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fixed(ui.input_action_button(\"login\", \"Login to database\"))\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.login)\n    def _():\n        m = ui.modal(  \n            ui.input_text(\"name\", \"Username:\"),\n            ui.input_password(\"password\", \"Password:\"),\n            ui.input_action_button(\"connect\", \"Connect\"),\n            title=\"Database Credentials\",  \n            easy_close=True,  \n            footer=None,  \n        )  \n        ui.modal_show(m)\n\n    @reactive.effect  \n    @reactive.event(input.connect)  \n    def __():  \n        ui.modal_remove()  \n        # Code to connect with input.name() and input.password() \n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_display-messages_notifications_index_html",
    "url": "components/display-messages/notifications/index.html",
    "title": "Notifications ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display Messages\n- Notifications\n\nNotifications\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.notification_show ui.notification_show(ui, *, action=None, duration=5, close_button=True, id=None, type='default', session=None)\n- ui.notification_remove ui.notification_remove(id, *, session=None)\n\nui.notification_show ui.notification_show(ui, *, action=None, duration=5, close_button=True, id=None, type='default', session=None)\n\nui.notification_remove ui.notification_remove(id, *, session=None)\n\nDetails\n\nA notification is a message that appears near the bottom corner of the app. Notifications normally disappear after a short period of time, and should multiple notifications appear together, they will stack on top of one another.\n\nTo create a notification, call ui.notification_show(). Typically, you will want to create a reactive effect to call ui.show_notification() whenever a particular event occurs. For example, the reactive effect below will create a notification whenever the value of input.show() changes.\n\nYou can call ui.notification_remove() to remove a notification programatically, but usually app developers will let notifications expire on their own. Also, notifications come by default with a button that the user can click to close the notification prematurely.\n\nDuration\n\nBy default, Shiny notifications will disappear after five seconds. To change how long a notification appears for, set the duration argument of ui.notification_show() to an integer number of seconds. Set duration to None to have the notification appear until the user closes it.\n\nType\n\nShiny notifications come in four types: default, messages, warnings and errors. To set the type of a notification, use the type argument of ui.notification_show().\n\nSee Also: Modal messages provide a similar, but alternative way to display information to the user.\n\nVariations\n\nReplace/update a notification\n\nAssign a notification an id to replace any existing notification with the same id. In the example below, a persistant notification is created with duration=None and updated each time you click the notification button.\n\n- Express\n- Core\n\nTrack and remove notifications\n\nTrack notifications, and use ui.notification_remove() to remove notifications one at a time.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, reactive, ui\n\ntypes = [\"default\", \"message\", \"warning\", \"error\"]\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(\"type\", \"Notification Type\", types, inline=True),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        type_txt = \"notification\" if input.type() == \"default\" else input.type()\n\n        ui.notification_show(\n            f\"This {type_txt} will disappear after 2 seconds.\",\n            type=input.type(),\n            duration=2,\n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, reactive, ui\n\ntypes = [\"default\", \"message\", \"warning\", \"error\"]\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(\"type\", \"Notification Type\", types, inline=True),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        type_txt = \"notification\" if input.type() == \"default\" else input.type()\n\n        ui.notification_show(\n            f\"This {type_txt} will disappear after 2 seconds.\",\n            type=input.type(),\n            duration=2,\n        )\n\napp = App(app_ui, server)",
      "from shiny import reactive\nfrom shiny.express import input, ui\n\ntypes = [\"default\", \"message\", \"warning\", \"error\"]\n\nui.input_radio_buttons(\"type\", \"Notification Type\", types, inline=True)\nui.input_action_button(\"show\", \"Show Notification\")\n\n@reactive.effect\n@reactive.event(input.show)\ndef show_notification():\n    type_txt = \"notification\" if input.type() == \"default\" else input.type()\n    ui.notification_show(\n        f\"This {type_txt} will disappear after 2 seconds.\",\n        type=input.type(),\n        duration=2,\n    )",
      "from shiny import reactive\nfrom shiny.express import input, ui\n\ntypes = [\"default\", \"message\", \"warning\", \"error\"]\n\nui.input_radio_buttons(\"type\", \"Notification Type\", types, inline=True)\nui.input_action_button(\"show\", \"Show Notification\")\n\n@reactive.effect\n@reactive.event(input.show)\ndef show_notification():\n    type_txt = \"notification\" if input.type() == \"default\" else input.type()\n    ui.notification_show(\n        f\"This {type_txt} will disappear after 2 seconds.\",\n        type=input.type(),\n        duration=2,\n    )",
      "from shiny import App, reactive, ui\n\ntypes = [\"default\", \"message\", \"warning\", \"error\"]\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(\"type\", \"Notification Type\", types, inline=True),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        type_txt = \"notification\" if input.type() == \"default\" else input.type()\n\n        ui.notification_show(\n            f\"This {type_txt} will disappear after 2 seconds.\",\n            type=input.type(),\n            duration=2,\n        )\n\napp = App(app_ui, server)",
      "from shiny import App, reactive, ui\n\ntypes = [\"default\", \"message\", \"warning\", \"error\"]\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(\"type\", \"Notification Type\", types, inline=True),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        type_txt = \"notification\" if input.type() == \"default\" else input.type()\n\n        ui.notification_show(\n            f\"This {type_txt} will disappear after 2 seconds.\",\n            type=input.type(),\n            duration=2,\n        )\n\napp = App(app_ui, server)",
      "@reactive.effect\n@reactive.event(input.show)\ndef _():\n    ui.notification_show(\"You've been notified.\")",
      "@reactive.effect\n@reactive.event(input.show)\ndef _():\n    ui.notification_show(\"You've been notified.\")",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show Notification\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def show_or_update_notification():\n        ui.notification_show(\n            f\"You clicked the Show button {input.show()} times.\",\n            duration=None,\n            # compare to what happens if you comment out the line below\n            id=\"message\",\n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show Notification\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def show_or_update_notification():\n        ui.notification_show(\n            f\"You clicked the Show button {input.show()} times.\",\n            duration=None,\n            # compare to what happens if you comment out the line below\n            id=\"message\",\n        )\n\napp = App(app_ui, server)",
      "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show Notification\")\n\n@reactive.effect\n@reactive.event(input.show)\ndef show_or_update_notification():\n    ui.notification_show(\n        f\"You clicked the Show button {input.show()} times.\",\n        duration=None,\n        # compare to what happens if you comment out the line below\n        id=\"message\",\n    )",
      "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show Notification\")\n\n@reactive.effect\n@reactive.event(input.show)\ndef show_or_update_notification():\n    ui.notification_show(\n        f\"You clicked the Show button {input.show()} times.\",\n        duration=None,\n        # compare to what happens if you comment out the line below\n        id=\"message\",\n    )",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show Notification\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def show_or_update_notification():\n        ui.notification_show(\n            f\"You clicked the Show button {input.show()} times.\",\n            duration=None,\n            # compare to what happens if you comment out the line below\n            id=\"message\",\n        )\n\napp = App(app_ui, server)",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show Notification\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def show_or_update_notification():\n        ui.notification_show(\n            f\"You clicked the Show button {input.show()} times.\",\n            duration=None,\n            # compare to what happens if you comment out the line below\n            id=\"message\",\n        )\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 225\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show Notification\"),\n    ui.input_action_button(\"remove\", \"Remove Notification\"),\n)\n\ndef server(input, output, session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\n            f\"Notification {n}\", duration=None, close_button=False\n        )\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 225\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show Notification\"),\n    ui.input_action_button(\"remove\", \"Remove Notification\"),\n)\n\ndef server(input, output, session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\n            f\"Notification {n}\", duration=None, close_button=False\n        )\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\napp = App(app_ui, server)",
      "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show Notification\")\nui.input_action_button(\"remove\", \"Remove Notification\")\n\nids: list[str] = []\nn: int = 0\n\n@reactive.effect\n@reactive.event(input.show)\ndef _():\n    global ids\n    global n\n    # Save the ID for removal later\n    id = ui.notification_show(\"Message \" + str(n), duration=None)\n    ids.append(id)\n    n += 1\n\n@reactive.effect\n@reactive.event(input.remove)\ndef _():\n    global ids\n    if ids:\n        ui.notification_remove(ids.pop())",
      "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show Notification\")\nui.input_action_button(\"remove\", \"Remove Notification\")\n\nids: list[str] = []\nn: int = 0\n\n@reactive.effect\n@reactive.event(input.show)\ndef _():\n    global ids\n    global n\n    # Save the ID for removal later\n    id = ui.notification_show(\"Message \" + str(n), duration=None)\n    ids.append(id)\n    n += 1\n\n@reactive.effect\n@reactive.event(input.remove)\ndef _():\n    global ids\n    if ids:\n        ui.notification_remove(ids.pop())",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show Notification\"),\n    ui.input_action_button(\"remove\", \"Remove Notification\"),\n)\n\ndef server(input, output, session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\n            f\"Notification {n}\", duration=None, close_button=False\n        )\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\napp = App(app_ui, server)",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show Notification\"),\n    ui.input_action_button(\"remove\", \"Remove Notification\"),\n)\n\ndef server(input, output, session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\n            f\"Notification {n}\", duration=None, close_button=False\n        )\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_display-messages_progress-bar_index_html",
    "url": "components/display-messages/progress-bar/index.html",
    "title": "Progress Bar ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display Messages\n- Progress Bar\n\nProgress Bar\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.Progress ui.Progress(self, min=0, max=1, session=None)\n- ui.Progress.close ui.Progress.close(self)\n- ui.Progress.inc ui.Progress.inc(self, amount=0.1, message=None, detail=None)\n- ui.Progress.set ui.Progress.set(self, value=None, message=None, detail=None)\n\nui.Progress ui.Progress(self, min=0, max=1, session=None)\n\nui.Progress.close ui.Progress.close(self)\n\nui.Progress.inc ui.Progress.inc(self, amount=0.1, message=None, detail=None)\n\nui.Progress.set ui.Progress.set(self, value=None, message=None, detail=None)\n\nDetails\n\nWith Shiny, you can display a progress bar while a computation runs by running the computation bar within a special computation manager. Here‚Äôs how:\n\n- Use ui.Progress() to create a computation manager, and use with to run the computation within the manager. For example, you might set up a progress bar like this:\n\nui.Progress() creates a progress bar object that you can use to update the progress bar that is displayed during the computation.\n\n- Set the minimum and maximum values of the progress bar when you call ui.Progress(). These provide the outer bounds for the progress to display. For example, in the code above, when the bar is at 1, it would appear empty. When it is at 8, it would appear half full. When it is at 15, it would appear complete.\n- Update the progress bar object as the computation runs. Updating the object is simple: you can call its set() method to change the location of the progress bar, as well as the message it displays. For example the code below would update the progress bar above to half finished, and change the message that accompanies the bar to ‚ÄúAlmost there!‚Äù.\n\nSet the minimum and maximum values of the progress bar when you call ui.Progress(). These provide the outer bounds for the progress to display. For example, in the code above, when the bar is at 1, it would appear empty. When it is at 8, it would appear half full. When it is at 15, it would appear complete.\n\nUpdate the progress bar object as the computation runs. Updating the object is simple: you can call its set() method to change the location of the progress bar, as well as the message it displays. For example the code below would update the progress bar above to half finished, and change the message that accompanies the bar to ‚ÄúAlmost there!‚Äù.\n\nFinding opportunities to update the bar while the computation runs is more tricky. To have a responsive bar, you will need to interlace set() calls with the computation that runs. If the computation is a function from an external package, you may only be able to alert the user when the computation begins and when it finishes, which is unlikely to be satisfying:\n\nIf the computation involves separate functions run in sequence, you can update the progress bar after each function:\n\nIf the computation is a function that you have written, you can write the function to accept a progress bar object to update as it runs.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nimport asyncio\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_ui(\"compute\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.ui\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nimport asyncio\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_ui(\"compute\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.ui\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\napp = App(app_ui, server)",
      "import asyncio\n\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.input_action_button(\"do_compute\", \"Compute\")\n\n@render.ui\n@reactive.event(input.do_compute)\nasync def compute():\n    with ui.Progress(min=1, max=15) as p:\n        p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n        for i in range(1, 15):\n            p.set(i, message=\"Computing\")\n            await asyncio.sleep(0.1)\n\n    return \"Done computing!\"",
      "import asyncio\n\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.input_action_button(\"do_compute\", \"Compute\")\n\n@render.ui\n@reactive.event(input.do_compute)\nasync def compute():\n    with ui.Progress(min=1, max=15) as p:\n        p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n        for i in range(1, 15):\n            p.set(i, message=\"Computing\")\n            await asyncio.sleep(0.1)\n\n    return \"Done computing!\"",
      "import asyncio\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_ui(\"compute\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.ui\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\napp = App(app_ui, server)",
      "import asyncio\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_ui(\"compute\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.ui\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\napp = App(app_ui, server)",
      "def compute():\n  with ui.Progress(min=1, max=15) as p:\n      #  computation",
      "def compute():\n  with ui.Progress(min=1, max=15) as p:\n      #  computation",
      "p.set(8, message=\"Almost there\")",
      "p.set(8, message=\"Almost there\")",
      "async def compute():\nwith ui.Progress(min=1, max=15) as p:\n    p.set(1, message=\"Here we go\")\n    # computation()\n    p.set(15, message=\"Finished!\")",
      "async def compute():\nwith ui.Progress(min=1, max=15) as p:\n    p.set(1, message=\"Here we go\")\n    # computation()\n    p.set(15, message=\"Finished!\")",
      "async def compute():\nwith ui.Progress(min=1, max=15) as p:\n    p.set(1, message=\"Here we go\")\n    # computation1()\n    p.set(5, message=\"Working hard\")\n    # computation2()\n    p.set(10, message=\"Almost there\")\n    # computation3()\n    p.set(15, message=\"Finished!\")",
      "async def compute():\nwith ui.Progress(min=1, max=15) as p:\n    p.set(1, message=\"Here we go\")\n    # computation1()\n    p.set(5, message=\"Working hard\")\n    # computation2()\n    p.set(10, message=\"Almost there\")\n    # computation3()\n    p.set(15, message=\"Finished!\")"
    ]
  },
  {
    "id": "components_display-messages_tooltips_index_html",
    "url": "components/display-messages/tooltips/index.html",
    "title": "Tooltips ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display Messages\n- Tooltips\n\nTooltips\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.tooltip ui.tooltip(trigger, *args, id=None, placement='auto', options=None, **kwargs)\n- ui.update_tooltip ui.update_tooltip(id, *args, show=None, session=None)\n\nui.tooltip ui.tooltip(trigger, *args, id=None, placement='auto', options=None, **kwargs)\n\nui.update_tooltip ui.update_tooltip(id, *args, show=None, session=None)\n\nDetails\n\nA tooltip is a box that appears next to an element when a user hovers over the element. To add a tooltip to a UI component, wrap the component in ui.tooltip(). Then pass ui.tooltip() one or more elements to display, such as a simple string that contains a message.\n\nOptionally assign the tooltip an id to trigger reactions when the tooltip becomes visible or to programmatically update the contents of the tooltip as your user navigates the app. A boolean that describes whether or not the tooltip is visible will be accessible as a reactive variable within the server function as input.<id>().\n\nControl the placement of the tooltip relative to the item it highlights with the placement argument. placement defaults to 'auto', but can be set to one of 'top', 'bottom', 'left', or 'right'.\n\nAccessibility of Tooltip Triggers\n\nBecause the user needs to interact with the trigger element to see the tooltip, it‚Äôs best practice to use an element that is typically accessible via keyboard interactions, like a button or a link.\n\nIf you use a non-interactive element, like a <span> or text, tooltip() will automatically add the tabindex=\"0\" attribute to the trigger element to make sure that users can reach the element with the keyboard. This means that in most cases you can use any element you want as the trigger.\n\nOne place where it‚Äôs important to consider the accessibility of the trigger is when using an icon without any accompanying text. In these cases, many icon elements are created with the assumption that the icon is decorative, which will make it inaccessible to users of assistive technologies.\n\nWhen using an icon as the primary trigger, ensure that the icon does not have aria-hidden=\"true\" or role=\"presentation\" attributes. Icon packages typically provide a way to specify a title for the icon, as well as a way to specify that the icon is not decorative. The title should be a short description of the purpose of the trigger, rather than a description of the icon itself.\n\nFor example:\n\nCompare tooltips to popovers, which are a similar device for organizing the layout of a Shiny app.\n\nSee Also: Modal messages and notications provide a similar, but alternative way to display information to the user.\n\nVariations\n\nUpdate a tooltip message\n\nCall ui.update_tooltip() to update the message of a tooltip with a given id.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",  \n        id=\"btn_tooltip\",  \n        placement=\"right\",  \n    ),\n    ui.output_text_verbatim(\"text\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 200\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",  \n        id=\"btn_tooltip\",  \n        placement=\"right\",  \n    ),\n    ui.output_text_verbatim(\"text\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)",
      "from shiny.express import input, render, ui\n\nwith ui.tooltip(id=\"btn_tooltip\", placement=\"right\"):  \n    ui.input_action_button(\"btn\", \"A button with a tooltip\")  \n    \"The tooltip message\"  \n\n@render.text\ndef btn_tooltip_state():\n    return f\"Tooltip state: {input.btn_tooltip()}\"  ",
      "from shiny.express import input, render, ui\n\nwith ui.tooltip(id=\"btn_tooltip\", placement=\"right\"):  \n    ui.input_action_button(\"btn\", \"A button with a tooltip\")  \n    \"The tooltip message\"  \n\n@render.text\ndef btn_tooltip_state():\n    return f\"Tooltip state: {input.btn_tooltip()}\"  ",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",  \n        id=\"btn_tooltip\",  \n        placement=\"right\",  \n    ),\n    ui.output_text_verbatim(\"text\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)",
      "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  \n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",  \n        id=\"btn_tooltip\",  \n        placement=\"right\",  \n    ),\n    ui.output_text_verbatim(\"text\"),\n)\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  \n\napp = App(app_ui, server)",
      "icon_title = \"About tooltips\"\ndef bs_info_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(&quot;info-circle&quot;, title = icon_title)`\nreturn ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-info-circle \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"></path><path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"></path></svg>')\n\nui.tooltip(\n    bs_info_icon(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "icon_title = \"About tooltips\"\ndef bs_info_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(&quot;info-circle&quot;, title = icon_title)`\nreturn ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-info-circle \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"></path><path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"></path></svg>')\n\nui.tooltip(\n    bs_info_icon(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "icon_title = \"About tooltips\"\ndef fa_info_circle(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(&quot;info-circle&quot;, a11y = &quot;sem&quot;, title = icon_title)`\nreturn ui.HTML(f'<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>')\n\nui.tooltip(\n    fa_info_circle(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "icon_title = \"About tooltips\"\ndef fa_info_circle(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(&quot;info-circle&quot;, a11y = &quot;sem&quot;, title = icon_title)`\nreturn ui.HTML(f'<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>')\n\nui.tooltip(\n    fa_info_circle(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n        placement=\"right\",\n    ),\n    ui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.tooltip_msg)\n    def update_tooltip_msg():\n        ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 300\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n        placement=\"right\",\n    ),\n    ui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.tooltip_msg)\n    def update_tooltip_msg():\n        ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)\n\napp = App(app_ui, server)",
      "from shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.tooltip(id=\"btn_tooltip\", placement=\"right\"):\n    ui.input_action_button(\"btn\", \"A button with a tooltip\")\n    \"The tooltip message\"\n\nui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\")\n\n@reactive.effect()\n@reactive.event(input.tooltip_msg)\ndef update_tooltip_msg():\n    ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)",
      "from shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.tooltip(id=\"btn_tooltip\", placement=\"right\"):\n    ui.input_action_button(\"btn\", \"A button with a tooltip\")\n    \"The tooltip message\"\n\nui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\")\n\n@reactive.effect()\n@reactive.event(input.tooltip_msg)\ndef update_tooltip_msg():\n    ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n        placement=\"right\",\n    ),\n    ui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.tooltip_msg)\n    def update_tooltip_msg():\n        ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)\n\napp = App(app_ui, server)",
      "from shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n        placement=\"right\",\n    ),\n    ui.input_text(\"tooltip_msg\", \"Tooltip message\", \"Change me!\").add_class(\"mt-4\"),\n)\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.tooltip_msg)\n    def update_tooltip_msg():\n        ui.update_tooltip(\"btn_tooltip\", input.tooltip_msg(), show=True)\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "templates_basic-app-plot",
    "url": "templates/basic-app-plot/",
    "title": "Shiny for Python ‚Äì Basic reactive plot",
    "description": "Use the basic-app-plot template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nBasic reactive plot\n\n- Express\n- Core\n\nA basic example of changing a histogram based on a select input control.\n\nComponents:\n\n- Select input\n- Plot output\n\nPackages:\n\n- seaborn\n\n",
    "code_examples": [
      "shiny create --template basic-app-plot --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template basic-app-plot --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template basic-app-plot --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template basic-app-plot --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_basic-sidebar",
    "url": "templates/basic-sidebar/",
    "title": "Shiny for Python ‚Äì Reactive plot with a sidebar",
    "description": "Use the basic-sidebar template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nReactive plot with a sidebar\n\n- Express\n- Core\n\nPlace numerous input controls in a sidebar and use them to control a plot in the main panel.\n\nPro tip: When dealing with many inputs, consider grouping them into an accordion (and placing the accordion in the sidebar).\n\nComponents:\n\n- Select input\n- Switch input\n- Plot output\n\nLayouts:\n\n- Sidebar\n\nPackages:\n\n- seaborn\n\n",
    "code_examples": [
      "shiny create --template basic-sidebar --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template basic-sidebar --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template basic-sidebar --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template basic-sidebar --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_basic-navigation",
    "url": "templates/basic-navigation/",
    "title": "Shiny for Python ‚Äì Navigating multiple panels",
    "description": "Use the basic-navigation template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nNavigating multiple panels\n\n- Express\n- Core\n\nA basic demonstration of common navigation of multiple panels in Shiny. The app has a navigation bar at the top, with two panels: ‚ÄúPage 1‚Äù and ‚ÄúPage 2‚Äù. On ‚ÄúPage 1‚Äù, is card with two panels: ‚ÄúPlot‚Äù and ‚ÄúTable‚Äù. On both card panels is a select input to choose the plot/data to display.\n\nComponents:\n\n- Select input\n- Plot output\n- Data grid output\n\nLayouts:\n\n- Navbars\n- Tabs\n\nPackages:\n\n- pandas\n- seaborn\n\n",
    "code_examples": [
      "shiny create --template basic-navigation --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template basic-navigation --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template basic-navigation --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template basic-navigation --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_regularization",
    "url": "templates/regularization/",
    "title": "Shiny for Python ‚Äì Article on regularization in ML",
    "description": "Use the regularization template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nArticle on regularization in ML\n\n- Express\n- Core\n\nAn article on regularization in machine learning and statistics. The app demonstrates the effect of regularization in linear regression. The user can adjust the regularization strength to see it influence the model‚Äôs coefficients.\n\nComponents:\n\n- Slider input\n- Plot output\n\nPackages:\n\n- pandas\n- scikit-learn\n- seaborn\n\n",
    "code_examples": [
      "shiny create --template regularization --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template regularization --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template regularization --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template regularization --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_basic-chatbot",
    "url": "templates/basic-chatbot/",
    "title": "Shiny for Python ‚Äì Hello AI Chatbot",
    "description": "Use the basic-chat template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nHello AI Chatbot\n\n- Express\n- Core\n\nA basic chatbot powered by an Large Language Model (LLM) from Anthropic. To learn more, see the article on Gen AI chatbots.\n\nThis particular template uses chatlas.ChatAnthropic() to do response generation via Anthropic. With chatlas, it‚Äôs easy to switch to other providers. Just change ChatAnthropic() with another provider (e.g., ChatOpenAI()).\n\nComponents:\n\n- Chat\n\nLayouts:\n\n- Cards\n\nPackages:\n\nchatlas\n\n",
    "code_examples": [
      "shiny create --template basic-chat --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template basic-chat --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template basic-chat --mode core --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template basic-chat --mode core --github posit-dev/py-shiny-templates/gen-ai"
    ]
  },
  {
    "id": "templates_basic-markdown-stream",
    "url": "templates/basic-markdown-stream/",
    "title": "Shiny for Python ‚Äì Hello Streaming Markdown",
    "description": "Use the basic-markdown-stream template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nHello Streaming Markdown\n\n- Express\n- Core\n\nA basic example of collecting user input, using it to fill a LLM prompt template, then sending the result to the LLM for response generation. The response is then streamed back to the user in real-time via MarkdownStream().\n\nTo learn more, see the article on Gen AI streaming.\n\nThis particular template uses chatlas.ChatAnthropic() to do response generation via Anthropic. With chatlas, it‚Äôs easy to switch to other providers. Just change ChatAnthropic() to another provider (e.g., ChatOpenAI()).\n\nComponents:\n\n- MarkdownStream\n- Action button\n- Select input\n\nLayouts:\n\n- Sidebar\n\nPackages:\n\nchatlas\n\n",
    "code_examples": [
      "shiny create --template basic-markdown-stream --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template basic-markdown-stream --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template basic-markdown-stream --mode core --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template basic-markdown-stream --mode core --github posit-dev/py-shiny-templates/gen-ai"
    ]
  },
  {
    "id": "templates_dinner-recipe",
    "url": "templates/dinner-recipe/",
    "title": "Shiny for Python ‚Äì What‚Äôs for dinner?",
    "description": "Use the dinner-recipe template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nWhat‚Äôs for dinner?\n\n- Express\n- Core\n\nA fun and useful way explore a dinner (or other meal) recipes based on the information provided. In addition to guiding you towards a recipe idea, it also provides buttons to: (1) extract the recipe information in a structured format and (2) restart the chat session. By wrapping the chat in a card() component, the card footer offers a natural place to include these ‚Äúbespoke‚Äù UI controls. This, plus leaning into shinyswatch for custom theming, helps the app feel more polished without much extra effort.\n\nComponents:\n\n- Chat\n- Action button\n\nLayouts:\n\n- Cards\n\nPackages:\n\nchatlas faicons shinyswatch\n\n",
    "code_examples": [
      "shiny create --template dinner-recipe --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template dinner-recipe --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template dinner-recipe --mode core --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template dinner-recipe --mode core --github posit-dev/py-shiny-templates/gen-ai"
    ]
  },
  {
    "id": "templates_data-sci-adventure",
    "url": "templates/data-sci-adventure/",
    "title": "Shiny for Python ‚Äì Data Science Adventure",
    "description": "Use the data-sci-adventure template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nData Science Adventure\n\n- Express\n- Core\n\nA fun and useful way to explore different ‚Äúreal-life‚Äù scenarios you might encounter at work as someone who works with data. Based on some information about your role, industry, and size of the business, the app will propose a series of scenarios and ask you to make a decision at each step. The goal is to help you think through the implications of your decisions and how they might impact the business. Towards the end, the app will provide for you some Python (or R) code snippets that you can use to create a reproducible end deliverable based on your decisions.\n\nComponents:\n\n- Chat\n- Action button\n- Select input\n\nPackages:\n\nchatlas faicons shinyswatch\n\n",
    "code_examples": [
      "shiny create --template data-sci-adventure --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template data-sci-adventure --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template data-sci-adventure --mode core --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template data-sci-adventure --mode core --github posit-dev/py-shiny-templates/gen-ai"
    ]
  },
  {
    "id": "templates_workout-plan",
    "url": "templates/workout-plan/",
    "title": "Shiny for Python ‚Äì Workout Plan Generator",
    "description": "Use the workout-plan template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nWorkout Plan Generator\n\n- Express\n- Core\n\nGenerate a workout plan based on your fitness goals, experience level, available equipment, etc. This app demonstrates a useful pattern of collecting user input via input controls, then using those values to fill in a prompt template which is sent to the LLM for response generation.\n\nComponents:\n\n- Chat\n- Selectize input\n- Slider input\n- Action button\n- Download button\n\nPackages:\n\nchatlas faicons\n\n",
    "code_examples": [
      "shiny create --template workout-plan --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template workout-plan --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template workout-plan --mode core --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template workout-plan --mode core --github posit-dev/py-shiny-templates/gen-ai"
    ]
  },
  {
    "id": "templates_querychat",
    "url": "templates/querychat/",
    "title": "Shiny for Python ‚Äì Query Chat",
    "description": "Use the querychat template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nQuery Chat\n\nThis app template allows end users to ask questions about a dataset using natural language. It leverages the querychat package to make the implementation as simple as possible. Under the hood, querychat instructs the LLM to translate user questions into formal SQL queries, which are then executed against the dataset. The resulting ‚Äúmodified‚Äù data is then made available as a reactive calculation so you make further use of it in your app.\n\nTo learn more, visit querychat‚Äôs website\n\nComponents:\n\n- Chat\n\nLayouts:\n\n- Cards\n\nPackages:\n\nchatlas querychat\n\n",
    "code_examples": [
      "shiny create --template querychat --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template querychat --github posit-dev/py-shiny-templates/gen-ai"
    ]
  },
  {
    "id": "templates_sidebot",
    "url": "templates/sidebot/",
    "title": "Shiny for Python ‚Äì Side bot",
    "description": "Use the sidebot template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nSide bot\n\n- Express\n- Core\n\nThe sidebot app template extends the idea of the Query Chat template to a full blown dashboard. That is, users can use natural language to drill down into a dataset, and the app will display the results in a variety of ways, including tables, plots, and value boxes. Note the app will also display the SQL used to generate the results, so users can verify the app‚Äôs interpretation of their query, and learn how to write SQL queries themselves. It also includes a ‚ú® icon, which sends a screenshot of visuals to the LLM for an explanation of the visual.\n\nSee Joe Cheng‚Äôs posit::conf(2024) presentation for a live demo of the app.\n\nComponents:\n\n- Chat\n- Data Grid\n- Plotly\n- Value box\n\nLayouts:\n\n- Cards\n- Grid layout\n\nPackages:\n\nchatlas shinywidgets plotly pandas matplotlib polars\n\n",
    "code_examples": [
      "shiny create --mode express --github jcheng5/py-databot",
      "shiny create --mode express --github jcheng5/py-databot",
      "shiny create --mode core --github jcheng5/py-databot",
      "shiny create --mode core --github jcheng5/py-databot"
    ]
  },
  {
    "id": "layouts_sidebars",
    "url": "layouts/sidebars/",
    "title": "Sidebars ‚Äì Shiny for Python",
    "description": "A sidebar layout creates a sidebar in your Shiny app, typically used for inputs, and a large main area, typically used for outputs.",
    "content": "Sidebars\n\nA sidebar layout creates a sidebar in your Shiny app, typically used for inputs, and a large main area, typically used for outputs.\n\nA sidebar layout creates a sidebar, typically used for inputs, and a large main area, typically used for outputs.\n\nRelevant Functions\n\n- ui.layout_sidebar ui.layout_sidebar(sidebar, *args, fillable=True, fill=True, bg=None, fg=None, border=None, border_radius=None, border_color=None, gap=None, padding=None, height=None, **kwargs)\n- ui.sidebar ui.sidebar(*args, width=250, position='left', open='desktop', id=None, title=None, bg=None, fg=None, class_=None, max_height_mobile=None, gap=None, padding=None)\n\nui.layout_sidebar ui.layout_sidebar(sidebar, *args, fillable=True, fill=True, bg=None, fg=None, border=None, border_radius=None, border_color=None, gap=None, padding=None, height=None, **kwargs)\n\nui.sidebar ui.sidebar(*args, width=250, position='left', open='desktop', id=None, title=None, bg=None, fg=None, class_=None, max_height_mobile=None, gap=None, padding=None)\n\nSidebar on the left\n\n- Express\n- Core\n\nFollow these steps to add a left-side sidebar to your app:\n\n- Add ui.layout_sidebar() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.layout_sidebar() creates a sidebar layout.\n- Pass ui.sidebar()as the first argument of ui.layout_sidebar() to create the sidebar. By default, the position parameter of ui.sidebar() is ‚Äúleft‚Äù and the sidebar will appear on the left.\n- Supply additional components (output components, cards, text, etc.) to ui.layout_sidebar() to define the contents of the main content area.\n\nAdd ui.layout_sidebar() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.layout_sidebar() creates a sidebar layout.\n\nPass ui.sidebar()as the first argument of ui.layout_sidebar() to create the sidebar. By default, the position parameter of ui.sidebar() is ‚Äúleft‚Äù and the sidebar will appear on the left.\n\nSupply additional components (output components, cards, text, etc.) to ui.layout_sidebar() to define the contents of the main content area.\n\nSidebar on the right\n\n- Express\n- Core\n\nFollow these steps to add a right-side sidebar to your app:\n\n- Add ui.layout_sidebar() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.layout_sidebar() creates a sidebar layout.\n- Pass ui.sidebar()as the first argument of ui.layout_sidebar() to create the sidebar.\n- Pass position=\"right\" to ui.sidebar(). The position argument controls where the sidebar appears relative to the main content.\n- Supply components (e.g., inputs) to ui.sidebar() to define the sidebar‚Äôs contents. Supply additional components (e.g., output components, cards, etc.) to ui.layout_sidebar() to define the contents of the main content area.\n\nAdd ui.layout_sidebar() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.layout_sidebar() creates a sidebar layout.\n\nPass ui.sidebar()as the first argument of ui.layout_sidebar() to create the sidebar.\n\nPass position=\"right\" to ui.sidebar(). The position argument controls where the sidebar appears relative to the main content.\n\nSupply components (e.g., inputs) to ui.sidebar() to define the sidebar‚Äôs contents. Supply additional components (e.g., output components, cards, etc.) to ui.layout_sidebar() to define the contents of the main content area.\n\nSidebar within a card\n\n- Express\n- Core\n\nFollow these steps to add a sidebar within a card to your app:\n\n- Add ui.card() to the UI of your app to create a card.\n- Pass ui.layout_sidebar() to ui.card() to define a sidebar layout within the card.\n- Add ui.sidebar() and additional elements to ui.layout_sidebar() to define the sidebar and main content as usual.\n- Add inputs or other components as desired to ui.sidebar() to define the sidebar‚Äôs contents.\n\nCollapsed sidebar\n\n- Express\n- Core\n\nui.sidebar() has an open parameter that defines whether the sidebar appears open or closed when the app launches. To create a sidebar that is initially closed, set the open parameter to \"closed\".\n\nThe other options for open are:\n\n- \"desktop\": The default. The sidebar starts open on a desktop screen and closed on mobile.\n- \"open\": The sidebar starts open and can be closed.\n- \"always\": The sidebar is always open and cannot be closed.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n    \"Main content\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n    \"Main content\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nwith ui.sidebar(bg=\"#f8f8f8\"):  \n    \"Sidebar\"  \n\n\"Main content\"  ",
      "from shiny.express import ui\n\nwith ui.sidebar(bg=\"#f8f8f8\"):  \n    \"Sidebar\"  \n\n\"Main content\"  ",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n    \"Main content\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n    \"Main content\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", position=\"right\", bg=\"#f8f8f8\"),  \n    \"Main content\",\n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", position=\"right\", bg=\"#f8f8f8\"),  \n    \"Main content\",\n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nwith ui.sidebar(position=\"right\", bg=\"#f8f8f8\"):  \n    \"Sidebar\"  \n\n\"Main content\"",
      "from shiny.express import ui\n\nwith ui.sidebar(position=\"right\", bg=\"#f8f8f8\"):  \n    \"Sidebar\"  \n\n\"Main content\"",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", position=\"right\", bg=\"#f8f8f8\"),  \n    \"Main content\",\n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", position=\"right\", bg=\"#f8f8f8\"),  \n    \"Main content\",\n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 175\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.card(  \n        ui.card_header(\"Card with sidebar\"),\n        ui.layout_sidebar(  \n            ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n            \"Card content\",  \n        ),  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 175\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.card(  \n        ui.card_header(\"Card with sidebar\"),\n        ui.layout_sidebar(  \n            ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n            \"Card content\",  \n        ),  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.card():  \n    ui.card_header(\"Card with sidebar\")\n\n    with ui.layout_sidebar():  \n        with ui.sidebar(bg=\"#f8f8f8\"):  \n            \"Sidebar\"  \n\n        \"Card content\"  ",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.card():  \n    ui.card_header(\"Card with sidebar\")\n\n    with ui.layout_sidebar():  \n        with ui.sidebar(bg=\"#f8f8f8\"):  \n            \"Sidebar\"  \n\n        \"Card content\"  ",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.card(  \n        ui.card_header(\"Card with sidebar\"),\n        ui.layout_sidebar(  \n            ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n            \"Card content\",  \n        ),  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.card(  \n        ui.card_header(\"Card with sidebar\"),\n        ui.layout_sidebar(  \n            ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n            \"Card content\",  \n        ),  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\", open=\"closed\"),  \n    \"Main content\",\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\", open=\"closed\"),  \n    \"Main content\",\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nwith ui.sidebar(open=\"closed\", bg=\"#f8f8f8\"):  \n    \"Sidebar\"\n\n\"Main content\"",
      "from shiny.express import ui\n\nwith ui.sidebar(open=\"closed\", bg=\"#f8f8f8\"):  \n    \"Sidebar\"\n\n\"Main content\"",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\", open=\"closed\"),  \n    \"Main content\",\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\", open=\"closed\"),  \n    \"Main content\",\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "components_outputs_value-box",
    "url": "components/outputs/value-box/",
    "title": "Value Box ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Value Box\n\nValue Box\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.value_box ui.value_box(title, value, *args, showcase=None, showcase_layout='left center', full_screen=False, theme=None, height=None, max_height=None, fill=True, class_=None, **kwargs)\n- ui.card ui.card(*args, full_screen=False, height=None, max_height=None, min_height=None, fill=True, class_=None, **kwargs)\n\nui.value_box ui.value_box(title, value, *args, showcase=None, showcase_layout='left center', full_screen=False, theme=None, height=None, max_height=None, fill=True, class_=None, **kwargs)\n\nui.card ui.card(*args, full_screen=False, height=None, max_height=None, min_height=None, fill=True, class_=None, **kwargs)\n\nDetails\n\nValue boxes are special ‚Äúcards‚Äù that help group information together in an aesthetic way. You can read more about value boxes in the bslib R Package.\n\nValue boxes have 4 main parts:\n\n- value - text to display in the card\n- title - optional text that displays above the value\n- showcase - optional element to be shown next to the value text (e.g., an image or logo)\n- theme - optional theme to change the appearance of the value box\n\nThere is only a UI component for the value box. 1. Call ui.value_box() to the UI of your app to create a div in which to display the value box.\n\nSince the value box is only a UI component, if you want to make it interactive (i.e., reactive), you can pair it up with either a ui.output_ui() + @render.ui() pair or use ui.output_text() as an argument to the ui.value_box() function if you only need text changes.\n\nVariations\n\nTheme and Layout Examples\n\nValue boxes with different theme and showcase_layout locations. This value box uses multiple files, see how on Shinylive\n\n- Express\n- Core\n\nReactive Value Box\n\nConnecting a reactive input value to a value box.\n\n- Express\n- Core\n\nSparklines\n\nInteractive sparkline in the value box. This value box uses multiple files, see how on Shinylive.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 175\n\nfrom shiny import App, ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\napp_ui = ui.page_fluid(\n    ui.value_box(\n        \"KPI Title\",\n        \"$1 Billion Dollars\",\n        \"Up 30% VS PREVIOUS 30 DAYS\",\n        showcase=piggy_bank,\n        theme=\"bg-gradient-indigo-purple\",\n    ),\n)\n\napp = App(app_ui, server=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 175\n\nfrom shiny import App, ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\napp_ui = ui.page_fluid(\n    ui.value_box(\n        \"KPI Title\",\n        \"$1 Billion Dollars\",\n        \"Up 30% VS PREVIOUS 30 DAYS\",\n        showcase=piggy_bank,\n        theme=\"bg-gradient-indigo-purple\",\n    ),\n)\n\napp = App(app_ui, server=None)",
      "from shiny.express import ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\nwith ui.value_box(showcase=piggy_bank, theme=\"bg-gradient-indigo-purple\"):\n    \"KPI Title\"\n    \"$1 Billion Dollars\"\n    \"Up 30% VS PREVIOUS 30 DAYS\"",
      "from shiny.express import ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\nwith ui.value_box(showcase=piggy_bank, theme=\"bg-gradient-indigo-purple\"):\n    \"KPI Title\"\n    \"$1 Billion Dollars\"\n    \"Up 30% VS PREVIOUS 30 DAYS\"",
      "from shiny import App, ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\napp_ui = ui.page_fluid(\n    ui.value_box(\n        \"KPI Title\",\n        \"$1 Billion Dollars\",\n        \"Up 30% VS PREVIOUS 30 DAYS\",\n        showcase=piggy_bank,\n        theme=\"bg-gradient-indigo-purple\",\n    ),\n)\n\napp = App(app_ui, server=None)",
      "from shiny import App, ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\napp_ui = ui.page_fluid(\n    ui.value_box(\n        \"KPI Title\",\n        \"$1 Billion Dollars\",\n        \"Up 30% VS PREVIOUS 30 DAYS\",\n        showcase=piggy_bank,\n        theme=\"bg-gradient-indigo-purple\",\n    ),\n)\n\napp = App(app_ui, server=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 315\n\nimport faicons\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"bg-gradient-indigo-purple\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"text-green\",  \n            showcase_layout=\"top right\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"danger\",  \n            showcase_layout=\"bottom\",  \n        ),\n    )\n)\napp = App(app_ui, server=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 315\n\nimport faicons\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"bg-gradient-indigo-purple\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"text-green\",  \n            showcase_layout=\"top right\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"danger\",  \n            showcase_layout=\"bottom\",  \n        ),\n    )\n)\napp = App(app_ui, server=None)",
      "import faicons\nfrom shiny.express import ui\n\nwith ui.layout_column_wrap():\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"bg-gradient-indigo-purple\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"text-green\",  \n        showcase_layout=\"top right\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"danger\",  \n        showcase_layout=\"bottom\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"",
      "import faicons\nfrom shiny.express import ui\n\nwith ui.layout_column_wrap():\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"bg-gradient-indigo-purple\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"text-green\",  \n        showcase_layout=\"top right\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"danger\",  \n        showcase_layout=\"bottom\",  \n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"",
      "import faicons\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"bg-gradient-indigo-purple\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"text-green\",  \n            showcase_layout=\"top right\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"danger\",  \n            showcase_layout=\"bottom\",  \n        ),\n    )\n)\napp = App(app_ui, server=None)",
      "import faicons\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"bg-gradient-indigo-purple\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"text-green\",  \n            showcase_layout=\"top right\",  \n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            theme=\"danger\",  \n            showcase_layout=\"bottom\",  \n        ),\n    )\n)\napp = App(app_ui, server=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 225\n\nimport faicons\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.h2(\"Spend Jeff's 2023 Earnings\"),\n        ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20),  \n        ui.value_box(\n            title=\"Save\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            value=ui.output_ui(\"save\"),  \n            theme=\"bg-gradient-orange-red\",\n        ),\n        ui.value_box(\n            title=\"Donate\",\n            showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n            value=ui.output_ui(\"donate\"),  \n            theme=\"bg-gradient-blue-purple\",\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @render.text  \n    def save():  \n        return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    @render.text  \n    def donate():  \n        return f\"${input.pct() / 100 * 70:.1f} Billion\"  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 225\n\nimport faicons\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.h2(\"Spend Jeff's 2023 Earnings\"),\n        ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20),  \n        ui.value_box(\n            title=\"Save\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            value=ui.output_ui(\"save\"),  \n            theme=\"bg-gradient-orange-red\",\n        ),\n        ui.value_box(\n            title=\"Donate\",\n            showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n            value=ui.output_ui(\"donate\"),  \n            theme=\"bg-gradient-blue-purple\",\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @render.text  \n    def save():  \n        return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    @render.text  \n    def donate():  \n        return f\"${input.pct() / 100 * 70:.1f} Billion\"  \n\napp = App(app_ui, server)",
      "import faicons\nfrom shiny.express import input, render, ui\n\nwith ui.layout_columns():\n    ui.h2(\"Spend Jeff's 2023 Earnings\")\n    ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20)  \n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"bg-gradient-orange-red\",\n    ):\n        \"Save\"\n\n        @render.ui  \n        def save():  \n            return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n        \"Donate\"\n\n        @render.ui  \n        def donate():  \n            return f\"${input.pct() / 100 * 70:.1f} Billion\"  ",
      "import faicons\nfrom shiny.express import input, render, ui\n\nwith ui.layout_columns():\n    ui.h2(\"Spend Jeff's 2023 Earnings\")\n    ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20)  \n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n        theme=\"bg-gradient-orange-red\",\n    ):\n        \"Save\"\n\n        @render.ui  \n        def save():  \n            return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    with ui.value_box(\n        showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n        \"Donate\"\n\n        @render.ui  \n        def donate():  \n            return f\"${input.pct() / 100 * 70:.1f} Billion\"  ",
      "import faicons\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.h2(\"Spend Jeff's 2023 Earnings\"),\n        ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20),  \n        ui.value_box(\n            title=\"Save\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            value=ui.output_ui(\"save\"),  \n            theme=\"bg-gradient-orange-red\",\n        ),\n        ui.value_box(\n            title=\"Donate\",\n            showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n            value=ui.output_ui(\"donate\"),  \n            theme=\"bg-gradient-blue-purple\",\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @render.text  \n    def save():  \n        return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    @render.text  \n    def donate():  \n        return f\"${input.pct() / 100 * 70:.1f} Billion\"  \n\napp = App(app_ui, server)",
      "import faicons\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_columns(\n        ui.h2(\"Spend Jeff's 2023 Earnings\"),\n        ui.input_slider(\"pct\", \"Percent of $70 Billion to donate\", 0, 100, 20),  \n        ui.value_box(\n            title=\"Save\",\n            showcase=faicons.icon_svg(\"piggy-bank\", width=\"50px\"),\n            value=ui.output_ui(\"save\"),  \n            theme=\"bg-gradient-orange-red\",\n        ),\n        ui.value_box(\n            title=\"Donate\",\n            showcase=faicons.icon_svg(\"hand-holding-dollar\", width=\"50px\"),\n            value=ui.output_ui(\"donate\"),  \n            theme=\"bg-gradient-blue-purple\",\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @render.text  \n    def save():  \n        return f\"${(1 - input.pct() / 100) * 70:.1f} Billion\"  \n\n    @render.text  \n    def donate():  \n        return f\"${input.pct() / 100 * 70:.1f} Billion\"  \n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 250\n\n# ruff: noqa\n## file: app.py\n# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny import App, ui\n\nappdir = Path(__file__).parent\n\napp_ui = ui.page_fixed(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.value_box(\n        \"Total Sales in Q2\",\n        \"$2.45M\",\n        showcase=sw.output_widget(\"sparkline\"),\n        showcase_layout=\"bottom\",\n    ),\n    fillable_mobile=True,\n)\n\ndef server(input, output, session):\n    @sw.render_widget\n    def sparkline():\n        economics = pd.read_csv(appdir / \"economics.csv\")\n        fig = px.line(economics, x=\"date\", y=\"psavert\")\n        fig.update_traces(\n            line_color=\"#406EF1\",\n            line_width=1,\n            fill=\"tozeroy\",\n            fillcolor=\"rgba(64,110,241,0.2)\",\n            hoverinfo=\"y\",\n        )\n        fig.update_xaxes(visible=False, showgrid=False)\n        fig.update_yaxes(visible=False, showgrid=False)\n        fig.update_layout(\n            height=100,\n            hovermode=\"x\",\n            margin=dict(t=0, r=0, l=0, b=0),\n            plot_bgcolor=\"rgba(0,0,0,0)\",\n            paper_bgcolor=\"rgba(0,0,0,0)\",\n        )\n        return fig\n\napp = App(app_ui, server)\n\n## file: economics.csv\ndate,pce,pop,psavert,uempmed,unemploy\n2000-01-01,6535.3,280976,5.4,5.8,5708\n2000-02-01,6619.7,281190,4.8,6.1,5858\n2000-03-01,6685.8,281409,4.5,6,5733\n2000-04-01,6671.1,281653,5,6.1,5481\n2000-05-01,6707.6,281877,4.9,5.8,5758\n2000-06-01,6743.9,282126,4.9,5.7,5651\n2000-07-01,6764.1,282385,5.2,6,5747\n2000-08-01,6799.1,282653,5.2,6.3,5853\n2000-09-01,6882.9,282932,4.5,5.2,5625\n2000-10-01,6888.2,283201,4.6,6.1,5534\n2000-11-01,6902.4,283453,4.5,6.1,5639\n2000-12-01,6945.7,283696,4.2,6,5634\n2001-01-01,6977,283920,4.8,5.8,6023\n2001-02-01,6995.8,284137,4.9,6.1,6089\n2001-03-01,6987.9,284350,5.3,6.6,6141\n2001-04-01,7001.2,284581,5,5.9,6271\n2001-05-01,7047.1,284810,4.5,6.3,6226\n2001-06-01,7060.7,285062,4.5,6,6484\n2001-07-01,7072.2,285309,5.6,6.8,6583\n2001-08-01,7108.9,285570,6.8,6.9,7042\n2001-09-01,7012.8,285843,7,7.2,7142\n2001-10-01,7208.4,286098,3.4,7.3,7694\n2001-11-01,7167.9,286341,4.1,7.7,8003\n2001-12-01,7147.7,286570,4.5,8.2,8258\n2002-01-01,7174.3,286788,6.1,8.4,8182\n2002-02-01,7218.3,286994,5.8,8.3,8215\n2002-03-01,7237.2,287190,5.9,8.4,8304\n2002-04-01,7305.4,287397,5.8,8.9,8599\n2002-05-01,7282.7,287623,6.5,9.5,8399\n2002-06-01,7318.2,287864,6.4,11,8393\n2002-07-01,7380.4,288105,5.5,8.9,8390\n2002-08-01,7401.5,288360,5.4,9,8304\n2002-09-01,7391,288618,5.7,9.5,8251\n2002-10-01,7430.7,288870,5.7,9.6,8307\n2002-11-01,7459.7,289106,5.7,9.3,8520\n2002-12-01,7512.8,289313,5.5,9.6,8640\n2003-01-01,7533.1,289518,5.5,9.6,8520\n2003-02-01,7535.9,289714,5.6,9.5,8618\n2003-03-01,7598.4,289911,5.3,9.7,8588\n2003-04-01,7621,290125,5.3,10.2,8842\n2003-05-01,7628.1,290346,5.8,9.9,8957\n2003-06-01,7678.6,290584,5.6,11.5,9266\n2003-07-01,7738.2,290820,6.3,10.3,9011\n2003-08-01,7834.5,291072,6,10.1,8896\n2003-09-01,7835,291321,5.2,10.2,8921\n2003-10-01,7845.7,291574,5.3,10.4,8732\n2003-11-01,7899.6,291807,5.4,10.3,8576\n2003-12-01,7929.2,292008,5.4,10.4,8317\n2004-01-01,7987.4,292192,5,10.6,8370\n2004-02-01,8019.8,292368,5,10.2,8167\n2004-03-01,8076,292561,4.9,10.2,8491\n2004-04-01,8088.6,292779,5.3,9.5,8170\n2004-05-01,8163.2,292997,5.3,9.9,8212\n2004-06-01,8147.2,293223,5.8,11,8286\n2004-07-01,8218.9,293463,5.3,8.9,8136\n2004-08-01,8253.1,293719,5.2,9.2,7990\n2004-09-01,8321.1,293971,4.6,9.6,7927\n2004-10-01,8374.6,294230,4.5,9.5,8061\n2004-11-01,8420.6,294466,4.1,9.7,7932\n2004-12-01,8481.5,294694,6.9,9.5,7934\n2005-01-01,8470.2,294914,3.7,9.4,7784\n2005-02-01,8529.2,295105,3.4,9.2,7980\n2005-03-01,8569.5,295287,3.6,9.3,7737\n2005-04-01,8645.6,295490,3.1,9,7672\n2005-05-01,8643.9,295704,3.5,9.1,7651\n2005-06-01,8724.8,295936,2.9,9,7524\n2005-07-01,8829.5,296186,2.2,8.8,7406\n2005-08-01,8832.4,296440,2.7,9.2,7345\n2005-09-01,8885.8,296707,2.7,8.4,7553\n2005-10-01,8926.6,296972,3.1,8.6,7453\n2005-11-01,8938.5,297207,3.5,8.5,7566\n2005-12-01,8969.6,297431,3.7,8.7,7279\n2006-01-01,9059.8,297647,4.2,8.6,7064\n2006-02-01,9090.1,297854,4.2,9.1,7184\n2006-03-01,9122.1,298060,4.2,8.7,7072\n2006-04-01,9174.8,298281,4,8.4,7120\n2006-05-01,9215.1,298496,3.8,8.5,6980\n2006-06-01,9240.8,298739,4,7.3,7001\n2006-07-01,9322.6,298996,3.4,8,7175\n2006-08-01,9321.8,299263,3.6,8.4,7091\n2006-09-01,9354.7,299554,3.6,8,6847\n2006-10-01,9373.2,299835,3.6,7.9,6727\n2006-11-01,9380.2,300094,3.9,8.3,6872\n2006-12-01,9469,300340,3.7,7.5,6762\n2007-01-01,9516.3,300574,3.7,8.3,7116\n2007-02-01,9546.8,300802,4.1,8.5,6927\n2007-03-01,9585.1,301021,4.4,9.1,6731\n2007-04-01,9615.7,301254,4.2,8.6,6850\n2007-05-01,9651.3,301483,4,8.2,6766\n2007-06-01,9667.3,301739,3.8,7.7,6979\n2007-07-01,9709.6,302004,3.7,8.7,7149\n2007-08-01,9753.9,302267,3.4,8.8,7067\n2007-09-01,9797.9,302546,3.5,8.7,7170\n2007-10-01,9827,302807,3.4,8.4,7237\n2007-11-01,9897.8,303054,3.1,8.6,7240\n2007-12-01,9908.4,303287,3.6,8.4,7645\n2008-01-01,9930,303506,3.7,9,7685\n2008-02-01,9913.4,303711,4.1,8.7,7497\n2008-03-01,9959.4,303907,4,8.7,7822\n2008-04-01,9996.8,304117,3.4,9.4,7637\n2008-05-01,10053.8,304323,7.8,7.9,8395\n2008-06-01,10107.9,304556,5.5,9,8575\n2008-07-01,10104.7,304798,4.4,9.7,8937\n2008-08-01,10094.7,305045,3.8,9.7,9438\n2008-09-01,10043.5,305309,4.7,10.2,9494\n2008-10-01,9960.3,305554,5.5,10.4,10074\n2008-11-01,9820.8,305786,6.4,9.8,10538\n2008-12-01,9730.7,306004,6.4,10.5,11286\n2009-01-01,9783.8,306208,6.2,10.7,12058\n2009-02-01,9766,306402,5.5,11.7,12898\n2009-03-01,9718.5,306588,5.9,12.3,13426\n2009-04-01,9724.8,306787,6.8,13.1,13853\n2009-05-01,9748.9,306984,8.2,14.2,14499\n2009-06-01,9806.9,307206,6.7,17.2,14707\n2009-07-01,9841.7,307439,6,16,14601\n2009-08-01,9961,307685,4.9,16.3,14814\n2009-09-01,9883.4,307946,5.9,17.8,15009\n2009-10-01,9931.9,308189,5.4,18.9,15352\n2009-11-01,9940.5,308418,5.9,19.8,15219\n2009-12-01,9998.9,308633,5.9,20.1,15098\n2010-01-01,10001.8,308833,6.1,20,15046\n2010-02-01,10030.6,309027,5.8,19.9,15113\n2010-03-01,10089.1,309212,5.7,20.4,15202\n2010-04-01,10112.9,309191.211,6.4,22.1,15325\n2010-05-01,10131,309369.053,7,22.3,14849\n2010-06-01,10151.4,309548.502,6.9,25.2,14474\n2010-07-01,10184.7,309745.698,6.8,22.3,14512\n2010-08-01,10228.2,309957.775,6.9,21,14648\n2010-09-01,10249,310176.466,6.7,20.3,14579\n2010-10-01,10304.7,310399.958,6.6,21.2,14516\n2010-11-01,10354.7,310595.764,6.6,21,15081\n2010-12-01,10392.1,310781.705,7.1,21.9,14348\n2011-01-01,10435.5,310960.74,7.4,21.5,14013\n2011-02-01,10470.1,311113.376,7.6,21.1,13820\n2011-03-01,10550.5,311265.404,7,21.5,13737\n2011-04-01,10587.6,311436.238,6.9,20.9,13957\n2011-05-01,10612,311607.08,6.9,21.6,13855\n2011-06-01,10636.8,311791.223,7.2,22.4,13962\n2011-07-01,10677.5,311997.049,7.3,22,13763\n2011-08-01,10700.6,312205.367,7.2,22.4,13818\n2011-09-01,10738.1,312429.118,6.8,22,13948\n2011-10-01,10753.1,312644.159,6.8,20.6,13594\n2011-11-01,10759.5,312829.523,7,20.8,13302\n2011-12-01,10772.2,313009.712,7.8,20.5,13093\n2012-01-01,10862.1,313183.179,8,20.8,12797\n2012-02-01,10953.5,313338.977,8,19.7,12813\n2012-03-01,10951.8,313499.369,8.5,19.2,12713\n2012-04-01,10979.7,313667.127,8.7,19.1,12646\n2012-05-01,10968.6,313830.53,8.8,19.9,12660\n2012-06-01,10946.3,314017.594,9.1,20.4,12692\n2012-07-01,10977.2,314210.786,8.2,17.5,12656\n2012-08-01,11004.1,314422.341,8,18.4,12471\n2012-09-01,11061.5,314646.749,8.2,18.8,12115\n2012-10-01,11099.8,314853.978,8.8,19.9,12124\n2012-11-01,11136.8,315053.863,9.7,18.6,12005\n2012-12-01,11140.5,315232.752,12,17.7,12298\n2013-01-01,11202.8,315389.595,6.3,15.8,12471\n2013-02-01,11239.6,315520.143,5.8,17.2,11950\n2013-03-01,11227.1,315662.224,5.9,17.6,11689\n2013-04-01,11205.4,315817.855,6.4,17.1,11760\n2013-05-01,11244.6,315983.654,6.7,17.1,11654\n2013-06-01,11268.8,316171.042,6.8,17,11751\n2013-07-01,11296.7,316358.778,6.6,16.2,11335\n2013-08-01,11329.2,316580.327,6.7,16.5,11279\n2013-09-01,11366.9,316806.125,6.8,16.5,11270\n2013-10-01,11419.8,317022.27,6.3,16.3,11136\n2013-11-01,11487.6,317228.026,6.2,17.1,10787\n2013-12-01,11517.9,317411.551,6.4,17.3,10404\n2014-01-01,11512.5,317593.923,7.1,15.4,10202\n2014-02-01,11566.2,317753.883,7.3,15.9,10349\n2014-03-01,11643,317917.203,7.4,15.8,10380\n2014-04-01,11702.6,318089.218,7.4,15.7,9702\n2014-05-01,11748.4,318269.505,7.4,14.6,9859\n2014-06-01,11817,318464.152,7.4,13.8,9460\n2014-07-01,11860.5,318662.368,7.5,13.1,9608\n2014-08-01,11944.3,318893.786,7.2,12.9,9599\n2014-09-01,11957.4,319125.296,7.4,13.4,9262\n2014-10-01,12023,319353.734,7.2,13.6,8990\n2014-11-01,12051.4,319564.209,7.3,13,9090\n2014-12-01,12062,319746.157,7.6,12.9,8717\n2015-01-01,12046,319928.646,7.7,13.2,8903\n2015-02-01,12082.4,320074.511,7.9,12.9,8610\n2015-03-01,12158.3,320230.786,7.4,12,8504\n2015-04-01,12193.8,320402.295,7.6,11.5,8526\n\n## file: styles.css\nbody {\n  padding-top: 1rem;\n}\n\n.bslib-value-box .plotly .modebar-container {\n  display: none;\n}\n\n.shiny-ipywidget-output {\n  display: flex;\n  flex: 1 1 auto !important;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * > * > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 250\n\n# ruff: noqa\n## file: app.py\n# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny import App, ui\n\nappdir = Path(__file__).parent\n\napp_ui = ui.page_fixed(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.value_box(\n        \"Total Sales in Q2\",\n        \"$2.45M\",\n        showcase=sw.output_widget(\"sparkline\"),\n        showcase_layout=\"bottom\",\n    ),\n    fillable_mobile=True,\n)\n\ndef server(input, output, session):\n    @sw.render_widget\n    def sparkline():\n        economics = pd.read_csv(appdir / \"economics.csv\")\n        fig = px.line(economics, x=\"date\", y=\"psavert\")\n        fig.update_traces(\n            line_color=\"#406EF1\",\n            line_width=1,\n            fill=\"tozeroy\",\n            fillcolor=\"rgba(64,110,241,0.2)\",\n            hoverinfo=\"y\",\n        )\n        fig.update_xaxes(visible=False, showgrid=False)\n        fig.update_yaxes(visible=False, showgrid=False)\n        fig.update_layout(\n            height=100,\n            hovermode=\"x\",\n            margin=dict(t=0, r=0, l=0, b=0),\n            plot_bgcolor=\"rgba(0,0,0,0)\",\n            paper_bgcolor=\"rgba(0,0,0,0)\",\n        )\n        return fig\n\napp = App(app_ui, server)\n\n## file: economics.csv\ndate,pce,pop,psavert,uempmed,unemploy\n2000-01-01,6535.3,280976,5.4,5.8,5708\n2000-02-01,6619.7,281190,4.8,6.1,5858\n2000-03-01,6685.8,281409,4.5,6,5733\n2000-04-01,6671.1,281653,5,6.1,5481\n2000-05-01,6707.6,281877,4.9,5.8,5758\n2000-06-01,6743.9,282126,4.9,5.7,5651\n2000-07-01,6764.1,282385,5.2,6,5747\n2000-08-01,6799.1,282653,5.2,6.3,5853\n2000-09-01,6882.9,282932,4.5,5.2,5625\n2000-10-01,6888.2,283201,4.6,6.1,5534\n2000-11-01,6902.4,283453,4.5,6.1,5639\n2000-12-01,6945.7,283696,4.2,6,5634\n2001-01-01,6977,283920,4.8,5.8,6023\n2001-02-01,6995.8,284137,4.9,6.1,6089\n2001-03-01,6987.9,284350,5.3,6.6,6141\n2001-04-01,7001.2,284581,5,5.9,6271\n2001-05-01,7047.1,284810,4.5,6.3,6226\n2001-06-01,7060.7,285062,4.5,6,6484\n2001-07-01,7072.2,285309,5.6,6.8,6583\n2001-08-01,7108.9,285570,6.8,6.9,7042\n2001-09-01,7012.8,285843,7,7.2,7142\n2001-10-01,7208.4,286098,3.4,7.3,7694\n2001-11-01,7167.9,286341,4.1,7.7,8003\n2001-12-01,7147.7,286570,4.5,8.2,8258\n2002-01-01,7174.3,286788,6.1,8.4,8182\n2002-02-01,7218.3,286994,5.8,8.3,8215\n2002-03-01,7237.2,287190,5.9,8.4,8304\n2002-04-01,7305.4,287397,5.8,8.9,8599\n2002-05-01,7282.7,287623,6.5,9.5,8399\n2002-06-01,7318.2,287864,6.4,11,8393\n2002-07-01,7380.4,288105,5.5,8.9,8390\n2002-08-01,7401.5,288360,5.4,9,8304\n2002-09-01,7391,288618,5.7,9.5,8251\n2002-10-01,7430.7,288870,5.7,9.6,8307\n2002-11-01,7459.7,289106,5.7,9.3,8520\n2002-12-01,7512.8,289313,5.5,9.6,8640\n2003-01-01,7533.1,289518,5.5,9.6,8520\n2003-02-01,7535.9,289714,5.6,9.5,8618\n2003-03-01,7598.4,289911,5.3,9.7,8588\n2003-04-01,7621,290125,5.3,10.2,8842\n2003-05-01,7628.1,290346,5.8,9.9,8957\n2003-06-01,7678.6,290584,5.6,11.5,9266\n2003-07-01,7738.2,290820,6.3,10.3,9011\n2003-08-01,7834.5,291072,6,10.1,8896\n2003-09-01,7835,291321,5.2,10.2,8921\n2003-10-01,7845.7,291574,5.3,10.4,8732\n2003-11-01,7899.6,291807,5.4,10.3,8576\n2003-12-01,7929.2,292008,5.4,10.4,8317\n2004-01-01,7987.4,292192,5,10.6,8370\n2004-02-01,8019.8,292368,5,10.2,8167\n2004-03-01,8076,292561,4.9,10.2,8491\n2004-04-01,8088.6,292779,5.3,9.5,8170\n2004-05-01,8163.2,292997,5.3,9.9,8212\n2004-06-01,8147.2,293223,5.8,11,8286\n2004-07-01,8218.9,293463,5.3,8.9,8136\n2004-08-01,8253.1,293719,5.2,9.2,7990\n2004-09-01,8321.1,293971,4.6,9.6,7927\n2004-10-01,8374.6,294230,4.5,9.5,8061\n2004-11-01,8420.6,294466,4.1,9.7,7932\n2004-12-01,8481.5,294694,6.9,9.5,7934\n2005-01-01,8470.2,294914,3.7,9.4,7784\n2005-02-01,8529.2,295105,3.4,9.2,7980\n2005-03-01,8569.5,295287,3.6,9.3,7737\n2005-04-01,8645.6,295490,3.1,9,7672\n2005-05-01,8643.9,295704,3.5,9.1,7651\n2005-06-01,8724.8,295936,2.9,9,7524\n2005-07-01,8829.5,296186,2.2,8.8,7406\n2005-08-01,8832.4,296440,2.7,9.2,7345\n2005-09-01,8885.8,296707,2.7,8.4,7553\n2005-10-01,8926.6,296972,3.1,8.6,7453\n2005-11-01,8938.5,297207,3.5,8.5,7566\n2005-12-01,8969.6,297431,3.7,8.7,7279\n2006-01-01,9059.8,297647,4.2,8.6,7064\n2006-02-01,9090.1,297854,4.2,9.1,7184\n2006-03-01,9122.1,298060,4.2,8.7,7072\n2006-04-01,9174.8,298281,4,8.4,7120\n2006-05-01,9215.1,298496,3.8,8.5,6980\n2006-06-01,9240.8,298739,4,7.3,7001\n2006-07-01,9322.6,298996,3.4,8,7175\n2006-08-01,9321.8,299263,3.6,8.4,7091\n2006-09-01,9354.7,299554,3.6,8,6847\n2006-10-01,9373.2,299835,3.6,7.9,6727\n2006-11-01,9380.2,300094,3.9,8.3,6872\n2006-12-01,9469,300340,3.7,7.5,6762\n2007-01-01,9516.3,300574,3.7,8.3,7116\n2007-02-01,9546.8,300802,4.1,8.5,6927\n2007-03-01,9585.1,301021,4.4,9.1,6731\n2007-04-01,9615.7,301254,4.2,8.6,6850\n2007-05-01,9651.3,301483,4,8.2,6766\n2007-06-01,9667.3,301739,3.8,7.7,6979\n2007-07-01,9709.6,302004,3.7,8.7,7149\n2007-08-01,9753.9,302267,3.4,8.8,7067\n2007-09-01,9797.9,302546,3.5,8.7,7170\n2007-10-01,9827,302807,3.4,8.4,7237\n2007-11-01,9897.8,303054,3.1,8.6,7240\n2007-12-01,9908.4,303287,3.6,8.4,7645\n2008-01-01,9930,303506,3.7,9,7685\n2008-02-01,9913.4,303711,4.1,8.7,7497\n2008-03-01,9959.4,303907,4,8.7,7822\n2008-04-01,9996.8,304117,3.4,9.4,7637\n2008-05-01,10053.8,304323,7.8,7.9,8395\n2008-06-01,10107.9,304556,5.5,9,8575\n2008-07-01,10104.7,304798,4.4,9.7,8937\n2008-08-01,10094.7,305045,3.8,9.7,9438\n2008-09-01,10043.5,305309,4.7,10.2,9494\n2008-10-01,9960.3,305554,5.5,10.4,10074\n2008-11-01,9820.8,305786,6.4,9.8,10538\n2008-12-01,9730.7,306004,6.4,10.5,11286\n2009-01-01,9783.8,306208,6.2,10.7,12058\n2009-02-01,9766,306402,5.5,11.7,12898\n2009-03-01,9718.5,306588,5.9,12.3,13426\n2009-04-01,9724.8,306787,6.8,13.1,13853\n2009-05-01,9748.9,306984,8.2,14.2,14499\n2009-06-01,9806.9,307206,6.7,17.2,14707\n2009-07-01,9841.7,307439,6,16,14601\n2009-08-01,9961,307685,4.9,16.3,14814\n2009-09-01,9883.4,307946,5.9,17.8,15009\n2009-10-01,9931.9,308189,5.4,18.9,15352\n2009-11-01,9940.5,308418,5.9,19.8,15219\n2009-12-01,9998.9,308633,5.9,20.1,15098\n2010-01-01,10001.8,308833,6.1,20,15046\n2010-02-01,10030.6,309027,5.8,19.9,15113\n2010-03-01,10089.1,309212,5.7,20.4,15202\n2010-04-01,10112.9,309191.211,6.4,22.1,15325\n2010-05-01,10131,309369.053,7,22.3,14849\n2010-06-01,10151.4,309548.502,6.9,25.2,14474\n2010-07-01,10184.7,309745.698,6.8,22.3,14512\n2010-08-01,10228.2,309957.775,6.9,21,14648\n2010-09-01,10249,310176.466,6.7,20.3,14579\n2010-10-01,10304.7,310399.958,6.6,21.2,14516\n2010-11-01,10354.7,310595.764,6.6,21,15081\n2010-12-01,10392.1,310781.705,7.1,21.9,14348\n2011-01-01,10435.5,310960.74,7.4,21.5,14013\n2011-02-01,10470.1,311113.376,7.6,21.1,13820\n2011-03-01,10550.5,311265.404,7,21.5,13737\n2011-04-01,10587.6,311436.238,6.9,20.9,13957\n2011-05-01,10612,311607.08,6.9,21.6,13855\n2011-06-01,10636.8,311791.223,7.2,22.4,13962\n2011-07-01,10677.5,311997.049,7.3,22,13763\n2011-08-01,10700.6,312205.367,7.2,22.4,13818\n2011-09-01,10738.1,312429.118,6.8,22,13948\n2011-10-01,10753.1,312644.159,6.8,20.6,13594\n2011-11-01,10759.5,312829.523,7,20.8,13302\n2011-12-01,10772.2,313009.712,7.8,20.5,13093\n2012-01-01,10862.1,313183.179,8,20.8,12797\n2012-02-01,10953.5,313338.977,8,19.7,12813\n2012-03-01,10951.8,313499.369,8.5,19.2,12713\n2012-04-01,10979.7,313667.127,8.7,19.1,12646\n2012-05-01,10968.6,313830.53,8.8,19.9,12660\n2012-06-01,10946.3,314017.594,9.1,20.4,12692\n2012-07-01,10977.2,314210.786,8.2,17.5,12656\n2012-08-01,11004.1,314422.341,8,18.4,12471\n2012-09-01,11061.5,314646.749,8.2,18.8,12115\n2012-10-01,11099.8,314853.978,8.8,19.9,12124\n2012-11-01,11136.8,315053.863,9.7,18.6,12005\n2012-12-01,11140.5,315232.752,12,17.7,12298\n2013-01-01,11202.8,315389.595,6.3,15.8,12471\n2013-02-01,11239.6,315520.143,5.8,17.2,11950\n2013-03-01,11227.1,315662.224,5.9,17.6,11689\n2013-04-01,11205.4,315817.855,6.4,17.1,11760\n2013-05-01,11244.6,315983.654,6.7,17.1,11654\n2013-06-01,11268.8,316171.042,6.8,17,11751\n2013-07-01,11296.7,316358.778,6.6,16.2,11335\n2013-08-01,11329.2,316580.327,6.7,16.5,11279\n2013-09-01,11366.9,316806.125,6.8,16.5,11270\n2013-10-01,11419.8,317022.27,6.3,16.3,11136\n2013-11-01,11487.6,317228.026,6.2,17.1,10787\n2013-12-01,11517.9,317411.551,6.4,17.3,10404\n2014-01-01,11512.5,317593.923,7.1,15.4,10202\n2014-02-01,11566.2,317753.883,7.3,15.9,10349\n2014-03-01,11643,317917.203,7.4,15.8,10380\n2014-04-01,11702.6,318089.218,7.4,15.7,9702\n2014-05-01,11748.4,318269.505,7.4,14.6,9859\n2014-06-01,11817,318464.152,7.4,13.8,9460\n2014-07-01,11860.5,318662.368,7.5,13.1,9608\n2014-08-01,11944.3,318893.786,7.2,12.9,9599\n2014-09-01,11957.4,319125.296,7.4,13.4,9262\n2014-10-01,12023,319353.734,7.2,13.6,8990\n2014-11-01,12051.4,319564.209,7.3,13,9090\n2014-12-01,12062,319746.157,7.6,12.9,8717\n2015-01-01,12046,319928.646,7.7,13.2,8903\n2015-02-01,12082.4,320074.511,7.9,12.9,8610\n2015-03-01,12158.3,320230.786,7.4,12,8504\n2015-04-01,12193.8,320402.295,7.6,11.5,8526\n\n## file: styles.css\nbody {\n  padding-top: 1rem;\n}\n\n.bslib-value-box .plotly .modebar-container {\n  display: none;\n}\n\n.shiny-ipywidget-output {\n  display: flex;\n  flex: 1 1 auto !important;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}\n\n.shiny-ipywidget-output > * > * > * {\n  display: flex;\n  flex: 1 1 auto;\n  width: 100%;\n}",
      "# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny.express import ui\n\nappdir = Path(__file__).parent\n\nui.include_css(appdir / \"styles.css\")\n\nwith ui.value_box(showcase=sw.output_widget(\"sparkline\"), showcase_layout=\"bottom\"):\n    \"Total Sales in Q2\"\n    \"$2.45M\"\n\n    with ui.hold():\n\n        @sw.render_widget\n        def sparkline():\n            economics = pd.read_csv(appdir / \"economics.csv\")\n            fig = px.line(economics, x=\"date\", y=\"psavert\")\n            fig.update_traces(\n                line_color=\"#406EF1\",\n                line_width=1,\n                fill=\"tozeroy\",\n                fillcolor=\"rgba(64,110,241,0.2)\",\n                hoverinfo=\"y\",\n            )\n            fig.update_xaxes(visible=False, showgrid=False)\n            fig.update_yaxes(visible=False, showgrid=False)\n            fig.update_layout(\n                height=100,\n                hovermode=\"x\",\n                margin=dict(t=0, r=0, l=0, b=0),\n                plot_bgcolor=\"rgba(0,0,0,0)\",\n                paper_bgcolor=\"rgba(0,0,0,0)\",\n            )\n            return fig",
      "# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny.express import ui\n\nappdir = Path(__file__).parent\n\nui.include_css(appdir / \"styles.css\")\n\nwith ui.value_box(showcase=sw.output_widget(\"sparkline\"), showcase_layout=\"bottom\"):\n    \"Total Sales in Q2\"\n    \"$2.45M\"\n\n    with ui.hold():\n\n        @sw.render_widget\n        def sparkline():\n            economics = pd.read_csv(appdir / \"economics.csv\")\n            fig = px.line(economics, x=\"date\", y=\"psavert\")\n            fig.update_traces(\n                line_color=\"#406EF1\",\n                line_width=1,\n                fill=\"tozeroy\",\n                fillcolor=\"rgba(64,110,241,0.2)\",\n                hoverinfo=\"y\",\n            )\n            fig.update_xaxes(visible=False, showgrid=False)\n            fig.update_yaxes(visible=False, showgrid=False)\n            fig.update_layout(\n                height=100,\n                hovermode=\"x\",\n                margin=dict(t=0, r=0, l=0, b=0),\n                plot_bgcolor=\"rgba(0,0,0,0)\",\n                paper_bgcolor=\"rgba(0,0,0,0)\",\n            )\n            return fig",
      "# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny import App, ui\n\nappdir = Path(__file__).parent\n\napp_ui = ui.page_fixed(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.value_box(\n        \"Total Sales in Q2\",\n        \"$2.45M\",\n        showcase=sw.output_widget(\"sparkline\"),\n        showcase_layout=\"bottom\",\n    ),\n    fillable_mobile=True,\n)\n\ndef server(input, output, session):\n    @sw.render_widget\n    def sparkline():\n        economics = pd.read_csv(appdir / \"economics.csv\")\n        fig = px.line(economics, x=\"date\", y=\"psavert\")\n        fig.update_traces(\n            line_color=\"#406EF1\",\n            line_width=1,\n            fill=\"tozeroy\",\n            fillcolor=\"rgba(64,110,241,0.2)\",\n            hoverinfo=\"y\",\n        )\n        fig.update_xaxes(visible=False, showgrid=False)\n        fig.update_yaxes(visible=False, showgrid=False)\n        fig.update_layout(\n            height=100,\n            hovermode=\"x\",\n            margin=dict(t=0, r=0, l=0, b=0),\n            plot_bgcolor=\"rgba(0,0,0,0)\",\n            paper_bgcolor=\"rgba(0,0,0,0)\",\n        )\n        return fig\n\napp = App(app_ui, server)",
      "# Open in shinylive to see additional files\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport plotly.express as px\nimport shinywidgets as sw\nfrom shiny import App, ui\n\nappdir = Path(__file__).parent\n\napp_ui = ui.page_fixed(\n    ui.include_css(appdir / \"styles.css\"),\n    ui.value_box(\n        \"Total Sales in Q2\",\n        \"$2.45M\",\n        showcase=sw.output_widget(\"sparkline\"),\n        showcase_layout=\"bottom\",\n    ),\n    fillable_mobile=True,\n)\n\ndef server(input, output, session):\n    @sw.render_widget\n    def sparkline():\n        economics = pd.read_csv(appdir / \"economics.csv\")\n        fig = px.line(economics, x=\"date\", y=\"psavert\")\n        fig.update_traces(\n            line_color=\"#406EF1\",\n            line_width=1,\n            fill=\"tozeroy\",\n            fillcolor=\"rgba(64,110,241,0.2)\",\n            hoverinfo=\"y\",\n        )\n        fig.update_xaxes(visible=False, showgrid=False)\n        fig.update_yaxes(visible=False, showgrid=False)\n        fig.update_layout(\n            height=100,\n            hovermode=\"x\",\n            margin=dict(t=0, r=0, l=0, b=0),\n            plot_bgcolor=\"rgba(0,0,0,0)\",\n            paper_bgcolor=\"rgba(0,0,0,0)\",\n        )\n        return fig\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "templates_nba-dashboard",
    "url": "templates/nba-dashboard/",
    "title": "Shiny for Python ‚Äì NBA player career comparisons",
    "description": "Use the nba-dashboard template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nNBA player career comparisons\n\n- Express\n- Core\n\nSearch for NBA players and compare their career statistics. The app uses the nba_api package to fetch player statistics and the plotly package to create interactive plots. Note that in addition to searching for players by name, you can also click on the rug plot to select players. This provides a useful way to query player(s) based on a specific statistic, then compare their overall career statistics.\n\nComponents:\n\n- Select input\n- Slider input\n- Plotly\n\nLayouts:\n\n- Sidebar\n- Grid layout\n- Cards\n\nPackages:\n\n- pandas\n- numpy\n- nba_api\n- plotly\n- shinywidgets\n- scipy\n\n",
    "code_examples": [
      "shiny create --template nba-dashboard --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template nba-dashboard --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template nba-dashboard --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template nba-dashboard --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_model-scoring",
    "url": "templates/model-scoring/",
    "title": "Shiny for Python ‚Äì Model scoring",
    "description": "Use the model-scoring template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nModel scoring\n\n- Core\n\nUse a combination of scikit-learn and plotnine to visualize model diagnostics like ROC and precision-recall curves. Shiny‚Äôs reactive programming model makes it easy and performant to update those outputs in response to user input like specific accounts or time periods.\n\nComponents:\n\n- Select input\n- Value box\n- Plot output\n- Data grid output\n\nLayouts:\n\n- Navbar\n- Sidebar\n- Tabs\n- Grid layout\n- Cards\n\nPackages:\n\n- numpy\n- pandas\n- plotnine\n- scikit-learn\n\n",
    "code_examples": [
      "shiny create --template model-scoring --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template model-scoring --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_map-distance",
    "url": "templates/map-distance/",
    "title": "Shiny for Python ‚Äì Location distance calculator",
    "description": "Use the map-distance template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nLocation distance calculator\n\n- Express\n- Core\n\nRun queries on an SQL database and view the results in a data grid. This app demonstrates how to initialize, populate, and connect to an SQL database using the duckdb package. It also shows how to run SQL queries and display results in an interactive data grid. Note also the use of Shiny modules to encapsulate and reuse the logic behind each card.\n\nComponents:\n\n- Select input\n- Value box\n- Map\n\nLayouts:\n\n- Sidebar\n- Grid layout\n- Cards\n\nPackages:\n\n- faicons\n- geopy\n- ipyleaflet\n- requests\n- shinywidgets\n\n",
    "code_examples": [
      "shiny create --template map-distance --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template map-distance --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template map-distance --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template map-distance --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_database-explorer",
    "url": "templates/database-explorer/",
    "title": "Shiny for Python ‚Äì SQL database explorer",
    "description": "Use the database-explorer template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nSQL database explorer\n\n- Core\n\nRun queries on an SQL database and view the results in a data grid. This app demonstrates how to initialize, populate, and connect to an SQL database using the duckdb package. It also shows how to run SQL queries and display results in an interactive data grid. Note also the use of Shiny modules to encapsulate and reuse the logic behind each card.\n\nComponents:\n\n- Action button\n- Text area input\n- Data grid output\n\nLayouts:\n\n- Sidebar\n- Grid layout\n\nPackages:\n\n- duckdb\n- pandas\n\n",
    "code_examples": [
      "shiny create --template database-explorer --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template database-explorer --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_monitor-file",
    "url": "templates/monitor-file/",
    "title": "Shiny for Python ‚Äì Streaming file updates",
    "description": "Use the monitor-file template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nStreaming file updates\n\n- Express\n- Core\n\nEfficiently monitor a file for updates and visualize the data in real-time. In this case, we‚Äôre monitoring fake server logs, but you adapt this template to reactively read any file that updates over time. Note also that this app shows the entire log in a data grid, and the most recent log entry in value boxes.\n\nComponents:\n\n- Value box\n- Data grid output\n\nLayouts:\n\n- Grid layout\n- Cards\n\nPackages:\n\n- faicons\n- pandas\n\n",
    "code_examples": [
      "shiny create --template monitor-file --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template monitor-file --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template monitor-file --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template monitor-file --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_monitor-database",
    "url": "templates/monitor-database/",
    "title": "Shiny for Python ‚Äì Streaming database updates",
    "description": "Use the monitor-database template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nStreaming database updates\n\n- Core\n\nEfficiently monitor a database for updates and visualize the data in real-time. In this case, we‚Äôre monitoring an SQLite database with simulated model accuracy data, but the core logic can easily adapt to other databases and use cases. Note also that this template has:\n\n- A switch input to toggle the data update on and off (thanks to reactive isolation, this is easy!).\n- A dynamically updating plot and value box icons (when model accuracy gets above/below a certain threshold). And this all happens without any layout shifts!\n\n- And this all happens without any layout shifts!\n\nComponents:\n\n- Checkbox group input\n- Switch input\n- Value box\n- Plotly output\n\nLayouts:\n\n- Sidebar\n- Grid layout\n- Cards\n\nPackages:\n\n- faicons\n- numpy\n- pandas\n- plotly\n- shinywidgets\n- sqlite3\n\n",
    "code_examples": [
      "shiny create --template monitor-database --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template monitor-database --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_monitor-folder",
    "url": "templates/monitor-folder/",
    "title": "Shiny for Python ‚Äì Streaming folder updates",
    "description": "Use the monitor-folder template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nStreaming folder updates\n\n- Express\n- Core\n\nMonitor a folder for updates (e.g., adding a new file) and visualize the updates in real-time. To facilitate, this template makes a clever use of the watchfiles package and reactive file reading to trigger an update when the folder changes. To trigger a change, you can press the ‚Äú+‚Äù icon to add a new file to the folder, which will then be displayed in the table (listing the files name and their last modification time). Additionally, when a file is selected in this table, the contents are displayed and available for download.\n\nComponents:\n\n- Data grid output\n- Action button\n- Popover\n- Download link\n\nLayouts:\n\n- Grid layout\n- Cards\n\nPackages:\n\n- faicons\n- pandas\n- watchfiles\n\n",
    "code_examples": [
      "shiny create --template monitor-folder --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template monitor-folder --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template monitor-folder --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template monitor-folder --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_survey",
    "url": "templates/survey/",
    "title": "Shiny for Python ‚Äì Survey form",
    "description": "Use the survey template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nSurvey form\n\n- Express\n- Core\n\nA simple survey form with a few input fields that simply writes responses to a file and displays a confirmation message when submitted. In this example, we use the shiny_validate package for input validation, providing direct feedback when the user enters invalid responses.\n\nComponents:\n\n- Text input\n- Numeric input\n- Select input\n- Radio buttons\n\nLayouts:\n\n- Cards\n\nPackages:\n\n- pandas\n- shiny_validate\n\n",
    "code_examples": [
      "shiny create --template survey --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template survey --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template survey --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template survey --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "templates_survey-wizard",
    "url": "templates/survey-wizard/",
    "title": "Shiny for Python ‚Äì Survey wizard form",
    "description": "Use the survey-wizard template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nSurvey wizard form\n\n- Core\n\nA simple survey wizard that simply writes responses to a file and displays a confirmation message when submitted. In this example, we use the shiny_validate package for input validation, providing direct feedback when the user enters invalid responses. We also make clever use of navset_hidden() to show/hide different steps of the form via action buttons.\n\nComponents:\n\n- Text input\n- Numeric input\n- Action button\n\nLayouts:\n\n- Cards\n- Tabs\n\nPackages:\n\n- pandas\n- shiny_validate\n\n",
    "code_examples": [
      "shiny create --template survey-wizard --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template survey-wizard --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "api_express_express_ui_input_select_html",
    "url": "api/express/express.ui.input_select.html",
    "title": "express.ui.input_select ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_select\n\nexpress.ui.input_select\n\nCreate a select list that can be used to choose a single or multiple items from a list of values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\n\nThe values that should be initially selected, if any.\n\nIs selection of multiple items allowed?\n\nWhether to use selectize.js or not.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nNumber of items to show in the selection box; a larger number will result in a taller box. Normally, when multiple=False, a select input will be a drop-down list, but when size is set, it will be a box instead.\n\nReturns\n\nA UI element.\n\nNotes\n\nIf multiple=False, the server value is a string with the value of the selected item. If multiple=True, the server value is a tuple containing the values of the selected items. When multiple=True and nothing is selected, this value will be None.\n\nSee Also\n\n- input_selectize\n- update_select\n- input_radio_buttons\n- input_checkbox_group\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_select(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    selectize=False,\n    width=None,\n    size=None,\n    remove_button=None,\n    options=None,\n)",
      "express.ui.input_select(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    selectize=False,\n    width=None,\n    size=None,\n    remove_button=None,\n    options=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nui.input_select(\n    \"state\",\n    \"Choose a state:\",\n    {\n        \"East Coast\": {\"NY\": \"New York\", \"NJ\": \"New Jersey\", \"CT\": \"Connecticut\"},\n        \"West Coast\": {\"WA\": \"Washington\", \"OR\": \"Oregon\", \"CA\": \"California\"},\n        \"Midwest\": {\"MN\": \"Minnesota\", \"WI\": \"Wisconsin\", \"IA\": \"Iowa\"},\n    },\n)\n\n\n@render.text\ndef value():\n    return \"You choose: \" + str(input.state())\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_selectize_html",
    "url": "api/express/express.ui.input_selectize.html",
    "title": "express.ui.input_selectize ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_selectize\n\nexpress.ui.input_selectize\n\nCreate a select list that can be used to choose a single or multiple items from a list of values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\n\nThe values that should be initially selected, if any.\n\nIs selection of multiple items allowed?\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhether to add a remove button. This uses the clear_button and remove_button selectize plugins which can also be supplied as options. By default it will apply a remove button to multiple selections, but not single selections.\n\nA dictionary of options. See the documentation of selectize.js for possible options. If you want to pass a JavaScript function, wrap the string in ui.JS.\n\nReturns\n\nA UI element.\n\nNotes\n\nIf multiple=False, the server value is a string with the value of the selected item. If multiple=True, the server value is a tuple containing the values of the selected items. When multiple=True and nothing is selected, this value will be None.\n\nSee Also\n\n- input_select\n- input_radio_buttons\n- input_checkbox_group\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_selectize(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    width=None,\n    remove_button=None,\n    options=None,\n)",
      "express.ui.input_selectize(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    width=None,\n    remove_button=None,\n    options=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom html import escape  # noqa: F401\n\nfrom shiny.express import input, render, ui\n\nstates = {\n    \"East Coast\": {\"NY\": \"New York\", \"NJ\": \"New Jersey\", \"CT\": \"Connecticut\"},\n    \"West Coast\": {\"WA\": \"Washington\", \"OR\": \"Oregon\", \"CA\": \"California\"},\n    \"Midwest\": {\"MN\": \"Minnesota\", \"WI\": \"Wisconsin\", \"IA\": \"Iowa\"},\n}\n\nui.input_selectize(\n    \"state\",\n    \"Choose a state:\",\n    states,\n    multiple=True,\n)\n\n\n@render.text\ndef value():\n    return \"You choose: \" + str(input.state())\n\n\nui.input_selectize(\n    \"state2\",\n    \"Selectize Options\",\n    states,\n    multiple=True,\n    options=(\n        {\n            \"placeholder\": \"Enter text\",\n            \"render\": ui.js_eval(\n                '{option: function(item, escape) {return \"<div><strong>Select \" + escape(item.label) + \"</strong></div>\";}}'\n            ),\n            \"create\": True,\n        }\n    ),\n)\nui.input_selectize(\n    \"state3\",\n    \"Selectize plugins\",\n    states,\n    multiple=True,\n    options={\"plugins\": [\"clear_button\"]},\n)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_slider_html",
    "url": "api/express/express.ui.input_slider.html",
    "title": "express.ui.input_slider ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_slider\n\nexpress.ui.input_slider\n\nConstructs a slider widget to select a number, date, or date-time from a range.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nInitial value.\n\nInterval to use when stepping between min and max.\n\nFalse to hide tick marks, True to show them according to some simple heuristics.\n\nTrue to show simple animation controls with default settings; False not to; or a custom settings list, such as those created using AnimationOptions.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nSeparator between thousands places in numbers.\n\nA prefix string to put in front of the value.\n\nA suffix string to put after the value.\n\nOnly used if the slider values are date or datetime objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is ‚Äú%F‚Äù (like ‚Äú2015-07-01‚Äù), and for Datetimes, the default is ‚Äú%F %T‚Äù (like ‚Äú2015-07-01 15:32:10‚Äù).\n\nOnly used if the values are datetime objects. A string specifying the time zone offset for the displayed times, in the format ‚Äú+HHMM‚Äù or ‚Äú-HHMM‚Äù. If None (the default), times will be displayed in the browser‚Äôs time zone. The value ‚Äú+0000‚Äù will result in UTC time.\n\nThis option is used only if it is a range slider (with two values). If True (the default), the range can be dragged. In other words, the min and max can be dragged together. If False, the range cannot be dragged.\n\nReturns\n\nA UI element\n\nNotes\n\nA number, date, or date-time (depending on the class of value), or in the case of slider range, a tuple of two numbers/dates/date-times.\n\nSee Also\n\n- update_slider\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_slider(\n    id,\n    label,\n    min,\n    max,\n    value,\n    *,\n    step=None,\n    ticks=False,\n    animate=False,\n    width=None,\n    sep=',',\n    pre=None,\n    post=None,\n    time_format=None,\n    timezone=None,\n    drag_range=True,\n)",
      "express.ui.input_slider(\n    id,\n    label,\n    min,\n    max,\n    value,\n    *,\n    step=None,\n    ticks=False,\n    animate=False,\n    width=None,\n    sep=',',\n    pre=None,\n    post=None,\n    time_format=None,\n    timezone=None,\n    drag_range=True,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"obs\", \"Number of bins:\", min=10, max=100, value=30)\n\n\n@render.plot\ndef distPlot():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(437)\n\n    fig, ax = plt.subplots()\n    ax.hist(x, input.obs(), density=True)\n    return fig\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_dark_mode_html",
    "url": "api/express/express.ui.input_dark_mode.html",
    "title": "express.ui.input_dark_mode ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_dark_mode\n\nexpress.ui.input_dark_mode\n\nCreates a dark mode switch input that toggles the app between dark and light modes.\n\nParameters\n\nAn optional ID for the dark mode switch. When included, the current color mode is reported in the value of the input with this ID.\n\nThe initial mode of the dark mode switch. By default or when set to None, the user‚Äôs system settings for the preferred color scheme will be used. Otherwise, set to \"light\" or \"dark\" to force the initial mode.\n\nAdditional attributes to be added to the dark mode switch, such as class_ or style.\n\nReturns\n\nA dark mode toggle switch UI element.\n\nReferences\n\n- https://getbootstrap.com/docs/5.3/customize/color-modes\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_dark_mode(id=None, mode=None, **kwargs)",
      "express.ui.input_dark_mode(id=None, mode=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.page_opts(title=\"Shiny Dark Mode\", fillable=\"One\")\n\nwith ui.nav_panel(\"One\"):\n    with ui.layout_sidebar():\n        with ui.sidebar():\n            ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)\n\n        @render.plot(alt=\"A histogram\")\n        def plot() -> object:\n            np.random.seed(19680801)\n            x = 100 + 15 * np.random.randn(437)\n\n            fig, ax = plt.subplots()\n            ax.hist(x, input.n(), density=True)\n\n            # Theme the plot to match light/dark mode\n            fig.patch.set_facecolor(\"none\")\n            ax.set_facecolor(\"none\")\n\n            color_fg = \"black\" if input.mode() == \"light\" else \"silver\"\n            ax.tick_params(axis=\"both\", colors=color_fg)\n            ax.spines[\"bottom\"].set_color(color_fg)\n            ax.spines[\"top\"].set_color(color_fg)\n            ax.spines[\"left\"].set_color(color_fg)\n            ax.spines[\"right\"].set_color(color_fg)\n\n            return fig\n\n\nwith ui.nav_panel(\"Two\"):\n    with ui.layout_column_wrap():\n        with ui.card():\n            \"Second page content.\"\n\n        with ui.card():\n            ui.card_header(\"More content on the second page.\")\n            ui.input_action_button(\"make_light\", \"Switch to light mode\")\n            ui.input_action_button(\"make_dark\", \"Switch to dark mode\")\n\nui.nav_spacer()\nwith ui.nav_control():\n    ui.input_dark_mode(id=\"mode\")\n\n\n@reactive.effect\n@reactive.event(input.make_light)\ndef _():\n    ui.update_dark_mode(\"light\")\n\n\n@reactive.effect\n@reactive.event(input.make_dark)\ndef _():\n    ui.update_dark_mode(\"dark\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_date_html",
    "url": "api/express/express.ui.input_date.html",
    "title": "express.ui.input_date ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_date\n\nexpress.ui.input_date\n\nCreates a text input which, when clicked on, brings up a calendar that the user can click on to select dates.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe starting date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe minimum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe maximum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe format of the date to display in the browser. Defaults to \"yyyy-mm-dd\".\n\nThe date range shown when the input object is first clicked. Can be ‚Äúmonth‚Äù (the default), ‚Äúyear‚Äù, or ‚Äúdecade‚Äù.\n\nWhich day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).\n\nThe language used for month and day names. Default is ‚Äúen‚Äù. Other valid values include ‚Äúar‚Äù, ‚Äúaz‚Äù, ‚Äúbg‚Äù, ‚Äúbs‚Äù, ‚Äúca‚Äù, ‚Äúcs‚Äù, ‚Äúcy‚Äù, ‚Äúda‚Äù, ‚Äúde‚Äù, ‚Äúel‚Äù, ‚Äúen-AU‚Äù, ‚Äúen-GB‚Äù, ‚Äúeo‚Äù, ‚Äúes‚Äù, ‚Äúet‚Äù, ‚Äúeu‚Äù, ‚Äúfa‚Äù, ‚Äúfi‚Äù, ‚Äúfo‚Äù, ‚Äúfr-CH‚Äù, ‚Äúfr‚Äù, ‚Äúgl‚Äù, ‚Äúhe‚Äù, ‚Äúhr‚Äù, ‚Äúhu‚Äù, ‚Äúhy‚Äù, ‚Äúid‚Äù, ‚Äúis‚Äù, ‚Äúit-CH‚Äù, ‚Äúit‚Äù, ‚Äúja‚Äù, ‚Äúka‚Äù, ‚Äúkh‚Äù, ‚Äúkk‚Äù, ‚Äúko‚Äù, ‚Äúkr‚Äù, ‚Äúlt‚Äù, ‚Äúlv‚Äù, ‚Äúme‚Äù, ‚Äúmk‚Äù, ‚Äúmn‚Äù, ‚Äúms‚Äù, ‚Äúnb‚Äù, ‚Äúnl-BE‚Äù, ‚Äúnl‚Äù, ‚Äúno‚Äù, ‚Äúpl‚Äù, ‚Äúpt-BR‚Äù, ‚Äúpt‚Äù, ‚Äúro‚Äù, ‚Äúrs-latin‚Äù, ‚Äúrs‚Äù, ‚Äúru‚Äù, ‚Äúsk‚Äù, ‚Äúsl‚Äù, ‚Äúsq‚Äù, ‚Äúsr-latin‚Äù, ‚Äúsr‚Äù, ‚Äúsv‚Äù, ‚Äúsw‚Äù, ‚Äúth‚Äù, ‚Äútr‚Äù, ‚Äúuk‚Äù, ‚Äúvi‚Äù, ‚Äúzh-CN‚Äù, and ‚Äúzh-TW‚Äù.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhether or not to close the datepicker immediately when a date is selected.\n\nWhich dates should be disabled (in yyyy-mm-dd format).\n\nDays of the week that should be disabled. Should be a integer vector with values from 0 (Sunday) to 6 (Saturday).\n\nReturns\n\nA UI element.\n\nNote\n\nThe date format string specifies how the date will be displayed in the browser. It allows the following values:\n\n- yy: Year without century (12)\n- yyyy: Year with century (2012)\n- mm: Month number, with leading zero (01-12)\n- m: Month number, without leading zero (1-12)\n- M: Abbreviated month name\n- MM: Full month name\n- dd: Day of month with leading zero\n- d: Day of month without leading zero\n- D: Abbreviated weekday name\n- DD: Full weekday name\n\nNotes\n\nA date object.\n\nSee Also\n\n- update_date\n- input_date_range\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_date(\n    id,\n    label,\n    *,\n    value=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    width=None,\n    autoclose=True,\n    datesdisabled=None,\n    daysofweekdisabled=None,\n)",
      "express.ui.input_date(\n    id,\n    label,\n    *,\n    value=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    width=None,\n    autoclose=True,\n    datesdisabled=None,\n    daysofweekdisabled=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import date\n\nfrom shiny.express import ui\n\nui.input_date(\"date1\", \"Has default date:\", value=\"2016-02-29\")\n# Default value is the date in client's time zone\nui.input_date(\"date2\", \"Client's current date:\")\n# value is always yyyy-mm-dd, even if the display format is different\nui.input_date(\"date3\", \"Format mm/dd/yy:\", value=\"2016-02-29\", format=\"mm/dd/yy\")\n# Pass in a Date object\nui.input_date(\"date4\", \"Default uses date object:\", value=date(2016, 2, 29))\n# Use different language and different first day of week\nui.input_date(\n    \"date5\",\n    \"Language is German and the week starts on Monday:\",\n    language=\"ru\",\n    weekstart=1,\n)\n# Start with decade view instead of default month view\nui.input_date(\"date6\", \"Start Date picker in Decade view:\", startview=\"decade\")\n# Disable Mondays and Tuesdays.\nui.input_date(\"date7\", \"Disable Monday and Tuesday:\", daysofweekdisabled=[1, 2])\n# Disable specific dates.\nui.input_date(\n    \"date8\",\n    \"Disable specific dates:\",\n    value=\"2016-02-29\",\n    datesdisabled=[\"2016-03-01\", \"2016-03-02\"],\n)\n# Set min and max dates.\nui.input_date(\n    \"date9\",\n    \"Set min and max dates:\",\n    value=\"2016-02-03\",\n    min=\"2016-02-01\",\n    max=\"2016-02-29\",\n)\n# Set width of the date field\nui.input_date(\"date10\", \"Set width of text input:\", width=\"600px\")\n# Set autoclose to false\nui.input_date(\"date11\", \"Auto close is disabled:\", autoclose=False)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_date_range_html",
    "url": "api/express/express.ui.input_date_range.html",
    "title": "express.ui.input_date_range ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_date_range\n\nexpress.ui.input_date_range\n\nCreates a pair of text inputs which, when clicked on, bring up calendars that the user can click on to select dates.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe initial start date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe initial end date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe minimum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe maximum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe format of the date to display in the browser.\n\nThe date range shown when the input object is first clicked. Can be ‚Äúmonth‚Äù (the default), ‚Äúyear‚Äù, or ‚Äúdecade‚Äù.\n\nWhich day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).\n\nThe language used for month and day names. Default is ‚Äúen‚Äù. Other valid values include ‚Äúar‚Äù, ‚Äúaz‚Äù, ‚Äúbg‚Äù, ‚Äúbs‚Äù, ‚Äúca‚Äù, ‚Äúcs‚Äù, ‚Äúcy‚Äù, ‚Äúda‚Äù, ‚Äúde‚Äù, ‚Äúel‚Äù, ‚Äúen-AU‚Äù, ‚Äúen-GB‚Äù, ‚Äúeo‚Äù, ‚Äúes‚Äù, ‚Äúet‚Äù, ‚Äúeu‚Äù, ‚Äúfa‚Äù, ‚Äúfi‚Äù, ‚Äúfo‚Äù, ‚Äúfr-CH‚Äù, ‚Äúfr‚Äù, ‚Äúgl‚Äù, ‚Äúhe‚Äù, ‚Äúhr‚Äù, ‚Äúhu‚Äù, ‚Äúhy‚Äù, ‚Äúid‚Äù, ‚Äúis‚Äù, ‚Äúit-CH‚Äù, ‚Äúit‚Äù, ‚Äúja‚Äù, ‚Äúka‚Äù, ‚Äúkh‚Äù, ‚Äúkk‚Äù, ‚Äúko‚Äù, ‚Äúkr‚Äù, ‚Äúlt‚Äù, ‚Äúlv‚Äù, ‚Äúme‚Äù, ‚Äúmk‚Äù, ‚Äúmn‚Äù, ‚Äúms‚Äù, ‚Äúnb‚Äù, ‚Äúnl-BE‚Äù, ‚Äúnl‚Äù, ‚Äúno‚Äù, ‚Äúpl‚Äù, ‚Äúpt-BR‚Äù, ‚Äúpt‚Äù, ‚Äúro‚Äù, ‚Äúrs-latin‚Äù, ‚Äúrs‚Äù, ‚Äúru‚Äù, ‚Äúsk‚Äù, ‚Äúsl‚Äù, ‚Äúsq‚Äù, ‚Äúsr-latin‚Äù, ‚Äúsr‚Äù, ‚Äúsv‚Äù, ‚Äúsw‚Äù, ‚Äúth‚Äù, ‚Äútr‚Äù, ‚Äúuk‚Äù, ‚Äúvi‚Äù, ‚Äúzh-CN‚Äù, and ‚Äúzh-TW‚Äù.\n\nString to display between the start and end input boxes.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhether or not to close the datepicker immediately when a date is selected.\n\nReturns\n\nA UI element.\n\nNote\n\nThe date format string specifies how the date will be displayed in the browser. It allows the following values:\n\n- yy: Year without century (12)\n- yyyy: Year with century (2012)\n- mm: Month number, with leading zero (01-12)\n- m: Month number, without leading zero (1-12)\n- M: Abbreviated month name\n- MM: Full month name\n- dd: Day of month with leading zero\n- d: Day of month without leading zero\n- D: Abbreviated weekday name\n- DD: Full weekday name\n\nNotes\n\nA tuple of date objects.\n\nSee Also\n\n- update_date_range\n- input_date\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_date_range(\n    id,\n    label,\n    *,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    separator=' to ',\n    width=None,\n    autoclose=True,\n)",
      "express.ui.input_date_range(\n    id,\n    label,\n    *,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    separator=' to ',\n    width=None,\n    autoclose=True,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import date\n\nfrom shiny.express import ui\n\n# Default start and end is the current date in the client's time zone\nui.input_date_range(\"daterange1\", \"Date range:\")\n# Set start and end dates\nui.input_date_range(\n    \"daterange2\", \"Set start and end date:\", start=\"2001-01-01\", end=\"2010-12-31\"\n)\n# Start and end are always specified in yyyy-mm-dd, even if the display\n# format is different\nui.input_date_range(\n    \"daterange3\",\n    \"Min, max, start, and end dates are set with custom format and separator:\",\n    start=\"2001-01-01\",\n    end=\"2010-12-31\",\n    min=\"2001-01-01\",\n    max=\"2012-12-21\",\n    format=\"mm/dd/yy\",\n    separator=\" - \",\n)\n# Pass in Date objects\nui.input_date_range(\n    \"daterange4\",\n    \"Default start and end use date objects:\",\n    start=date(2001, 1, 1),\n    end=date(2010, 12, 31),\n)\n# Use different language and different first day of week\nui.input_date_range(\n    \"daterange5\",\n    \"Language is German and we starts on Monday:\",\n    language=\"de\",\n    weekstart=1,\n)\n# Start with decade view instead of default month view\nui.input_date_range(\n    \"daterange6\", \"Start Date picker in Decade view:\", startview=\"decade\"\n)\n# Set width of the daterange field\nui.input_date_range(\"daterange7\", \"Set width of text input:\", width=\"600px\")\n# Set autoclose to false\nui.input_date_range(\"daterange8\", \"Auto close is disabled:\", autoclose=False)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_checkbox_html",
    "url": "api/express/express.ui.input_checkbox.html",
    "title": "express.ui.input_checkbox ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_checkbox\n\nexpress.ui.input_checkbox\n\nCreate a checkbox that can be used to specify logical values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nReturns\n\nA UI element.\n\nNotes\n\nTrue if checked, False otherwise.\n\nSee Also\n\n- input_switch\n- update_checkbox\n- input_checkbox_group\n- input_radio_buttons\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_checkbox(id, label, value=False, *, width=None)",
      "express.ui.input_checkbox(id, label, value=False, *, width=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nui.input_checkbox(\"somevalue\", \"Some value\", False)\n\n\n@render.ui\ndef value():\n    return input.somevalue()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_checkbox_group_html",
    "url": "api/express/express.ui.input_checkbox_group.html",
    "title": "express.ui.input_checkbox_group ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_checkbox_group\n\nexpress.ui.input_checkbox_group\n\nCreate a group of checkboxes that can be used to toggle multiple choices independently.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\nThe values that should be initially selected, if any.\n\nIf True, the result is displayed inline.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nReturns\n\nA UI element.\n\nNotes\n\nA tuple of string(s) with the selected value(s) (if any).\n\nSee Also\n\n- update_checkbox_group\n- input_checkbox\n- input_radio_buttons\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_checkbox_group(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "express.ui.input_checkbox_group(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import req\nfrom shiny.express import input, render, ui\n\nui.input_checkbox_group(\n    \"colors\",\n    \"Choose color(s):\",\n    {\n        \"red\": ui.span(\"Red\", style=\"color: #FF0000;\"),\n        \"green\": ui.span(\"Green\", style=\"color: #00AA00;\"),\n        \"blue\": ui.span(\"Blue\", style=\"color: #0000AA;\"),\n    },\n)\n\n\n@render.ui\ndef val():\n    req(input.colors())\n    return \"You chose \" + \", \".join(input.colors())\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_switch_html",
    "url": "api/express/express.ui.input_switch.html",
    "title": "express.ui.input_switch ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_switch\n\nexpress.ui.input_switch\n\nCreate a switch that can be used to specify logical values. Similar to input_checkbox, but implies to the user that the change will take effect immediately.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nReturns\n\nA UI element.\n\nNotes\n\nTrue if checked, False otherwise.\n\nSee Also\n\n- input_checkbox\n- update_switch\n- input_checkbox_group\n- input_radio_buttons\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_switch(id, label, value=False, *, width=None)",
      "express.ui.input_switch(id, label, value=False, *, width=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nui.input_switch(\"somevalue\", \"Some value\", False)\n\n\n@render.text\ndef value():\n    return input.somevalue()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_radio_buttons_html",
    "url": "api/express/express.ui.input_radio_buttons.html",
    "title": "express.ui.input_radio_buttons ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_radio_buttons\n\nexpress.ui.input_radio_buttons\n\nCreate a set of radio buttons used to select an item from a list.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\nThe values that should be initially selected, if any.\n\nIf True, the result is displayed inline.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nReturns\n\nA UI element\n\nNotes\n\nA string with the selected value.\n\nSee Also\n\n- update_radio_buttons\n- input_checkbox_group\n- input_checkbox\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_radio_buttons(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "express.ui.input_radio_buttons(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nui.input_radio_buttons(\n    \"rb\",\n    \"Choose one:\",\n    {\n        \"html\": ui.HTML(\"<span style='color:red;'>Red Text</span>\"),\n        \"text\": \"Normal text\",\n    },\n)\n\n\n@render.express\ndef val():\n    \"You chose \" + input.rb()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_numeric_html",
    "url": "api/express/express.ui.input_numeric.html",
    "title": "express.ui.input_numeric ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_numeric\n\nexpress.ui.input_numeric\n\nCreate an input control for entry of numeric values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nInterval to use when stepping between min and max.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Enter is pressed.\n\nReturns\n\nA UI element.\n\nNotes\n\nA numeric value.\n\nSee Also\n\n- update_numeric\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_numeric(\n    id,\n    label,\n    value,\n    *,\n    min=None,\n    max=None,\n    step=None,\n    width=None,\n    update_on='change',\n)",
      "express.ui.input_numeric(\n    id,\n    label,\n    value,\n    *,\n    min=None,\n    max=None,\n    step=None,\n    width=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nui.input_numeric(\"obs\", \"Observations:\", 10, min=1, max=100)\n\n\n@render.code\ndef value():\n    return input.obs()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_text_html",
    "url": "api/express/express.ui.input_text.html",
    "title": "express.ui.input_text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_text\n\nexpress.ui.input_text\n\nCreate an input control for entry of text values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nA hint as to what can be entered into the control.\n\nWhether to enable browser autocompletion of the text input. If None, then it will use the browser‚Äôs default behavior. Some values include ‚Äúon‚Äù, ‚Äúoff‚Äù, ‚Äúname‚Äù, ‚Äúusername‚Äù, and ‚Äúemail‚Äù. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete to learn more about autocomplete‚Äôs supported values.\n\nWhether to enable browser spell checking of the text input (default is None). If None, then it will use the browser‚Äôs default behavior.\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Enter is pressed.\n\nReturns\n\nA UI element\n\nNotes\n\nA string containing the current text input. The default value is \"\" unless value is provided.\n\nSee Also\n\n- input_text_area\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_text(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    autocomplete='off',\n    spellcheck=None,\n    update_on='change',\n)",
      "express.ui.input_text(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    autocomplete='off',\n    spellcheck=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nui.input_text(\"caption\", \"Caption:\", \"Data summary\")\n\n\n@render.code\ndef value():\n    return input.caption()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_text_area_html",
    "url": "api/express/express.ui.input_text_area.html",
    "title": "express.ui.input_text_area ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_text_area\n\nexpress.ui.input_text_area\n\nCreate a textarea input control for entry of unstructured text values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nThe CSS height, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nValue of the visible character columns of the input, e.g., 80. This argument will only take effect if there is not a CSS width rule defined for this element; such a rule could come from the width argument of this function or from a containing page layout such as page_fluid.\n\nThe value of the visible character rows of the input, e.g., 6. If the height argument is specified, height will take precedence in the browser‚Äôs rendering.\n\nA hint as to what can be entered into the control.\n\nWhich directions the textarea box can be resized. Can be one of ‚Äúboth‚Äù, ‚Äúnone‚Äù, ‚Äúvertical‚Äù, and ‚Äúhorizontal‚Äù. The default, None, will use the client browser‚Äôs default setting for resizing textareas.\n\nIf True, then the textarea will automatically resize the height to fit the input text.\n\nWhether to enable browser autocompletion of the text input (default is ‚Äúoff‚Äù). If None, then it will use the browser‚Äôs default behavior. Other possible values include ‚Äúon‚Äù, ‚Äúname‚Äù, ‚Äúusername‚Äù, and ‚Äúemail‚Äù. See Mozilla‚Äôs autocomplete documentation for more.\n\nWhether to enable browser spell checking of the text input (default is None). If None, then it will use the browser‚Äôs default behavior.\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Ctrl/Cmd + Enter is pressed.\n\nReturns\n\nA UI element\n\nNotes\n\nA string containing the current text input. The default value is \"\" unless value is provided.\n\nSee Also\n\n- input_text\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_text_area(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    height=None,\n    cols=None,\n    rows=None,\n    placeholder=None,\n    resize=None,\n    autoresize=False,\n    autocomplete=None,\n    spellcheck=None,\n    update_on='change',\n)",
      "express.ui.input_text_area(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    height=None,\n    cols=None,\n    rows=None,\n    placeholder=None,\n    resize=None,\n    autoresize=False,\n    autocomplete=None,\n    spellcheck=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nui.input_text_area(\n    \"caption_regular\",\n    \"Caption:\",\n    \"Data summary\\nwith\\nmultiple\\nlines\",\n)\n\n\n@render.text\ndef value_regular():\n    return input.caption_regular()\n\n\nui.input_text_area(\n    \"caption_autoresize\",\n    ui.markdown(\"Caption (w/ `autoresize=True`):\"),\n    \"Data summary\\nwith\\nmultiple\\nlines\",\n    autoresize=True,\n)\n\n\n@render.text\ndef value_autoresize():\n    return input.caption_autoresize()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_password_html",
    "url": "api/express/express.ui.input_password.html",
    "title": "express.ui.input_password ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_password\n\nexpress.ui.input_password\n\nCreate an password control for entry of passwords.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nThe placeholder of the input.\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Enter is pressed.\n\nReturns\n\nA UI element.\n\nNotes\n\nA string of the password input. The default value is unless value is provided.\n\nSee Also\n\n- update_text\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_password(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    update_on='change',\n)",
      "express.ui.input_password(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_password(\"password\", \"Password:\")\nui.input_action_button(\"go\", \"Go\")\n\n\n@render.code\n@reactive.event(input.go)\ndef value():\n    return input.password()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_action_button_html",
    "url": "api/express/express.ui.input_action_button.html",
    "title": "express.ui.input_action_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_action_button\n\nexpress.ui.input_action_button\n\nCreates an action button whose value is initially zero, and increments by one each time it is pressed.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nIf True, the button will not be clickable. Use update_action_button to dynamically enable/disable the button.\n\nAttributes to be applied to the button.\n\nReturns\n\nA UI element\n\nNotes\n\nAn integer representing the number of clicks.\n\nSee Also\n\n- update_action_button\n- input_action_link\n- event\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_action_button(\n    id,\n    label,\n    *,\n    icon=None,\n    width=None,\n    disabled=False,\n    **kwargs,\n)",
      "express.ui.input_action_button(\n    id,\n    label,\n    *,\n    icon=None,\n    width=None,\n    disabled=False,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500)\nui.input_action_button(\"go\", \"Go!\", class_=\"btn-success\")\n\n\n@render.plot(alt=\"A histogram\")\n# Use reactive.event() to invalidate the plot only when the button is pressed\n# (not when the slider is changed)\n@reactive.event(input.go, ignore_none=False)\ndef plot():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(input.n())\n    fig, ax = plt.subplots()\n    ax.hist(x, bins=30, density=True)\n    return fig\n\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_text(\"name\", \"Your Name\")\nui.input_action_button(\"greet\", \"Say Hello\", disabled=True)\n\n\n@reactive.effect\n@reactive.event(input.name)\ndef set_button_state():\n    if input.name():\n        ui.update_action_button(\"greet\", disabled=False)\n    else:\n        ui.update_action_button(\"greet\", disabled=True)\n\n\n@render.ui\n@reactive.event(input.greet)\ndef hello():\n    return ui.p(f\"Hello, {input.name()}!\", class_=\"fs-1 text-primary mt-3\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_action_link_html",
    "url": "api/express/express.ui.input_action_link.html",
    "title": "express.ui.input_action_link ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_action_link\n\nexpress.ui.input_action_link\n\nCreates a link whose value is initially zero, and increments by one each time it is pressed.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nAttributes to be applied to the link.\n\nReturns\n\nA UI element\n\nNotes\n\nAn integer representing the number of clicks.\n\nSee Also\n\n- update_action_link\n- input_action_button\n- event\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_action_link(id, label, *, icon=None, **kwargs)",
      "express.ui.input_action_link(id, label, *, icon=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500)\nui.input_action_link(\"go\", \"Go!\")\n\n\n@render.plot(alt=\"A histogram\")\n# reactive.event() to invalidate the plot when the button is pressed but not when\n# the slider is changed\n@reactive.event(input.go, ignore_none=False)\ndef plot():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(input.n())\n    fig, ax = plt.subplots()\n    ax.hist(x, bins=30, density=True)\n    return fig\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_input_task_button_html",
    "url": "api/express/express.ui.input_task_button.html",
    "title": "express.ui.input_task_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- Input components\n- express.ui.input_task_button\n\nexpress.ui.input_task_button\n\nCreates a button for launching longer-running operations.\n\nIts value is initially zero, and increments by one each time it is pressed. It is similar to input_action_button, except it prevents the user from clicking when its operation is already in progress.\n\nUpon click, it automatically displays a customizable progress message and disables itself; and after the server has dealt with whatever reactivity is triggered from the click, the button automatically resets to its original appearance and re-enables itself.\n\nIn some advanced use cases, it may be necessary to keep a task button in its busy state even after the normal reactive processing has completed. Calling :func:~shiny.express.ui.update_task_button(id, state = \"busy\") from the server will opt out of any currently pending reset for a specific task button. After doing so, the button can be re-enabled by calling update_task_button(id, state = &quot;ready&quot;) after each click's work is complete.\n\nYou can also pass an explicit auto_reset = FALSE to input_task_button(), which means that button will never be automatically re-enabled and will require update_task_button(id, state = &quot;ready&quot;) to be called each time.\n\nNote that, as a general rule, Shiny's update family of functions do not take effect at the instant that they are called, but are held until the end of the current reactive cycle. So if you have many different reactive calculations and outputs, you don't have to be too careful about when you call update_task_button(id, state = &quot;ready&quot;), as the button on the client will not actually re-enable until the same moment that all of the updated outputs simultaneously sent to the client.\n\nParameters\n\nAn input id.\n\nA button label.\n\n[Experimental] Can be used to add additional states besides ‚Äúready‚Äù and ‚Äúbusy‚Äù. Pass a span with slot=\"state_name\" for each new state, and call update_task_button with state=\"state_name\" to switch the button to that state.\n\nAn icon to appear inline with the button/link.\n\nA label to appear when the button is busy.\n\nAn icon to appear inline with the button/link when the button is busy.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nOne of the Bootstrap theme colors (‚Äòprimary‚Äô, ‚Äòdefault‚Äô, ‚Äòsecondary‚Äô, ‚Äòsuccess‚Äô, ‚Äòdanger‚Äô, ‚Äòwarning‚Äô, ‚Äòinfo‚Äô, ‚Äòlight‚Äô, ‚Äòdark‚Äô), or None to leave off the Bootstrap-specific button CSS classes. Defaults to ‚Äòprimary‚Äô.\n\nWhether to automatically reset the button to ‚Äúready‚Äù after the task completes. If False, the button will remain in the ‚Äúbusy‚Äù state until update_task_button is called with state=\"ready\". Also note that even if auto_reset=True, calling update_task_button with state=\"busy\" will prevent the button from automatically resetting.\n\nAttributes to be applied to the button.\n\nReturns\n\nA UI element\n\nNotes\n\nAn integer representing the number of clicks.\n\nSee Also\n\n- update_task_button\n- input_action_button\n- event\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_task_button(\n    id,\n    label,\n    *args,\n    icon=None,\n    label_busy='Processing...',\n    icon_busy=MISSING,\n    width=None,\n    type='primary',\n    auto_reset=True,\n    **kwargs,\n)",
      "express.ui.input_task_button(\n    id,\n    label,\n    *args,\n    icon=None,\n    label_busy='Processing...',\n    icon_busy=MISSING,\n    width=None,\n    type='primary',\n    auto_reset=True,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nfrom datetime import datetime\n\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.h5(\"Current time\")\n\n\n@render.text\ndef current_time():\n    reactive.invalidate_later(1)\n    return datetime.now().strftime(\"%H:%M:%S\")\n\n\nwith ui.p():\n    \"Notice that the time above updates every second, even if you click the button below.\"\n\n\n@ui.bind_task_button(button_id=\"btn\")\n@reactive.extended_task\nasync def slow_compute(a: int, b: int) -> int:\n    await asyncio.sleep(3)\n    return a + b\n\n\nwith ui.layout_sidebar():\n    with ui.sidebar():\n        ui.input_numeric(\"x\", \"x\", 1)\n        ui.input_numeric(\"y\", \"y\", 2)\n        ui.input_task_button(\"btn\", \"Compute, slowly\")\n        ui.input_action_button(\"btn_cancel\", \"Cancel\")\n\n    @reactive.effect\n    @reactive.event(input.btn, ignore_none=False)\n    def handle_click():\n        # slow_compute.cancel()\n        slow_compute(input.x(), input.y())\n\n    @reactive.effect\n    @reactive.event(input.btn_cancel)\n    def handle_cancel():\n        slow_compute.cancel()\n\n    ui.h5(\"Sum of x and y\")\n\n    @render.text\n    def show_result():\n        return str(slow_compute.result())\n\n"
    ]
  },
  {
    "id": "api_express_express_render_plot_html",
    "url": "api/express/express.render.plot.html",
    "title": "express.render.plot ‚Äì Shiny for Python",
    "description": "",
    "content": "- Output components\n- express.render.plot\n\nexpress.render.plot\n\nReactively render a plot object as an HTML image.\n\nParameters\n\nAlternative text for the image if it cannot be displayed or viewed (i.e., the user uses a screen reader).\n\nWidth of the plot in pixels. If None or MISSING, the width will be determined by the size of the corresponding output_plot. (You should not need to use this argument in most Shiny apps‚Äìset the desired width on output_plot instead.)\n\nHeight of the plot in pixels. If None or MISSING, the height will be determined by the size of the corresponding output_plot. (You should not need to use this argument in most Shiny apps‚Äìset the desired height on output_plot instead.)\n\nAdditional keyword arguments passed to the relevant method for saving the image (e.g., for matplotlib, arguments to savefig(); for PIL and plotnine, arguments to save()).\n\nReturns\n\nA decorator for a function that returns any of the following: 1. A matplotlib.figure.Figure instance. 2. An matplotlib.artist.Artist instance. 3. A list/tuple of Figure/Artist instances. 4. An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance. 5. A PIL.Image.Image instance.\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_plot container (see output_plot for example usage).\n\nSee Also\n\n- output_plot\n- image\n\n",
    "code_examples": [
      "express.render.plot(\n    self,\n    _fn=None,\n    *,\n    alt=None,\n    width=MISSING,\n    height=MISSING,\n    **kwargs,\n)",
      "express.render.plot(\n    self,\n    _fn=None,\n    *,\n    alt=None,\n    width=MISSING,\n    height=MISSING,\n    **kwargs,\n)"
    ]
  },
  {
    "id": "api_express_express_render_table_html",
    "url": "api/express/express.render.table.html",
    "title": "express.render.table ‚Äì Shiny for Python",
    "description": "",
    "content": "- Output components\n- express.render.table\n\nexpress.render.table\n\nReactively render a pandas DataFrame object (or similar) as a basic HTML table.\n\nConsider using data_frame instead of this renderer, as it provides high performance virtual scrolling, built-in filtering and sorting, and a better default appearance. This renderer may still be helpful if you use pandas styling features that are not currently supported by data_frame.\n\nParameters\n\nWhether to print index (row) labels. (Ignored for pandas Styler objects; call style.hide(axis=\"index\") from user code instead.)\n\nCSS classes (space separated) to apply to the resulting table. By default, we use table shiny-table w-auto which is designed to look reasonable with Bootstrap 5. (Ignored for pandas Styler objects; call style.set_table_attributes('class=\"dataframe table shiny-table w-auto\"') from user code instead.)\n\nAdditional keyword arguments passed to pandas.DataFrame.to_html() or pandas.io.formats.style.Styler.to_html().\n\nReturns\n\nA decorator for a function that returns any of the following: 1. A pandas DataFrame object. 2. A pandas Styler object. 3. Any object that has a .to_pandas() method (e.g., a Polars data frame or Arrow table).\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_table container (see output_table for example usage).\n\nSee Also\n\n- output_table for the corresponding UI component to this render function.\n\nExamples\n\n",
    "code_examples": [
      "express.render.table(\n    self,\n    _fn=None,\n    *,\n    index=False,\n    classes='table shiny-table w-auto',\n    border=0,\n    **kwargs,\n)",
      "express.render.table(\n    self,\n    _fn=None,\n    *,\n    index=False,\n    classes='table shiny-table w-auto',\n    border=0,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pathlib\n\nimport pandas as pd\n\nfrom shiny.express import input, render, ui\n\ndir = pathlib.Path(__file__).parent\nmtcars = pd.read_csv(dir / \"mtcars.csv\")\n\n\nui.input_checkbox(\"highlight\", \"Highlight min/max values\")\n\n\n@render.table\ndef result():\n    if not input.highlight():\n        # If we're not highlighting values, we can simply\n        # return the pandas data frame as-is; @render.table\n        # will call .to_html() on it.\n        return mtcars\n    else:\n        # We need to use the pandas Styler API. The default\n        # formatting options for Styler are not the same as\n        # DataFrame.to_html(), so we set a few options to\n        # make them match.\n        return (\n            mtcars.style.set_table_attributes(\n                'class=\"dataframe shiny-table table w-auto\"'\n            )\n            .hide(axis=\"index\")\n            .format(\n                {\n                    \"mpg\": \"{0:0.1f}\",\n                    \"disp\": \"{0:0.1f}\",\n                    \"drat\": \"{0:0.2f}\",\n                    \"wt\": \"{0:0.3f}\",\n                    \"qsec\": \"{0:0.2f}\",\n                }\n            )\n            .set_table_styles([dict(selector=\"th\", props=[(\"text-align\", \"right\")])])\n            .highlight_min(color=\"silver\")\n            .highlight_max(color=\"yellow\")\n        )\n\n\n# Legend\nwith ui.panel_conditional(\"input.highlight\"):\n    with ui.panel_absolute(bottom=\"6px\", right=\"6px\", class_=\"p-1 bg-light border\"):\n        \"Yellow is maximum, grey is minimum\"\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n"
    ]
  },
  {
    "id": "api_express_express_render_DataTable_html",
    "url": "api/express/express.render.DataTable.html",
    "title": "express.render.datatable ‚Äì Shiny for Python",
    "description": "",
    "content": "- Output components\n- express.render.DataTable\n\nexpress.render.DataTable\n\nHolds the data and options for a data_frame output, for a spreadsheet-like view.\n\nThis class is used to wrap the returned data frame from a @render.data_frame render function. It allows you to specify options for the data table, such as the width and height of the table, whether to show a summary message, whether to show filter inputs, whether the cells are editable, and how the cells are selected.\n\nWhile there are currently no execution or parameter differences between DataGrid and DataTable other than CSS styling in the browser, the two classes are kept separate to allow for future extensibility.\n\nParameters\n\nA pandas, polars, or eager narwhals compatible DataFrame object.\n\nA maximum amount of vertical space for the data table to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. The default is fit-content, which sets the table‚Äôs width according to its contents. Set this to 100% to use the maximum available horizontal space.\n\nA maximum amount of vertical space for the data table to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the table body will scroll. Set the height to None to allow the table to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).\n\nIf True (the default), shows a message like ‚ÄúViewing rows 1 through 10 of 20‚Äù below the grid when not all of the rows are being shown. If False, the message is not displayed. You can also specify a string template to customize the message, containing {start}, {end}, and {total} tokens. For example: \"Viendo filas {start} a {end} de {total}\".\n\nIf True, shows a row of filter inputs below the headers, one for each column.\n\nIf True, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.\n\nSingle string or a set/list/tuple of string values to define possible ways to select data within the data frame. Supported values: * Use \"none\" to disable any cell selections or editing. * Use \"row\" to allow a single row to be selected at a time. * Use \"rows\" to allow multiple rows to be selected by clicking on them individually. Resolution rules: * If \"none\" is supplied, all other values will be ignored. * If both \"row\" and \"rows\" are supplied, \"row\" will be dropped (supporting \"rows\").\n\nA style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If styles=None, no styling will be applied. Style info object key/value description: * location: This value \"body\" and is not required. * rows: The row numbers to which the style should be applied. If None, the style will be applied to all rows. * cols: The column numbers to which the style should be applied. If None, the style will be applied to all columns. * style: A dictionary of CSS properties and values to apply to the selected rows and columns. Traditional kebab-cased CSS property names (e.g. background-color) will work in addition to camelCased CSS property names (e.g. backgroundColor). * class: A string of CSS class names to apply to the selected rows and columns. If both style and class are missing or None, nothing will be applied. If both rows and cols are missing or None, the style will be applied to the complete data frame.\n\nDeprecated. Please use mode={row_selection_mode}_row instead.\n\nReturns\n\nAn object suitable for being returned from a @render.data_frame-decorated output function.\n\nSee Also\n\n- output_data_frame - The UI placeholder for a data frame output.\n- data_frame - The render method for data frames.\n- DataTable - A more grid view of the data.\n\nExamples\n\nMethods\n\nto_payload\n\nConverts the DataTable object to a payload dictionary.\n\nReturns\n\nThe payload dictionary representing the DataTable object.\n\n",
    "code_examples": [
      "express.render.DataTable(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height='500px',\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "express.render.DataTable(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height='500px',\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\nimport seaborn as sns\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nheight = 350\nwidth = \"fit-content\"\ndf: reactive.value[pd.DataFrame] = reactive.value(\n    sns.load_dataset(\"anagrams\").iloc[:, 1:]\n)\n\n\ndef update_data_with_patch(patch):\n    df_copy = df().copy()\n    fn = str if patch[\"column_index\"] == 0 else int\n    df_copy.iat[patch[\"row_index\"], patch[\"column_index\"]] = fn(patch[\"value\"])\n    df.set(df_copy)\n\n\nui.head_content(\n    ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\")\n)\nui.input_select(\n    \"selection_mode\",\n    \"Selection mode\",\n    {\n        \"none\": \"(None)\",\n        \"row\": \"Single row\",\n        \"rows\": \"Multiple rows\",\n    },\n    selected=\"rows\",\n)\nui.input_switch(\"filters\", \"Filters\", True)\nui.input_switch(\"editable\", \"Editable\", True)\n\nwith ui.layout_column_wrap(width=1 / 2):\n    with ui.card():\n        ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataGrid\"))\n\n        @render.data_frame\n        def grid():\n            return render.DataGrid(\n                df(),\n                width=width,\n                height=height,\n                filters=input.filters(),\n                editable=input.editable(),\n                selection_mode=input.selection_mode(),\n            )\n\n        @grid.set_patch_fn\n        def _(*, patch: render.CellPatch):\n            update_data_with_patch(patch)\n            return patch[\"value\"]\n\n    with ui.card():\n        ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataTable\"))\n\n        @render.data_frame\n        def table():\n            return render.DataTable(\n                df(),\n                width=width,\n                height=height,\n                filters=input.filters(),\n                editable=input.editable(),\n                selection_mode=input.selection_mode(),\n            )\n\n        @table.set_patch_fn\n        def _(*, patch: render.CellPatch):\n            update_data_with_patch(patch)\n            return patch[\"value\"]\n\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\n\nfrom shiny.express import render, ui\n\ngreen_styles = [\n    {\n        \"rows\": [2, 4],\n        \"cols\": [2, 4],\n        \"style\": {\n            \"background-color\": \"mediumspringgreen\",\n            \"width\": \"300px\",\n            \"height\": \"100px\",\n        },\n    }\n]\n\nn = 6\ndf = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n    }\n)\n\nui.h2(\"Data Frame with Styles applied to 4 cells\")\n\n\n@render.data_frame\ndef my_df():\n    return render.DataGrid(\n        df,\n        styles=green_styles,\n    )\n\n\nui.hr()\n\nui.h2(\"Custom styles applied to all cells within a data frame \", ui.HTML(\"&#128075;\"))\n\nui.tags.style(\n    ui.HTML(\n        \"\"\"\n    .posit-bg {\n        background-color: #242a26 ;\n    }\n    .posit-blue-bg {\n        background-color: #447099 ;\n    }\n    .posit-orange-bg {\n        background-color: #ED642F ;\n    }\n    \"\"\"\n    )\n)\n\nhi_styles = [\n    {\n        # No `rows` or `cols` means apply to all cells\n        \"class\": \"posit-bg\",\n        \"style\": {\n            \"border\": \"transparent\",\n            \"color\": \"transparent\",\n        },\n    },\n    {\n        \"rows\": [3],\n        \"cols\": [2],\n        \"class\": \"posit-blue-bg\",\n        \"style\": {\n            \"width\": \"100px\",\n            \"height\": \"75px\",\n        },\n    },\n    {\n        \"cols\": [1, 3, 5],\n        \"class\": \"posit-blue-bg\",\n    },\n    {\n        \"cols\": [7],\n        \"rows\": [0, 1, 2, 3, 5],\n        \"class\": \"posit-orange-bg\",\n    },\n]\n\nn = 7\nhi_pd = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n        \"f\": range(n * 5, n * 6),\n        \"g\": range(n * 6, n * 7),\n        \"h\": range(n * 7, n * 8),\n        \"i\": range(n * 8, n * 9),\n    }\n)\n\n\n@render.data_frame\ndef hi_df():\n    return render.DataGrid(\n        hi_pd,\n        styles=hi_styles,\n    )\n\n",
      "express.render.DataTable.to_payload()",
      "express.render.DataTable.to_payload()"
    ]
  },
  {
    "id": "api_express_express_render_data_frame_html",
    "url": "api/express/express.render.data_frame.html",
    "title": "express.render.data_frame ‚Äì Shiny for Python",
    "description": "",
    "content": "- Output components\n- express.render.data_frame\n\nexpress.render.data_frame\n\nDecorator for a function that returns a pandas, polars, or eager narwhals compatible DataFrame object to render as an interactive table or grid. Features fast virtualized scrolling, sorting, filtering, and row selection (single or multiple).\n\nReturns\n\nA decorator for a function that returns any of the following: 1. A DataGrid or DataTable object, which can be used to customize the appearance and behavior of the data frame output. 2. A pandas, polars, or eager narwhals compatible DataFrame object. This object will be internally upgraded to a default shiny.express.render.DataGrid(df).\n\nRow selection\n\nWhen using the row selection feature, you can access the selected rows by using the <data_frame_renderer>.cell_selection() method, where <data_frame_renderer> is the @render.data_frame function name that corresponds with the id= used in outout_data_frame. Internally, <data_frame_renderer>.cell_selection() retrieves the selected cell information from session‚Äôs input.<data_frame_renderer>_cell_selection() value and upgrades it for consistent subsetting.\n\nFor example, to filter your pandas data frame (df) down to the selected rows you can use:\n\n- df.iloc[list(input.<data_frame_renderer>_cell_selection()[\"rows\"])]\n- df.iloc[list(<data_frame_renderer>.cell_selection()[\"rows\"])]\n- <data_frame_renderer>.data_view(selected=True)\n\nThe last method (.data_view(selected=True)) will also apply any sorting, filtering, or edits that has been applied by the user.\n\nEditing cells\n\nWhen a returned DataTable or DataGrid object has editable=True, app users will be able to edit the cells in the table. After a cell has been edited, the edited value will be sent to the server for processing. The handling methods are set via @<data_frame_renderer>.set_patch_fn or @<data_frame_renderer>.set_patches_fn decorators. By default, both decorators will return the corresponding value as a string.\n\nData methods\n\nThere are several methods available to inspect and update data frame renderer. It is important to know the side effects of each method to know how they interact with each other.\n\n- Data frame render method: When this method is reactively executed, the .data() data frame is set to the underlying data frame and all .cell_patches() are removed. When this method is reactively executed, all user state is reset. This includes the user‚Äôs edits, sorting, filtering.\n- .data(): Reactive calculation that returns the render method‚Äôs underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n- .cell_patches(): Reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame.\n- .data_patched(): Reactive calculation that returns the .data() data frame with all .cell_patches() patches applied.\n- .data_view(*, selected: bool): Reactive function that returns the .data_patched() data frame with the user‚Äôs sorting and filtering applied. It represents the data frame as viewed by the user within the browser. If selected=True, only the selected rows are returned.\n- .update_cell_value(value, row, col): Sets a new entry in .cell_patches(). Calling this method will not reset the user‚Äôs sorting or filtering.\n- .update_data(data): Updates the .data() data frame with new data. Calling this method will remove all .cell_patches(). Calling this method will not reset the user‚Äôs sorting or filtering.\n\n- When this method is reactively executed, the .data() data frame is set to the underlying data frame and all .cell_patches() are removed.\n- When this method is reactively executed, all user state is reset. This includes the user‚Äôs edits, sorting, filtering.\n\n- Reactive calculation that returns the render method‚Äôs underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n\n- Reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame.\n\n- Reactive calculation that returns the .data() data frame with all .cell_patches() patches applied.\n\n- Reactive function that returns the .data_patched() data frame with the user‚Äôs sorting and filtering applied. It represents the data frame as viewed by the user within the browser.\n- If selected=True, only the selected rows are returned.\n\n- Sets a new entry in .cell_patches().\n- Calling this method will not reset the user‚Äôs sorting or filtering.\n\n- Updates the .data() data frame with new data.\n- Calling this method will remove all .cell_patches().\n- Calling this method will not reset the user‚Äôs sorting or filtering.\n\nNote: All data methods are shallow copies of each other. If they are mutated in place, it will modify the underlying data object and possibly alter other data objects.\n\nNarwhals\n\nShiny uses narwhals to manage data frame interactions. From their website: ‚ÄúExtremely lightweight and extensible compatibility layer between dataframe libraries!‚Äù. This allows for seamless integration between pandas, polars, and any other eagerly defined data frame type.\n\nThere are some reasonable limitations to the narwhals compatibility layer. As they are found, they will be added to this list: * When converting the column type who does not have a 1:1 mapping between libraries (such as pandas‚Äô columns containing str and dict items both share the same object data type), narwhals will only inspect the first row to disambiguate the cell type. This could lead to false negatives in the data type conversion. Shiny could inspect each column in an attempt to disambiguate the cell type, but this would be a costly operation. The best way to avoid this is to use consistent typing. For example, if your first row of the pandas column contains a string and the second row of the same column contains a ui.TagList, the column will incorrectly be interpreted as a string. To get around this, you can wrap all cells (or at the very lest the first cell) in the same column within a ui.TagList as it will not insert any tags, but it will cause the column to be interpreted as html where possible. (tl/dr: Use consistent typing in your columns!)\n\nTip\n\nThis decorator should be applied before the @output decorator (if that decorator is used). Also, the name of the decorated function (or @output(id=...)) should match the id of a output_data_frame container (see output_data_frame for example usage).\n\nSee Also\n\n- output_data_frame\n- DataGrid and DataTable are the objects you can return from the rendering function to specify options.\n\nExamples\n\nMethods\n\ncell_patches\n\nReactive calculation of the data frame's edits.\n\nThis reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame.\n\nReturns\n\nA list of cell patches to apply to the data frame.\n\ncell_selection\n\nReactive calculation of selected cell information.\n\nThis method is a wrapper around input.<id>_cell_selection(), where <id> is the id of the data frame output. This method returns the selected rows and will cause reactive updates as the selected rows change.\n\nThe value has been enhanced from it's vanilla form to include the missing cols key (or rows key) as a tuple of integers representing all column (or row) numbers. This allows for consistent usage within code when subsetting your data. These missing keys are not sent over the wire as they are independent of the selection.\n\nReturns\n\nCellSelection representing the indices of the selected cells. If no cells are currently selected, None is returned.\n\ndata\n\nReactive calculation of the data frame's data.\n\nThis reactive calculation returns the render method's underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n\nThe returned value is a shallow copy of the original data frame. It is possible that alterations to the .data() data frame could alter other associated data frame values. Please be cautious when using this value directly.\n\nReturns\n\nThis reactive calculation returns the render method‚Äôs underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n\ndata_patched\n\nReactive calculation of the data frame's patched data.\n\nThis method returns the .data() data frame with all .cell_patches() patches applied.\n\nThe returned value is a shallow copy of the original data frame. It is possible that alterations to the .data_patched() data frame could alter other associated data frame values. Please be cautious when using this value directly.\n\nReturns\n\nThe patched data frame.\n\ndata_view\n\nReactive function that retrieves the data how it is viewed within the browser.\n\nThis function will return the .data_patched() data frame with the user's sorting and filtering applied. It represents the data frame as viewed by the user within the browser.\n\nThe returned value is a shallow copy of the original data frame. It is possible that alterations to the .data_view() data frame could alter other associated date frame values. Please be cautious when using this value directly.\n\nParameters\n\nIf True, subset the viewed data to the selected area. Defaults to False (all rows).\n\nReturns\n\nA view of the (possibly selected) data frame as seen in the browser.\n\nSee Also\n\n- pandas.DataFrame.copy API documentation\n- polars.DataFrame.clone API documentation\n- narwhals.DataFrame.clone API documentation\n\nExamples\n\ndata_view_rows\n\nReactive calculation of the data frame's user view row numbers.\n\nThis value is a wrapper around input.<id>_data_view_rows(), where <id> is the id of the data frame output.\n\nReturns\n\nThe row numbers of the data frame that are currently being viewed in the browser after sorting and filtering has been applied.\n\nfilter\n\nReactive calculation of the data frame's column filters.\n\nReturns\n\nAn array of column number and value information. If the column type is a number, a tuple of (min, max) is used for value. If no min (or max) value is set, None is used in its place. If the column type is a string, the string value is used for value.\n\ninput_cell_selection\n\n[Deprecated] Reactive calculation of selected cell information.\n\nPlease use ~shiny.express.render.data_frame's .cell_selection() method instead.\n\nselection_modes\n\nReactive calculation of the data frame's possible selection modes.\n\nReturns\n\nThe possible selection modes for the data frame.\n\nset_patch_fn\n\nDecorator to set the function that updates a single cell in the data frame.\n\nThe default patch function returns the value as is.\n\nParameters\n\nA function that accepts a kwarg patch and returns the processed patch.value for the cell.\n\nExamples\n\nset_patches_fn\n\nDecorator to set the function that updates a batch of cells in the data frame.\n\nThe default patches function calls the async ._patch_fn() on each input patch and returns the updated patch values.\n\nThere are no checks made on the quantity of patches returned. The user can return more, less, or the same number of patches as the input patches. This allows for the app author to own more control over which columns are updated and how they are updated.\n\nParameters\n\nA function that accepts a kwarg patches and returns a list of (possibly updated) patches to apply to the data frame.\n\nExamples\n\nsort\n\nReactive calculation of the data frame's column sorting information.\n\nReturns\n\nAn array of column number and is descending information.\n\nupdate_cell_selection\n\nUpdate the cell selection in the data frame.\n\nCurrently only single (\"type\": \"row\") or multiple (\"type\": \"rows\") row selection is supported.\n\nIf the current data frame selection mode is \"none\" and a non-none selection is provided, a warning will be raised and no rows will be selected. If cells are supposes to be selected, the selection mode returned from the render function must (currently) be set to \"row\" or \"rows\".\n\nParameters\n\nThe cell selection to apply to the data frame. This can be a CellSelection object, \"all\" to select all cells (if possible), or None to clear the selection.\n\nupdate_cell_value\n\nUpdate the value of a cell in the data frame.\n\nCalling this method will set a new entry in .cell_patches(). It will not reset the user's sorting or filtering of their rendered data frame.\n\nParameters\n\nThe new value to set the cell to.\n\nThe row index of the cell to update.\n\nThe column index of the cell to update.\n\nupdate_data\n\nUpdate the data frame with new data.\n\nCalling this method will update the .data() data frame with new data and will remove all .cell_patches(). It will not reset the user's sorting or filtering of their rendered data frame. Any incompatible sorting or filtering settings will be silently dropped.\n\nParameters\n\nThe new data to render.\n\nupdate_filter\n\nUpdate the column filtering in the data frame.\n\nParameters\n\nA list of column filtering information. If None, filtering will be removed.\n\nExamples\n\nupdate_sort\n\nUpdate the column sorting in the data frame.\n\nThe sort will be applied in reverse order so that the first value has the highest precedence. This mean ties will go to the second sort column (and so on).\n\nParameters\n\nA list of column sorting information. If None, sorting will be removed. int values will be upgraded to {\"col\": int, \"desc\": <DESC>} where <DESC> is True if the column is number like and False otherwise.\n\nExamples\n\n",
    "code_examples": [
      "express.render.data_frame(self, fn)",
      "express.render.data_frame(self, fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas  # noqa: F401 (this line needed for Shinylive to load plotly.express)\nimport plotly.express as px\nfrom shinywidgets import render_widget\n\nfrom shiny import reactive, req\nfrom shiny.express import render, ui\n\n# Load the Gapminder dataset\ndf = px.data.gapminder()\n\n# Prepare a summary DataFrame\nsummary_df = (\n    df.groupby(\"country\")\n    .agg(\n        {\n            \"pop\": [\"min\", \"max\", \"mean\"],\n            \"lifeExp\": [\"min\", \"max\", \"mean\"],\n            \"gdpPercap\": [\"min\", \"max\", \"mean\"],\n        }\n    )\n    .reset_index()\n)\n\nsummary_df.columns = [\"_\".join(col).strip() for col in summary_df.columns.values]\nsummary_df.rename(columns={\"country_\": \"country\"}, inplace=True)\n\n# Set up the UI\n\nui.page_opts(fillable=True)\n\nui.markdown(\n    \"**Instructions**: Select one or more countries in the table below to see more information.\"\n)\n\nwith ui.layout_columns(col_widths=[12, 6, 6]):\n    with ui.card(height=\"400px\"):\n\n        @render.data_frame\n        def summary_data():\n            return render.DataGrid(summary_df.round(2), selection_mode=\"rows\")\n\n    with ui.card(height=\"400px\"):\n\n        @render_widget\n        def country_detail_pop():\n            return px.line(\n                filtered_df(),\n                x=\"year\",\n                y=\"pop\",\n                color=\"country\",\n                title=\"Population Over Time\",\n            )\n\n    with ui.card(height=\"400px\"):\n\n        @render_widget\n        def country_detail_percap():\n            return px.line(\n                filtered_df(),\n                x=\"year\",\n                y=\"gdpPercap\",\n                color=\"country\",\n                title=\"GDP per Capita Over Time\",\n            )\n\n\n@reactive.calc\ndef filtered_df():\n    data_selected = summary_data.data_view(selected=True)\n    req(not data_selected.empty)\n    countries = data_selected[\"country\"]\n\n    # Filter data for selected countries\n    return df[df[\"country\"].isin(countries)]\n\n",
      "express.render.data_frame.cell_patches()",
      "express.render.data_frame.cell_patches()",
      "express.render.data_frame.cell_selection()",
      "express.render.data_frame.cell_selection()",
      "express.render.data_frame.data()",
      "express.render.data_frame.data()",
      "express.render.data_frame.data_patched()",
      "express.render.data_frame.data_patched()",
      "express.render.data_frame.data_view(selected=False)",
      "express.render.data_frame.data_view(selected=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import render, ui\n\ndf = reactive.value(mtcars.iloc[:, range(4)])\n\n\nwith ui.layout_columns(col_widths=[4, 4, 4]):\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Editable data frame\n                * Edit the cells!\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_original():\n                return render.DataGrid(\n                    df(),\n                    editable=True,\n                )\n\n            # Convert edited values to the correct data type\n            @df_original.set_patch_fn\n            def _(*, patch: render.CellPatch) -> render.CellValue:\n                if patch[\"column_index\"] in [0, 2]:\n                    return float(patch[\"value\"])\n                return int(patch[\"value\"])\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Updated data from the first data frame\n                * Select the rows!\n                * Filter and sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_edited():\n                return render.DataGrid(\n                    df_original.data_view(),\n                    selection_mode=\"rows\",\n                    filters=True,\n                )\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Selected data from the second data frame\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_selected():\n                return render.DataGrid(\n                    df_edited.data_view(selected=True),\n                    selection_mode=\"none\",\n                )\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
      "express.render.data_frame.data_view_rows()",
      "express.render.data_frame.data_view_rows()",
      "express.render.data_frame.filter()",
      "express.render.data_frame.filter()",
      "express.render.data_frame.input_cell_selection()",
      "express.render.data_frame.input_cell_selection()",
      "express.render.data_frame.selection_modes()",
      "express.render.data_frame.selection_modes()",
      "express.render.data_frame.set_patch_fn(fn)",
      "express.render.data_frame.set_patch_fn(fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import render, ui\n\ndf = reactive.value(mtcars.iloc[:, range(4)])\n\n\nwith ui.layout_columns(col_widths=[4, 4, 4]):\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Editable data frame\n                * Edit the cells!\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_original():\n                return render.DataGrid(\n                    df(),\n                    editable=True,\n                )\n\n            # Convert edited values to the correct data type\n            @df_original.set_patch_fn\n            def _(*, patch: render.CellPatch) -> render.CellValue:\n                if patch[\"column_index\"] in [0, 2]:\n                    return float(patch[\"value\"])\n                return int(patch[\"value\"])\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Updated data from the first data frame\n                * Select the rows!\n                * Filter and sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_edited():\n                return render.DataGrid(\n                    df_original.data_view(),\n                    selection_mode=\"rows\",\n                    filters=True,\n                )\n\n    with ui.card():\n        with ui.card_header():\n            ui.markdown(\n                \"\"\"\n                ##### Selected data from the second data frame\n                * Sort the columns!\n                \"\"\"\n            )\n\n            @render.data_frame\n            def df_selected():\n                return render.DataGrid(\n                    df_edited.data_view(selected=True),\n                    selection_mode=\"none\",\n                )\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
      "express.render.data_frame.set_patches_fn(fn)",
      "express.render.data_frame.set_patches_fn(fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import render, ui\n\nhere = Path(__file__).parent\nmtcars_df = reactive.value(pd.read_csv(here / \"mtcars.csv\").iloc[:, range(4)])\n\n# A copy of the data frame that will store all the edits\nedited_df = reactive.value(None)\n\n\n# Copy mtcars_df to edited_df when mtcars_df changes and on initial load\n@reactive.effect\ndef _sync_mtcars_to_edited_df():\n    edited_df.set(mtcars_df())\n\n\nui.markdown(\n    \"\"\"\n    #### Instructions:\n    * Run the app locally so that the edits to the underlying CSV file will persist.\n    * Edit the cells in the table.\n\n    #### Note:\n    The data frame will not be re-rendered as the result of `df()` has not updated.\n\n    Once the `df()` is invalidated, all local edits are forgotten, and the data frame will be re-rendered. However, since the edits were saved to the CSV file, the edits will persist between refreshes (when run locally).\n    \"\"\"\n)\n\nwith ui.card():\n\n    @render.data_frame\n    def my_data_frame():\n        return render.DataGrid(\n            mtcars_df(),\n            editable=True,\n        )\n\n    # Save the edited values to the data source (ex: the CSV file)\n    @my_data_frame.set_patches_fn\n    def _(*, patches: list[render.CellPatch]) -> list[render.CellPatch]:\n        for patch in patches:\n            if patch[\"column_index\"] in [0, 2]:\n                patch[\"value\"] = float(patch[\"value\"])\n            else:\n                patch[\"value\"] = int(patch[\"value\"])\n\n        # \"Save to the database\" by writing the edited data to a CSV file\n        df = edited_df().copy()\n        for patch in patches:\n            df.iloc[patch[\"row_index\"], patch[\"column_index\"]] = patch[\"value\"]\n        edited_df.set(df)\n        df.to_csv(here / \"mtcars.csv\", index=False)\n        print(\"Saved the edited data to './mtcars.csv'\")\n\n        return patches\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp\n21.0,6,160.0,110\n21.0,6,160.0,110\n22.8,4,108.0,93\n21.4,6,258.0,110\n18.7,8,360.0,175\n18.1,6,225.0,105\n14.3,8,360.0,245\n24.4,4,146.7,62\n22.8,4,140.8,95\n19.2,6,167.6,123\n17.8,6,167.6,123\n16.4,8,275.8,180\n17.3,8,275.8,180\n15.2,8,275.8,180\n10.4,8,472.0,205\n10.4,8,460.0,215\n14.7,8,440.0,230\n32.4,4,78.7,66\n30.4,4,75.7,52\n33.9,4,71.1,65\n21.5,4,120.1,97\n15.5,8,318.0,150\n15.2,8,304.0,150\n13.3,8,350.0,245\n19.2,8,400.0,175\n27.3,4,79.0,66\n26.0,4,120.3,91\n30.4,4,95.1,113\n15.8,8,351.0,264\n19.7,6,145.0,175\n15.0,8,301.0,335\n21.4,4,121.0,109\n\n",
      "express.render.data_frame.sort()",
      "express.render.data_frame.sort()",
      "express.render.data_frame.update_cell_selection(selection)",
      "express.render.data_frame.update_cell_selection(selection)",
      "express.render.data_frame.update_cell_value(value, *, row, col)",
      "express.render.data_frame.update_cell_value(value, *, row, col)",
      "express.render.data_frame.update_data(data)",
      "express.render.data_frame.update_data(data)",
      "express.render.data_frame.update_filter(filter)",
      "express.render.data_frame.update_filter(filter)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\ndata = reactive.value(mtcars.iloc[:, range(4)])\nwith ui.card():\n    with ui.layout_column_wrap(fill=False):\n        ui.input_action_button(\"btn\", \"Filter on columns 0, 1, and 3\")\n        ui.input_action_button(\"reset\", \"Reset column filters\")\n\n    @render.data_frame\n    def df():\n        return render.DataGrid(data(), filters=True)\n\n\n@reactive.effect\n@reactive.event(input.reset)\nasync def _():\n    await df.update_filter(None)\n\n\n@reactive.effect\n@reactive.event(input.btn)\nasync def _():\n    await df.update_filter(\n        [\n            {\"col\": 0, \"value\": [19, 25]},\n            {\"col\": 1, \"value\": [None, 6]},\n            {\"col\": 3, \"value\": [100, None]},\n        ]\n    )\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
      "express.render.data_frame.update_sort(sort)",
      "express.render.data_frame.update_sort(sort)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\ndata = reactive.value(mtcars.iloc[:, range(4)])\n\nwith ui.card():\n    ui.input_action_button(\"btn\", \"Sort on columns 1‚Üë and 3‚Üì\")\n\n    @render.data_frame\n    def df():\n        return render.DataGrid(data())\n\n\n@reactive.effect\n@reactive.event(input.btn)\nasync def _():\n    await df.update_sort([{\"col\": 1, \"desc\": False}, {\"col\": 3, \"desc\": True}])\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n"
    ]
  },
  {
    "id": "api_express_express_render_DataGrid_html",
    "url": "api/express/express.render.DataGrid.html",
    "title": "express.render.datagrid ‚Äì Shiny for Python",
    "description": "",
    "content": "- Output components\n- express.render.DataGrid\n\nexpress.render.DataGrid\n\nHolds the data and options for a data_frame output, for a spreadsheet-like view.\n\nThis class is used to wrap the returned data frame from a @render.data_frame render function. It allows you to specify options for the data grid, such as the width and height of the grid, whether to show a summary message, whether to show filter inputs, whether the cells are editable, and how the cells are selected.\n\nWhile there are currently no execution or parameter differences between DataGrid and DataTable other than CSS styling in the browser, the two classes are kept separate to allow for future extensibility.\n\nParameters\n\nA pandas, polars, or eager narwhals compatible DataFrame object.\n\nA maximum amount of horizontal space for the data grid to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. The default is fit-content, which sets the grid‚Äôs width according to its contents. Set this to 100% to use the maximum available horizontal space.\n\nA maximum amount of vertical space for the data grid to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the grid will scroll. Set the height to \"auto\" to allow the grid to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).\n\nIf True (the default), shows a message like ‚ÄúViewing rows 1 through 10 of 20‚Äù below the grid when not all of the rows are being shown. If False, the message is not displayed. You can also specify a string template to customize the message, containing {start}, {end}, and {total} tokens. For example: \"Viendo filas {start} a {end} de {total}\".\n\nIf True, shows a row of filter inputs below the headers, one for each column.\n\nIf True, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.\n\nSingle string or a set/list/tuple of string values to define possible ways to select data within the data frame. Supported values: * Use \"none\" to disable any cell selections or editing. * Use \"row\" to allow a single row to be selected at a time. * Use \"rows\" to allow multiple rows to be selected by clicking on them individually. Resolution rules: * If \"none\" is supplied, all other values will be ignored. * If both \"row\" and \"rows\" are supplied, \"row\" will be dropped (supporting \"rows\").\n\nA style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If styles=None, no styling will be applied. Style info object key/value description: * location: This value \"body\" and is not required. * rows: The row numbers to which the style should be applied. If None, the style will be applied to all rows. * cols: The column numbers to which the style should be applied. If None, the style will be applied to all columns. * style: A dictionary of CSS properties and values to apply to the selected rows and columns. Traditional kebab-cased CSS property names (e.g. background-color) will work in addition to camelCased CSS property names (e.g. backgroundColor). * class: A string of CSS class names to apply to the selected rows and columns. If both style and class are missing or None, nothing will be applied. If both rows and cols are missing or None, the style will be applied to the complete data frame.\n\nDeprecated. Please use selection_mode= instead.\n\nReturns\n\nAn object suitable for being returned from a @render.data_frame-decorated output function.\n\nSee Also\n\n- output_data_frame - The UI placeholder for a data frame output.\n- data_frame - The render method for data frames.\n- DataTable - A more tabular view of the data.\n\nExamples\n\nMethods\n\nto_payload\n\nConverts the DataGrid object to a payload dictionary.\n\nReturns\n\nThe payload dictionary representing the DataGrid object.\n\n",
    "code_examples": [
      "express.render.DataGrid(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height=None,\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "express.render.DataGrid(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height=None,\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\nimport seaborn as sns\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nheight = 350\nwidth = \"fit-content\"\ndf: reactive.value[pd.DataFrame] = reactive.value(\n    sns.load_dataset(\"anagrams\").iloc[:, 1:]\n)\n\n\ndef update_data_with_patch(patch):\n    df_copy = df().copy()\n    fn = str if patch[\"column_index\"] == 0 else int\n    df_copy.iat[patch[\"row_index\"], patch[\"column_index\"]] = fn(patch[\"value\"])\n    df.set(df_copy)\n\n\nui.head_content(\n    ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\")\n)\nui.input_select(\n    \"selection_mode\",\n    \"Selection mode\",\n    {\n        \"none\": \"(None)\",\n        \"row\": \"Single row\",\n        \"rows\": \"Multiple rows\",\n    },\n    selected=\"rows\",\n)\nui.input_switch(\"filters\", \"Filters\", True)\nui.input_switch(\"editable\", \"Editable\", True)\n\nwith ui.layout_column_wrap(width=1 / 2):\n    with ui.card():\n        ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataGrid\"))\n\n        @render.data_frame\n        def grid():\n            return render.DataGrid(\n                df(),\n                width=width,\n                height=height,\n                filters=input.filters(),\n                editable=input.editable(),\n                selection_mode=input.selection_mode(),\n            )\n\n        @grid.set_patch_fn\n        def _(*, patch: render.CellPatch):\n            update_data_with_patch(patch)\n            return patch[\"value\"]\n\n    with ui.card():\n        ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataTable\"))\n\n        @render.data_frame\n        def table():\n            return render.DataTable(\n                df(),\n                width=width,\n                height=height,\n                filters=input.filters(),\n                editable=input.editable(),\n                selection_mode=input.selection_mode(),\n            )\n\n        @table.set_patch_fn\n        def _(*, patch: render.CellPatch):\n            update_data_with_patch(patch)\n            return patch[\"value\"]\n\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\n\nfrom shiny.express import render, ui\n\ngreen_styles = [\n    {\n        \"rows\": [2, 4],\n        \"cols\": [2, 4],\n        \"style\": {\n            \"background-color\": \"mediumspringgreen\",\n            \"width\": \"300px\",\n            \"height\": \"100px\",\n        },\n    }\n]\n\nn = 6\ndf = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n    }\n)\n\nui.h2(\"Data Frame with Styles applied to 4 cells\")\n\n\n@render.data_frame\ndef my_df():\n    return render.DataGrid(\n        df,\n        styles=green_styles,\n    )\n\n\nui.hr()\n\nui.h2(\"Custom styles applied to all cells within a data frame \", ui.HTML(\"&#128075;\"))\n\nui.tags.style(\n    ui.HTML(\n        \"\"\"\n    .posit-bg {\n        background-color: #242a26 ;\n    }\n    .posit-blue-bg {\n        background-color: #447099 ;\n    }\n    .posit-orange-bg {\n        background-color: #ED642F ;\n    }\n    \"\"\"\n    )\n)\n\nhi_styles = [\n    {\n        # No `rows` or `cols` means apply to all cells\n        \"class\": \"posit-bg\",\n        \"style\": {\n            \"border\": \"transparent\",\n            \"color\": \"transparent\",\n        },\n    },\n    {\n        \"rows\": [3],\n        \"cols\": [2],\n        \"class\": \"posit-blue-bg\",\n        \"style\": {\n            \"width\": \"100px\",\n            \"height\": \"75px\",\n        },\n    },\n    {\n        \"cols\": [1, 3, 5],\n        \"class\": \"posit-blue-bg\",\n    },\n    {\n        \"cols\": [7],\n        \"rows\": [0, 1, 2, 3, 5],\n        \"class\": \"posit-orange-bg\",\n    },\n]\n\nn = 7\nhi_pd = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n        \"f\": range(n * 5, n * 6),\n        \"g\": range(n * 6, n * 7),\n        \"h\": range(n * 7, n * 8),\n        \"i\": range(n * 8, n * 9),\n    }\n)\n\n\n@render.data_frame\ndef hi_df():\n    return render.DataGrid(\n        hi_pd,\n        styles=hi_styles,\n    )\n\n",
      "express.render.DataGrid.to_payload()",
      "express.render.DataGrid.to_payload()"
    ]
  },
  {
    "id": "api_express_express_render_text_html",
    "url": "api/express/express.render.text.html",
    "title": "express.render.text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Output components\n- express.render.text\n\nexpress.render.text\n\nReactively render text.\n\nWhen used in Shiny Express applications, this defaults to displaying the text as normal text on the web page. When used in Shiny Core applications, this should be paired with output_text in the UI.\n\nParameters\n\n(Express only). If True, the result is displayed inline. (This argument is passed to output_text.)\n\nReturns\n\nA decorator for a function that returns a string.\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_text container (see output_text for example usage).\n\nSee Also\n\n- code\n- output_text\n\n",
    "code_examples": [
      "express.render.text(self, _fn=None, *, inline=False)",
      "express.render.text(self, _fn=None, *, inline=False)"
    ]
  },
  {
    "id": "api_express_express_render_ui_html",
    "url": "api/express/express.render.ui.html",
    "title": "express.render.ui ‚Äì Shiny for Python",
    "description": "",
    "content": "- Output components\n- express.render.ui\n\nexpress.render.ui\n\nReactively render HTML content.\n\nNote: If you want to write your function with Shiny Express syntax, where the UI components are automatically captured as the code is evaluated, use express instead of this function.\n\nThis function is used to render HTML content, but it requires that the funciton returns the content, using Shiny Core syntax.\n\nReturns\n\nA decorator for a function that returns an object of type TagChild.\n\nTips\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_ui container (see output_ui for example usage).\n\nSee Also\n\n- express\n- expressify\n- output_ui\n\nExamples\n\n",
    "code_examples": [
      "express.render.ui(self, _fn=None)",
      "express.render.ui(self, _fn=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_action_button(\"add\", \"Add more controls\")\n\n\n@render.ui\n@reactive.event(input.add)\ndef moreControls():\n    return [\n        ui.input_slider(\"n\", \"N\", min=1, max=1000, value=500),\n        ui.input_text(\"label\", \"Label\"),\n    ]\n\n"
    ]
  },
  {
    "id": "api_express_express_render_download_html",
    "url": "api/express/express.render.download.html",
    "title": "express.render.download ‚Äì Shiny for Python",
    "description": "",
    "content": "- Output components\n- express.render.download\n\nexpress.render.download\n\nDecorator to register a function to handle a download.\n\nThis decorator is used to register a function that will be called when the user clicks a download link or button. The decorated function may be sync or async, and should do one of the following:\n\n- Return a string. This will be assumed to be a filename; Shiny will return this file to the browser, and the downloaded file will have the same filename as the original, with an inferred mime type. This is the most convenient IF the file already exists on disk. But if the function must create a temporary file, then this method should not be used, because the temporary file will not be deleted by Shiny. Use the yield method instead.\n- yield one or more strings or bytestrings (b\"...\" or io.BytesIO().getvalue()). If strings are yielded, they'll be encoded in UTF-8. (This is better for temp files as after you're done yielding you can delete the temp file, or use a tempfile.TemporaryFile context manager) With this method, it's important that the @render.download decorator have a filename argument, as the decorated function won't help with that.\n\nParameters\n\nThe filename of the download.\n\nThe media type of the download.\n\nThe encoding of the download.\n\n(Express only) A label for the button. Defaults to ‚ÄúDownload‚Äù.\n\nReturns\n\nThe decorated function.\n\nSee Also\n\n- download_button\n- download_link\n\nExamples\n\n",
    "code_examples": [
      "express.render.download(\n    self,\n    fn=None,\n    *,\n    filename=None,\n    media_type=None,\n    encoding='utf-8',\n    label='Download',\n)",
      "express.render.download(\n    self,\n    fn=None,\n    *,\n    filename=None,\n    media_type=None,\n    encoding='utf-8',\n    label='Download',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nimport io\nimport os\nfrom datetime import date\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny.express import render, ui\n\nui.page_opts(title=\"Various download examples\")\n\nwith ui.accordion(open=True):\n    with ui.accordion_panel(\"Simple case\"):\n        ui.markdown(\"Downloads a pre-existing file, using its existing name on disk.\")\n\n        @render.download(label=\"Download CSV\")\n        def download1():\n            \"\"\"\n            This is the simplest case. The implementation simply returns the name of a file.\n            Note that the function name (`download1`) determines which download_button()\n            corresponds to this function.\n            \"\"\"\n\n            path = os.path.join(os.path.dirname(__file__), \"mtcars.csv\")\n            return path\n\n    with ui.accordion_panel(\"Dynamic data generation\"):\n        ui.markdown(\"Downloads a PNG that's generated on the fly.\")\n\n        ui.input_text(\"title\", \"Plot title\", \"Random scatter plot\")\n        ui.input_slider(\"num_points\", \"Number of data points\", min=1, max=100, value=50)\n\n        @render.download(label=\"Download plot\", filename=\"image.png\")\n        def download2():\n            \"\"\"\n            Another way to implement a file download is by yielding bytes; either all at\n            once, like in this case, or by yielding multiple times. When using this\n            approach, you should pass a filename argument to @render.download, which\n            determines what the browser will name the downloaded file.\n            \"\"\"\n\n            print(input.num_points())\n            x = np.random.uniform(size=input.num_points())\n            y = np.random.uniform(size=input.num_points())\n            plt.figure()\n            plt.scatter(x, y)\n            plt.title(input.title())\n            with io.BytesIO() as buf:\n                plt.savefig(buf, format=\"png\")\n                yield buf.getvalue()\n\n    with ui.accordion_panel(\"Dynamic filename\"):\n        ui.markdown(\n            \"Demonstrates that filenames can be generated on the fly (and use Unicode characters!).\"\n        )\n\n        @render.download(\n            label=\"Download filename\",\n            filename=lambda: f\"Êñ∞Âûã-{date.today().isoformat()}-{np.random.randint(100, 999)}.csv\",\n        )\n        async def download3():\n            await asyncio.sleep(0.25)\n            yield \"one,two,three\\n\"\n            yield \"Êñ∞,1,2\\n\"\n            yield \"Âûã,4,5\\n\"\n\n    with ui.accordion_panel(\"Failed downloads\"):\n        ui.markdown(\n            \"Throws an error in the download handler, download should not succeed.\"\n        )\n\n        @render.download(label=\"Download\", filename=\"failuretest.txt\")\n        async def download4():\n            yield \"hello\"\n            raise Exception(\"This error was caused intentionally\")\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n"
    ]
  },
  {
    "id": "api_express_express_render_image_html",
    "url": "api/express/express.render.image.html",
    "title": "express.render.image ‚Äì Shiny for Python",
    "description": "",
    "content": "- Output components\n- express.render.image\n\nexpress.render.image\n\nReactively render a image file as an HTML image.\n\nParameters\n\nIf True, the image file will be deleted after rendering.\n\nReturns\n\nA decorator for a function that returns an ImgData object.\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_image container (see output_image for example usage).\n\nSee Also\n\n- output_image\n- ImgData\n- plot\n\nExamples\n\n",
    "code_examples": [
      "express.render.image(self, _fn=None, *, delete_file=False)",
      "express.render.image(self, _fn=None, *, delete_file=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import render\n\n\n@render.image\ndef image():\n    from pathlib import Path\n\n    dir = Path(__file__).resolve().parent\n    img = {\"src\": str(dir / \"posit-logo.png\"), \"width\": \"100px\"}\n    return img\n\n\n## file: posit-logo.png\n## type: binary\\n"
    ]
  },
  {
    "id": "api_express_express_render_express_html",
    "url": "api/express/express.render.express.html",
    "title": "express.render.express ‚Äì Shiny for Python",
    "description": "",
    "content": "- Output components\n- express.render.express\n\nexpress.render.express\n\nReactively render HTML content with output captured as in Shiny Express\n\nThis is similar to ui, except that ui uses the return value from the the decorated function, whereas this function works like Shiny Express: as it executes each line of the decorated function, it calls :func:~sys.displayhook() on the result. This has the effect of \"capturing\" the output of each line.\n\nThis decorator can be thought of as a combination of ui (for rendering and sending the dynamic UI to the client), and ~shiny.express.expressify (for capturing the output of each line).\n\nReturns\n\nA decorator for a function that returns None.\n\nSee Also\n\n- ui\n- output_ui\n- expressify\n- hold\n\nExamples\n\n",
    "code_examples": [
      "express.render.express(\n    self,\n    _fn=None,\n    *,\n    inline=False,\n    container=None,\n    fill=False,\n    fillable=False,\n    **kwargs,\n)",
      "express.render.express(\n    self,\n    _fn=None,\n    *,\n    inline=False,\n    container=None,\n    fill=False,\n    fillable=False,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nui.input_text(\"name\", \"Name\", \"Socrates\")\nui.input_text(\"years\", \"Years\", \"470-399 BC\")\n\n\n@render.express\ndef person():\n    with ui.card(class_=\"mt-3\"):\n        ui.h3(input.name())\n        input.years()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_page_opts_html",
    "url": "api/express/express.ui.page_opts.html",
    "title": "express.ui.page_opts ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.page_opts\n\nexpress.ui.page_opts\n\nSet page-level options for the current app.\n\nThe arguments to this function get passed to page_auto, which determines which page function should be used based on the page options and the top-level items in the app.\n\nIf there is a top-level nav_panel, page_auto will use page_navbar. Otherwise, if there is a top-level sidebar, page_sidebar is used.\n\nIf there are neither top-level nav panels nor sidebars, this will use the fillable and full_width arguments to determine which page function to use:\n\n- If fillable is True, page_fillable is used.\n- Otherwise, if full_width is True, page_fluid is used.\n- If neither are True, page_fixed is used.\n\nParameters\n\nA title shown on the page.\n\nThe browser window title. If no value is provided, this will use the value of title.\n\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\n\nA custom Shiny theme created using the Theme class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete bootstrap.css or bootstrap.min.css file. For advanced uses, you can also pass a Tagifiable object. In this case, Shiny will suppress the default Bootstrap CSS. To modify the theme of an app without replacing the Bootstrap CSS entirely, use include_css to add custom CSS.\n\nIf there is a top-level sidebar or nav, then the value is passed through to the page_sidebar or page_navbar function. Otherwise, if True, use page_fillable, where the content fills the window; if False (the default), the value of full_width will determine which page function is used.\n\nThis has an effect only if there are no sidebars or top-level navs, and fillable is False. If this is False (the default), use use page_fixed; if True, use page_fillable.\n\nThe page function to use. If None (the default), will automatically choose one based on the arguments provided. If not None, this will override all heuristics for choosing page functions.\n\nAdditional arguments to pass to the page function. See the description above for further details on how the page function is selected.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.page_opts(\n    title=MISSING,\n    window_title=MISSING,\n    lang=MISSING,\n    theme=MISSING,\n    page_fn=MISSING,\n    fillable=MISSING,\n    full_width=MISSING,\n    **kwargs,\n)",
      "express.ui.page_opts(\n    title=MISSING,\n    window_title=MISSING,\n    lang=MISSING,\n    theme=MISSING,\n    page_fn=MISSING,\n    fillable=MISSING,\n    full_width=MISSING,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\nui.page_opts(title=\"App with Navbar\", fillable=True, id=\"page\")\n\nwith ui.sidebar():\n    ui.input_select(\"data\", \"Dataset\", (\"tips\", \"flights\", \"exercise\"))\n\n    with ui.panel_conditional(\"input.page === 'View'\"):\n        ui.input_select(\"view\", \"View\", (\"plot\", \"table\"))\n\nui.nav_spacer()\n\nwith ui.nav_panel(\"Data\"):\n    \"This page could be used to pick a dataset.\"\n\nwith ui.nav_panel(\"View\"):\n    \"This page could be used to view the dataset.\"\n    \"Notice the additional controls that appear when 'View' is selected.\"\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_sidebar_html",
    "url": "api/express/express.ui.sidebar.html",
    "title": "express.ui.sidebar ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.sidebar\n\nexpress.ui.sidebar\n\nContext manager for sidebar element\n\nThis function wraps sidebar.\n\nParameters\n\nA valid CSS unit used for the width of the sidebar.\n\nWhere the sidebar should appear relative to the main content, one of \"left\" or \"right\".\n\nThe initial state of the sidebar. If a string, the possible values are: * \"open\": the sidebar starts open * \"closed\": the sidebar starts closed * \"always\": the sidebar is always open and cannot be closed Alternatively, you can provide a dictionary with keys \"desktop\" and \"mobile\" to set different initial states for desktop and mobile. For example, when {\"desktop\": \"open\", \"mobile\": \"closed\"} the sidebar is initialized in the open state on desktop screens or in the closed state on mobile screens.\n\nA character string. Required if wanting to reactively read (or update) the collapsible state in a Shiny app.\n\nA character title to be used as the sidebar title, which will be wrapped in a <div> element with class sidebar-title. You can also provide a custom Tag for the title element, in which case you‚Äôll likely want to give this element class = \"sidebar-title\".\n\nA background or foreground color.\n\nCSS classes for the sidebar container element, in addition to the fixed .sidebar class.\n\nA CSS length unit (passed through as_css_unit) defining the maximum height of the horizontal sidebar when viewed on mobile devices. Only applies to always-open sidebars on mobile, where by default the sidebar container is placed below the main content container on mobile devices.\n\nA CSS length unit defining the vertical gap (i.e., spacing) between elements provided to *args.\n\nPadding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. padding may be one to four values. * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left respectively.\n\nNamed attributes are supplied to the sidebar content container.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.sidebar(\n    position='left',\n    open=None,\n    width=250,\n    id=None,\n    title=None,\n    bg=None,\n    fg=None,\n    class_=None,\n    max_height_mobile=None,\n    gap=None,\n    padding=None,\n    **kwargs,\n)",
      "express.ui.sidebar(\n    position='left',\n    open=None,\n    width=250,\n    id=None,\n    title=None,\n    bg=None,\n    fg=None,\n    class_=None,\n    max_height_mobile=None,\n    gap=None,\n    padding=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nui.page_opts(fillable=True)\n\nwith ui.card():\n    with ui.layout_sidebar():\n        with ui.sidebar(id=\"sidebar_left\", open=\"desktop\"):\n            \"Left sidebar content\"\n\n        @render.code\n        def state_left():\n            return f\"input.sidebar_left(): {input.sidebar_left()}\"\n\n\nwith ui.card():\n    with ui.layout_sidebar():\n        with ui.sidebar(id=\"sidebar_right\", position=\"right\", open=\"desktop\"):\n            \"Right sidebar content\"\n\n        @render.code\n        def state_right():\n            return f\"input.sidebar_right(): {input.sidebar_right()}\"\n\n\nwith ui.card():\n    with ui.layout_sidebar():\n        with ui.sidebar(id=\"sidebar_closed\", open=\"closed\"):\n            \"Closed sidebar content\"\n\n        @render.code\n        def state_closed():\n            return f\"input.sidebar_closed(): {input.sidebar_closed()}\"\n\n\nwith ui.card():\n    with ui.layout_sidebar():\n        with ui.sidebar(id=\"sidebar_always\", open=\"always\"):\n            \"Always sidebar content\"\n\n        @render.code\n        def state_always():\n            return f\"input.sidebar_always(): {input.sidebar_always()}\"\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_layout_columns_html",
    "url": "api/express/express.ui.layout_columns.html",
    "title": "express.ui.layout_columns ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.layout_columns\n\nexpress.ui.layout_columns\n\nContext manager for responsive, column-based grid layouts, based on a 12-column grid.\n\nThis function wraps layout_columns.\n\nParameters\n\nThe widths of the columns, possibly at different breakpoints. Can be one of the following: * None (the default): Automatically determines a sensible number of columns based on the number of children given to the layout. * A list or tuple of integers between 1 and 12, where each element represents the number of columns for the relevant UI element. Column widths are recycled to extend the values in col_widths to match the actual number of items in the layout, and children are wrapped onto the next row when a row exceeds 12 column units. For example, col_widths=(4, 8, 12) allocates 4 columns to the first element, 8 columns to the second element, and 12 columns to the third element (which wraps to the next row). Negative values are also allowed, and are treated as empty columns. For example, col_widths=(-2, 8, -2) would allocate 8 columns to an element (with 2 empty columns on either side). * A dictionary of column widths at different breakpoints. The keys should be one of \"xs\", \"sm\", \"md\", \"lg\", \"xl\", or \"xxl\", and the values are either of the above. For example, col_widths={\"sm\": (3, 3, 6), \"lg\": (4)}.\n\nThe heights of the rows, possibly at different breakpoints. Can be one of the following: * A numeric vector, where each value represents the fractional unit (fr) height of the relevant row. If there are more rows than values provided, the pattern will be repeated. For example, row_heights=(1, 2) allows even rows to take up twice as much space as odd rows. * A list of numeric or CSS length units, where each value represents the height of the relevant row. If more rows are needed than values provided, the pattern will repeat. For example, row_heights=[\"auto\", 1] allows the height of odd rows to be driven my it‚Äôs contents and even rows to be 1fr. * A single string containing CSS length units. In this case, the value is supplied directly to grid-auto-rows. * A dictionary of row heights at different breakpoints, where each key is a breakpoint name (one of \"xs\", \"sm\", \"md\", \"lg\", \"xl\", or \"xxl\") and where the values may be any of the above options.\n\nWhether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nWhether or not each element is wrapped in a fillable container.\n\nAny valid CSS unit to use for the gap between columns.\n\nCSS class(es) to apply to the containing element.\n\nA valid CSS unit (e.g., height=\"200px\"). Use min_height and max_height in a filling layout to ensure that the layout container does not shrink below a min_height or grow beyond a max_height.\n\nAdditional attributes to apply to the containing element.\n\nReturns\n\nAn Tag element.\n\nSee Also\n\n- layout_column_wrap for laying out elements into a uniform grid.\n\nReference\n\n- Bootstrap CSS Grid\n- Bootstrap Breakpoints\n\nExamples\n\n",
    "code_examples": [
      "express.ui.layout_columns(\n    col_widths=None,\n    row_heights=None,\n    fill=True,\n    fillable=True,\n    gap=None,\n    class_=None,\n    height=None,\n    min_height=None,\n    max_height=None,\n    **kwargs,\n)",
      "express.ui.layout_columns(\n    col_widths=None,\n    row_heights=None,\n    fill=True,\n    fillable=True,\n    gap=None,\n    class_=None,\n    height=None,\n    min_height=None,\n    max_height=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom model_plots import (\n    plot_accuracy_over_time,\n    plot_feature_importance,\n    plot_loss_over_time,\n)\n\nfrom shiny.express import render, ui\n\nui.page_opts(title=\"Model Dashboard\")\n\nui.markdown(\"Using `ui.layout_columns()` for the layout.\")\n\n\nwith ui.layout_columns(\n    col_widths={\"sm\": (5, 7, 12)},\n    # row_heights=(2, 3),\n    # height=\"700px\",\n):\n    with ui.card(full_screen=True):\n        ui.card_header(\"Loss Over Time\")\n\n        @render.plot\n        def loss_over_time():\n            return plot_loss_over_time()\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Accuracy Over Time\")\n\n        @render.plot\n        def accuracy_over_time():\n            return plot_accuracy_over_time()\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Feature Importance\")\n\n        @render.plot\n        def feature_importance():\n            return plot_feature_importance()\n\n\n## file: model_plots.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import ui\n\n\ndef plot_loss_over_time():\n    epochs = np.arange(1, 101)\n    loss = 1000 / np.sqrt(epochs) + np.random.rand(100) * 25\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.plot(epochs, loss)\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Loss\")\n    return fig\n\n\ndef plot_accuracy_over_time():\n    epochs = np.arange(1, 101)\n    accuracy = np.sqrt(epochs) / 12 + np.random.rand(100) * 0.15\n    accuracy = [np.min([np.max(accuracy[:i]), 1]) for i in range(1, 101)]\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.plot(epochs, accuracy)\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Accuracy\")\n    return fig\n\n\ndef plot_feature_importance():\n    features = [\"Product Category\", \"Price\", \"Brand\", \"Rating\", \"Number of Reviews\"]\n    importance = np.random.rand(5)\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.barh(features, importance)\n    plt.xlabel(\"Importance\")\n    return fig\n\n\ncard_loss = ui.card(\n    ui.card_header(\"Loss Over Time\"),\n    ui.output_plot(\"loss_over_time\"),\n    full_screen=True,\n)\n\ncard_acc = ui.card(\n    ui.card_header(\"Accuracy Over Time\"),\n    ui.output_plot(\"accuracy_over_time\"),\n    full_screen=True,\n)\n\ncard_feat = ui.card(\n    ui.card_header(\"Feature Importance\"),\n    ui.output_plot(\"feature_importance\"),\n    full_screen=True,\n)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_layout_column_wrap_html",
    "url": "api/express/express.ui.layout_column_wrap.html",
    "title": "express.ui.layout_column_wrap ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.layout_column_wrap\n\nexpress.ui.layout_column_wrap\n\nContext manager for a grid-like, column-first layout\n\nThis function wraps layout_column_wrap.\n\nWraps a 1d sequence of UI elements into a 2d grid. The number of columns (and rows) in the grid dependent on the column width as well as the size of the display.\n\nParameters\n\nThe desired width of each card. It can be one of the following: * A (unit-less) number between 0 and 1, specified as 1/num, where num represents the number of desired columns. * A CSS length unit representing either the minimum (when fixed_width=False) or fixed width (fixed_width=True). * None, which allows power users to set the grid-template-columns CSS property manually, either via a style attribute or a CSS stylesheet. * If missing, a value of 200px will be used.\n\nWhen width is greater than 1 or is a CSS length unit, e.g. \"200px\", fixed_width indicates whether that width value represents the absolute size of each column (fixed_width=TRUE) or the minimum size of a column (fixed_width=FALSE). When fixed_width=FALSE, new columns are added to a row when width space is available and columns will never exceed the container or viewport size. When fixed_width=TRUE, all columns will be exactly width wide, which may result in columns overflowing the parent container.\n\nIf \"all\" (the default), every card in every row of the grid will have the same height. If \"row\", then every card in each row of the grid will have the same height, but heights may vary between rows.\n\nWhether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nWhether or not each element is wrapped in a fillable container.\n\nA valid CSS unit (e.g., height=\"200px\"). Use min_height and max_height in a filling layout to ensure that the layout container does not shrink below a min_height or grow beyond a max_height.\n\nAny valid CSS unit to use for the height when on mobile devices (or narrow windows).\n\nAny valid CSS unit to use for the gap between columns.\n\nA CSS class to apply to the containing element.\n\nAdditional attributes to apply to the containing element.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.layout_column_wrap(\n    width=MISSING,\n    fixed_width=False,\n    heights_equal='all',\n    fill=True,\n    fillable=True,\n    height=None,\n    min_height=None,\n    max_height=None,\n    height_mobile=None,\n    gap=None,\n    class_=None,\n    **kwargs,\n)",
      "express.ui.layout_column_wrap(\n    width=MISSING,\n    fixed_width=False,\n    heights_equal='all',\n    fill=True,\n    fillable=True,\n    height=None,\n    min_height=None,\n    max_height=None,\n    height_mobile=None,\n    gap=None,\n    class_=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\nwith ui.hold() as a_card:\n    with ui.card():\n        \"A simple card\"\n\n# Always has 2 columns (on non-mobile)\nwith ui.layout_column_wrap(width=1 / 2):\n    a_card\n    a_card\n    a_card\n\nui.hr()\n\n# Has three columns when viewport is wider than 750px\nwith ui.layout_column_wrap(width=\"250px\"):\n    a_card\n    a_card\n    a_card\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_card_html",
    "url": "api/express/express.ui.card.html",
    "title": "express.ui.card ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.card\n\nexpress.ui.card\n\nContext manager for Bootstrap card component\n\nThis function wraps card.\n\nA general purpose container for grouping related UI elements together with a border and optional padding. To learn more about card()s, see this article.\n\nParameters\n\nIf True, an icon will appear when hovering over the card body. Clicking the icon expands the card to fit viewport size.\n\nAny valid CSS unit (e.g., height=\"200px\"). Doesn‚Äôt apply when a card is made full_screen (in this case, consider setting a height in card_body).\n\nWhether or not to allow the card to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nAdditional CSS classes for the returned Tag.\n\nHTML attributes on the returned Tag.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.card(\n    full_screen=False,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    **kwargs,\n)",
      "express.ui.card(\n    full_screen=False,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"This is the header\")\n    ui.p(\"This is the body.\")\n    ui.p(\"This is still the body.\")\n    ui.card_footer(\"This is the footer\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_card_header_html",
    "url": "api/express/express.ui.card_header.html",
    "title": "express.ui.card_header ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.card_header\n\nexpress.ui.card_header\n\nContext manager for a card header container\n\nThis function wraps card_header.\n\nA general container for the \"header\" of a card. This component is designed to be provided as a direct child to card.\n\nThe header has a different background color and border than the rest of the card.\n\nParameters\n\nContents to the header container. Or tag attributes that are supplied to the resolved Tag object.\n\nMethod for the returned Tag object. Defaults to div.\n\nAdditional HTML attributes for the returned Tag.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.card_header(*args, container=ui.tags.div, **kwargs)",
      "express.ui.card_header(*args, container=ui.tags.div, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"This is the header\")\n    ui.p(\"This is the body.\")\n    ui.p(\"This is still the body.\")\n    ui.card_footer(\"This is the footer\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_card_footer_html",
    "url": "api/express/express.ui.card_footer.html",
    "title": "express.ui.card_footer ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.card_footer\n\nexpress.ui.card_footer\n\nContext manager for a card footer container\n\nThis function wraps card_footer.\n\nA general container for the \"footer\" of a card. This component is designed to be provided as a direct child to card.\n\nThe footer has a different background color and border than the rest of the card.\n\nParameters\n\nContents to the footer container. Or tag attributes that are supplied to the resolved Tag object.\n\nAdditional HTML attributes for the returned Tag.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.card_footer(*args, **kwargs)",
      "express.ui.card_footer(*args, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"This is the header\")\n    ui.p(\"This is the body.\")\n    ui.p(\"This is still the body.\")\n    ui.card_footer(\"This is the footer\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_value_box_html",
    "url": "api/express/express.ui.value_box.html",
    "title": "express.ui.value_box ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.value_box\n\nexpress.ui.value_box\n\nContext manager for a value box\n\nThis function wraps value_box.\n\nAn opinionated (card-powered) box, designed for displaying a title (the 1st child), value (the 2nd child), and other explanation text (other children, if any). Optionally, a showcase can provide for context for what the value represents (for example, it could hold an icon, or even a output_plot).\n\nParameters\n\nA Tag child to showcase (e.g., an icon, a output_plot, etc).\n\nOne of \"left center\" (default), \"top right\" or \"bottom\". Alternatively, you can customize the showcase layout options with the showcase_left_center, :func:~shiny.express.ui.showcase_top_right(), or :func:~shiny.express.ui.showcase_bottom() functions. Use the options functions when you want to control the height or width of the showcase area.\n\nThe name of a theme (e.g. \"primary\", \"danger\", \"purple\", \"bg-green\", \"text-red\") for the value box, or a theme constructed with value_box_theme. The theme names provide a convenient way to use your app‚Äôs Bootstrap theme colors as the foreground or background colors of the value box. For more control, you can create your own theme with value_box_theme where you can pass foreground and background colors directly. Bootstrap supported color themes: \"blue\", \"purple\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"teal\", and \"cyan\". These colors can be used with bg-NAME, text-NAME, and bg-gradient-NAME1-NAME2 to change the background, foreground, or use a background gradient respectively. If a theme string does not start with text- or bg-, it will be auto prefixed with bg-.\n\nIf True, an icon will appear when hovering over the card body. Clicking the icon expands the card to fit viewport size.\n\nAny valid CSS unit (e.g., height=\"200px\"). Doesn‚Äôt apply when a value box is made full_screen.\n\nWhether to allow the value box to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nUtility classes for customizing the appearance of the summary card. Use bg-* and text-* classes (e.g, \"bg-danger\" and \"text-light\") to customize the background/foreground colors.\n\nAdditional attributes to pass to card.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.value_box(\n    showcase=None,\n    showcase_layout='left center',\n    full_screen=False,\n    theme=None,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    **kwargs,\n)",
      "express.ui.value_box(\n    showcase=None,\n    showcase_layout='left center',\n    full_screen=False,\n    theme=None,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import piggy_bank\n\nfrom shiny.express import ui\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=piggy_bank, theme=\"bg-gradient-orange-red\", full_screen=True\n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=piggy_bank,\n        theme=\"text-green\",\n        showcase_layout=\"top right\",\n        full_screen=True,\n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=piggy_bank, theme=\"purple\", showcase_layout=\"bottom\", full_screen=True\n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n\n## file: icons.py\nfrom shiny import ui\n\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_value_box_theme_html",
    "url": "api/express/express.ui.value_box_theme.html",
    "title": "express.ui.value_box_theme ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.value_box_theme\n\nexpress.ui.value_box_theme\n\nValue box theme\n\nA theme for a value_box. Themes provide a convenient way to use your app's Bootstrap theme colors as the foreground or background colors of the value box. For more control, you can create your own theme with value_box_theme where you can pass foreground and background value.\n\nSee rstudio/bslib#themes for more examples.\n\nParameters\n\nThe name of the theme, e.g. \"primary\", \"danger\", \"purple\". name can also be a Bootstrap-supported color: \"blue\", \"purple\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"teal\", and \"cyan\". These colors can be used with bg-NAME, text-NAME, and bg-gradient-NAME1-NAME2. If a name does not start with text- or bg-, it will be auto-prefixed with bg-.\n\nThe background and foreground colors for the theme.\n\nReturns\n\nA ValueBoxTheme\n\nSee Also\n\n- value_box\n\n",
    "code_examples": [
      "express.ui.value_box_theme(name=None, *, fg=None, bg=None)",
      "express.ui.value_box_theme(name=None, *, fg=None, bg=None)"
    ]
  },
  {
    "id": "api_express_express_ui_popover_html",
    "url": "api/express/express.ui.popover.html",
    "title": "express.ui.popover ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.popover\n\nexpress.ui.popover\n\nContext manager for a popover\n\nThis function wraps popover.\n\nDisplay additional information when clicking on a UI element (typically a button).\n\nParameters\n\nA title to display in the popover. Can be a character string or UI elements (i.e., tags).\n\nA character string. Required to reactively respond to the visibility of the popover (via the input[id] value) and/or update the visibility/contents of the popover.\n\nThe placement of the popover relative to its trigger.\n\nA list of additional Bootstrap options.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.popover(\n    title=None,\n    id=None,\n    placement='auto',\n    options=None,\n    **kwargs,\n)",
      "express.ui.popover(\n    title=None,\n    id=None,\n    placement='auto',\n    options=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import gear_fill\n\nfrom shiny.express import input, render, ui\n\nwith ui.popover(id=\"btn_popover\"):\n    ui.input_action_button(\"btn\", \"A button\", class_=\"mt-3\")\n\n    \"A popover with more context and information than should be used in a tooltip.\"\n    \"You can even have multiple DOM elements in a popover!\"\n\n\nwith ui.card(class_=\"mt-3\"):\n    with ui.card_header():\n        \"Plot title (Click the gear to change variables)\"\n        with ui.popover(placement=\"right\", id=\"card_popover\"):\n            ui.span(gear_fill, style=\"position:absolute; top: 5px; right: 7px;\")\n            \"Put dropdowns here to alter your plot!\"\n            ui.input_selectize(\"x\", \"X\", [\"x1\", \"x2\", \"x3\"])\n            ui.input_selectize(\"y\", \"Y\", [\"y1\", \"y2\", \"y3\"])\n\n    @render.text\n    def plot_txt():\n        return f\"<Making plot using x: {input.x()} and y: {input.y()}>\"\n\n\n## file: icons.py\nfrom shiny import ui\n\n# https://icons.getbootstrap.com/icons/gear-fill/\ngear_fill = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-gear-fill\" viewBox=\"0 0 16 16\"><path d=\"M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z\"/></svg>'\n)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_tooltip_html",
    "url": "api/express/express.ui.tooltip.html",
    "title": "express.ui.tooltip ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.tooltip\n\nexpress.ui.tooltip\n\nContext manager for a tooltip\n\nThis function wraps tooltip.\n\nDisplay additional information when focusing (or hovering over) a UI element.\n\nParameters\n\nA character string. Required to reactively respond to the visibility of the tooltip (via the input[id] value) and/or update the visibility/contents of the tooltip.\n\nThe placement of the tooltip relative to its trigger.\n\nA list of additional Bootstrap options.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.tooltip(id=None, placement='auto', options=None, **kwargs)",
      "express.ui.tooltip(id=None, placement='auto', options=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import question_circle_fill\n\nfrom shiny.express import ui\n\nwith ui.tooltip(id=\"btn_tooltip\"):\n    ui.input_action_button(\"btn\", \"A button\", class_=\"mt-3\")\n\n    \"A message\"\n\nwith ui.card(class_=\"mt-3\"):\n    with ui.card_header():\n        with ui.tooltip(placement=\"right\", id=\"card_tooltip\"):\n            ui.span(\"Card title \", question_circle_fill)\n            \"Additional info\"\n\n    \"Card body content...\"\n\n\n## file: icons.py\nfrom shiny import ui\n\n# https://icons.getbootstrap.com/icons/question-circle-fill/\nquestion_circle_fill = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-question-circle-fill mb-1\" viewBox=\"0 0 16 16\"><path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.496 6.033h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286a.237.237 0 0 0 .241.247zm2.325 6.443c.61 0 1.029-.394 1.029-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94 0 .533.425.927 1.01.927z\"/></svg>'\n)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_accordion_html",
    "url": "api/express/express.ui.accordion.html",
    "title": "express.ui.accordion ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.accordion\n\nexpress.ui.accordion\n\nContext manager for a vertically collapsing accordion.\n\nThis function wraps accordion.\n\nParameters\n\nIf provided, you can use input.id() in your server logic to determine which of the accordion_panels are currently active. The value will correspond to the accordion_panel‚Äôs value argument.\n\nA list of accordion_panel values to open (i.e., show) by default. The default value of None will open the first accordion_panel. Use a value of True to open all (or False to open none) of the items. It‚Äôs only possible to open more than one panel when multiple=True.\n\nWhether multiple accordion_panel can be open at once.\n\nAdditional CSS classes to include on the accordion div.\n\nAny valid CSS unit; for example, height=‚Äú100%‚Äù.\n\nAny valid CSS unit; for example, height=‚Äú100%‚Äù.\n\nAttributes to this tag.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.accordion(\n    id=None,\n    open=None,\n    multiple=True,\n    class_=None,\n    width=None,\n    height=None,\n    **kwargs,\n)",
      "express.ui.accordion(\n    id=None,\n    open=None,\n    multiple=True,\n    class_=None,\n    width=None,\n    height=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import expressify, input, render, ui\n\n\n@expressify\ndef my_accordion(**kwargs):\n    with ui.accordion(**kwargs):\n        for letter in \"ABCDE\":\n            with ui.accordion_panel(f\"Section {letter}\"):\n                f\"Some narrative for section {letter}\"\n\n\nui.markdown(\"#### Single-select accordion\")\n\nmy_accordion(multiple=False, id=\"acc_single\")\n\n\n@render.code\ndef acc_single_val():\n    return \"input.acc_single(): \" + str(input.acc_single())\n\n\nui.br()\n\nui.markdown(\"#### Multi-select accordion\")\n\nmy_accordion(multiple=True, id=\"acc_multiple\")\n\n\n@render.code\ndef acc_multiple_val():\n    return \"input.acc_multiple(): \" + str(input.acc_multiple())\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_accordion_panel_html",
    "url": "api/express/express.ui.accordion_panel.html",
    "title": "express.ui.accordion_panel ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.accordion_panel\n\nexpress.ui.accordion_panel\n\nContext manager for single accordion panel.\n\nThis function wraps accordion_panel.\n\nParameters\n\nA title to appear in the accordion_panel‚Äôs header.\n\nA character string that uniquely identifies this panel. If MISSING, the title will be used.\n\nA Tag which is positioned just before the title.\n\nTag attributes to the accordion-body div Tag.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.accordion_panel(title, *, value=MISSING, icon=None, **kwargs)",
      "express.ui.accordion_panel(title, *, value=MISSING, icon=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.accordion(id=\"acc\"):\n    for letter in \"ABCDE\":\n        with ui.accordion_panel(f\"Section {letter}\"):\n            f\"Some narrative for section {letter}\"\n\n\n@render.code\ndef acc_val():\n    return \"input.acc(): \" + str(input.acc())\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_layout_sidebar_html",
    "url": "api/express/express.ui.layout_sidebar.html",
    "title": "express.ui.layout_sidebar ‚Äì Shiny for Python",
    "description": "",
    "content": "- Layouts and other UI tools\n- express.ui.layout_sidebar\n\nexpress.ui.layout_sidebar\n\nContext manager for sidebar layout\n\nThis function wraps layout_sidebar.\n\nCreate a sidebar layout component which can be dropped inside any Shiny UI page method (e.g. page_fillable) or card context.\n\nThe first child needs to be of class Sidebar object created by sidebar. The remaining arguments will contain the contents to the main content area. Or tag attributes that are supplied to the resolved Tag object.\n\nParameters\n\nWhether or not the main content area should be wrapped in a fillable container. See as_fillable_container for details.\n\nWhether or not the sidebar layout should be wrapped in a fillable container. See as_fill_item for details.\n\nA background or foreground color.\n\nWhether or not to show a border around the sidebar layout.\n\nWhether or not to round the corners of the sidebar layout.\n\nA border color.\n\nA CSS length unit defining the vertical gap (i.e., spacing) between elements provided to *args. This value will only be used if fillable is True.\n\nPadding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. padding may be one to four values. If one, then that value will be used for all four sides. If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. If three, then the first will be used for top, the second will be left and right, and the third will be bottom. If four, then the values will be interpreted as top, right, bottom, and left respectively.\n\nAny valid CSS unit to use for the height.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.layout_sidebar(\n    fillable=True,\n    fill=True,\n    bg=None,\n    fg=None,\n    border=None,\n    border_radius=None,\n    border_color=None,\n    gap=None,\n    padding=None,\n    height=None,\n    **kwargs,\n)",
      "express.ui.layout_sidebar(\n    fillable=True,\n    fill=True,\n    bg=None,\n    fg=None,\n    border=None,\n    border_radius=None,\n    border_color=None,\n    gap=None,\n    padding=None,\n    height=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny.express import input, render, ui\n\nwith ui.layout_sidebar():\n    with ui.sidebar():\n        ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)\n\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_nav_panel_html",
    "url": "api/express/express.ui.nav_panel.html",
    "title": "express.ui.nav_panel ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.nav_panel\n\nexpress.ui.nav_panel\n\nContext manager for nav item pointing to some internal content.\n\nThis function wraps nav.\n\nParameters\n\nA title to display. Can be a character string or UI elements (i.e., tags).\n\nThe value of the item. This is used to determine whether the item is active (when an id is provided to the nav container), programmatically select the item (e.g., update_navs), and/or be provided to the selected argument of the navigation container (e.g., navset_tab).\n\nAn icon to appear inline with the button/link.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.nav_panel(title, *, value=None, icon=None)",
      "express.ui.nav_panel(title, *, value=None, icon=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\nui.page_opts(title=\"Nav Panel Example\")\n\nwith ui.nav_panel(\"Page 1\"):\n    \"Page 1 content\"\n\nwith ui.nav_panel(\"Page 2\"):\n    with ui.navset_card_underline():\n        with ui.nav_panel(\"Tab 1\"):\n            \"Tab 1 content\"\n        with ui.nav_panel(\"Tab 2\"):\n            \"Tab 2 content\"\n        with ui.nav_panel(\"Tab 3\"):\n            \"Tab 3 content\"\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_navset_card_underline_html",
    "url": "api/express/express.ui.navset_card_underline.html",
    "title": "express.ui.navset_card_underline ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.navset_card_underline\n\nexpress.ui.navset_card_underline\n\nContext manager for a set of nav items as a tabset inside a card container.\n\nThis function wraps navset_card_underline.\n\nParameters\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nA shiny.express.ui.Sidebar component to display on every nav page.\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nPlacement of the nav items relative to the content.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.navset_card_underline(\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n    placement='above',\n)",
      "express.ui.navset_card_underline(\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n    placement='above',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.navset_card_underline(id=\"selected_navset_card_underline\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_card_underline()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_navset_card_tab_html",
    "url": "api/express/express.ui.navset_card_tab.html",
    "title": "express.ui.navset_card_tab ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.navset_card_tab\n\nexpress.ui.navset_card_tab\n\nContext manager for a set of nav items as a tabset inside a card container.\n\nThis function wraps navset_card_tab.\n\nParameters\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nA shiny.express.ui.Sidebar component to display on every nav page.\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.navset_card_tab(\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n)",
      "express.ui.navset_card_tab(\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.navset_card_tab(id=\"selected_navset_card_tab\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_card_tab()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_navset_card_pill_html",
    "url": "api/express/express.ui.navset_card_pill.html",
    "title": "express.ui.navset_card_pill ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.navset_card_pill\n\nexpress.ui.navset_card_pill\n\nContext manager for a set of nav items as a tabset inside a card container.\n\nThis function wraps navset_card_pill.\n\nParameters\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nA shiny.express.ui.Sidebar component to display on every nav page.\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nPlacement of the nav items relative to the content.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.navset_card_pill(\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n    placement='above',\n)",
      "express.ui.navset_card_pill(\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n    placement='above',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.navset_card_pill(id=\"selected_navset_card_pill\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_card_pill()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_nav_spacer_html",
    "url": "api/express/express.ui.nav_spacer.html",
    "title": "express.ui.nav_spacer ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.nav_spacer\n\nexpress.ui.nav_spacer\n\nCreate space between nav items.\n\nSee Also\n\n- nav_panel\n- nav_menu\n- nav_control\n- navset_bar\n- navset_tab\n- navset_pill\n- navset_underline\n- navset_card_tab\n- navset_card_pill\n- navset_card_underline\n- navset_pill_list\n- navset_hidden\n\nExample\n\nSee nav_panel\n\nExamples\n\n",
    "code_examples": [
      "express.ui.nav_spacer()",
      "express.ui.nav_spacer()",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.navset_underline(id=\"selected_navset_underline\"):\n    with ui.nav_panel(\"Tab 1\"):\n        \"Tab 1 content\"\n    ui.nav_spacer()\n    with ui.nav_panel(\"Tab 2\"):\n        \"Tab 2 content\"\n    with ui.nav_panel(\"Tab 3\"):\n        \"Tab 3 content\"\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_underline()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_nav_menu_html",
    "url": "api/express/express.ui.nav_menu.html",
    "title": "express.ui.nav_menu ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.nav_menu\n\nexpress.ui.nav_menu\n\nContext manager for a menu of nav items.\n\nThis function wraps nav_menu.\n\nParameters\n\nA title to display. Can be a character string or UI elements (i.e., tags).\n\nThe value of the item. This is used to determine whether the item is active (when an id is provided to the nav container), programmatically select the item (e.g., update_navs), and/or be provided to the selected argument of the navigation container (e.g., navset_tab).\n\nAn icon to appear inline with the button/link.\n\nHorizontal alignment of the dropdown menu relative to dropdown toggle.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.nav_menu(title, *, value=None, icon=None, align='left')",
      "express.ui.nav_menu(title, *, value=None, icon=None, align='left')",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.navset_card_pill(id=\"selected_card_pill\"):\n    with ui.nav_menu(\"Nav Menu items\"):\n        with ui.nav_panel(\"A\"):\n            \"Page A content\"\n        with ui.nav_panel(\"B\"):\n            \"Page B content\"\n        with ui.nav_panel(\"C\"):\n            \"Page C content\"\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_card_pill()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_nav_control_html",
    "url": "api/express/express.ui.nav_control.html",
    "title": "express.ui.nav_control ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.nav_control\n\nexpress.ui.nav_control\n\nContext manager for a control in the navigation container.\n\nThis function wraps nav_control.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.nav_control()",
      "express.ui.nav_control()",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\nwith ui.navset_card_underline(id=\"tab\"):\n    with ui.nav_control():\n        ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n\n    with ui.nav_control():\n        ui.a(\n            \"Learn Shiny\",\n            href=\"https://shiny.posit.co/py/docs/overview.html\",\n            target=\"_blank\",\n        )\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_navset_bar_html",
    "url": "api/express/express.ui.navset_bar.html",
    "title": "express.ui.navset_bar ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.navset_bar\n\nexpress.ui.navset_bar\n\nContext manager for a set of nav items as a tabset inside a card container.\n\nThis function wraps navset_bar.\n\nParameters\n\nTitle to display in the navbar.\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nA Sidebar component to display on every nav_panel page.\n\nWhether or not to allow fill items to grow/shrink to fit the browser window. If True, all nav() pages are fillable. A character vector, matching the value of nav()s to be filled, may also be provided. Note that, if a sidebar is provided, fillable makes the main content portion fillable.\n\nA CSS length unit defining the gap (i.e., spacing) between elements provided to *args. This value is only used when the navbar is fillable.\n\nPadding to use for the body. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. The length can be between one and four. If one, then that value will be used for all four sides. If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. If three, then the first will be used for top, the second will be left and right, and the third will be bottom. If four, then the values will be interpreted as top, right, bottom, and left respectively. This value is only used when the navbar is fillable.\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nTrue to use fluid layout; False to use fixed layout.\n\nConfigure the appearance and behavior of the navbar using navbar_options to set properties like position, background color, and more. navbar_options was added in v1.3.0 and replaces deprecated arguments position, bg, inverse, collapsible, and underline.\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. Determines whether the navbar should be displayed at the top of the page with normal scrolling behavior (‚Äústatic-top‚Äù), pinned at the top (‚Äúfixed-top‚Äù), or pinned at the bottom (‚Äúfixed-bottom‚Äù). Note that using ‚Äúfixed-top‚Äù or ‚Äúfixed-bottom‚Äù will cause the navbar to overlay your body content, unless you add padding (e.g., tags.style(\"body {padding-top: 70px;}\")).\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. Background color of the navbar (a CSS color).\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. Either True for a light text color or False for a dark text color.\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. True to automatically collapse the elements into an expandable menu on mobile devices or narrow window widths.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.navset_bar(\n    title,\n    id=None,\n    selected=None,\n    sidebar=None,\n    fillable=True,\n    gap=None,\n    padding=None,\n    header=None,\n    footer=None,\n    navbar_options=None,\n    fluid=True,\n    position=DEPRECATED,\n    bg=DEPRECATED,\n    inverse=DEPRECATED,\n    underline=DEPRECATED,\n    collapsible=DEPRECATED,\n)",
      "express.ui.navset_bar(\n    title,\n    id=None,\n    selected=None,\n    sidebar=None,\n    fillable=True,\n    gap=None,\n    padding=None,\n    header=None,\n    footer=None,\n    navbar_options=None,\n    fluid=True,\n    position=DEPRECATED,\n    bg=DEPRECATED,\n    inverse=DEPRECATED,\n    underline=DEPRECATED,\n    collapsible=DEPRECATED,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.navset_bar(title=\"Navset Bar\", id=\"selected_navset_bar\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_bar()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_navset_tab_html",
    "url": "api/express/express.ui.navset_tab.html",
    "title": "express.ui.navset_tab ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.navset_tab\n\nexpress.ui.navset_tab\n\nContext manager for a set of nav items as a tabset.\n\nThis function wraps navset_tab.\n\nParameters\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.navset_tab(id=None, selected=None, header=None, footer=None)",
      "express.ui.navset_tab(id=None, selected=None, header=None, footer=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.navset_tab(id=\"selected_navset_tab\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_tab()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_navset_pill_html",
    "url": "api/express/express.ui.navset_pill.html",
    "title": "express.ui.navset_pill ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.navset_pill\n\nexpress.ui.navset_pill\n\nContext manager for a set of nav items as a pillset.\n\nThis function wraps navset_pill.\n\nParameters\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.navset_pill(id=None, selected=None, header=None, footer=None)",
      "express.ui.navset_pill(id=None, selected=None, header=None, footer=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.navset_pill(id=\"selected_navset_pill\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_pill()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_navset_underline_html",
    "url": "api/express/express.ui.navset_underline.html",
    "title": "express.ui.navset_underline ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.navset_underline\n\nexpress.ui.navset_underline\n\nContext manager for a set of nav items whose active/focused navigation links are styled with an underline.\n\nThis function wraps navset_underline.\n\nParameters\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.navset_underline(id=None, selected=None, header=None, footer=None)",
      "express.ui.navset_underline(id=None, selected=None, header=None, footer=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.navset_underline(id=\"selected_navset_underline\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_underline()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_navset_pill_list_html",
    "url": "api/express/express.ui.navset_pill_list.html",
    "title": "express.ui.navset_pill_list ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.navset_pill_list\n\nexpress.ui.navset_pill_list\n\nContext manager for a set of nav items as a tabset inside a card container.\n\nThis function wraps navset_pill_list.\n\nParameters\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match its value).\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nTrue to place a well (gray rounded rectangle) around the navigation list.\n\nColumn widths of the navigation list and tabset content areas respectively.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.navset_pill_list(\n    id=None,\n    selected=None,\n    header=None,\n    footer=None,\n    well=True,\n    widths=(4, 8),\n)",
      "express.ui.navset_pill_list(\n    id=None,\n    selected=None,\n    header=None,\n    footer=None,\n    well=True,\n    widths=(4, 8),\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.navset_pill_list(id=\"selected_navset_pill_list\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_pill_list()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_navset_hidden_html",
    "url": "api/express/express.ui.navset_hidden.html",
    "title": "express.ui.navset_hidden ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.navset_hidden\n\nexpress.ui.navset_hidden\n\nContext manager for nav contents without the nav items.\n\nThis function wraps navset_hidden.\n\nParameters\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.navset_hidden(id=None, selected=None, header=None, footer=None)",
      "express.ui.navset_hidden(id=None, selected=None, header=None, footer=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.sidebar():\n    ui.input_radio_buttons(\"controller\", \"Controller\", [\"1\", \"2\", \"3\"], selected=\"1\")\n\nwith ui.navset_hidden(id=\"hidden_tabs\"):\n    with ui.nav_panel(None, value=\"panel1\"):\n        \"Panel 1 content\"\n    with ui.nav_panel(None, value=\"panel2\"):\n        \"Panel 2 content\"\n    with ui.nav_panel(None, value=\"panel3\"):\n        \"Panel 3 content\"\n\n\n@reactive.effect\n@reactive.event(input.controller)\ndef _():\n    ui.update_navs(\"hidden_tabs\", selected=\"panel\" + str(input.controller()))\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_navbar_options_html",
    "url": "api/express/express.ui.navbar_options.html",
    "title": "express.ui.navbar_options ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigate multiple panels\n- express.ui.navbar_options\n\nexpress.ui.navbar_options\n\nConfigure the appearance and behavior of the navbar.\n\nNavbar style with Bootstrap 5 and Bootswatch themes\n\nIn Shiny v1.3.0, the default navbar colors for Bootswatch themes are less opinionated by default and follow light or dark mode (see input_dark_mode).\n\nYou can use ui.navbar_options() to adjust the colors of the navbar when using a Bootswatch preset theme with Bootstrap 5. For example, the Bootswatch documentation for the Flatly theme shows 4 navbar variations. Inspecting the source code for the first example reveals the following markup:\n\nNote that this navbar uses the bg-primary class for a dark navy background. The navbar's white text is controlled by the data-bs-theme=\"dark\" attribute, which is used by Bootstrap for light text on a dark background. In Shiny, you can achieve this look with:\n\nThis particular combination of class=\"bg-primary\" and theme=\"dark\" works well for most Bootswatch presets. Note that in Shiny Express, theme and navbar_options both are set using page_opts.\n\nAnother variation from the Flatly documentation features a navbar with dark text on a light background:\n\nThe above options set navbar foreground and background colors that are always the same in both light and dark modes. To customize the navbar colors used in light or dark mode, you can use the $navbar-light-bg and $navbar-dark-bg Sass variables. When provided, Shiny will automatically choose to use light or dark text as the foreground color.\n\nFinally, you can also use the $navbar-bg Sass variable to set the navbar background color for both light and dark modes:\n\nParameters\n\nDetermines whether the navbar should be displayed at the top of the page with normal scrolling behavior (\"static-top\"), pinned at the top (\"fixed-top\"), or pinned at the bottom (\"fixed-bottom\"). Note that using \"fixed-top\" or \"fixed-bottom\" will cause the navbar to overlay your body content, unless you add padding (e.g., tags.style(\"body {padding-top: 70px;}\"))\n\nBackground color of the navbar (a CSS color).\n\nThe navbar theme: either \"dark\" for a light text color (on a dark background) or \"light\" for a dark text color (on a light background). If \"auto\" (the default) and bg is provided, the best contrast to bg is chosen.\n\nIf True, adds an underline effect to the navbar.\n\nIf True, automatically collapses the elements into an expandable menu on mobile devices or narrow window widths.\n\nAdditional HTML attributes to apply to the navbar container element.\n\nReturns:\n\nNavbarOptions A NavbarOptions object configured with the specified options.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.navbar_options(\n    position=MISSING,\n    bg=MISSING,\n    theme=MISSING,\n    underline=MISSING,\n    collapsible=MISSING,\n    **attrs,\n)",
      "express.ui.navbar_options(\n    position=MISSING,\n    bg=MISSING,\n    theme=MISSING,\n    underline=MISSING,\n    collapsible=MISSING,\n    **attrs,\n)",
      "<nav class=\"navbar navbar-expand-lg bg-primary\" data-bs-theme=\"dark\">\n  <!-- all of the navbar html -->\n</nav>",
      "<nav class=\"navbar navbar-expand-lg bg-primary\" data-bs-theme=\"dark\">\n  <!-- all of the navbar html -->\n</nav>",
      "ui.page_navbar(\n  theme=ui.Theme(version=5, preset=\"flatly\"),\n  navbar_options=ui.navbar_options(class=\"bg-primary\", theme=\"dark\")\n)",
      "ui.page_navbar(\n  theme=ui.Theme(version=5, preset=\"flatly\"),\n  navbar_options=ui.navbar_options(class=\"bg-primary\", theme=\"dark\")\n)",
      "ui.page_navbar(\n  theme = ui.Theme(version=5, preset=\"flatly\"),\n  navbar_options = ui.navbar_options(class=\"bg-light\", theme=\"light\")\n)",
      "ui.page_navbar(\n  theme = ui.Theme(version=5, preset=\"flatly\"),\n  navbar_options = ui.navbar_options(class=\"bg-light\", theme=\"light\")\n)",
      "ui.page_navbar(\n    theme=(\n        ui.Theme(version=5, preset = \"flatly\")\n        .add_defaults(\n            navbar_light_bg=\"#18BC9C\", # flatly's success color (teal)\n            navbar_dark_bg=\"#2C3E50\"   # flatly's primary color (navy)\n        )\n    )\n  )\n)",
      "ui.page_navbar(\n    theme=(\n        ui.Theme(version=5, preset = \"flatly\")\n        .add_defaults(\n            navbar_light_bg=\"#18BC9C\", # flatly's success color (teal)\n            navbar_dark_bg=\"#2C3E50\"   # flatly's primary color (navy)\n        )\n    )\n  )\n)",
      "ui.page_navbar(\n    theme=ui.Theme(version=5, preset=\"flatly\").add_defaults(navbar_bg=\"#E74C3C\") # flatly's red\n)",
      "ui.page_navbar(\n    theme=ui.Theme(version=5, preset=\"flatly\").add_defaults(navbar_bg=\"#E74C3C\") # flatly's red\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import input, render, ui\n\nwith ui.navset_bar(\n    title=\"Navset Bar\",\n    id=\"selected_navset_bar\",\n    navbar_options=ui.navbar_options(\n        bg=\"#B73A85\",\n        theme=\"dark\",\n        underline=False,\n    ),\n):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_bar()\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_Chat_html",
    "url": "api/express/express.ui.Chat.html",
    "title": "express.ui.chat ‚Äì Shiny for Python",
    "description": "",
    "content": "- Chat interface\n- express.ui.Chat\n\nexpress.ui.Chat\n\nExamples\n\nMethods\n\nui\n\nCreate a UI element for this Chat.\n\nParameters\n\nA sequence of messages to display in the chat. Each message can be either a string or a dictionary with content and role keys. The content key should contain the message text, and the role key can be ‚Äúassistant‚Äù or ‚Äúuser‚Äù.\n\nPlaceholder text for the chat input.\n\nThe width of the UI element.\n\nThe height of the UI element.\n\nWhether the chat should vertically take available space inside a fillable container.\n\nThe icon to use for the assistant chat messages. Can be a HTML or a tag in the form of HTML or Tag. If None, a default robot icon is used.\n\nAdditional attributes for the chat container element.\n\n",
    "code_examples": [
      "express.ui.Chat(self, id, *, messages=(), on_error='auto', tokenizer=None)",
      "express.ui.Chat(self, id, *, messages=(), on_error='auto', tokenizer=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = \"\"\"\nHi! This is a simple Shiny `Chat` UI. Enter a message below and I will\nsimply repeat it back to you. For more examples, see this\n[folder of examples](https://github.com/posit-dev/py-shiny/tree/main/shiny/templates/chat).\n\"\"\"\n\n# Create a chat instance\nchat = ui.Chat(\n    id=\"chat\",\n    messages=[welcome],\n)\n\n# Display it\nchat.ui()\n\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user_input}\")\n\n\n## file: _template.json\n{\n  \"type\": \"app\",\n  \"id\": \"chat-hello\",\n  \"title\": \"Hello Shiny Chat\",\n  \"next_steps\": [\n    \"Run the app with `shiny run app.py`.\"\n  ]\n}\n\n\n## file: requirements.txt\nshiny\n\n",
      "express.ui.Chat.ui(\n    messages=None,\n    placeholder='Enter a message...',\n    width='min(680px, 100%)',\n    height='auto',\n    fill=True,\n    icon_assistant=None,\n    **kwargs,\n)",
      "express.ui.Chat.ui(\n    messages=None,\n    placeholder='Enter a message...',\n    width='min(680px, 100%)',\n    height='auto',\n    fill=True,\n    icon_assistant=None,\n    **kwargs,\n)"
    ]
  },
  {
    "id": "api_express_express_ui_MarkdownStream_html",
    "url": "api/express/express.ui.MarkdownStream.html",
    "title": "express.ui.markdownstream ‚Äì Shiny for Python",
    "description": "",
    "content": "- Streaming markdown\n- express.ui.MarkdownStream\n\nexpress.ui.MarkdownStream\n\nMethods\n\nui\n\nCreate a UI element for this MarkdownStream.\n\nParameters\n\nContent to display when the UI element is first rendered.\n\nThe content type. Default is \"markdown\" (specifically, CommonMark). Other supported options are: - \"html\": for rendering HTML content. - \"text\": for plain text. - \"semi-markdown\": for rendering markdown, but with HTML tags escaped.\n\nWhether to automatically scroll to the bottom of a scrollable container when new content is added. Default is True.\n\nThe width of the UI element.\n\nThe height of the UI element.\n\nReturns\n\nA UI element for locating the MarkdownStream in the app.\n\n",
    "code_examples": [
      "express.ui.MarkdownStream(self, id, *, on_error='auto')",
      "express.ui.MarkdownStream(self, id, *, on_error='auto')",
      "express.ui.MarkdownStream.ui(\n    content='',\n    content_type='markdown',\n    auto_scroll=True,\n    width='100%',\n    height='auto',\n)",
      "express.ui.MarkdownStream.ui(\n    content='',\n    content_type='markdown',\n    auto_scroll=True,\n    width='100%',\n    height='auto',\n)"
    ]
  },
  {
    "id": "api_express_reactive_calc_html",
    "url": "api/express/reactive.calc.html",
    "title": "reactive.calc ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.calc\n\nreactive.calc\n\nMark a function as a reactive calculation.\n\nA reactive calculation is a function whose return value depends on other reactive value(s) (i.e., Inputs, Values, and other reactive calculations). Whenever a reactive value changes, any reactive calculations that depend on it are \"invalidated\" and automatically re-execute if called while invalid. If a reactive calculation is marked as invalidated, any other reactive calculations that recently called it are also marked as invalidated. In this way, invalidations ripple through reactive calculations that depend on each other.\n\nParameters\n\nA Session instance. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nA decorator that marks a function as a reactive calculation.\n\nTip\n\nReactive calculations should not produce any side effects; to reactively produce side effects, use effect instead.\n\nReactive calculations are analagous to reactive expressions in Shiny for R.\n\nSee Also\n\n- Inputs\n- Value\n- effect\n- invalidate_later\n- event\n\nExamples\n\n",
    "code_examples": [
      "reactive.calc(fn=None, *, session=MISSING)",
      "reactive.calc(fn=None, *, session=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\nimport time\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\n\n@reactive.calc\ndef first():\n    input.first()\n    p = ui.Progress()\n    for i in range(30):\n        p.set(i / 30, message=\"Computing, please wait...\")\n        time.sleep(0.1)\n    p.close()\n    return random.randint(1, 1000)\n\n\n@reactive.calc\ndef second():\n    input.second()\n    return random.randint(1, 1000)\n\n\nwith ui.card():\n    with ui.layout_columns():\n        ui.input_action_button(\"first\", \"Invalidate first (slow) computation\")\n        ui.input_action_button(\"second\", \"Invalidate second (fast) computation\")\n\n    @render.text\n    def result():\n        return first() + second()\n\n"
    ]
  },
  {
    "id": "api_express_reactive_effect_html",
    "url": "api/express/reactive.effect.html",
    "title": "reactive.effect ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.effect\n\nreactive.effect\n\nMark a function as a reactive side effect.\n\nA reactive effect is like a reactive calculation (calc) in that it can read reactive values and call reactive calculations, and will automatically re-execute when those dependencies change. But unlike reactive calculations, it doesn't return a result and can't be used as an input to other reactive expressions. Thus, reactive effects are only useful for their side effects (for example, performing I/O).\n\nAnother contrast between reactive calculations and effects is their execution strategy. Reactive calculations use lazy evaluation; that is, when their dependencies change, they don't re-execute right away but rather wait until they are called by someone else. Indeed, if they are not called, then they will never re-execute. In contrast, effects use eager evaluation; as soon as their dependencies change, they schedule themselves to re-execute.\n\nParameters\n\nIf TRUE, start the effect in a suspended state (i.e., it will not execute until resumed and invalidated).\n\nThe new priority. A higher value means higher priority: an effect with a higher priority value will execute before all effects with lower priority values. Positive, negative, and zero values are allowed.\n\nA Session instance. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nA decorator that marks a function as a reactive effect (Effect_).\n\nTip\n\nReactive effects are analagous to observers in Shiny for R.\n\nSee Also\n\n- Inputs\n- Value\n- effect\n- invalidate_later\n- event\n\nExamples\n\n",
    "code_examples": [
      "reactive.effect(fn=None, *, suspended=False, priority=0, session=MISSING)",
      "reactive.effect(fn=None, *, suspended=False, priority=0, session=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show modal dialog\")\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef show_important_message():\n    m = ui.modal(\n        \"This is a somewhat important message.\",\n        easy_close=True,\n        footer=None,\n    )\n    ui.modal_show(m)\n\n"
    ]
  },
  {
    "id": "api_express_reactive_value_html",
    "url": "api/express/reactive.value.html",
    "title": "reactive.value ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.value\n\nreactive.value\n\nCreate a reactive value.\n\nReactive values are the source of reactivity in Shiny. Changes to reactive values invalidate downstream reactive functions (calc, effect, and render functions decorated with @output). When these functions are invalidated, they get scheduled to re-execute.\n\nShiny input values are read-only reactive values. For example, input.x is a reactive value object, and to get the current value, you can call input.x() or input.x.get(). When you do that inside of a reactive function, the function takes a dependency on the reactive value.\n\nParameters\n\nAn optional initial value.\n\nIf True, then the reactive value cannot be set().\n\nReturns\n\nAn instance of a reactive value.\n\nRaises\n\nIf get is called before a value is provided/set.\n\nNote\n\nA reactive value may only be read from within a reactive function (e.g., calc, effect, shiny.express.render.text, etc.) and, when doing so, the function takes a reactive dependency on the value (i.e., when the value changes, the calling reactive function will re-execute).\n\nSee Also\n\n- Inputs\n- calc\n- effect\n\nExamples\n\nMethods\n\nfreeze\n\nFreeze the reactive value.\n\nFreezing is equivalent to unsetting the value, but it does not invalidate dependents.\n\nget\n\nRead the reactive value.\n\nReturns\n\nA value.\n\nRaises\n\nIf the value is not set.\n\nIf called from outside a reactive function.\n\nis_set\n\nCheck if the reactive value is set.\n\nReturns\n\nTrue if the value is set, False otherwise.\n\nset\n\nSet the reactive value to a new value.\n\nParameters\n\nA value.\n\nReturns\n\nTrue if the value was set to a different value and False otherwise.\n\nRaises\n\nIf called on a read-only reactive value.\n\nunset\n\nUnset the reactive value.\n\nReturns\n\nTrue if the value was set prior to this unsetting.\n\n",
    "code_examples": [
      "reactive.value(self, value=MISSING, *, read_only=False)",
      "reactive.value(self, value=MISSING, *, read_only=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nval = reactive.value(0)\n\n\n@reactive.effect\n@reactive.event(input.minus)\ndef _():\n    newVal = val.get() - 1\n    val.set(newVal)\n\n\n@reactive.effect\n@reactive.event(input.plus)\ndef _():\n    newVal = val.get() + 1\n    val.set(newVal)\n\n\nwith ui.sidebar():\n    ui.input_action_button(\"minus\", \"-1\")\n    ui.input_action_button(\"plus\", \"+1\")\n\n\n@render.text\ndef value():\n    return str(val.get())\n\n",
      "reactive.value.freeze()",
      "reactive.value.freeze()",
      "reactive.value.get()",
      "reactive.value.get()",
      "reactive.value.is_set()",
      "reactive.value.is_set()",
      "reactive.value.set(value)",
      "reactive.value.set(value)",
      "reactive.value.unset()",
      "reactive.value.unset()"
    ]
  },
  {
    "id": "api_express_reactive_event_html",
    "url": "api/express/reactive.event.html",
    "title": "reactive.event ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.event\n\nreactive.event\n\nMark a function to react only when an \"event\" occurs.\n\nShiny's reactive programming framework is primarily designed for calculated values (calc) and side-effect-causing actions (effect) that respond to any of their inputs changing. That's often what is desired in Shiny apps, but not always: sometimes you want to wait for a specific action to be taken from the user, like clicking an input_action_button, before calculating or taking an action. You do not want the calculation or action to be prematurely triggered if other reactive values that it calls are invalidated. The reactive value (or function) which triggers other calculations or actions in this way is called an event.\n\nThese situations demand a more imperative, \"event handling\" style of programming, which @reactive.event() provides. It does this by using the isolate primitive under-the-hood to essentially \"limit\" the set of reactive dependencies to those in args. In other words, the event can call as many reactive values as it likes in its code body without taking a reactive dependency on them; it will be invalidated only when a dependency listed in args is invalidated.\n\nParameters\n\nOne or more callables that represent the event; most likely this will be a reactive input value linked to a input_action_button or similar (e.g., input.click), but it can also be a (reactive or non-reactive) function that returns a value.\n\nWhether to ignore the event if the value is None or 0.\n\nIf False, the event triggers on the first run.\n\nReturns\n\nA decorator that marks a function as an event handler.\n\nTip\n\nThis decorator must be applied before the relevant reactivity decorator (i.e., @reactive.event must be applied before @reactive.effect, @reactive.calc, @render.ui, etc).\n\nExamples\n\n",
    "code_examples": [
      "reactive.event(*args, ignore_none=True, ignore_init=False)",
      "reactive.event(*args, ignore_none=True, ignore_init=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_ui\n\nui.markdown(\n    f\"\"\"\n    This example demonstrates how `@reactive.event()` can be used to restrict\n    execution of: (1) a `@render` function, (2) `@reactive.calc`, or (3)\n    `@reactive.effect`.\n\n    In all three cases, the output is dependent on a random value that gets updated\n    every 0.5 seconds (currently, it is {output_ui(\"number\", inline=True)}), but\n    the output is only updated when the button is clicked.\n    \"\"\"\n)\n\n# Always update this output when the number is updated\nwith ui.hold():\n\n    @render.ui\n    def number():\n        return val.get()\n\n\nui.input_action_button(\"btn_out\", \"(1) Update number\")\n\n\n# Since ignore_none=False, the function executes before clicking the button.\n# (input.btn_out() is 0 on page load, but @@reactive.event() treats 0 as None for\n# action buttons.)\n@render.text\n@reactive.event(input.btn_out, ignore_none=False)\ndef out_out():\n    return str(val.get())\n\n\nui.input_action_button(\"btn_calc\", \"(2) Show 1 / number\")\n\n\n@render.text\ndef out_calc():\n    return str(calc())\n\n\nui.input_action_button(\"btn_effect\", \"(3) Log number\")\nui.div(id=\"out_effect\")\n\n\n# Update a random number every second\nval = reactive.value(random.randint(0, 1000))\n\n\n@reactive.effect\ndef _():\n    reactive.invalidate_later(0.5)\n    val.set(random.randint(0, 1000))\n\n\n@reactive.calc\n@reactive.event(input.btn_calc)\ndef calc():\n    return 1 / val.get()\n\n\n@reactive.effect\n@reactive.event(input.btn_effect)\ndef _():\n    ui.insert_ui(\n        ui.p(\"Random number! \", val.get()),\n        selector=\"#out_effect\",\n        where=\"afterEnd\",\n    )\n\n"
    ]
  },
  {
    "id": "api_express_reactive_isolate_html",
    "url": "api/express/reactive.isolate.html",
    "title": "reactive.isolate ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.isolate\n\nreactive.isolate\n\nCreate a non-reactive scope within a reactive scope.\n\nOrdinarily, the simple act of reading a reactive value causes a relationship to be established between the caller and the reactive value, where a change to the reactive value will cause the caller to re-execute. (The same applies for the act of getting a reactive calculation's value.) with isolate() lets you read a reactive value or calculation without establishing this relationship.\n\nwith isolate() can also be useful for calling reactive calculations at the console, which can be useful for debugging. To do so, wrap the calls to the reactive calculation with with isolate().\n\nReturns\n\nA context manager that executes the given expression in a scope where reactive values can be read, but do not cause the reactive scope of the caller to be re-evaluated when they change.\n\nSee Also\n\n- event\n\nExamples\n\n",
    "code_examples": [
      "reactive.isolate()",
      "reactive.isolate()",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500)\nui.input_action_button(\"go\", \"Go!\", class_=\"btn-success\")\n\n\n@render.plot(alt=\"A histogram\")\ndef plot():\n    # Take a reactive dependency on the action button...\n    input.go()\n\n    # ...but don't take a reactive dependency on the slider\n    with reactive.isolate():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(input.n())\n\n    fig, ax = plt.subplots()\n    ax.hist(x, bins=30, density=True)\n    return fig\n\n"
    ]
  },
  {
    "id": "api_express_reactive_invalidate_later_html",
    "url": "api/express/reactive.invalidate_later.html",
    "title": "reactive.invalidate_later ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.invalidate_later\n\nreactive.invalidate_later\n\nScheduled Invalidation\n\nWhen called from within a reactive context, invalidate_later schedules the reactive context to be invalidated in the given number of seconds.\n\nParameters\n\nThe number of seconds to wait before invalidating.\n\nNote\n\nWhen called within a reactive function (i.e., effect, calc, shiny.express.render.ui, etc.), that reactive context is invalidated (and re-executes) after the interval has passed. The re-execution will reset the invalidation flag, so in a typical use case, the object will keep re-executing and waiting for the specified interval. It‚Äôs possible to stop this cycle by adding conditional logic that prevents the invalidate_later from being run.\n\nExamples\n\n",
    "code_examples": [
      "reactive.invalidate_later(delay, *, session=MISSING)",
      "reactive.invalidate_later(delay, *, session=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\n\nfrom shiny import reactive\nfrom shiny.express import render\n\n\n@render.text\ndef value():\n    reactive.invalidate_later(0.5)\n    return \"Random int: \" + str(random.randint(0, 10000))\n\n"
    ]
  },
  {
    "id": "api_express_reactive_extended_task_html",
    "url": "api/express/reactive.extended_task.html",
    "title": "reactive.extended_task ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.extended_task\n\nreactive.extended_task\n\nDecorator to mark an async function as a slow computation. This will cause the function to be run in a background asyncio task, and the results will be available via the ExtendedTask object returned by the decorator.\n\nUnlike normal async render functions, effects, and calcs, extended_task async computations do not block Shiny reactive processing from proceeding. This means that they can be used to perform long-running tasks without freezing the session that owns them, nor other sessions.\n\nHowever, this also means that they cannot access reactive sources. This is because processing of inputs and reactivity is not blocked, and so the reactive sources may change while the computation is running, which is almost never the desired behavior. If any reactive sources are needed by the computation, the decorated function must take them as parameters, and the resulting ExtendedTask object must be invoked with the corresponding arguments.\n\nParameters\n\nThe function to decorate. It must be async. It can take any parameters and return any value (including None).\n\nReturns\n\nAn ExtendedTask object that can be used to check the status of the computation and retrieve the result.\n\nExamples\n\n",
    "code_examples": [
      "reactive.extended_task(func=None)",
      "reactive.extended_task(func=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nfrom datetime import datetime\n\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.h5(\"Current time\")\n\n\n@render.text\ndef current_time():\n    reactive.invalidate_later(1)\n    return datetime.now().strftime(\"%H:%M:%S\")\n\n\nwith ui.p():\n    \"Notice that the time above updates every second, even if you click the button below.\"\n\n\n@ui.bind_task_button(button_id=\"btn\")\n@reactive.extended_task\nasync def slow_compute(a: int, b: int) -> int:\n    await asyncio.sleep(3)\n    return a + b\n\n\nwith ui.layout_sidebar():\n    with ui.sidebar():\n        ui.input_numeric(\"x\", \"x\", 1)\n        ui.input_numeric(\"y\", \"y\", 2)\n        ui.input_task_button(\"btn\", \"Compute, slowly\")\n        ui.input_action_button(\"btn_cancel\", \"Cancel\")\n\n    @reactive.effect\n    @reactive.event(input.btn, ignore_none=False)\n    def handle_click():\n        # slow_compute.cancel()\n        slow_compute(input.x(), input.y())\n\n    @reactive.effect\n    @reactive.event(input.btn_cancel)\n    def handle_cancel():\n        slow_compute.cancel()\n\n    ui.h5(\"Sum of x and y\")\n\n    @render.text\n    def show_result():\n        return str(slow_compute.result())\n\n"
    ]
  },
  {
    "id": "api_express_reactive_flush_html",
    "url": "api/express/reactive.flush.html",
    "title": "reactive.flush ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.flush\n\nreactive.flush\n\nRun any pending invalidations (i.e., flush the reactive environment).\n\nWarning\n\nYou shouldn‚Äôt ever need to call this function inside of a Shiny app. It‚Äôs only useful for testing and running reactive code interactively in the console.\n\n",
    "code_examples": [
      "reactive.flush()",
      "reactive.flush()"
    ]
  },
  {
    "id": "api_express_reactive_poll_html",
    "url": "api/express/reactive.poll.html",
    "title": "reactive.poll ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.poll\n\nreactive.poll\n\nCreate a reactive polling object.\n\nPolling is a technique that approximates \"real-time\" or streaming updates, as if a data source were pushing notifications each time it is updated. The data source does not actually push notifications; a polling object repeatedly checks for changes in an efficient way at specified intervals. If a change is detected, the polling object runs a function to re-read the data source.\n\nA reactive polling object is constructed using two functions: a polling function, which is a fast-running, inexpensive function that is used to determine whether some data source has changed (such as the timestamp of a file, or a SELECT MAX(updated) FROM table query); and a slower-running reading function that actually loads and returns the data that is desired. The poll() function is intended to be used as a decorator: the poll function is passed as the poll_func arg to @poll(), while the data reading function is the target of the decorator.\n\nReactive consumers can invoke the resulting polling object to get the current data, and will automatically invalidate when the polling function detects a change. Polling objects also cache the results of the read function; for this reason, apps where all sessions depend on the same data source may want to declare the polling object at the top level of app.py (outside of the server function).\n\nBoth poll_func and the decorated (data reading) function can read reactive values and calc objects. Any invalidations triggered by reactive dependencies will apply to the reactive polling object immediately (not waiting for the interval_secs delay to expire).\n\nParameters\n\nA function to be called frequently to determine whether a data source has changed. The return value should be something that can be compared inexpensively using ==. Both regular functions and co-routine functions are allowed. Note that the poll_func should NOT return a bool that indicates whether the data source has changed. Rather, each poll_func return value will be checked for equality with its preceding poll_func return value (using == semantics by default), and if it differs, the data source will be considered changed.\n\nThe number of seconds to wait after each poll_func invocation before polling again. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.\n\nThe function that will be used to compare each poll_func return value with its immediate predecessor.\n\nReactive polling is implemented using an effect to call poll_func on a timer; use the priority argument to control the order of this Effect‚Äôs execution versus other Effects in your app. See effect for more details.\n\nA Session instance. If not provided, a session is inferred via get_current_session. If there is no current session (i.e. poll is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.\n\nReturns\n\nA decorator that should be applied to a no-argument function that (expensively) reads whatever data is desired. (This function may be a regular function or a co-routine function.) The result of the decorator is a reactive calc that always returns up-to-date data, and invalidates callers when changes are detected via polling.\n\nSee Also\n\n- file_reader\n\nExamples\n\n",
    "code_examples": [
      "reactive.poll(\n    poll_func,\n    interval_secs=1,\n    *,\n    equals=eq,\n    priority=0,\n    session=MISSING,\n)",
      "reactive.poll(\n    poll_func,\n    interval_secs=1,\n    *,\n    equals=eq,\n    priority=0,\n    session=MISSING,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nimport random\nimport sqlite3\nfrom datetime import datetime\nfrom typing import Any, Awaitable\n\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nSYMBOLS = [\"AAA\", \"BBB\", \"CCC\", \"DDD\", \"EEE\", \"FFF\"]\n\n\ndef timestamp() -> str:\n    return datetime.now().strftime(\"%x %X\")\n\n\ndef rand_price() -> float:\n    return round(random.random() * 250, 2)\n\n\n# === Initialize the database =========================================\n\n\ndef init_db(con: sqlite3.Connection) -> None:\n    cur = con.cursor()\n    try:\n        cur.executescript(\n            \"\"\"\n            CREATE TABLE stock_quotes (timestamp text, symbol text, price real);\n            CREATE INDEX idx_timestamp ON stock_quotes (timestamp);\n            \"\"\"\n        )\n        cur.executemany(\n            \"INSERT INTO stock_quotes (timestamp, symbol, price) VALUES (?, ?, ?)\",\n            [(timestamp(), symbol, rand_price()) for symbol in SYMBOLS],\n        )\n        con.commit()\n    finally:\n        cur.close()\n\n\nconn = sqlite3.connect(\":memory:\")\ninit_db(conn)\n\n\n# === Randomly update the database with an asyncio.task ==============\n\n\ndef update_db(con: sqlite3.Connection) -> None:\n    \"\"\"Update a single stock price entry at random\"\"\"\n\n    cur = con.cursor()\n    try:\n        sym = SYMBOLS[random.randint(0, len(SYMBOLS) - 1)]\n        print(f\"Updating {sym}\")\n        cur.execute(\n            \"UPDATE stock_quotes SET timestamp = ?, price = ? WHERE symbol = ?\",\n            (timestamp(), rand_price(), sym),\n        )\n        con.commit()\n    finally:\n        cur.close()\n\n\nasync def update_db_task(con: sqlite3.Connection) -> Awaitable[None]:\n    \"\"\"Task that alternates between sleeping and updating prices\"\"\"\n    while True:\n        await asyncio.sleep(random.random() * 1.5)\n        update_db(con)\n\n\n_ = asyncio.create_task(update_db_task(conn))\n\n\n# === Create the reactive.poll object ===============================\n\n\ndef tbl_last_modified() -> Any:\n    df = pd.read_sql_query(\"SELECT MAX(timestamp) AS timestamp FROM stock_quotes\", conn)\n    return df[\"timestamp\"].to_list()\n\n\n@reactive.poll(tbl_last_modified, 0.5)\ndef stock_quotes() -> pd.DataFrame:\n    return pd.read_sql_query(\"SELECT timestamp, symbol, price FROM stock_quotes\", conn)\n\n\nwith ui.card():\n    ui.markdown(\n        \"\"\"\n        # `shiny.reactive.poll` demo\n\n        This example app shows how to stream results from a database (in this\n        case, an in-memory sqlite3) with the help of `shiny.reactive.poll`.\n        \"\"\"\n    )\n    ui.input_selectize(\"symbols\", \"Filter by symbol\", [\"\"] + SYMBOLS, multiple=True)\n\n    @render.data_frame\n    def table():\n        df = stock_quotes()\n        if input.symbols():\n            df = df[df[\"symbol\"].isin(input.symbols())]\n        return df\n\n"
    ]
  },
  {
    "id": "api_express_reactive_file_reader_html",
    "url": "api/express/reactive.file_reader.html",
    "title": "reactive.file_reader ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.file_reader\n\nreactive.file_reader\n\nCreate a reactive file reader.\n\nThis is a decorator, meant to be applied to a no-argument function that reads data from a file on disk. Whenever the file changes (or to be precise, the file size or last modified time changes), past readers of the data are reactively invalidated. This makes it incredibly easy to write apps that automatically update all of their outputs as soon as files on disk change.\n\nNote that file_reader works only on single files, not directories of files.\n\nBoth the filepath function and the decorated (file reading) function can read reactive values and calc objects. Any invalidations triggered by reactive dependencies will apply to the reactive file reader object immediately (not waiting for the interval_secs delay to expire).\n\nParameters\n\nEither a string indicating the file path to be monitored, or, a no-argument function that returns such a string. The latter is useful if the file to be monitored depends on some user input, the current date/time, etc. The file path provided MUST exist, otherwise Shiny will treat it as an unhandled error and close the session. If a function is used, make sure it is high performance (or is cached, i.e. use a :class:~shiny.reactive.calc), as it will be called very frequently.\n\nThe number of seconds to wait after each time the file metadata is checked. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.\n\nReactive polling is implemented using an effect to call poll_func on a timer; use the priority argument to control the order of this Effect‚Äôs execution versus other Effects in your app. See effect for more details.\n\nA Session instance. If not provided, a session is inferred via get_current_session. If there is no current session (i.e. poll is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.\n\nReturns\n\nA decorator that should be applied to a no-argument function that (expensively)\n\nSee Also\n\n- poll\n\nExamples\n\n",
    "code_examples": [
      "reactive.file_reader(filepath, interval_secs=1, *, priority=1, session=MISSING)",
      "reactive.file_reader(filepath, interval_secs=1, *, priority=1, session=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pathlib\n\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import render\n\nfile = pathlib.Path(__file__).parent / \"mtcars.csv\"\n\n\n@reactive.file_reader(file)\ndef read_file():\n    return pd.read_csv(file)\n\n\n@render.table\ndef result():\n    return read_file()\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n"
    ]
  },
  {
    "id": "api_express_reactive_lock_html",
    "url": "api/express/reactive.lock.html",
    "title": "reactive.lock ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.lock\n\nreactive.lock\n\nA lock that should be held whenever manipulating the reactive graph.\n\nFor example, lock makes it safe to set a value and call flush from a different Task than the one that is running the Shiny Session.\n\n",
    "code_examples": [
      "reactive.lock()",
      "reactive.lock()"
    ]
  },
  {
    "id": "api_express_req_html",
    "url": "api/express/req.html",
    "title": "req ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- req\n\nreq\n\nThrow a silent exception for falsy values.\n\nThis is a convenient shorthand for throwing SilentException / SilentCancelOutputException if any of the arguments are falsy.\n\nThe term \"falsy\" generally indicates that a value is considered False when encountered in a logical context. We use the term a little loosely here; our usage tries to match the intuitive notions of \"Is this value missing or available?\", or \"Has the user provided an answer?\", or in the case of action buttons, \"Has the button been clicked?\". So False, None, 0, and \"\" would be examples of Falsy values.\n\nParameters\n\nAny number of arguments to check.\n\nIf True, throw SilentCancelOutputException instead of SilentException.\n\nReturns\n\nThe first argument. If no arguments are provided, returns None.\n\nExamples\n\n",
    "code_examples": [
      "req(*args, cancel_output=False)",
      "req(*args, cancel_output=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive, req\nfrom shiny.express import input, render, ui\nfrom shiny.types import SafeException\n\nui.input_action_button(\"safe\", \"Throw a safe error\")\n\n\n@render.ui\ndef safe():\n    # This error _won't_ be sanitized when deployed (i.e., it's \"safe\")\n    raise SafeException(f\"You've clicked {str(safe_click())} times\")\n\n\nui.input_action_button(\"unsafe\", \"Throw an unsafe error\")\n\n\n@render.ui\ndef unsafe():\n    req(input.unsafe())\n    # This error _will_ be sanitized when deployed (i.e., it's \"unsafe\")\n    raise Exception(f\"Super secret number of clicks: {str(input.unsafe())}\")\n\n\nui.input_text(\n    \"txt\",\n    \"Enter some text below, then remove it. Notice how the text is never fully removed.\",\n)\n\n\n@render.ui\ndef txt_out():\n    req(input.txt(), cancel_output=True)\n    return input.txt()\n\n\n@reactive.calc\ndef safe_click():\n    req(input.safe())\n    return input.safe()\n\n\n@reactive.effect\ndef _():\n    req(input.unsafe())\n    print(\"unsafe clicks:\", input.unsafe())\n    # raise Exception(\"Observer exception: this should cause a crash\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_hold_html",
    "url": "api/express/express.ui.hold.html",
    "title": "express.ui.hold ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reusable Express code\n- express.ui.hold\n\nexpress.ui.hold\n\nPrevent the display of UI elements in various ways.\n\nThis is used as a context manager, as in with hold():. It prevents the display of all UI elements within the context block. (This is useful when you want to temporarily prevent the display of a large number of UI elements, or when you want to prevent the display of UI elements that are not directly under your control.)\n\nIt can also be used as with hold() as content: to capture the UI elements that would be displayed within the context block. Then, later, you can put content on a line by itself to display the captured UI elements.\n\nReturns\n\nA context manager that prevents the display of UI elements within the context block.\n\nSee Also\n\n- express\n- expressify\n\n",
    "code_examples": [
      "express.ui.hold()",
      "express.ui.hold()"
    ]
  },
  {
    "id": "api_express_express_expressify_html",
    "url": "api/express/express.expressify.html",
    "title": "express.expressify ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reusable Express code\n- express.expressify\n\nexpress.expressify\n\nDecorate a function so that output is captured as in Shiny Express\n\nIn a Shiny Express app, the output of each line of the app file is captured and displayed in the UI. However, if the app calls a function, only the return value of the function is displayed. This decorator changes the behavior of the function so that when it is executed, the result of each line is captured and displayed, just like code at the top level of a Shiny Express app.\n\nParameters\n\nThe function to decorate. If not provided, this is a decorator factory.\n\nWhether the function has a docstring. Set this to True if the function to decorate has a docstring. This tells expressify() to not capture the docstring and display it in the UI.\n\nReturns\n\nA function that returns None, or a decorator for a function that returns None.\n\nSee Also\n\n- express\n- hold\n\n",
    "code_examples": [
      "express.expressify(fn=None, *, has_docstring=False)",
      "express.expressify(fn=None, *, has_docstring=False)"
    ]
  },
  {
    "id": "api_express_express_ui_update_select_html",
    "url": "api/express/express.ui.update_select.html",
    "title": "express.ui.update_select ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_select\n\nexpress.ui.update_select\n\nChange the value of a select input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\n\nThe values that should be initially selected, if any.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_select\n- update_selectize\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_select(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    session=None,\n)",
      "express.ui.update_select(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.markdown(\"The checkbox group controls the select input\")\n\nui.input_checkbox_group(\n    \"inCheckboxGroup\", \"Input checkbox\", [\"Item A\", \"Item B\", \"Item C\"]\n)\nui.input_select(\"inSelect\", \"Select input\", [\"Item A\", \"Item B\", \"Item C\"])\n\n\n@reactive.effect\ndef _():\n    x = input.inCheckboxGroup()\n\n    # Can use [] to remove all choices\n    if x is None:\n        x = []\n    elif isinstance(x, str):\n        x = [x]\n\n    ui.update_select(\n        \"inSelect\",\n        label=\"Select input label \" + str(len(x)),\n        choices=x,\n        selected=x[len(x) - 1] if len(x) > 0 else None,\n    )\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_selectize_html",
    "url": "api/express/express.ui.update_selectize.html",
    "title": "express.ui.update_selectize ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_selectize\n\nexpress.ui.update_selectize\n\nChange the value of a selectize.js powered input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\n\nThe values that should be initially selected, if any.\n\nOptions to send to update, see input_selectize for details.\n\nWhether to store choices on the server side, and load the select options dynamically on searching, instead of writing all choices into the page at once (i.e., only use the client-side version of selectize.js)\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_selectize\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_selectize(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    options=None,\n    server=False,\n    session=None,\n)",
      "express.ui.update_selectize(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    options=None,\n    server=False,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import ui\n\nui.input_selectize(\"x\", \"Server side selectize\", choices=[], multiple=True)\n\n\n@reactive.effect\ndef _():\n    ui.update_selectize(\n        \"x\",\n        choices=[f\"Foo {i}\" for i in range(10000)],\n        selected=[\"Foo 0\", \"Foo 1\"],\n        server=True,\n    )\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_slider_html",
    "url": "api/express/express.ui.update_slider.html",
    "title": "express.ui.update_slider ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_slider\n\nexpress.ui.update_slider\n\nChange the value of a slider input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nSpecifies the interval between each selectable value on the slider. Either None (the default), which uses a heuristic to determine the step size or a single number. If the values are dates, step is in days; if the values are date-times, step is in seconds.\n\nOnly used if the slider values are date or datetime objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is ‚Äú%F‚Äù (like ‚Äú2015-07-01‚Äù), and for Datetimes, the default is ‚Äú%F %T‚Äù (like ‚Äú2015-07-01 15:32:10‚Äù).\n\nOnly used if the values are datetime objects. A string specifying the time zone offset for the displayed times, in the format ‚Äú+HHMM‚Äù or ‚Äú-HHMM‚Äù. If None (the default), times will be displayed in the browser‚Äôs time zone. The value ‚Äú+0000‚Äù will result in UTC time.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_slider\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_slider(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    step=None,\n    time_format=None,\n    timezone=None,\n    session=None,\n)",
      "express.ui.update_slider(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    step=None,\n    time_format=None,\n    timezone=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_slider(\"receiver\", \"Receiver:\", min=0, max=100, value=50, step=1, width=\"100%\")\nui.p(\"Change the min and max values below to see the receiver slider above update.\")\n\nwith ui.layout_column_wrap(width=1 / 2):\n    ui.input_slider(\"min\", \"Min:\", min=0, max=50, value=0, step=1)\n    ui.input_slider(\"max\", \"Max:\", min=50, max=100, value=100, step=1)\n\n\n@reactive.effect\ndef _():\n    # You can update the value, min, max, and step.\n    ui.update_slider(\n        \"receiver\",\n        value=max(min(input.receiver(), input.max()), input.min()),\n        min=input.min(),\n        max=input.max(),\n    )\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_dark_mode_html",
    "url": "api/express/express.ui.update_dark_mode.html",
    "title": "express.ui.update_dark_mode ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_dark_mode\n\nexpress.ui.update_dark_mode\n\n",
    "code_examples": [
      "express.ui.update_dark_mode(mode, *, session=None)",
      "express.ui.update_dark_mode(mode, *, session=None)"
    ]
  },
  {
    "id": "api_express_express_ui_update_date_html",
    "url": "api/express/express.ui.update_date.html",
    "title": "express.ui.update_date ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_date\n\nexpress.ui.update_date\n\nChange the value of a date input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe starting date. Either a date() object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_date\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_date(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    session=None,\n)",
      "express.ui.update_date(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import date, timedelta\n\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_slider(\"n\", \"Day of month\", min=1, max=30, value=10)\nui.input_date(\"inDate\", \"Input date\")\n\n\n@reactive.effect\ndef _():\n    d = date(2013, 4, input.n())\n    ui.update_date(\n        \"inDate\",\n        label=\"Date label \" + str(input.n()),\n        value=d,\n        min=d - timedelta(days=3),\n        max=d + timedelta(days=3),\n    )\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_date_range_html",
    "url": "api/express/express.ui.update_date_range.html",
    "title": "express.ui.update_date_range ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_date_range\n\nexpress.ui.update_date_range\n\nChange the start and end values of a date range input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe initial start date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe initial end date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_date_range\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_date_range(\n    id,\n    *,\n    label=None,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    session=None,\n)",
      "express.ui.update_date_range(\n    id,\n    *,\n    label=None,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import date, timedelta\n\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_slider(\"n\", \"Day of month\", min=1, max=30, value=10)\nui.input_date_range(\"inDateRange\", \"Input date\")\n\n\n@reactive.effect\ndef _():\n    d = date(2013, 4, input.n())\n    ui.update_date_range(\n        \"inDateRange\",\n        label=\"Date range label \" + str(input.n()),\n        start=d - timedelta(days=1),\n        end=d + timedelta(days=1),\n        min=d - timedelta(days=5),\n        max=d + timedelta(days=5),\n    )\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_checkbox_html",
    "url": "api/express/express.ui.update_checkbox.html",
    "title": "express.ui.update_checkbox ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_checkbox\n\nexpress.ui.update_checkbox\n\nChange the value of a checkbox input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_checkbox\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_checkbox(id, *, label=None, value=None, session=None)",
      "express.ui.update_checkbox(id, *, label=None, value=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_slider(\"controller\", \"Controller\", min=0, max=1, value=0, step=1)\nui.input_checkbox(\"inCheckbox\", \"Input checkbox\")\n\n\n@reactive.effect\ndef _():\n    # True if controller is odd, False if even.\n    x_even = input.controller() % 2 == 1\n    ui.update_checkbox(\"inCheckbox\", value=x_even)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_checkbox_group_html",
    "url": "api/express/express.ui.update_checkbox_group.html",
    "title": "express.ui.update_checkbox_group ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_checkbox_group\n\nexpress.ui.update_checkbox_group\n\nChange the value of a checkbox group input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\nThe values that should be initially selected, if any.\n\nIf True, the result is displayed inline\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_checkbox_group\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_checkbox_group(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    inline=False,\n    session=None,\n)",
      "express.ui.update_checkbox_group(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    inline=False,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\n\"The first checkbox group controls the second\"\nui.input_checkbox_group(\n    \"inCheckboxGroup\", \"Input checkbox\", [\"Item A\", \"Item B\", \"Item C\"]\n)\nui.input_checkbox_group(\n    \"inCheckboxGroup2\", \"Input checkbox 2\", [\"Item A\", \"Item B\", \"Item C\"]\n)\n\n\n@reactive.effect\ndef _():\n    x = input.inCheckboxGroup()\n\n    # Can also set the label and select items\n    ui.update_checkbox_group(\n        \"inCheckboxGroup2\",\n        label=\"Checkboxgroup label \" + str(len(x)),\n        choices=x,\n        selected=x,\n    )\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_switch_html",
    "url": "api/express/express.ui.update_switch.html",
    "title": "express.ui.update_switch ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_switch\n\nexpress.ui.update_switch\n\nChange the value of a switch input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_switch\n\n",
    "code_examples": [
      "express.ui.update_switch(id, *, label=None, value=None, session=None)",
      "express.ui.update_switch(id, *, label=None, value=None, session=None)"
    ]
  },
  {
    "id": "api_express_express_ui_update_radio_buttons_html",
    "url": "api/express/express.ui.update_radio_buttons.html",
    "title": "express.ui.update_radio_buttons ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_radio_buttons\n\nexpress.ui.update_radio_buttons\n\nChange the value of a radio input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\nThe values that should be initially selected, if any.\n\nIf ``True```, the result is displayed inline\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_radio_buttons\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_radio_buttons(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    inline=False,\n    session=None,\n)",
      "express.ui.update_radio_buttons(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    inline=False,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.markdown(\"The first radio button group controls the second\")\n\nui.input_radio_buttons(\n    \"inRadioButtons\", \"Input radio buttons\", [\"Item A\", \"Item B\", \"Item C\"]\n)\nui.input_radio_buttons(\n    \"inRadioButtons2\", \"Input radio buttons 2\", [\"Item A\", \"Item B\", \"Item C\"]\n)\n\n\n@reactive.effect\ndef _():\n    x = input.inRadioButtons()\n\n    # Can also set the label and select items\n    ui.update_radio_buttons(\n        \"inRadioButtons2\",\n        label=\"Radio buttons label \" + x,\n        choices=[x],\n        selected=x,\n    )\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_numeric_html",
    "url": "api/express/express.ui.update_numeric.html",
    "title": "express.ui.update_numeric ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_numeric\n\nexpress.ui.update_numeric\n\nChange the value of a number input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nInterval to use when stepping between min and max.\n\nThe Session object passed to the server function of a App.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_numeric\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_numeric(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    step=None,\n    session=None,\n)",
      "express.ui.update_numeric(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    step=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_slider(\"controller\", \"Controller\", min=0, max=20, value=10)\nui.input_numeric(\"inNumber\", \"Input number\", 0)\nui.input_numeric(\"inNumber2\", \"Input number 2\", 0)\n\n\n@reactive.effect\ndef _():\n    x = input.controller()\n    ui.update_numeric(\"inNumber\", value=x)\n    ui.update_numeric(\n        \"inNumber2\",\n        label=\"Number label \" + str(x),\n        value=x,\n        min=x - 10,\n        max=x + 10,\n        step=5,\n    )\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_text_html",
    "url": "api/express/express.ui.update_text.html",
    "title": "express.ui.update_text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_text\n\nexpress.ui.update_text\n\nChange the value of a text input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nA hint as to what can be entered into the control.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_text\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_text(\n    id,\n    *,\n    label=None,\n    value=None,\n    placeholder=None,\n    session=None,\n)",
      "express.ui.update_text(\n    id,\n    *,\n    label=None,\n    value=None,\n    placeholder=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.layout_column_wrap(width=1 / 2):\n    ui.input_radio_buttons(\"pet_type\", \"Pet type\", [\"Dog\", \"Cat\", \"Bird\"], inline=True)\n    ui.input_radio_buttons(\"pet_sex\", \"Pet sex\", [\"Male\", \"Female\"], inline=True)\n    ui.input_text(\"name\", \"Pet name\", \"Charlie\")\n    ui.input_text(\"royal_name\", \"Royal Name\", \"King Charlie\")\n\n\n@reactive.effect\n@reactive.event(input.pet_type)\ndef _():\n    # Update the label of the pet name input\n    ui.update_text(\"name\", label=f\"{input.pet_type()}'s name\")\n\n\n@reactive.effect\ndef _():\n    # Update the value of the royal name input\n    royal_noun = \"King\" if input.pet_sex() == \"Male\" else \"Queen\"\n    ui.update_text(\"royal_name\", value=f\"{royal_noun} {input.name()}\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_text_area_html",
    "url": "api/express/express.ui.update_text_area.html",
    "title": "express.ui.update_text_area ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_text_area\n\nexpress.ui.update_text_area\n\nChange the value of a text input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nA hint as to what can be entered into the control.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_text\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_text_area(\n    id,\n    *,\n    label=None,\n    value=None,\n    placeholder=None,\n    session=None,\n)",
      "express.ui.update_text_area(\n    id,\n    *,\n    label=None,\n    value=None,\n    placeholder=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.layout_column_wrap(width=1 / 2):\n    ui.input_radio_buttons(\"pet_type\", \"Pet type\", [\"Dog\", \"Cat\", \"Bird\"], inline=True)\n    ui.input_radio_buttons(\"pet_sex\", \"Pet sex\", [\"Male\", \"Female\"], inline=True)\n    ui.input_text(\"name\", \"Pet name\", \"Charlie\")\n    ui.input_text(\"royal_name\", \"Royal Name\", \"King Charlie\")\n\n\n@reactive.effect\n@reactive.event(input.pet_type)\ndef _():\n    # Update the label of the pet name input\n    ui.update_text(\"name\", label=f\"{input.pet_type()}'s name\")\n\n\n@reactive.effect\ndef _():\n    # Update the value of the royal name input\n    royal_noun = \"King\" if input.pet_sex() == \"Male\" else \"Queen\"\n    ui.update_text(\"royal_name\", value=f\"{royal_noun} {input.name()}\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_navs_html",
    "url": "api/express/express.ui.update_navs.html",
    "title": "express.ui.update_navs ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_navs\n\nexpress.ui.update_navs\n\nChange the value of a navs container on the client.\n\nParameters\n\nAn input id.\n\nThe values that should be initially selected, if any.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- navset_tab\n- navset_pill\n- page_navbar\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_navs(id, selected=None, session=None)",
      "express.ui.update_navs(id, selected=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.sidebar():\n    ui.input_slider(\"controller\", \"Controller\", min=1, max=3, value=1)\n\nwith ui.navset_card_tab(id=\"inTabset\"):\n    with ui.nav_panel(\"Panel 1\", value=\"panel1\"):\n        \"Panel 1 content\"\n    with ui.nav_panel(\"Panel 2\", value=\"panel2\"):\n        \"Panel 2 content\"\n    with ui.nav_panel(\"Panel 3\", value=\"panel3\"):\n        \"Panel 3 content\"\n\n\n@reactive.effect\ndef _():\n    ui.update_navs(\"inTabset\", selected=\"panel\" + str(input.controller()))\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_action_button_html",
    "url": "api/express/express.ui.update_action_button.html",
    "title": "express.ui.update_action_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_action_button\n\nexpress.ui.update_action_button\n\nChange the label and/or icon of an action button on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nIf True, disable the button making it unclickable; if False, the button will become enabled and clickable.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_action_button\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_action_button(\n    id,\n    *,\n    label=None,\n    icon=None,\n    disabled=None,\n    session=None,\n)",
      "express.ui.update_action_button(\n    id,\n    *,\n    label=None,\n    icon=None,\n    disabled=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive, req\nfrom shiny.express import input, ui\n\nwith ui.sidebar():\n    ui.input_action_button(\"update\", \"Update other buttons and link\")\n\nwith ui.layout_column_wrap():\n    ui.input_action_button(\"goButton\", \"Go\")\n    ui.input_action_button(\"goButton2\", \"Go 2\", icon=\"ü§©\")\n    ui.input_action_button(\"goButton3\", \"Go 3\")\n    ui.input_action_link(\"goLink\", \"Go Link\")\n\n\n@reactive.effect\ndef _():\n    req(input.update())\n    # Updates goButton's label and icon\n    ui.update_action_button(\"goButton\", label=\"New label\", icon=\"üìÖ\")\n    # Leaves goButton2's label unchanged and removes its icon\n    ui.update_action_button(\"goButton2\", icon=[])\n    # Leaves goButton3's icon, if it exists, unchanged and changes its label\n    ui.update_action_button(\"goButton3\", label=\"New label 3\")\n    # Updates goLink's label and icon\n    ui.update_action_link(\"goLink\", label=\"New link label\", icon=\"üîó\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_action_link_html",
    "url": "api/express/express.ui.update_action_link.html",
    "title": "express.ui.update_action_link ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_action_link\n\nexpress.ui.update_action_link\n\nChange the label and/or icon of an action link on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_action_link\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_action_link(id, *, label=None, icon=None, session=None)",
      "express.ui.update_action_link(id, *, label=None, icon=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive, req\nfrom shiny.express import input, ui\n\nwith ui.sidebar():\n    ui.input_action_button(\"update\", \"Update other buttons and link\")\n\nwith ui.layout_column_wrap():\n    ui.input_action_button(\"goButton\", \"Go\")\n    ui.input_action_button(\"goButton2\", \"Go 2\", icon=\"ü§©\")\n    ui.input_action_button(\"goButton3\", \"Go 3\")\n    ui.input_action_link(\"goLink\", \"Go Link\")\n\n\n@reactive.effect\ndef _():\n    req(input.update())\n    # Updates goButton's label and icon\n    ui.update_action_button(\"goButton\", label=\"New label\", icon=\"üìÖ\")\n    # Leaves goButton2's label unchanged and removes its icon\n    ui.update_action_button(\"goButton2\", icon=[])\n    # Leaves goButton3's icon, if it exists, unchanged and changes its label\n    ui.update_action_button(\"goButton3\", label=\"New label 3\")\n    # Updates goLink's label and icon\n    ui.update_action_link(\"goLink\", label=\"New link label\", icon=\"üîó\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_task_button_html",
    "url": "api/express/express.ui.update_task_button.html",
    "title": "express.ui.update_task_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- express.ui.update_task_button\n\nexpress.ui.update_task_button\n\nChange the state of a task button on the client.\n\nWhen a task button is clicked, it automatically changes to the \"busy\" state. This function can be used to change the state back to \"ready\" when the task is complete.\n\nYou can also use this function to change the state to \"busy\" manually, which will prevent the button from automatically resetting to \"ready\" after a click.\n\nParameters\n\nAn input id.\n\nThe new state of the button. One of ‚Äúready‚Äù, ‚Äúbusy‚Äù, or a custom state name added via input_task_button.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\n",
    "code_examples": [
      "express.ui.update_task_button(id, *, state=None, session=None)",
      "express.ui.update_task_button(id, *, state=None, session=None)"
    ]
  },
  {
    "id": "api_express_express_ui_update_sidebar_html",
    "url": "api/express/express.ui.update_sidebar.html",
    "title": "express.ui.update_sidebar ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- express.ui.update_sidebar\n\nexpress.ui.update_sidebar\n\nUpdate a sidebar's visibility.\n\nSet a sidebar state during an active Shiny user session.\n\nParameters\n\nThe id of the sidebar to toggle.\n\nThe desired visible state of the sidebar, where True opens the sidebar and False closes the sidebar (if not already in that state).\n\nA Shiny session object (the default should almost always be used).\n\nSee Also\n\n- sidebar\n- layout_sidebar\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_sidebar(id, *, show=None, session=None)",
      "express.ui.update_sidebar(id, *, show=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nwith ui.sidebar(id=\"sidebar\"):\n    \"Sidebar content\"\n\nui.input_action_button(\"open_sidebar\", label=\"Open sidebar\", class_=\"me-3\")\nui.input_action_button(\"close_sidebar\", label=\"Close sidebar\", class_=\"me-3\")\n\n\n@render.text\ndef state():\n    return f\"input.sidebar(): {input.sidebar()}\"\n\n\n@reactive.effect\n@reactive.event(input.open_sidebar)\ndef _():\n    ui.update_sidebar(\"sidebar\", show=True)\n\n\n@reactive.effect\n@reactive.event(input.close_sidebar)\ndef _():\n    ui.update_sidebar(\"sidebar\", show=False)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_tooltip_html",
    "url": "api/express/express.ui.update_tooltip.html",
    "title": "express.ui.update_tooltip ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- express.ui.update_tooltip\n\nexpress.ui.update_tooltip\n\nUpdate tooltip contents.\n\nParameters\n\nA character string that matches an existing tooltip id.\n\nContents to the tooltip‚Äôs body.\n\nOpens (True) or closes (False) the tooltip.\n\nA Shiny session object (the default should almost always be used).\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_tooltip(id, *args, show=None, session=None)",
      "express.ui.update_tooltip(id, *args, show=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"btn_show\", \"Show tooltip\", class_=\"mt-3 me-3\")\nui.input_action_button(\"btn_close\", \"Close tooltip\", class_=\"mt-3 me-3\")\nui.input_action_button(\n    \"btn_update\", \"Update tooltip phrase (and show tooltip)\", class_=\"mt-3 me-3\"\n)\n\nwith ui.tooltip(id=\"tooltip_id\"):\n    ui.input_action_button(\n        \"btn_w_tooltip\",\n        \"A button w/ a tooltip\",\n        class_=\"btn-primary mt-5\",\n    )\n    \"A message\"\n\n\n@reactive.effect\n@reactive.event(input.btn_show)\ndef _():\n    ui.update_tooltip(\"tooltip_id\", show=True)\n\n\n@reactive.effect\n@reactive.event(input.btn_close)\ndef _():\n    ui.update_tooltip(\"tooltip_id\", show=False)\n\n\n@reactive.effect\n@reactive.event(input.btn_update)\ndef _():\n    content = \"A \" + \" \".join([\"NEW\" for _ in range(input.btn_update())]) + \" message\"\n\n    ui.update_tooltip(\"tooltip_id\", content, show=True)\n\n\n@reactive.effect\n@reactive.event(input.btn_w_tooltip)\ndef _():\n    ui.notification_show(\"Button clicked!\", duration=3, type=\"message\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_popover_html",
    "url": "api/express/express.ui.update_popover.html",
    "title": "express.ui.update_popover ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- express.ui.update_popover\n\nexpress.ui.update_popover\n\nUpdate the contents or title of a popover.\n\nParameters\n\nThe id of the popover DOM element to update.\n\nThe new contents of the popover.\n\nThe new title of the popover.\n\nOpens (True) or closes (False) the popover.\n\nA Shiny session object (the default should almost always be used).\n\nSee Also\n\n- popover\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_popover(id, *args, title=None, show=None, session=None)",
      "express.ui.update_popover(id, *args, title=None, show=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"btn_show\", \"Show popover\", class_=\"mt-3 me-3\")\nui.input_action_button(\"btn_close\", \"Close popover\", class_=\"mt-3 me-3\")\n\nui.br()\nui.br()\n\nwith ui.popover(id=\"popover_id\"):\n    ui.input_action_button(\"btn_w_popover\", \"A button w/ a popover\", class_=\"mt-3\")\n    \"A message\"\n\n\n@reactive.effect\n@reactive.event(input.btn_show)\ndef _():\n    ui.update_popover(\"popover_id\", show=True)\n\n\n@reactive.effect\n@reactive.event(input.btn_close)\ndef _():\n    ui.update_popover(\"popover_id\", show=False)\n\n\n@reactive.effect\n@reactive.event(input.btn_w_popover)\ndef _():\n    ui.notification_show(\"Button clicked!\", duration=3, type=\"message\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_accordion_html",
    "url": "api/express/express.ui.update_accordion.html",
    "title": "express.ui.update_accordion ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- express.ui.update_accordion\n\nexpress.ui.update_accordion\n\nDynamically set accordions' states.\n\nDynamically (i.e., programmatically) update/modify accordions in a Shiny app. These functions require an id to be provided to the accordion and must also be called within an active Shiny session.\n\nParameters\n\nA string that matches an existing accordion‚Äôs id.\n\nEither a string or list of strings (used to identify particular accordion_panel(s) by their value) or a bool to set the state of all panels.\n\nA Shiny session object (the default should almost always be used).\n\nReferences\n\nBootstrap Accordion\n\nSee Also\n\n- accordion\n- accordion_panel\n- insert_accordion_panel\n- remove_accordion_panel\n- update_accordion_panel\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_accordion(id, *, show, session=None)",
      "express.ui.update_accordion(id, *, show, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"set_acc\", \"Only open sections A,C,E\", class_=\"mt-3 mb-3\")\n\nwith ui.accordion(id=\"acc\", open=[\"Section B\", \"Section D\"], multiple=True):\n    for letter in \"ABCDE\":\n        with ui.accordion_panel(f\"Section {letter}\"):\n            f\"Some narrative for section {letter}\"\n\n\n@reactive.effect\n@reactive.event(input.set_acc)\ndef _():\n    ui.update_accordion(\"acc\", show=[\"Section A\", \"Section C\", \"Section E\"])\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_update_accordion_panel_html",
    "url": "api/express/express.ui.update_accordion_panel.html",
    "title": "express.ui.update_accordion_panel ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- express.ui.update_accordion_panel\n\nexpress.ui.update_accordion_panel\n\nDynamically update accordion panel contents.\n\nDynamically (i.e., programmatically) update/modify accordion panels in a Shiny app. These functions require an id to be provided to the accordion and must also be called within an active Shiny session.\n\nParameters\n\nA string that matches an existing accordion‚Äôs id.\n\nThe value of an existing panel to update.\n\nIf provided, the new body contents of the panel.\n\nIf not missing, the new title of the panel.\n\nIf not missing, the new value of the panel.\n\nIf not missing, the new icon of the panel.\n\nA Shiny session object (the default should almost always be used).\n\nReferences\n\nBootstrap Accordion\n\nSee Also\n\n- accordion\n- accordion_panel\n- update_accordion\n- insert_accordion_panel\n- remove_accordion_panel\n\nExamples\n\n",
    "code_examples": [
      "express.ui.update_accordion_panel(\n    id,\n    target,\n    *body,\n    title=MISSING,\n    value=MISSING,\n    icon=MISSING,\n    show=None,\n    session=None,\n)",
      "express.ui.update_accordion_panel(\n    id,\n    target,\n    *body,\n    title=MISSING,\n    value=MISSING,\n    icon=MISSING,\n    show=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_switch(\"update_panel\", \"Update (and open) Sections\")\n\nwith ui.accordion(id=\"acc\", multiple=True):\n    for letter in \"ABCDE\":\n        with ui.accordion_panel(f\"Section {letter}\", value=f\"sec_{letter}\"):\n            f\"Some narrative for section {letter}\"\n\n\n@reactive.effect\n@reactive.event(input.update_panel)\ndef _():\n    txt = \" (updated)\" if input.update_panel() else \"\"\n    show = bool(input.update_panel() % 2 == 1)\n    for letter in \"ABCDE\":\n        ui.update_accordion_panel(\n            \"acc\",\n            f\"sec_{letter}\",\n            f\"Some{txt} narrative for section {letter}\",\n            title=f\"Section {letter}{txt}\",\n            # Open Accordion Panel to see updated contents\n            show=show,\n        )\n    next_show_txt = \"close\" if show else \"open\"\n\n    ui.update_switch(\"update_panel\", label=f\"Update (and {next_show_txt}) Sections\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_insert_accordion_panel_html",
    "url": "api/express/express.ui.insert_accordion_panel.html",
    "title": "express.ui.insert_accordion_panel ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- express.ui.insert_accordion_panel\n\nexpress.ui.insert_accordion_panel\n\nInsert an accordion_panel.\n\nParameters\n\nA string that matches an existing accordion‚Äôs id.\n\nAn accordion_panel object to insert.\n\nThe value of an existing panel to insert next to.\n\nShould panel be added before or after the target? When target=None, \"after\" will append after the last panel and \"before\" will prepend before the first panel.\n\nA Shiny session object (the default should almost always be used).\n\nReferences\n\nBootstrap Accordion\n\nSee Also\n\n- accordion\n- accordion_panel\n- update_accordion\n- remove_accordion_panel\n- update_accordion_panel\n\nExamples\n\n",
    "code_examples": [
      "express.ui.insert_accordion_panel(\n    id,\n    panel,\n    target=None,\n    position='after',\n    session=None,\n)",
      "express.ui.insert_accordion_panel(\n    id,\n    panel,\n    target=None,\n    position='after',\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\n\nfrom shiny import reactive, ui\nfrom shiny.express import input\n\n\ndef make_panel(letter):\n    return ui.accordion_panel(\n        f\"Section {letter}\", f\"Some narrative for section {letter}\"\n    )\n\n\nui.input_action_button(\"add_panel\", \"Add random panel\", class_=\"mt-3 mb-3\")\nui.accordion(*[make_panel(letter) for letter in \"ABCDE\"], id=\"acc\", multiple=True)\n\n\n@reactive.effect\n@reactive.event(input.add_panel)\ndef _():\n    ui.insert_accordion_panel(\"acc\", make_panel(str(random.randint(0, 10000))))\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_remove_accordion_panel_html",
    "url": "api/express/express.ui.remove_accordion_panel.html",
    "title": "express.ui.remove_accordion_panel ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- express.ui.remove_accordion_panel\n\nexpress.ui.remove_accordion_panel\n\nRemove an accordion_panel.\n\nParameters\n\nA string that matches an existing accordion‚Äôs id.\n\nThe value of an existing panel to remove.\n\nA Shiny session object (the default should almost always be used).\n\nReferences\n\nBootstrap Accordion\n\nSee Also\n\n- accordion\n- accordion_panel\n- update_accordion\n- insert_accordion_panel\n- update_accordion_panel\n\nExamples\n\n",
    "code_examples": [
      "express.ui.remove_accordion_panel(id, target, session=None)",
      "express.ui.remove_accordion_panel(id, target, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\n\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nchoices = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nrandom.shuffle(choices)\n\nui.input_action_button(\n    \"remove_panel\",\n    f\"Remove Section {choices[-1]}\",\n    class_=\"mt-3 mb-3\",\n)\n\n\" (Sections randomly picked at server start)\"\n\nwith ui.accordion(id=\"acc\", multiple=True):\n    for letter in \"ABCDE\":\n        with ui.accordion_panel(f\"Section {letter}\"):\n            f\"Some narrative for section {letter}\"\n\n\nuser_choices = [choice for choice in choices]\n\n\n@reactive.effect\n@reactive.event(input.remove_panel)\ndef _():\n    if len(user_choices) == 0:\n        ui.notification_show(\"No more panels to remove!\")\n        return\n\n    ui.remove_accordion_panel(\"acc\", f\"Section {user_choices.pop()}\")\n\n    label = \"No more panels to remove!\"\n    if len(user_choices) > 0:\n        label = f\"Remove Section {user_choices[-1]}\"\n    ui.update_action_button(\"remove_panel\", label=label)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_help_text_html",
    "url": "api/express/express.ui.help_text.html",
    "title": "express.ui.help_text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- express.ui.help_text\n\nexpress.ui.help_text\n\nCreate a help text element\n\nHelp text is stylized text which can be added to the user interface to provide additional explanation or context. Text passed to help_text receives the Bootstrap help-block class.\n\nParameters\n\nUI elements to include inside the help text.\n\nAttributes to add to the text container.\n\nReturns\n\nA UI element\n\n",
    "code_examples": [
      "express.ui.help_text(*args, **kwargs)",
      "express.ui.help_text(*args, **kwargs)"
    ]
  },
  {
    "id": "api_express_express_ui_notification_show_html",
    "url": "api/express/express.ui.notification_show.html",
    "title": "express.ui.notification_show ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- express.ui.notification_show\n\nexpress.ui.notification_show\n\nShow a notification to the user.\n\nA notification is a message that appears near the bottom corner of the app. Notifications normally disappear after a short period of time, and should multiple notifications appear together, they will stack on top of one another.\n\nParameters\n\nContents of the notification message.\n\nMessage content that represents an action. For example, this could be a link that the user can click on. This is separate from ui so customized layouts can handle the main notification content separately from the action content.\n\nNumber of seconds to display the message before it disappears. Use None to prevent the message from disappearing automatically. The user will need to click the corner of the notification to close it.\n\nIf True, display a button which will make the notification disappear when clicked. If False do not display.\n\nAn optional unique identifier for the notification. If supplied, any existing notification with the same id will be replaced with this one (otherwise, a new notification is created).\n\nA string which controls the color of the notification. This should be one of ‚Äúdefault‚Äù (gray), ‚Äúmessage‚Äù (blue), ‚Äúwarning‚Äù (yellow), or ‚Äúerror‚Äù (red).\n\nThe Session in which the notification should appear. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nThe notification‚Äôs id.\n\nSee Also\n\n- notification_remove\n- modal\n\nExamples\n\n",
    "code_examples": [
      "express.ui.notification_show(\n    ui,\n    *,\n    action=None,\n    duration=5,\n    close_button=True,\n    id=None,\n    type='default',\n    session=None,\n)",
      "express.ui.notification_show(\n    ui,\n    *,\n    action=None,\n    duration=5,\n    close_button=True,\n    id=None,\n    type='default',\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show\")\nui.input_action_button(\"remove\", \"Remove\")\n\nids: list[str] = []\nn: int = 0\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef _():\n    global ids\n    global n\n    # Save the ID for removal later\n    id = ui.notification_show(\"Message \" + str(n), duration=None)\n    ids.append(id)\n    n += 1\n\n\n@reactive.effect\n@reactive.event(input.remove)\ndef _():\n    global ids\n    if ids:\n        ui.notification_remove(ids.pop())\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_notification_remove_html",
    "url": "api/express/express.ui.notification_remove.html",
    "title": "express.ui.notification_remove ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- express.ui.notification_remove\n\nexpress.ui.notification_remove\n\nRemove a notification.\n\nnotification_remove provides a way to remove a notification programmatically. Notifications can also be removed manually by the user, or automatically after a specififed amont of time passes.\n\nParameters\n\nThe id of the notification to remove.\n\nThe Session in which the notification appears. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nThe notification‚Äôs id.\n\nSee Also\n\n- notification_show\n- modal\n\nExample\n\nSee shiny.express.ui.notification_show.\n\n",
    "code_examples": [
      "express.ui.notification_remove(id, *, session=None)",
      "express.ui.notification_remove(id, *, session=None)"
    ]
  },
  {
    "id": "api_express_express_ui_modal_html",
    "url": "api/express/express.ui.modal.html",
    "title": "express.ui.modal ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- express.ui.modal\n\nexpress.ui.modal\n\nCreates the UI for a modal dialog, using Bootstrap's modal class.\n\nA modal is a dialog box that appears in front of the app. Modals are typically used for showing important messages, or for presenting UI that requires input from the user, such as a user name and/or password input.\n\nParameters\n\nUI elements for the body of the modal.\n\nAn optional title for the modal dialog.\n\nUI for footer. Use None for no footer.\n\nThe size of the modal dialogue box. Use one of ‚Äús‚Äù for small, ‚Äúm‚Äù (the default) for medium, or ‚Äúl‚Äù for large.\n\nIf True, the modal dialog can be dismissed by clicking outside the dialog box, or by pressing the Escape key. If False (the default), the modal dialog can‚Äôt be dismissed in those ways; instead it must be dismissed by clicking on a modal_button(), or from a call to modal_remove() on the server.\n\nIf False, the modal dialog will have no fade-in animation (it will simply appear rather than fade in to view).\n\nAttributes to be applied to the modal‚Äôs body tag.\n\nReturns\n\nA UI element\n\nSee Also\n\n- modal_show\n- modal_remove\n- modal_button\n\nExamples\n\n",
    "code_examples": [
      "express.ui.modal(\n    *args,\n    title=None,\n    footer=MISSING,\n    size='m',\n    easy_close=False,\n    fade=True,\n    **kwargs,\n)",
      "express.ui.modal(\n    *args,\n    title=None,\n    footer=MISSING,\n    size='m',\n    easy_close=False,\n    fade=True,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show modal dialog\")\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef _():\n    m = ui.modal(\n        \"This is a somewhat important message.\",\n        title=\"Somewhat important message\",\n        easy_close=True,\n        footer=None,\n    )\n    ui.modal_show(m)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_modal_show_html",
    "url": "api/express/express.ui.modal_show.html",
    "title": "express.ui.modal_show ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- express.ui.modal_show\n\nexpress.ui.modal_show\n\nShow a modal dialog.\n\nmodal_show is used to display a modal that has been created with modal.\n\nParameters\n\nTypically a modal instance.\n\nThe Session instance to display the modal in. If not provided, the session is inferred via get_current_session.\n\nSee Also\n\n- modal_remove\n- modal\n\nExamples\n\n",
    "code_examples": [
      "express.ui.modal_show(modal, session=None)",
      "express.ui.modal_show(modal, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show modal dialog\")\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef _():\n    m = ui.modal(\n        \"This is a somewhat important message.\",\n        title=\"Somewhat important message\",\n        easy_close=True,\n        footer=None,\n    )\n    ui.modal_show(m)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_modal_remove_html",
    "url": "api/express/express.ui.modal_remove.html",
    "title": "express.ui.modal_remove ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- express.ui.modal_remove\n\nexpress.ui.modal_remove\n\nRemove a modal dialog box.\n\nmodal_remove provides a way to remove a modal programmatically. Modals can also be removed manually by the user if a modal_button is provided, or if the modal is created with easy_close=True.\n\nParameters\n\nThe Session instance that contains the modal to remove. If not provided, the session is inferred via get_current_session.\n\nSee Also\n\n- modal_show\n- modal\n\nExamples\n\n",
    "code_examples": [
      "express.ui.modal_remove(session=None)",
      "express.ui.modal_remove(session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\n\ndef run_model(delay=10.0):\n    import time\n\n    # Pretend to run a model for `delay` seconds\n    start_time = time.time()\n    while time.time() - start_time < delay:\n        pass\n    return time.time()\n\n\nui.input_action_button(\"run\", \"Run Model\")\n\nmodel_result = reactive.value()\n\n\ndef the_modal():\n    return ui.modal(\n        \"The model is running, please wait.\",\n        title=\"Running model\",\n        easy_close=False,\n        footer=None,\n    )\n\n\n@reactive.effect\n@reactive.event(input.run)\ndef do_run_model():\n    # Show the modal, blocking interaction with the UI\n    ui.modal_show(the_modal())\n\n    result = run_model(delay=4)\n\n    # Now that we have model results, remove the modal\n    # and update the model result reactive value\n    ui.modal_remove()\n    model_result.set(result)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_modal_button_html",
    "url": "api/express/express.ui.modal_button.html",
    "title": "express.ui.modal_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- express.ui.modal_button\n\nexpress.ui.modal_button\n\nCreates a button that will dismiss a modal.\n\nmodal_button is usually passed to the footer of a modal to add a button to the footer that will close the modal.\n\nParameters\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nAttributes to be applied to the button.\n\nReturns\n\nA UI element\n\nSee Also\n\n- modal\n- modal_show\n- modal_remove\n\nExamples\n\n",
    "code_examples": [
      "express.ui.modal_button(label, icon=None, **kwargs)",
      "express.ui.modal_button(label, icon=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show modal dialog\")\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef _():\n    m = ui.modal(\n        \"This is a somewhat important message.\",\n        title=\"Somewhat important message\",\n        easy_close=True,\n        footer=None,\n    )\n    ui.modal_show(m)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_Progress_html",
    "url": "api/express/express.ui.Progress.html",
    "title": "express.ui.progress ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- express.ui.Progress\n\nexpress.ui.Progress\n\nInitialize a progress bar.\n\nProgress creates a computation manager that can be used with with to run a block of code. Shiny will display a progress bar while the code runs, which you can update by calling the set() and message() methods of the computation manager at strategic points in the code block.\n\nParameters\n\nThe value that represents the starting point of the progress bar. Must be less than max.\n\nThe value that represents the end of the progress bar. Must be greater than min.\n\nThe Session instance that the progress bar should appear in. If not provided, the session is inferred via get_current_session.\n\nExamples\n\nMethods\n\nclose\n\nClose the progress bar. You can also use the Progress object as a context manager, which will cause the progress bar to close on exit.\n\nParameters\n\nThe object instance\n\nNote\n\nRemoves the progress panel. Future calls to set and close will be ignored.\n\ninc\n\nIncrement the progress bar.\n\nLike set, this updates the progress panel. The difference is that inc increases the progress bar by amount, instead of setting it to a specific value.\n\nParameters\n\nThe object instance\n\nThe amount to increment in progress.\n\nThe message to be displayed to the user or None to hide the current message (if any).\n\nThe detail message to be displayed to the user or None to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.\n\nset\n\nOpens and updates the progress panel.\n\nWhen called the first time, the progress panel is displayed.\n\nParameters\n\nThe object instance\n\nThe value at which to set the progress bar, relative to min and max. None hides the progress bar, if it is currently visible.\n\nThe message to be displayed to the user or None to hide the current message (if any).\n\nThe detail message to be displayed to the user or None to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.\n\n",
    "code_examples": [
      "express.ui.Progress(self, min=0, max=1, session=None)",
      "express.ui.Progress(self, min=0, max=1, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_action_button(\"button\", \"Compute\")\n\n\n@render.text\n@reactive.event(input.button)\nasync def compute():\n    with ui.Progress(min=1, max=15) as p:\n        p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n        for i in range(1, 15):\n            p.set(i, message=\"Computing\")\n            await asyncio.sleep(0.1)\n            # Normally use time.sleep() instead, but it doesn't yet work in Pyodide.\n            # https://github.com/pyodide/pyodide/issues/2354\n\n    return \"Done computing!\"\n\n",
      "express.ui.Progress.close()",
      "express.ui.Progress.close()",
      "express.ui.Progress.inc(amount=0.1, message=None, detail=None)",
      "express.ui.Progress.inc(amount=0.1, message=None, detail=None)",
      "express.ui.Progress.set(value=None, message=None, detail=None)",
      "express.ui.Progress.set(value=None, message=None, detail=None)"
    ]
  },
  {
    "id": "api_express_express_module_html",
    "url": "api/express/express.module.html",
    "title": "express.module ‚Äì Shiny for Python",
    "description": "",
    "content": "- Modules\n- express.module\n\nexpress.module\n\nCreate a Shiny module using Shiny Express syntax\n\nThis function is used to create a Shiny module, where the code inside the function uses Shiny Express syntax. This is in contrast to the pair of functions :func:~shiny.module.ui() and :func:~shiny.module.server(), which are used to create Shiny modules with Core syntax.\n\nParameters\n\nThe function that defines the module. The first three parameters of this function must be input, output, and session. Any additional parameters can used to pass information to the module.\n\nSee Also\n\n- ui\n- server\n- expressify\n\nExamples\n\n",
    "code_examples": [
      "express.module(fn)",
      "express.module(fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import module, render, ui\n\n\n@module\ndef counter(input, output, session, starting_value: int = 0):\n    count = reactive.value(starting_value)\n\n    ui.input_action_button(\"btn\", \"Increment\")\n\n    with ui.div():\n\n        @render.express\n        def current_count():\n            count()\n\n    @reactive.effect\n    @reactive.event(input.btn)\n    def increment():\n        count.set(count() + 1)\n\n\ncounter(\"one\")\nui.hr()\ncounter(\"two\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_panel_absolute_html",
    "url": "api/express/express.ui.panel_absolute.html",
    "title": "express.ui.panel_absolute ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI panels\n- express.ui.panel_absolute\n\nexpress.ui.panel_absolute\n\nContext manager for a panel of absolutely positioned content.\n\nThis function wraps panel_absolute.\n\nCreates a &lt;div&gt; tag whose CSS position is set to absolute (or fixed if fixed = True). The way absolute positioning works in HTML is that absolute coordinates are specified relative to its nearest parent element whose position is not set to static (which is the default), and if no such parent is found, then relative to the page borders. If you're not sure what that means, just keep in mind that you may get strange results if you use this function from inside of certain types of panels.\n\nParameters\n\nDistance between the top of the panel, and the top of the page or parent container.\n\nDistance between the left side of the panel, and the left of the page or parent container.\n\nDistance between the right side of the panel, and the right of the page or parent container.\n\nDistance between the bottom of the panel, and the bottom of the page or parent container.\n\nWidth of the panel.\n\nHeight of the panel.\n\nIf True, allows the user to move the panel by clicking and dragging.\n\nPositions the panel relative to the browser window and prevents it from being scrolled with the rest of the page.\n\nThe type of cursor that should appear when the user mouses over the panel. Use \"move\" for a north-east-south-west icon, \"default\" for the usual cursor arrow, or \"inherit\" for the usual cursor behavior (including changing to an I-beam when the cursor is over text). The default is \"auto\", which is equivalent to \"move\" if draggable else \"inherit\".\n\nAttributes added to the content‚Äôs container tag.\n\nTip\n\nThe position (top, left, right, bottom) and size (width, height) parameters are all optional, but you should specify exactly two of top, bottom, and height and exactly two of left, right, and width for predictable results.\n\nLike most other distance parameters in Shiny, the position and size parameters take a number (interpreted as pixels) or a valid CSS size string, such as \"100px\" (100 pixels) or \"25%\".\n\nFor arcane HTML reasons, to have the panel fill the page or parent you should specify 0 for top, left, right, and bottom rather than the more obvious width = \"100%\" and height = \"100%\".\n\nExamples\n\n",
    "code_examples": [
      "express.ui.panel_absolute(\n    top=None,\n    left=None,\n    right=None,\n    bottom=None,\n    width=None,\n    height=None,\n    draggable=False,\n    fixed=False,\n    cursor='auto',\n    **kwargs,\n)",
      "express.ui.panel_absolute(\n    top=None,\n    left=None,\n    right=None,\n    bottom=None,\n    width=None,\n    height=None,\n    draggable=False,\n    fixed=False,\n    cursor='auto',\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\nui.h2(\"A basic absolute panel example\")\n\nwith ui.panel_absolute(draggable=True, width=\"300px\", right=\"50px\", top=\"25%\"):\n    with ui.panel_well():\n        \"Drag me around!\"\n        ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_panel_fixed_html",
    "url": "api/express/express.ui.panel_fixed.html",
    "title": "express.ui.panel_fixed ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI panels\n- express.ui.panel_fixed\n\nexpress.ui.panel_fixed\n\nContext manager for a panel of absolutely positioned content.\n\nThis function wraps panel_fixed.\n\nThis function is equivalent to calling panel_absolute with fixed=True (i.e., the panel does not scroll with the rest of the page). See panel_absolute for more information.\n\nParameters\n\nArguments passed along to panel_absolute.\n\nSee Also\n\n- panel_absolute\n\n",
    "code_examples": [
      "express.ui.panel_fixed(\n    top=None,\n    left=None,\n    right=None,\n    bottom=None,\n    width=None,\n    height=None,\n    draggable=False,\n    cursor='auto',\n    **kwargs,\n)",
      "express.ui.panel_fixed(\n    top=None,\n    left=None,\n    right=None,\n    bottom=None,\n    width=None,\n    height=None,\n    draggable=False,\n    cursor='auto',\n    **kwargs,\n)"
    ]
  },
  {
    "id": "api_express_express_ui_panel_title_html",
    "url": "api/express/express.ui.panel_title.html",
    "title": "express.ui.panel_title ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI panels\n- express.ui.panel_title\n\nexpress.ui.panel_title\n\nCreate title(s) for the application.\n\nParameters\n\nA title to display in the app‚Äôs UI.\n\nA title to display on the browser tab.\n\nReturns\n\nA UI element.\n\nNote\n\nThis result of this function causes a side effect of adding a title tag to the head of the document (this is necessary for the browser to display the title in the browser window). You can also specify a page title explicitly using the title parameter of the top-level page function (e.g., page_fluid).\n\nExamples\n\n",
    "code_examples": [
      "express.ui.panel_title(title, window_title=MISSING)",
      "express.ui.panel_title(title, window_title=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\nui.panel_title(\"Page title\", \"Window title\")\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_panel_well_html",
    "url": "api/express/express.ui.panel_well.html",
    "title": "express.ui.panel_well ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI panels\n- express.ui.panel_well\n\nexpress.ui.panel_well\n\nContext manager for a well panel\n\nThis function wraps panel_well.\n\nA well panel is a simple container with a border and some padding. It's useful for grouping related content together.\n\n",
    "code_examples": [
      "express.ui.panel_well(**kwargs)",
      "express.ui.panel_well(**kwargs)"
    ]
  },
  {
    "id": "api_express_express_ui_input_file_html",
    "url": "api/express/express.ui.input_file.html",
    "title": "express.ui.input_file ‚Äì Shiny for Python",
    "description": "",
    "content": "- Uploads & downloads\n- express.ui.input_file\n\nexpress.ui.input_file\n\nCreate a file upload control that can be used to upload one or more files.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nWhether the user should be allowed to select and upload multiple files at once.\n\nUnique file type specifier(s) which give the browser a hint as to the type of file the server expects. Many browsers use this to prevent the user from selecting an invalid file. Examples of valid values include a case insensitive extension (e.g. .csv or .rds), a valid MIME type (e.g. text/plain or application/pdf) or one of audio/*, video/*, or image/* meaning any audio, video, or image type, respectively.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nThe label used on the button.\n\nThe text to show on the input before a file has been uploaded.\n\nOn mobile devices, this can be used to open the device‚Äôs camera for input. If ‚Äúenvironment‚Äù, it will open the rear-facing camera. If ‚Äúuser‚Äù, it will open the front-facing camera. By default, it will accept either still photos or video. To accept only still photos, use accept=\"image/*\"; to accept only video, use accept=\"video/*\".\n\nReturns\n\nA UI element.\n\nNotes\n\nA list of dictionaries (one for each file upload) with the following keys:\n\n- name: The filename provided by the web browser. This is not the path to read to get at the actual data that was uploaded (see ‚Äòdatapath‚Äô).\n- size: The size of the uploaded data, in bytes.\n- type: The MIME type reported by the browser (for example, ‚Äòtext/plain‚Äô), or empty string if the browser didn‚Äôt know.\n- datapath: The path to a temp file that contains the data that was uploaded. This file may be deleted if the user performs another upload operation.\n\nSee Also\n\n- download_button\n\nExamples\n\n",
    "code_examples": [
      "express.ui.input_file(\n    id,\n    label,\n    *,\n    multiple=False,\n    accept=None,\n    width=None,\n    button_label='Browse...',\n    placeholder='No file selected',\n    capture=None,\n)",
      "express.ui.input_file(\n    id,\n    label,\n    *,\n    multiple=False,\n    accept=None,\n    width=None,\n    button_label='Browse...',\n    placeholder='No file selected',\n    capture=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.types import FileInfo\n\nui.input_file(\"file1\", \"Choose CSV File\", accept=[\".csv\"], multiple=False)\nui.input_checkbox_group(\n    \"stats\",\n    \"Summary Stats\",\n    choices=[\"Row Count\", \"Column Count\", \"Column Names\"],\n    selected=[\"Row Count\", \"Column Count\", \"Column Names\"],\n)\n\n\n@reactive.calc\ndef parsed_file():\n    file: list[FileInfo] | None = input.file1()\n    if file is None:\n        return pd.DataFrame()\n    return pd.read_csv(file[0][\"datapath\"])  # pyright: ignore[reportUnknownMemberType]\n\n\n@render.table\ndef summary():\n    df = parsed_file()\n\n    if df.empty:\n        return pd.DataFrame()\n\n    # Get the row count, column count, and column names of the DataFrame\n    row_count = df.shape[0]\n    column_count = df.shape[1]\n    names = df.columns.tolist()\n    column_names = \", \".join(str(name) for name in names)\n\n    # Create a new DataFrame to display the information\n    info_df = pd.DataFrame(\n        {\n            \"Row Count\": [row_count],\n            \"Column Count\": [column_count],\n            \"Column Names\": [column_names],\n        }\n    )\n\n    # input.stats() is a list of strings; subset the columns based on the selected\n    # checkboxes\n    return info_df.loc[:, input.stats()]\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_panel_conditional_html",
    "url": "api/express/express.ui.panel_conditional.html",
    "title": "express.ui.panel_conditional ‚Äì Shiny for Python",
    "description": "",
    "content": "- Dynamic UI\n- express.ui.panel_conditional\n\nexpress.ui.panel_conditional\n\nContext manager for a conditional panel\n\nThis function wraps panel_conditional.\n\nShow UI elements only if a JavaScript condition is true.\n\nParameters\n\nA JavaScript expression that will be evaluated repeatedly to determine whether the panel should be displayed.\n\nAttributes to place on the panel tag.\n\nNote\n\nIn the JS expression, you can refer to input and output JavaScript objects that contain the current values of input and output. For example, if you have an input with an id of foo, then you can use input.foo to read its value. (Be sure not to modify the input/output objects, as this may cause unpredictable behavior.)\n\nYou are not recommended to use special JavaScript characters such as a period . in the input id‚Äôs, but if you do use them anyway, for example, id = \"foo.bar\", you will have to use input[\"foo.bar\"] instead of input.foo.bar to read the input value.\n\nTip\n\nA more powerful (but slower) way to conditionally show UI content is to use ui.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.panel_conditional(condition, **kwargs)",
      "express.ui.panel_conditional(condition, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\nui.input_checkbox(\"show\", \"Show radio buttons\", False)\n\nwith ui.panel_conditional(\"input.show\"):\n    ui.input_radio_buttons(\"radio\", \"Choose \", [\"slider\", \"select\"])\n\nwith ui.panel_conditional(\"input.show && input.radio === 'slider'\"):\n    ui.input_slider(\"slider\", None, min=0, max=100, value=50)\n\nwith ui.panel_conditional(\"input.show && input.radio === 'select'\"):\n    ui.input_select(\"select\", None, [\"A\", \"B\", \"C\"])\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_insert_ui_html",
    "url": "api/express/express.ui.insert_ui.html",
    "title": "express.ui.insert_ui ‚Äì Shiny for Python",
    "description": "",
    "content": "- Dynamic UI\n- express.ui.insert_ui\n\nexpress.ui.insert_ui\n\nInsert UI objects.\n\nParameters\n\nThe UI object you want to insert. This can be anything that you usually put inside your app‚Äôs UI function. If you‚Äôre inserting multiple elements in one call, make sure to wrap them in either a TagList or a div (the latter option has the advantage that you can give it an id to make it easier to reference or remove it later on). If you want to insert raw HTML, use HTML.\n\nA string that is accepted by jQuery‚Äôs selector (i.e. the string s to be placed in a $(s) jQuery call) which determines the element(s) relative to which you want to insert your UI object.\n\nWhere your UI object should go relative to the selector: ‚ÄúbeforeBegin‚Äù: before the selector element itself; ‚ÄúbeforeEnd‚Äù: just inside the selector element, after its last child (default); ‚ÄúafterEnd‚Äù: after the selector element itself. Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML.\n\nIn case your selector matches more than one element, multiple determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).\n\nWhether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThis function allows you to dynamically add arbitrary UI into your app, whenever you want, as many times as you want. Unlike ui, the UI generated with insert_ui is persistent: once it‚Äôs created, it stays there until removed by remove_ui. Each new call to insert_ui creates more UI objects, in addition to the ones already there (all independent from one another). To update a part of the UI (ex: an input object), you must use the appropriate render function or a customized reactive function.\n\nSee Also\n\n- remove_ui\n- ui\n\nExamples\n\n",
    "code_examples": [
      "express.ui.insert_ui(\n    ui,\n    selector,\n    where='beforeEnd',\n    multiple=False,\n    immediate=False,\n    session=None,\n)",
      "express.ui.insert_ui(\n    ui,\n    selector,\n    where='beforeEnd',\n    multiple=False,\n    immediate=False,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"add\", \"Add UI\")\n\n\n@reactive.effect\n@reactive.event(input.add)\ndef _():\n    ui.insert_ui(\n        ui.input_text(\"txt\" + str(input.add()), \"Enter some text\"),\n        selector=\"#add\",\n        where=\"afterEnd\",\n    )\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_remove_ui_html",
    "url": "api/express/express.ui.remove_ui.html",
    "title": "express.ui.remove_ui ‚Äì Shiny for Python",
    "description": "",
    "content": "- Dynamic UI\n- express.ui.remove_ui\n\nexpress.ui.remove_ui\n\nRemove UI objects.\n\nParameters\n\nA string that is accepted by jQuery‚Äôs selector (i.e. the string x to be placed in a $(x) jQuery call), which determines the element(s) to remove. If you want to remove a Shiny input or output, note that many of these are wrapped in <div>s, so you may need to use a somewhat complex selector ‚Äî see the Examples below. (Alternatively, you could also wrap the inputs/outputs that you want to be able to remove easily in a <div> with an id.)\n\nIn case your selector matches more than one element, multiple determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).\n\nWhether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nSee Also\n\n- insert_ui\n- ui\n\nExamples\n\n",
    "code_examples": [
      "express.ui.remove_ui(selector, multiple=False, immediate=False, session=None)",
      "express.ui.remove_ui(selector, multiple=False, immediate=False, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"rmv\", \"Remove UI\")\nui.input_text(\"txt\", \"Click button above to remove me\")\n\n\n@reactive.effect\n@reactive.event(input.rmv)\ndef _():\n    ui.remove_ui(selector=\"div:has(> #txt)\")\n\n"
    ]
  },
  {
    "id": "api_express_session_Session_html",
    "url": "api/express/session.Session.html",
    "title": "session.session ‚Äì Shiny for Python",
    "description": "",
    "content": "- User Session\n- session.Session\n\nsession.Session\n\nInterface definition for Session-like classes, like AppSession, SessionProxy, and ExpressStubSession.\n\nMethods\n\nclose\n\nClose the session.\n\nExamples\n\ndownload\n\nDeprecated. Please use download instead.\n\nParameters\n\nThe name of the download.\n\nThe filename of the download.\n\nThe media type of the download.\n\nThe encoding of the download.\n\nReturns\n\nThe decorated function.\n\ndynamic_route\n\nRegister a function to call when a dynamically generated, session-specific, route is requested.\n\nProvides a convenient way to serve-up session-dependent values for other clients/applications to consume.\n\nParameters\n\nA name for the route (used to determine part of the URL path).\n\nThe function to call when a request is made to the route. This function should take a single argument (a starlette.requests.Request object) and return a starlette.types.ASGIApp object.\n\nReturns\n\nThe URL path for the route.\n\nExamples\n\nis_stub_session\n\nReturns whether this is a stub session.\n\nIn the UI-rendering phase of Shiny Express apps, the session context has a stub session. This stub session is not a real session; it is there only so that code which expects a session can run without raising errors.\n\non_ended\n\nRegisters a function to be called after the client has disconnected.\n\nParameters\n\nThe function to call.\n\nReturns\n\nA function that can be used to cancel the registration.\n\nExamples\n\non_flush\n\nRegister a function to call before the next reactive flush.\n\nParameters\n\nThe function to call.\n\nWhether to call the function only once or on every flush.\n\nReturns\n\nA function that can be used to cancel the registration.\n\nExamples\n\non_flushed\n\nRegister a function to call after the next reactive flush.\n\nParameters\n\nThe function to call.\n\nWhether to call the function only once or on every flush.\n\nReturns\n\nA function that can be used to cancel the registration.\n\nExamples\n\nsend_custom_message\n\nSend a message to the client.\n\nParameters\n\nThe type of message to send.\n\nThe message to send.\n\nNote\n\nSends messages to the client which can be handled in JavaScript with Shiny.addCustomMessageHandler(type, function(message){...}). Once the message handler is added, it will be invoked each time send_custom_message() is called on the server.\n\nExamples\n\nsend_input_message\n\nSend an input message to the session.\n\nSends a message to an input on the session's client web page; if the input is present and bound on the page at the time the message is received, then the input binding object's receiveMessage(el, message) method will be called. This method should generally not be called directly from Shiny apps, but through friendlier wrapper functions like ui.update_text().\n\nParameters\n\nAn id matching the id of an input to update.\n\nThe message to send.\n\nset_message_handler\n\nSet a client message handler.\n\nSets a method that can be called by the client via Shiny.shinyapp.makeRequest(). Shiny.shinyapp.makeRequest() makes a request to the server and waits for a response. By using makeRequest() (JS) and set_message_handler() (python), you can have a much richer communication interaction than just using Input values and re-rendering outputs.\n\nFor example, @render.data_frame can have many cells edited. While it is possible to set many input values, if makeRequest() did not exist, the data frame would be updated on the first cell update. This would cause the data frame to be re-rendered, cancelling any pending cell updates. makeRequest() allows for individual cell updates to be sent to the server, processed, and handled by the existing data frame output.\n\nWhen the message handler is executed, it will be executed within an isolated reactive context and the session context that set the message handler.\n\nParameters\n\nThe name of the message handler.\n\nThe handler function to be called when the client makes a message for the given name. The handler function should take any number of arguments that are provided by the client and return a JSON-serializable object. If the value is None, then the handler at name will be removed.\n\nFor internal use. This is the session which will be used as the session context when calling the handler.\n\nReturns\n\nThe key under which the handler is stored (or removed). This value will be namespaced when used with a session proxy.\n\n",
    "code_examples": [
      "session.Session()",
      "session.Session()",
      "session.Session.close(code=1001)",
      "session.Session.close(code=1001)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_action_button(\"close\", \"Close the session\")\nui.p(\n    \"\"\"If this example is running on the browser (i.e., via shinylive),\n    closing the session will log a message to the JavaScript console\n    (open the browser's developer tools to see it).\n    \"\"\"\n)\n\n\ndef log():\n    print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n\n_ = session.on_ended(log)\n\n\n@reactive.effect\n@reactive.event(input.close)\nasync def _():\n    await session.close()\n\n",
      "session.Session.download(\n    id=None,\n    filename=None,\n    media_type=None,\n    encoding='utf-8',\n)",
      "session.Session.download(\n    id=None,\n    filename=None,\n    media_type=None,\n    encoding='utf-8',\n)",
      "session.Session.dynamic_route(name, handler)",
      "session.Session.dynamic_route(name, handler)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_action_button(\"serve\", \"Click to serve\")\n\nui.div(id=\"messages\")\n\n\n@reactive.effect\n@reactive.event(input.serve)\ndef _():\n    async def my_handler(request: Request) -> JSONResponse:\n        return JSONResponse({\"n_clicks\": input.serve()}, status_code=200)\n\n    path = session.dynamic_route(\"my_handler\", my_handler)\n\n    print(\"Serving at: \", path)\n\n    ui.insert_ui(\n        ui.tags.script(\n            f\"\"\"\n            fetch('{path}')\n                .then(r => r.json())\n                .then(x => {{ $('#messages').text(`Clicked ${{x.n_clicks}} times`); }});\n            \"\"\"\n        ),\n        selector=\"body\",\n    )\n\n",
      "session.Session.is_stub_session()",
      "session.Session.is_stub_session()",
      "session.Session.on_ended(fn)",
      "session.Session.on_ended(fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_action_button(\"close\", \"Close the session\")\n\n\ndef log():\n    print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n\n_ = session.on_ended(log)\n\n\n@reactive.effect\n@reactive.event(input.close)\nasync def _():\n    await session.close()\n\n",
      "session.Session.on_flush(fn, once=True)",
      "session.Session.on_flush(fn, once=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny.express import input, render, session, ui\n\nui.input_action_button(\"flush\", \"Trigger flush\")\n\n\n@render.ui\ndef n_clicks():\n    return \"Number of clicks: \" + str(input.flush())\n\n\nui.div(id=\"flush_time\")\n\n\ndef log():\n    msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n    print(msg)\n    ui.insert_ui(\n        ui.p(msg),\n        selector=\"#flush_time\",\n    )\n\n\nif hasattr(session, \"on_flush\"):\n    _ = session.on_flush(log, once=False)\n\n",
      "session.Session.on_flushed(fn, once=True)",
      "session.Session.on_flushed(fn, once=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny.express import input, render, session, ui\n\nui.input_action_button(\"flush\", \"Trigger flush\")\n\n\n@render.ui\ndef n_clicks():\n    return \"Number of clicks: \" + str(input.flush())\n\n\nui.div(id=\"flush_time\")\n\n\ndef log():\n    msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n    print(msg)\n    ui.insert_ui(\n        ui.p(msg),\n        selector=\"#flush_time\",\n    )\n\n\nif hasattr(session, \"on_flushed\"):\n    _ = session.on_flushed(log, once=False)\n\n",
      "session.Session.send_custom_message(type, message)",
      "session.Session.send_custom_message(type, message)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import reactive\nfrom shiny.express import input, session, ui\n\nui.input_text(\"msg\", \"Enter a message\")\nui.input_action_button(\"submit\", \"Submit the message\")\n# It'd be better to use ui.insert_ui() in order to implement this kind of\n# functionality...this is just a basic demo of how custom message handling works.\nui.tags.div(id=\"messages\")\nui.tags.script(\n    \"\"\"\n    $(function() {\n        Shiny.addCustomMessageHandler(\"append_msg\", function(message) {\n            $(\"<p>\").text(message.msg).appendTo(\"#messages\");\n        });\n    });\n    \"\"\"\n)\n\n\n@reactive.effect\n@reactive.event(input.submit)\nasync def _():\n    await session.send_custom_message(\"append_msg\", {\"msg\": input.msg()})\n\n",
      "session.Session.send_input_message(id, message)",
      "session.Session.send_input_message(id, message)",
      "session.Session.set_message_handler(name, handler, *, _handler_session=None)",
      "session.Session.set_message_handler(name, handler, *, _handler_session=None)"
    ]
  },
  {
    "id": "api_express_session_ClientData_html",
    "url": "api/express/session.ClientData.html",
    "title": "session.clientdata ‚Äì Shiny for Python",
    "description": "",
    "content": "- Client Data\n- session.ClientData\n\nsession.ClientData\n\nAccess (client-side) information from the browser.\n\nProvides access to client-side information, such as the URL components, the pixel ratio of the device, and the properties of outputs.\n\nEach method in this class reads a reactive input value, which means that the method will error if called outside of a reactive context.\n\nRaises\n\nIf a method is called outside of a reactive context.\n\nExamples\n\nMethods\n\noutput_accent_color\n\nReactively read the accent color of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe accent color of the output, or None if the output does not exist (or does not report its accent color).\n\noutput_bg_color\n\nReactively read the background color of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe background color of the output, or None if the output does not exist (or does not report its bg color).\n\noutput_fg_color\n\nReactively read the foreground color of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe foreground color of the output, or None if the output does not exist (or does not report its fg color).\n\noutput_font\n\nReactively read the font(s) of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe font family of the output, or None if the output does not exist (or does not report its font styles).\n\noutput_height\n\nReactively read the height of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe height of the output, or None if the output does not exist (or does not report its height).\n\noutput_hidden\n\nReactively read whether an output is hidden.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nWhether the output is hidden, or None if the output does not exist.\n\noutput_width\n\nReactively read the width of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe width of the output, or None if the output does not exist (or does not report its width).\n\npixelratio\n\nReactively read the pixel ratio of the device.\n\nurl_hash\n\nReactively read the hash part of the URL.\n\nurl_hash_initial\n\nReactively read the initial hash part of the URL.\n\nurl_hostname\n\nReactively read the hostname part of the URL.\n\nurl_pathname\n\nThe pathname part of the URL.\n\nurl_port\n\nReactively read the port part of the URL.\n\nurl_protocol\n\nReactively read the protocol part of the URL.\n\nurl_search\n\nReactively read the search part of the URL.\n\n",
    "code_examples": [
      "session.ClientData(self, session)",
      "session.ClientData(self, session)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\n# pyright: reportUnknownMemberType=false, reportUnknownVariableType=false\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny.express import input, render, session, ui\n\nwith ui.sidebar(open=\"closed\"):\n    ui.input_slider(\"obs\", \"Number of observations:\", min=0, max=1000, value=500)\n\nui.markdown(\n    \"\"\"\n#### `session.clientdata` values\n\nThe following methods are available from the `session.clientdata` object and allow you\nto reactively read the client data values from the browser.\n\"\"\"\n)\n\n\n@render.code\ndef clientdatatext():\n    return f\"\"\"\n    .url_hash()         -> {session.clientdata.url_hash()}\n    .url_hash_initial() -> {session.clientdata.url_hash_initial()}\n    .url_hostname()     -> {session.clientdata.url_hostname()}\n    .url_pathname()     -> {session.clientdata.url_pathname()}\n    .url_port()         -> {session.clientdata.url_port()}\n    .url_protocol()     -> {session.clientdata.url_protocol()}\n    .url_search()       -> {session.clientdata.url_search()}\n    .pixelratio()       -> {session.clientdata.pixelratio()}\n\n    .output_height(\"myplot\")       -> {session.clientdata.output_height(\"myplot\")}\n    .output_width(\"myplot\")        -> {session.clientdata.output_width(\"myplot\")}\n    .output_hidden(\"myplot\")       -> {session.clientdata.output_hidden(\"myplot\")}\n    .output_bg_color(\"myplot\")     -> {session.clientdata.output_bg_color(\"myplot\")}\n    .output_fg_color(\"myplot\")     -> {session.clientdata.output_fg_color(\"myplot\")}\n    .output_accent_color(\"myplot\") -> {session.clientdata.output_accent_color(\"myplot\")}\n    .output_font(\"myplot\")         -> {session.clientdata.output_font(\"myplot\")}\n    \"\"\"\n\n\n@render.plot\ndef myplot():\n    plt.figure()\n    plt.hist(np.random.normal(size=input.obs()))  # type: ignore\n    plt.title(\"This is myplot\")\n\n",
      "session.ClientData.output_accent_color(id)",
      "session.ClientData.output_accent_color(id)",
      "session.ClientData.output_bg_color(id)",
      "session.ClientData.output_bg_color(id)",
      "session.ClientData.output_fg_color(id)",
      "session.ClientData.output_fg_color(id)",
      "session.ClientData.output_font(id)",
      "session.ClientData.output_font(id)",
      "session.ClientData.output_height(id)",
      "session.ClientData.output_height(id)",
      "session.ClientData.output_hidden(id)",
      "session.ClientData.output_hidden(id)",
      "session.ClientData.output_width(id)",
      "session.ClientData.output_width(id)",
      "session.ClientData.pixelratio()",
      "session.ClientData.pixelratio()",
      "session.ClientData.url_hash()",
      "session.ClientData.url_hash()",
      "session.ClientData.url_hash_initial()",
      "session.ClientData.url_hash_initial()",
      "session.ClientData.url_hostname()",
      "session.ClientData.url_hostname()",
      "session.ClientData.url_pathname()",
      "session.ClientData.url_pathname()",
      "session.ClientData.url_port()",
      "session.ClientData.url_port()",
      "session.ClientData.url_protocol()",
      "session.ClientData.url_protocol()",
      "session.ClientData.url_search()",
      "session.ClientData.url_search()"
    ]
  },
  {
    "id": "api_express_express_ui_Theme_html",
    "url": "api/express/express.ui.Theme.html",
    "title": "express.ui.theme ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI as HTML\n- express.ui.Theme\n\nexpress.ui.Theme\n\nCreate a custom Shiny theme.\n\nThe Theme class allows you to create a custom Shiny theme by providing custom Sass code. The theme can be based on one of the available presets, such as \"shiny\" or \"bootstrap\", or a Bootswatch theme. Use the .add_*() methods can be chained together to add custom Sass functions, defaults, mixins, and rules.\n\nPass the Theme object directly to the theme argument of any Shiny page function, such as page_sidebar or page_navbar. In Shiny Express apps, use the theme argument of page_opts to set the app theme.\n\nNote: Compiling custom themes requires the libsass package, which is not installed by default with Shiny. Use pip install libsass or pip install \"shiny[theme]\" to install it.\n\nCustomized themes are compiled to CSS when the theme is used. The Theme class caches the compiled CSS so that it's only compiled for the first user to load your app, but you can speed up app loading (and avoid the runtime libsass dependency) by pre-compiling the theme CSS and saving it to a file. To do this, use the .to_css() method to render the theme to a single minified CSS string.\n\nRun this script with python my_theme.py to generate the CSS file. Once saved to a file, the CSS can be used in any Shiny app by passing the file path to the theme argument instead of the Theme object.\n\nParameters\n\nThe name of the preset to use as a base. \"shiny\" is the default theme for Shiny apps and \"bootstrap\" uses standard Bootstrap 5 styling. Bootswatch theme presets are also available. Use Theme.available_presets() to see the full list.\n\nA custom name for the theme. If not provided, the preset name will be used.\n\nAdditional paths to include when looking for Sass files used in @import statements in the theme. This can be a single path as a string or pathlib.Path, or a list of paths. The paths should point to directories containing additional Sass files that the theme depends on.\n\nRaises\n\nIf the preset is not a valid theme preset.\n\nMethods\n\nadd_defaults\n\nAdd custom default values to the theme.\n\nSass code added via this method will be placed before the default values of the theme preset, allowing you to override or extend the default values.\n\nParameters\n\nSass code, as a single or multiple strings, containing default value declarations to add.\n\nKeyword arguments containing default value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, .add_defaults(primary_color=\"#ff0000\") is equivalent to .add_defaults(\"$primary-color: #ff0000 !default;\").\n\nadd_functions\n\nAdd custom Sass functions to the theme.\n\nSass code added via this method will be placed after the function declarations from the theme preset, allowing you to override or extend the default functions.\n\nParameters\n\nThe Sass functions to add as a single or multiple strings.\n\nadd_mixins\n\nAdd custom Sass mixins to the theme.\n\nSass code added via this method will be placed after the mixin declarations from the theme preset, allowing you to override or extend the default mixins.\n\nParameters\n\nSass code, as a single or multiple strings, containing mixins to add.\n\nKeyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, .add_mixins(primary_color=\"#ff0000\") is equivalent to .add_mixins(\"$primary-color: #ff0000;\").\n\nadd_rules\n\nAdd custom Sass rules to the theme.\n\nSass code added via this method will be placed after the rule declarations from the theme preset, allowing you to override or extend the default rules.\n\nParameters\n\nSass code, as a single or multiple strings, containing rules to add.\n\nKeyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, .add_rules(primary_color=\"#ff0000\") is equivalent to .add_rules(\"$primary-color: #ff0000;\").\n\nadd_sass_layer_file\n\nAdd a Sass layer file to the theme.\n\nThis method reads a special .scss file formatted with layer boundary comments to denote regions of functions, defaults, mixins, and rules. It then splits the file into these constituent pieces and adds them to the appropriate layers of the theme.\n\nThe theme file should contain at least one of the following boundary comments:\n\nEach layer, once extracted, is added to the theme using the corresponding add_ method, e.g. the scss:rules layer is added via .add_rules().\n\nLayer types can appear more than once in the .scss file. They are coalesced into a single layer by order of appearance and then added as a block via their corresponding add_ method.\n\nParameters\n\nThe path to the .scss file to be added.\n\nRaises\n\nIf the .scss file doesn‚Äôt contain at least one valid region decorator.\n\nadd_uses\n\nAdd custom Sass \"uses\" declarations to the theme.\n\nSass code added via this method will be placed before the function declarations from the theme preset, allowing you to add Sass code that appears before any other Sass code in the theme layer.\n\nParameters\n\nThe Sass functions to add as a single or multiple strings.\n\navailable_presets\n\nGet a list of available theme presets.\n\nfrom_brand\n\nCreate a custom Shiny theme from a _brand.yml\n\nCreates a custom Shiny theme for your brand using brand.yml, a single YAML file that describes the brand's color and typography. Learn more about writing a _brand.yml file for your brand at the brand.yml homepage.\n\nAs a simple example, suppose your brand guidelines include a color palette with custom orange and black colors. The orange is used as the primary accent color and the black for all text. For typography, the brand also uses Roboto and Roboto Mono from Google Fonts for text and monospace-styled text, respectively. Here's a _brand.yml file for this brand:\n\nYou can store the _brand.yml file next to your Shiny app.py or, for larger projects, in a parent folder. To use a theme generated from the _brand.yml file, call from_brand on __file__ and pass the result to the theme argument of page_opts (Shiny Express) or the theme argument of shiny.express.ui.page_* functions, like page_sidebar.\n\nParameters\n\nA brand_yml.Brand instance, or a path to help locate _brand.yml. For a path, you can pass __file__ or a directory containing the _brand.yml or a path directly to the _brand.yml file.\n\nReturns\n\nA shiny.express.ui.Theme instance with a custom Shiny theme created from the brand guidelines (see brand_yml.Brand).\n\nto_css\n\nCompile the theme to CSS and return the result as a string.\n\nParameters\n\nA dictionary of keyword arguments to pass to sass.compile().\n\nReturns\n\nThe compiled CSS for the theme. The value is cached such that previously compiled themes are returned immediately. Adding additional custom Sass code or changing the preset will invalidate the cache.\n\nto_sass\n\nReturns the custom theme as a single Sass string.\n\nReturns\n\nThe custom theme as a single Sass string.\n\n",
    "code_examples": [
      "express.ui.Theme(self, preset=None, name=None, include_paths=None)",
      "express.ui.Theme(self, preset=None, name=None, include_paths=None)",
      "from pathlib import Path\n\nfrom shiny import ui\n\nmy_theme = (\n    ui.Theme(\"shiny\")\n    .add_defaults(\n        my_purple=\"#aa00aa\",\n    )\n    .add_mixins(\n        headings_color=\"$my-purple\",\n    )\n)\n\nwith open(Path(__file__).parent / \"my_theme.css\", \"w\") as f:\n    f.write(my_theme.to_css())",
      "from pathlib import Path\n\nfrom shiny import ui\n\nmy_theme = (\n    ui.Theme(\"shiny\")\n    .add_defaults(\n        my_purple=\"#aa00aa\",\n    )\n    .add_mixins(\n        headings_color=\"$my-purple\",\n    )\n)\n\nwith open(Path(__file__).parent / \"my_theme.css\", \"w\") as f:\n    f.write(my_theme.to_css())",
      "from pathlib import Path\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Hello, themed Shiny!\"),\n    # App content here\n    title=\"My App\",\n    theme=Path(__file__).parent / \"my_theme.css\",\n)\n\ndef server(input):\n    pass\n\napp = App(app_ui, server)",
      "from pathlib import Path\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Hello, themed Shiny!\"),\n    # App content here\n    title=\"My App\",\n    theme=Path(__file__).parent / \"my_theme.css\",\n)\n\ndef server(input):\n    pass\n\napp = App(app_ui, server)",
      "express.ui.Theme.add_defaults(*args, **kwargs)",
      "express.ui.Theme.add_defaults(*args, **kwargs)",
      "express.ui.Theme.add_functions(*args)",
      "express.ui.Theme.add_functions(*args)",
      "express.ui.Theme.add_mixins(*args, **kwargs)",
      "express.ui.Theme.add_mixins(*args, **kwargs)",
      "express.ui.Theme.add_rules(*args, **kwargs)",
      "express.ui.Theme.add_rules(*args, **kwargs)",
      "express.ui.Theme.add_sass_layer_file(path)",
      "express.ui.Theme.add_sass_layer_file(path)",
      "/*-- scss:uses --*/\n/*-- scss:functions --*/\n/*-- scss:defaults --*/\n/*-- scss:mixins --*/\n/*-- scss:rules --*/",
      "/*-- scss:uses --*/\n/*-- scss:functions --*/\n/*-- scss:defaults --*/\n/*-- scss:mixins --*/\n/*-- scss:rules --*/",
      "express.ui.Theme.add_uses(*args)",
      "express.ui.Theme.add_uses(*args)",
      "express.ui.Theme.available_presets()",
      "express.ui.Theme.available_presets()",
      "express.ui.Theme.from_brand(brand)",
      "express.ui.Theme.from_brand(brand)",
      "meta:\n  name: brand.yml Example\n\ncolor:\n  palette:\n    orange: \"#F96302\"\n    black: \"#000000\"\n  foreground: black\n  primary: orange\n\ntypography:\n  fonts:\n    - family: Roboto\n      source: google\n    - family: Roboto Mono\n      source: google\n  base: Roboto\n  monospace: Roboto Mono",
      "meta:\n  name: brand.yml Example\n\ncolor:\n  palette:\n    orange: \"#F96302\"\n    black: \"#000000\"\n  foreground: black\n  primary: orange\n\ntypography:\n  fonts:\n    - family: Roboto\n      source: google\n    - family: Roboto Mono\n      source: google\n  base: Roboto\n  monospace: Roboto Mono",
      "from shiny.express import input, render, ui\n\nui.page_opts(theme=ui.Theme.from_brand(__file__))\n\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.code\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"",
      "from shiny.express import input, render, ui\n\nui.page_opts(theme=ui.Theme.from_brand(__file__))\n\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.code\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"",
      "express.ui.Theme.to_css(compile_args=None)",
      "express.ui.Theme.to_css(compile_args=None)",
      "express.ui.Theme.to_sass()",
      "express.ui.Theme.to_sass()"
    ]
  },
  {
    "id": "api_express_express_ui_markdown_html",
    "url": "api/express/express.ui.markdown.html",
    "title": "express.ui.markdown ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI as HTML\n- express.ui.markdown\n\nexpress.ui.markdown\n\nConvert a string of markdown to ui.HTML.\n\nParameters\n\nA string of text containing markdown.\n\nA function (with at least 1 argument) which accepts a string of markdown and returns a string of HTML. By default, a customized instance of the markdown_id.main.MarkdownIt class (which supports Github-flavored markdown) from the markdown-it package is used.\n\nAdditional keyword arguments passed to the render_func.\n\nReturns\n\nAn HTML string of the rendered markdown.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.markdown(text, *, render_func=None, **kwargs)",
      "express.ui.markdown(text, *, render_func=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny.express import ui\n\nui.markdown(\n    \"\"\"\n    # Hello World\n\n    This is **markdown** and here is some `code`:\n\n    ```python\n    print('Hello world!')\n    ```\n    \"\"\"\n)\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_include_css_html",
    "url": "api/express/express.ui.include_css.html",
    "title": "express.ui.include_css ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI as HTML\n- express.ui.include_css\n\nexpress.ui.include_css\n\nInclude a CSS file.\n\nParameters\n\nA path to a CSS file.\n\nOne of the following: * \"link\" is the link to the CSS file via a link tag. This method is generally preferable to \"inline\" since it allows the browser to cache the file. * \"link_files\" is the same as \"link\", but also allow for the CSS file to request other files within path‚Äòs immediate parent directory (e.g., @import() another file). Note that this isn‚Äôt the default behavior because you should be careful not to include files in the same directory as path that contain sensitive information. A good general rule of thumb to follow is to have path be located in a subdirectory of the app directory. For example, if the app‚Äôs source is located at /app/app.py, then path should be somewhere like /app/css/custom.css (and all the other relevant accompanying ‚Äôsafe‚Äô files should be located under /app/css/). * \"inline\" is the inline the CSS file contents within a style tag.\n\nReturns\n\nIf method=\"inline\", returns a style tag; otherwise, returns a link tag.\n\nNote\n\nBy default this places a link (or style) tag in the body of the document, which isn‚Äôt optimal for performance, and may result in a Flash of Unstyled Content (FOUC). To instead place the CSS in the head of the document, you can wrap it in head_content:\n\nSee Also\n\n- style\n- link\n- include_js\n\nExamples\n\n",
    "code_examples": [
      "express.ui.include_css(path, *, method='link')",
      "express.ui.include_css(path, *, method='link')",
      "from htmltools import head_content\nfrom shiny import ui\n\nui.page_fluid(\n    ui.head_content(ui.include_css(\"custom.css\")),\n\n    # You can also inline css by passing a dictionary with a `style` element.\n    ui.div(\n        {\"style\": \"font-weight: bold;\"},\n        ui.p(\"Some text!\"),\n    )\n)",
      "from htmltools import head_content\nfrom shiny import ui\n\nui.page_fluid(\n    ui.head_content(ui.include_css(\"custom.css\")),\n\n    # You can also inline css by passing a dictionary with a `style` element.\n    ui.div(\n        {\"style\": \"font-weight: bold;\"},\n        ui.p(\"Some text!\"),\n    )\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom pathlib import Path\n\nfrom shiny.express import ui\n\ncss_file = Path(__file__).parent / \"css\" / \"styles.css\"\n\n\"Almost before we knew it, we had left the ground!!!\"\n\nui.include_css(css_file)\n\n# Style individual elements with an attribute dictionary.\nui.p(\"Bold text\", {\"style\": \"font-weight: bold\"})\n\n\n## file: css/styles.css\nbody {\n  font-size: 3rem;\n  background-color: pink\n}\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_include_js_html",
    "url": "api/express/express.ui.include_js.html",
    "title": "express.ui.include_js ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI as HTML\n- express.ui.include_js\n\nexpress.ui.include_js\n\nInclude a JavaScript file.\n\nParameters\n\nA path to a JS file.\n\nOne of the following: * \"link\" is the link to the CSS file via a link tag. This method is generally preferable to \"inline\" since it allows the browser to cache the file. * \"link_files\" is the same as \"link\", but also allow for the CSS file to request other files within path‚Äòs immediate parent directory (e.g., @import() another file). Note that this isn‚Äôt the default behavior because you should be careful not to include files in the same directory as path that contain sensitive information. A good general rule of thumb to follow is to have path be located in a subdirectory of the app directory. For example, if the app‚Äôs source is located at /app/app.py, then path should be somewhere like /app/css/custom.css (and all the other relevant accompanying ‚Äôsafe‚Äô files should be located under /app/css/). * \"inline\" is the inline the CSS file contents within a style tag.\n\nAttributes which are passed on to ~shiny.express.ui.tags.script.\n\nReturns\n\nA script tag.\n\nNote\n\nThis places a script tag in the body of the document. If you want to place the tag in the head of the document instead, you can wrap it in head_content (in this case, just make sure you‚Äôre aware that the DOM probably won‚Äôt be ready when the script is executed).\n\nSee Also\n\n- script\n- include_css\n\nExamples\n\n",
    "code_examples": [
      "express.ui.include_js(path, *, method='link', **kwargs)",
      "express.ui.include_js(path, *, method='link', **kwargs)",
      "ui.page_fluid(\n    ui.head_content(ui.include_js(\"custom.js\")),\n)\n\n# Alternately you can inline Javscript by changing the method.\nui.page_fluid(\n    ui.head_content(ui.include_js(\"custom.js\", method = \"inline\")),\n)",
      "ui.page_fluid(\n    ui.head_content(ui.include_js(\"custom.js\")),\n)\n\n# Alternately you can inline Javscript by changing the method.\nui.page_fluid(\n    ui.head_content(ui.include_js(\"custom.js\", method = \"inline\")),\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom pathlib import Path\n\nfrom shiny.express import ui\n\njs_file = Path(__file__).parent / \"js\" / \"app.js\"\n\n\"If you see this page before 'OK'-ing the alert box, something went wrong\"\n\nui.include_js(js_file)\n\n\n## file: js/app.js\nalert(\"If you're seeing this, the javascript file was included successfully.\");\n\n"
    ]
  },
  {
    "id": "api_express_express_ui_HTML_html",
    "url": "api/express/express.ui.HTML.html",
    "title": "express.ui.html ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI as HTML\n- express.ui.HTML\n\nexpress.ui.HTML\n\nMark a string as raw HTML. This will prevent the string from being escaped when rendered inside an HTML tag.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.HTML(self, html)",
      "express.ui.HTML(self, html)",
      ">>> from htmltools import HTML, div\n>>> div(\"<p>Hello</p>\")\n<div>&lt;p&gt;Hello&lt;/p&gt;</div>\n>>> div(HTML(\"<p>Hello</p>\"))\n<div><p>Hello</p></div>",
      ">>> from htmltools import HTML, div\n>>> div(\"<p>Hello</p>\")\n<div>&lt;p&gt;Hello&lt;/p&gt;</div>\n>>> div(HTML(\"<p>Hello</p>\"))\n<div><p>Hello</p></div>"
    ]
  },
  {
    "id": "api_express_express_ui_tags_html",
    "url": "api/express/express.ui.tags.html",
    "title": "express.ui.tags ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI as HTML\n- express.ui.tags\n\nexpress.ui.tags\n\nexpress.ui.tags\n\nFunctions for creating HTML tags.\n\n",
    "code_examples": []
  },
  {
    "id": "api_express_express_ui_TagList_html",
    "url": "api/express/express.ui.TagList.html",
    "title": "express.ui.taglist ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI as HTML\n- express.ui.TagList\n\nexpress.ui.TagList\n\nCreate an HTML tag list (i.e., a fragment of HTML)\n\nParameters\n\nThe tag children to add to the list.\n\nExamples\n\nMethods\n\nappend\n\nAppend tag children to the end of the list.\n\nextend\n\nExtend the children by appending an iterable of children.\n\nget_dependencies\n\nGet any dependencies needed to render the HTML.\n\nParameters\n\nWhether to deduplicate the dependencies.\n\nget_html_string\n\nReturn the HTML string for this tag list.\n\nParameters\n\nNumber of spaces to indent each line of the HTML.\n\nEnd-of-line character(s).\n\nWhether to add whitespace between the opening tag and the first child. If either this is True, or the child‚Äôs add_ws attribute is True, then whitespace will be added; if they are both False, then no whitespace will be added.\n\ninsert\n\nInsert tag children before a given index.\n\nrender\n\nGet string representation as well as its HTML dependencies.\n\nsave_html\n\nSave to a HTML file.\n\nParameters\n\nThe file to save to.\n\nThe directory to save the dependencies to.\n\nWhether to include the version number in the dependency folder name.\n\nReturns\n\nThe path to the generated HTML file.\n\nshow\n\nPreview as a complete HTML document.\n\nParameters\n\nThe renderer to use.\n\ntagify\n\nConvert any tagifiable children to Tag/TagList objects.\n\n",
    "code_examples": [
      "express.ui.TagList(self, *args)",
      "express.ui.TagList(self, *args)",
      ">>> from htmltools import TagList, div\n>>> TagList(\"hello\", div(id=\"foo\", class_=\"bar\"))\nhello\n<div id=\"foo\" class=\"bar\"></div>",
      ">>> from htmltools import TagList, div\n>>> TagList(\"hello\", div(id=\"foo\", class_=\"bar\"))\nhello\n<div id=\"foo\" class=\"bar\"></div>",
      "express.ui.TagList.append(item, *args)",
      "express.ui.TagList.append(item, *args)",
      "express.ui.TagList.extend(other)",
      "express.ui.TagList.extend(other)",
      "express.ui.TagList.get_dependencies(dedup=True)",
      "express.ui.TagList.get_dependencies(dedup=True)",
      "express.ui.TagList.get_html_string(\n    indent=0,\n    eol='\\n',\n    *,\n    add_ws=True,\n    _escape_strings=True,\n)",
      "express.ui.TagList.get_html_string(\n    indent=0,\n    eol='\\n',\n    *,\n    add_ws=True,\n    _escape_strings=True,\n)",
      "express.ui.TagList.insert(i, item)",
      "express.ui.TagList.insert(i, item)",
      "express.ui.TagList.render()",
      "express.ui.TagList.render()",
      "express.ui.TagList.save_html(file, *, libdir='lib', include_version=True)",
      "express.ui.TagList.save_html(file, *, libdir='lib', include_version=True)",
      "express.ui.TagList.show(renderer='auto')",
      "express.ui.TagList.show(renderer='auto')",
      "express.ui.TagList.tagify()",
      "express.ui.TagList.tagify()"
    ]
  },
  {
    "id": "api_express_express_ui_busy_indicators_use_html",
    "url": "api/express/express.ui.busy_indicators.use.html",
    "title": "express.ui.busy_indicators.use ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI as HTML\n- express.ui.busy_indicators.use\n\nexpress.ui.busy_indicators.use\n\nEnable/disable busy indication\n\nBusy indicators provide a visual cue to users when the server is busy calculating outputs or otherwise performing tasks (e.g., producing downloads). When enabled (they are by default), a spinner is shown on each calculating/recalculating output, and a pulsing banner is shown at the top of the page when the app is otherwise busy. To disable, include the result of this function in anywhere in the app's UI.\n\nParameters\n\nWhether to show a spinner on each calculating/recalculating output.\n\nWhether to show a pulsing banner at the top of the page when the app is busy.\n\nWhether to fade recalculating outputs. A value of False is equivalent to shiny.express.ui.busy_indicators.options(fade_opacity=1).\n\nNote\n\nWhen both spinners and pulse are set to True, the pulse is disabled when spinner(s) are active. When both spinners and pulse are set to False, no busy indication is shown (other than the gray-ing out of recalculating outputs).\n\nSee Also\n\n- options for customizing busy indicators.\n\n",
    "code_examples": [
      "express.ui.busy_indicators.use(spinners=True, pulse=True, fade=True)",
      "express.ui.busy_indicators.use(spinners=True, pulse=True, fade=True)"
    ]
  },
  {
    "id": "api_express_express_ui_busy_indicators_options_html",
    "url": "api/express/express.ui.busy_indicators.options.html",
    "title": "express.ui.busy_indicators.options ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI as HTML\n- express.ui.busy_indicators.options\n\nexpress.ui.busy_indicators.options\n\nCustomize spinning busy indicators.\n\nBusy indicators provide a visual cue to users when the server is busy calculating outputs or otherwise performing tasks (e.g., producing downloads). This function allows you to customize the appearance of those busy indicators. To apply the customization, include the result of this function inside the app's UI.\n\nParameters\n\nThe type of spinner. Pre-bundled types are listed in the BusySpinnerType type. A Path to a local SVG file can also be provided. The SVG should adhere to the following rules: * The SVG itself should contain the animation. * It should avoid absolute sizes (the spinner‚Äôs containing DOM element size is set in CSS by spinner_size, so it should fill that container). * It should avoid setting absolute colors (the spinner‚Äôs containing DOM element color is set in CSS by spinner_color, so it should inherit that color).\n\nThe color of the spinner. This can be any valid CSS color. Defaults to the app‚Äôs ‚Äúprimary‚Äù color (if Bootstrap is on the page).\n\nThe size of the spinner. This can be any valid CSS size.\n\nThe amount of time to wait before showing the spinner. This can be any valid CSS time and can useful for not showing the spinner if the computation finishes quickly.\n\nA character string containing a CSS selector for scoping the spinner customization. The default (None) will apply the spinner customization to the parent element of the spinner.\n\nThe opacity (a number between 0 and 1) for recalculating output. Set to 1 to ‚Äúdisable‚Äù the fade.\n\nA string containing a CSS selector for scoping the fade customization. The default (None) applies the fade customization to the parent element.\n\nA CCS background definition for the pulse. The default uses a linear-gradient of the theme‚Äôs indigo, purple, and pink colors.\n\nThe height of the pulsing banner. This can be any valid CSS size.\n\nThe speed of the pulsing banner. This can be any valid CSS time.\n\nSee Also\n\n- use for enabling/disabling busy indicators.\n\nExamples\n\n",
    "code_examples": [
      "express.ui.busy_indicators.options(\n    spinner_type=None,\n    spinner_color=None,\n    spinner_size=None,\n    spinner_delay=None,\n    spinner_selector=None,\n    fade_opacity=None,\n    fade_selector=None,\n    pulse_background=None,\n    pulse_height=None,\n    pulse_speed=None,\n)",
      "express.ui.busy_indicators.options(\n    spinner_type=None,\n    spinner_color=None,\n    spinner_size=None,\n    spinner_delay=None,\n    spinner_selector=None,\n    fade_opacity=None,\n    fade_selector=None,\n    pulse_background=None,\n    pulse_height=None,\n    pulse_speed=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport os\nimport time\n\nimport numpy as np\nimport seaborn as sns\n\nfrom shiny.express import input, render, ui\n\nui.page_opts(title=\"Busy spinner demo\")\n\nwith ui.sidebar():\n    ui.input_selectize(\n        \"indicator_types\",\n        \"Busy indicator types\",\n        [\"spinners\", \"pulse\"],\n        multiple=True,\n        selected=[\"spinners\", \"pulse\"],\n    )\n\n    @render.download\n    def download():\n        time.sleep(3)\n        path = os.path.join(os.path.dirname(__file__), \"app-express.py\")\n        return path\n\n\nwith ui.card():\n    ui.card_header(\n        \"Plot that takes a few seconds to render\",\n        ui.input_task_button(\"simulate\", \"Simulate\"),\n        class_=\"d-flex justify-content-between align-items-center\",\n    )\n\n    @render.plot\n    def plot():\n        input.simulate()\n        time.sleep(3)\n        sns.lineplot(x=np.arange(100), y=np.random.randn(100))\n\n\nui.busy_indicators.options(spinner_type=\"bars3\")\n\n\n@render.ui\ndef indicator_types_ui():\n    return ui.busy_indicators.use(\n        spinners=\"spinners\" in input.indicator_types(),\n        pulse=\"pulse\" in input.indicator_types(),\n    )\n\n"
    ]
  },
  {
    "id": "api_express_express_app_opts_html",
    "url": "api/express/express.app_opts.html",
    "title": "express.app_opts ‚Äì Shiny for Python",
    "description": "",
    "content": "- Application-level settings\n- express.app_opts\n\nexpress.app_opts\n\nSet App-level options in Shiny Express\n\nThis function sets application-level options for Shiny Express. These options are the same as those from the shiny.App constructor.\n\nParameters\n\nStatic files to be served by the app. If this is a string or Path object, it must be a directory, and it will be mounted at /. If this is a dictionary, each key is a mount point and each value is a file or directory to be served at that mount point. In Shiny Express, if there is a www subdirectory of the directory containing the app file, it will automatically be mounted at /, even without needing to set the option here.\n\nWhether to enable debug mode.\n\n",
    "code_examples": [
      "express.app_opts(static_assets=MISSING, debug=MISSING)",
      "express.app_opts(static_assets=MISSING, debug=MISSING)"
    ]
  },
  {
    "id": "api_express_express_is_express_app_html",
    "url": "api/express/express.is_express_app.html",
    "title": "express.is_express_app ‚Äì Shiny for Python",
    "description": "",
    "content": "- Express developer tooling\n- express.is_express_app\n\nexpress.is_express_app\n\nDetect whether an app file is a Shiny express app\n\nParameters\n\nApp filename, like ‚Äúapp.py‚Äù. It may be a relative path or absolute path.\n\nDirectory containing the app file. If this is None, then app must be an absolute path.\n\nReturns\n\nTrue if it is a Shiny express app, False otherwise.\n\n",
    "code_examples": [
      "express.is_express_app(app, app_dir)",
      "express.is_express_app(app, app_dir)"
    ]
  },
  {
    "id": "api_express_express_wrap_express_app_html",
    "url": "api/express/express.wrap_express_app.html",
    "title": "express.wrap_express_app ‚Äì Shiny for Python",
    "description": "",
    "content": "- Express developer tooling\n- express.wrap_express_app\n\nexpress.wrap_express_app\n\nWrap a Shiny Express mode app into a Shiny App object.\n\nThis also creates a Python package for the app named something like shiny_express_app_0. This package is required for relative imports to work, as in from . import utils.\n\nParameters\n\nThe path to the file containing the Shiny express application.\n\nReturns\n\nA shiny.App object.\n\n",
    "code_examples": [
      "express.wrap_express_app(file)",
      "express.wrap_express_app(file)"
    ]
  },
  {
    "id": "api_core_ui_page_sidebar_html",
    "url": "api/core/ui.page_sidebar.html",
    "title": "ui.page_sidebar ‚Äì Shiny for Python",
    "description": "",
    "content": "- Page containers\n- ui.page_sidebar\n\nui.page_sidebar\n\nCreate a page with a sidebar and a title.\n\nParameters\n\nContent to display in the sidebar.\n\nUI elements.\n\nA title to display at the top of the page.\n\nWhether or not the main content area should be considered a fillable (i.e., flexbox) container.\n\nWhether or not fillable should apply on mobile devices.\n\nThe browser‚Äôs window title (defaults to the host URL of the page). Can also be set as a side effect via panel_title.\n\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\n\nA custom Shiny theme created using the Theme class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete bootstrap.css or bootstrap.min.css file. For advanced uses, you can also pass a Tagifiable object. In this case, Shiny will suppress the default Bootstrap CSS. To modify the theme of an app without replacing the Bootstrap CSS entirely, use include_css to add custom CSS.\n\nAdditional attributes passed to layout_sidebar.\n\nReturns\n\nA UI element.\n\nExamples\n\n",
    "code_examples": [
      "ui.page_sidebar(\n    sidebar,\n    *args,\n    title=None,\n    fillable=False,\n    fillable_mobile=False,\n    window_title=MISSING,\n    lang=None,\n    theme=None,\n    **kwargs,\n)",
      "ui.page_sidebar(\n    sidebar,\n    *args,\n    title=None,\n    fillable=False,\n    fillable_mobile=False,\n    window_title=MISSING,\n    lang=None,\n    theme=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_slider(\"n\", \"N\", min=0, max=100, value=20),\n    ),\n    ui.card(\n        ui.output_plot(\"plot\"),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_page_navbar_html",
    "url": "api/core/ui.page_navbar.html",
    "title": "ui.page_navbar ‚Äì Shiny for Python",
    "description": "",
    "content": "- Page containers\n- ui.page_navbar\n\nui.page_navbar\n\nCreate a page with a navbar and a title.\n\nParameters\n\nUI elements.\n\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via panel_title.\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match its value).\n\nA sidebar component to display on every page.\n\nWhether or not the main content area should be considered a fillable (i.e., flexbox) container.\n\nWhether or not fillable should apply on mobile devices.\n\nA CSS length unit defining the gap (i.e., spacing) between elements provided to *args. This value is only used when the navbar is fillable.\n\nPadding to use for the body. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. The length can be between one and four. If one, then that value will be used for all four sides. If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. If three, then the first will be used for top, the second will be left and right, and the third will be bottom. If four, then the values will be interpreted as top, right, bottom, and left respectively. This value is only used when the navbar is fillable.\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nThe browser‚Äôs window title (defaults to the host URL of the page). Can also be set as a side effect via panel_title.\n\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\n\nA custom Shiny theme created using the Theme class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete bootstrap.css or bootstrap.min.css file. For advanced uses, you can also pass a Tagifiable object. In this case, Shiny will suppress the default Bootstrap CSS. To modify the theme of an app without replacing the Bootstrap CSS entirely, use include_css to add custom CSS.\n\nTrue to use fluid layout; False to use fixed layout.\n\nConfigure the appearance and behavior of the navbar using navbar_options to set properties like position, background color, and more. navbar_options was added in v1.3.0 and replaces deprecated arguments position, bg, inverse, collapsible, and underline.\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. Determines whether the navbar should be displayed at the top of the page with normal scrolling behavior (‚Äústatic-top‚Äù), pinned at the top (‚Äúfixed-top‚Äù), or pinned at the bottom (‚Äúfixed-bottom‚Äù). Note that using ‚Äúfixed-top‚Äù or ‚Äúfixed-bottom‚Äù will cause the navbar to overlay your body content, unless you add padding (e.g., tags.style(\"body {padding-top: 70px;}\")).\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. Background color of the navbar (a CSS color).\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. Either True for a light text color or False for a dark text color.\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. True to automatically collapse the elements into an expandable menu on mobile devices or narrow window widths.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- nav\n- nav_menu\n- navset_bar\n- page_fluid\n\nExample\n\nSee nav.\n\n",
    "code_examples": [
      "ui.page_navbar(\n    *args,\n    title=None,\n    id=None,\n    selected=None,\n    sidebar=None,\n    fillable=False,\n    fillable_mobile=False,\n    gap=None,\n    padding=None,\n    header=None,\n    footer=None,\n    navbar_options=None,\n    fluid=True,\n    window_title=MISSING,\n    lang=None,\n    theme=None,\n    position=DEPRECATED,\n    bg=DEPRECATED,\n    inverse=DEPRECATED,\n    underline=DEPRECATED,\n    collapsible=DEPRECATED,\n)",
      "ui.page_navbar(\n    *args,\n    title=None,\n    id=None,\n    selected=None,\n    sidebar=None,\n    fillable=False,\n    fillable_mobile=False,\n    gap=None,\n    padding=None,\n    header=None,\n    footer=None,\n    navbar_options=None,\n    fluid=True,\n    window_title=MISSING,\n    lang=None,\n    theme=None,\n    position=DEPRECATED,\n    bg=DEPRECATED,\n    inverse=DEPRECATED,\n    underline=DEPRECATED,\n    collapsible=DEPRECATED,\n)"
    ]
  },
  {
    "id": "api_core_ui_page_fillable_html",
    "url": "api/core/ui.page_fillable.html",
    "title": "ui.page_fillable ‚Äì Shiny for Python",
    "description": "",
    "content": "- Page containers\n- ui.page_fillable\n\nui.page_fillable\n\nCreate a fillable page.\n\nParameters\n\nUI elements.\n\nPadding to use for the body. See as_css_padding for more details.\n\nWhether or not the page should fill the viewport‚Äôs height on mobile devices (i.e., narrow windows).\n\nA CSS length unit passed through as_css_unit defining the gap (i.e., spacing) between elements provided to *args.\n\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via panel_title.\n\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\n\nA custom Shiny theme created using the Theme class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete bootstrap.css or bootstrap.min.css file. For advanced uses, you can also pass a Tagifiable object. In this case, Shiny will suppress the default Bootstrap CSS. To modify the theme of an app without replacing the Bootstrap CSS entirely, use include_css to add custom CSS.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- page_fluid\n- page_fixed\n\n",
    "code_examples": [
      "ui.page_fillable(\n    *args,\n    padding=None,\n    gap=None,\n    fillable_mobile=False,\n    title=None,\n    lang=None,\n    theme=None,\n    **kwargs,\n)",
      "ui.page_fillable(\n    *args,\n    padding=None,\n    gap=None,\n    fillable_mobile=False,\n    title=None,\n    lang=None,\n    theme=None,\n    **kwargs,\n)"
    ]
  },
  {
    "id": "api_core_ui_page_fluid_html",
    "url": "api/core/ui.page_fluid.html",
    "title": "ui.page_fluid ‚Äì Shiny for Python",
    "description": "",
    "content": "- Page containers\n- ui.page_fluid\n\nui.page_fluid\n\nCreate a fluid page.\n\nParameters\n\nUI elements.\n\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via panel_title.\n\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\n\nA custom Shiny theme created using the Theme class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete bootstrap.css or bootstrap.min.css file. For advanced uses, you can also pass a Tagifiable object. In this case, Shiny will suppress the default Bootstrap CSS. To modify the theme of an app without replacing the Bootstrap CSS entirely, use include_css to add custom CSS.\n\nAttributes on the page level container.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- page_fixed\n- page_bootstrap\n- page_navbar\n\nExamples\n\n",
    "code_examples": [
      "ui.page_fluid(*args, title=None, lang=None, theme=None, **kwargs)",
      "ui.page_fluid(*args, title=None, lang=None, theme=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", min=0, max=100, value=20),\n        ),\n        ui.output_plot(\"plot\"),\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_page_fixed_html",
    "url": "api/core/ui.page_fixed.html",
    "title": "ui.page_fixed ‚Äì Shiny for Python",
    "description": "",
    "content": "- Page containers\n- ui.page_fixed\n\nui.page_fixed\n\nCreate a fixed page.\n\nParameters\n\nUI elements.\n\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via panel_title.\n\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\n\nA custom Shiny theme created using the Theme class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete bootstrap.css or bootstrap.min.css file. For advanced uses, you can also pass a Tagifiable object. In this case, Shiny will suppress the default Bootstrap CSS. To modify the theme of an app without replacing the Bootstrap CSS entirely, use include_css to add custom CSS.\n\nAttributes on the page level container.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- page_fluid\n- page_bootstrap\n- page_navbar\n\nExamples\n\n",
    "code_examples": [
      "ui.page_fixed(*args, title=None, lang=None, theme=None, **kwargs)",
      "ui.page_fixed(*args, title=None, lang=None, theme=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fixed(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", min=0, max=100, value=20),\n        ),\n        ui.output_plot(\"plot\"),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_page_bootstrap_html",
    "url": "api/core/ui.page_bootstrap.html",
    "title": "ui.page_bootstrap ‚Äì Shiny for Python",
    "description": "",
    "content": "- Page containers\n- ui.page_bootstrap\n\nui.page_bootstrap\n\nCreate a Bootstrap UI page container.\n\nParameters\n\nUI elements.\n\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via panel_title.\n\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\n\nA custom Shiny theme created using the Theme class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete bootstrap.css or bootstrap.min.css file. For advanced uses, you can also pass a Tagifiable object. In this case, Shiny will suppress the default Bootstrap CSS. To modify the theme of an app without replacing the Bootstrap CSS entirely, use include_css to add custom CSS.\n\nAttributes on the the <body> tag.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- page_fluid\n- page_navbar\n\n",
    "code_examples": [
      "ui.page_bootstrap(*args, title=None, lang=None, theme=None, **kwargs)",
      "ui.page_bootstrap(*args, title=None, lang=None, theme=None, **kwargs)"
    ]
  },
  {
    "id": "api_core_ui_page_auto_html",
    "url": "api/core/ui.page_auto.html",
    "title": "ui.page_auto ‚Äì Shiny for Python",
    "description": "",
    "content": "- Page containers\n- ui.page_auto\n\nui.page_auto\n\nA page container which automatically decides which page function to use.\n\nIf there is a top-level nav_panel, page_auto will use page_navbar. Otherwise, if there is a top-level sidebar, page_sidebar is used.\n\nIf there are neither top-level nav panels nor sidebars, this will use the fillable and full_width arguments to determine which page function to use:\n\n- If fillable is True, page_fillable is used.\n- Otherwise, if full_width is True, page_fluid is used.\n- If neither are True, page_fixed is used.\n\nParameters\n\nUI elements. These are used to determine which page function to use, and they are also passed along to that page function.\n\nA title shown on the page.\n\nThe browser window title. If no value is provided, this will use the value of title.\n\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\n\nA custom Shiny theme created using the Theme class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete bootstrap.css or bootstrap.min.css file. For advanced uses, you can also pass a Tagifiable object. In this case, Shiny will suppress the default Bootstrap CSS. To modify the theme of an app without replacing the Bootstrap CSS entirely, use include_css to add custom CSS.\n\nIf there is a top-level sidebar or nav, then the value is passed through to the page_sidebar or page_navbar function. Otherwise, if True, use page_fillable, where the content fills the window; if False (the default), the value of full_width will determine which page function is used.\n\nThis has an effect only if there are no sidebars or top-level navs, and fillable is False. If this is False (the default), use use page_fixed; if True, use page_fillable.\n\nThe page function to use. If None (the default), will automatically choose one based on the arguments provided. If not None, this will override all heuristics for choosing page functions.\n\nAdditional arguments, which are passed to the page function.\n\nReturns\n\nA UI element.\n\n",
    "code_examples": [
      "ui.page_auto(\n    *args,\n    title=MISSING,\n    window_title=MISSING,\n    lang=MISSING,\n    theme=MISSING,\n    fillable=MISSING,\n    full_width=False,\n    page_fn=None,\n    **kwargs,\n)",
      "ui.page_auto(\n    *args,\n    title=MISSING,\n    window_title=MISSING,\n    lang=MISSING,\n    theme=MISSING,\n    fillable=MISSING,\n    full_width=False,\n    page_fn=None,\n    **kwargs,\n)"
    ]
  },
  {
    "id": "api_core_ui_page_output_html",
    "url": "api/core/ui.page_output.html",
    "title": "ui.page_output ‚Äì Shiny for Python",
    "description": "",
    "content": "- Page containers\n- ui.page_output\n\nui.page_output\n\nCreate a page container where the entire body is a UI output.\n\nParameters\n\nAn output id.\n\nReturns\n\nA UI element which is meant to be used as a page container.\n\n",
    "code_examples": [
      "ui.page_output(id)",
      "ui.page_output(id)"
    ]
  },
  {
    "id": "api_core_ui_sidebar_html",
    "url": "api/core/ui.sidebar.html",
    "title": "ui.sidebar ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.sidebar\n\nui.sidebar\n\nSidebar element\n\nCreate a collapsing sidebar layout by providing a sidebar() object to the sidebar= argument of:\n\n- layout_sidebar Creates a sidebar layout component which can be dropped inside any Shiny UI page method (e.g. page_fillable) or card context.\n- navset_bar, navset_card_tab, and navset_card_pill Creates a multi page/tab UI with a singular sidebar() (which is shown on every page/tab).\n\n- Creates a sidebar layout component which can be dropped inside any Shiny UI page method (e.g. page_fillable) or card context.\n\n- Creates a multi page/tab UI with a singular sidebar() (which is shown on every page/tab).\n\nParameters\n\nContents of the sidebar. Or tag attributes that are supplied to the resolved Tag object.\n\nA valid CSS unit used for the width of the sidebar.\n\nWhere the sidebar should appear relative to the main content, one of \"left\" or \"right\".\n\nThe initial state of the sidebar. If a string, the possible values are: * \"open\": the sidebar starts open * \"closed\": the sidebar starts closed * \"always\": the sidebar is always open and cannot be closed Alternatively, you can provide a dictionary with keys \"desktop\" and \"mobile\" to set different initial states for desktop and mobile. For example, when {\"desktop\": \"open\", \"mobile\": \"closed\"} the sidebar is initialized in the open state on desktop screens or in the closed state on mobile screens.\n\nA character string. Required if wanting to reactively read (or update) the collapsible state in a Shiny app.\n\nA character title to be used as the sidebar title, which will be wrapped in a <div> element with class sidebar-title. You can also provide a custom Tag for the title element, in which case you‚Äôll likely want to give this element class = \"sidebar-title\".\n\nA background or foreground color.\n\nCSS classes for the sidebar container element, in addition to the fixed .sidebar class.\n\nA CSS length unit (passed through as_css_unit) defining the maximum height of the horizontal sidebar when viewed on mobile devices. Only applies to always-open sidebars on mobile, where by default the sidebar container is placed below the main content container on mobile devices.\n\nA CSS length unit defining the vertical gap (i.e., spacing) between elements provided to *args.\n\nPadding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. padding may be one to four values. * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left respectively.\n\nNamed attributes are supplied to the sidebar content container.\n\nReturns\n\nA Sidebar object.\n\nSee Also\n\n- layout_sidebar\n- navset_bar\n- navset_card_tab\n- navset_card_pill\n\nExamples\n\n",
    "code_examples": [
      "ui.sidebar(\n    *args,\n    position='left',\n    open=None,\n    width=250,\n    id=None,\n    title=None,\n    bg=None,\n    fg=None,\n    class_=None,\n    max_height_mobile=None,\n    gap=None,\n    padding=None,\n    **kwargs,\n)",
      "ui.sidebar(\n    *args,\n    position='left',\n    open=None,\n    width=250,\n    id=None,\n    title=None,\n    bg=None,\n    fg=None,\n    class_=None,\n    max_height_mobile=None,\n    gap=None,\n    padding=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.layout_sidebar(\n            ui.sidebar(\"Left sidebar content\", id=\"sidebar_left\"),\n            ui.output_text_verbatim(\"state_left\"),\n        )\n    ),\n    ui.card(\n        ui.layout_sidebar(\n            ui.sidebar(\"Right sidebar content\", id=\"sidebar_right\", position=\"right\"),\n            ui.output_text_verbatim(\"state_right\"),\n        ),\n    ),\n    ui.card(\n        ui.layout_sidebar(\n            ui.sidebar(\"Closed sidebar content\", id=\"sidebar_closed\", open=\"closed\"),\n            ui.output_text_verbatim(\"state_closed\"),\n        )\n    ),\n    ui.card(\n        ui.layout_sidebar(\n            ui.sidebar(\"Always sidebar content\", id=\"sidebar_always\", open=\"always\"),\n            ui.output_text_verbatim(\"state_always\"),\n        )\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def state_left():\n        return f\"input.sidebar_left(): {input.sidebar_left()}\"\n\n    @render.text\n    def state_right():\n        return f\"input.sidebar_right(): {input.sidebar_right()}\"\n\n    @render.text\n    def state_closed():\n        return f\"input.sidebar_closed(): {input.sidebar_closed()}\"\n\n    @render.text\n    def state_always():\n        return f\"input.sidebar_always(): {input.sidebar_always()}\"\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_layout_sidebar_html",
    "url": "api/core/ui.layout_sidebar.html",
    "title": "ui.layout_sidebar ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.layout_sidebar\n\nui.layout_sidebar\n\nSidebar layout\n\nCreate a sidebar layout component which can be dropped inside any Shiny UI page method (e.g. page_fillable) or card context.\n\nParameters\n\nOne argument needs to be of class Sidebar object created by sidebar. The remaining arguments will contain the contents to the main content area. Or tag attributes that are supplied to the resolved Tag object.\n\nWhether or not the main content area should be wrapped in a fillable container. See as_fillable_container for details.\n\nWhether or not the sidebar layout should be wrapped in a fillable container. See as_fill_item for details.\n\nA background or foreground color.\n\nWhether or not to show a border around the sidebar layout.\n\nWhether or not to round the corners of the sidebar layout.\n\nA border color.\n\nA CSS length unit defining the vertical gap (i.e., spacing) between elements provided to *args. This value will only be used if fillable is True.\n\nPadding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. padding may be one to four values. * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left respectively.\n\nAny valid CSS unit to use for the height.\n\nReturns\n\nA Tag object.\n\nSee Also\n\n- sidebar\n\nExamples\n\n",
    "code_examples": [
      "ui.layout_sidebar(\n    sidebar,\n    *args,\n    fillable=True,\n    fill=True,\n    bg=None,\n    fg=None,\n    border=None,\n    border_radius=None,\n    border_color=None,\n    gap=None,\n    padding=None,\n    height=None,\n    **kwargs,\n)",
      "ui.layout_sidebar(\n    sidebar,\n    *args,\n    fillable=True,\n    fill=True,\n    bg=None,\n    fg=None,\n    border=None,\n    border_radius=None,\n    border_color=None,\n    gap=None,\n    padding=None,\n    height=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", min=0, max=100, value=20),\n        ),\n        ui.output_plot(\"plot\"),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_layout_columns_html",
    "url": "api/core/ui.layout_columns.html",
    "title": "ui.layout_columns ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.layout_columns\n\nui.layout_columns\n\nCreate responsive, column-based grid layouts, based on a 12-column grid.\n\nParameters\n\nChild elements or attributes to be added to the layout.\n\nThe widths of the columns, possibly at different breakpoints. Can be one of the following: * None (the default): Automatically determines a sensible number of columns based on the number of children given to the layout. * A list or tuple of integers between 1 and 12, where each element represents the number of columns for the relevant UI element. Column widths are recycled to extend the values in col_widths to match the actual number of items in the layout, and children are wrapped onto the next row when a row exceeds 12 column units. For example, col_widths=(4, 8, 12) allocates 4 columns to the first element, 8 columns to the second element, and 12 columns to the third element (which wraps to the next row). Negative values are also allowed, and are treated as empty columns. For example, col_widths=(-2, 8, -2) would allocate 8 columns to an element (with 2 empty columns on either side). * A dictionary of column widths at different breakpoints. The keys should be one of \"xs\", \"sm\", \"md\", \"lg\", \"xl\", or \"xxl\", and the values are either of the above. For example, col_widths={\"sm\": (3, 3, 6), \"lg\": (4)}.\n\nThe heights of the rows, possibly at different breakpoints. Can be one of the following: * A numeric vector, where each value represents the fractional unit (fr) height of the relevant row. If there are more rows than values provided, the pattern will be repeated. For example, row_heights=(1, 2) allows even rows to take up twice as much space as odd rows. * A list of numeric or CSS length units, where each value represents the height of the relevant row. If more rows are needed than values provided, the pattern will repeat. For example, row_heights=[\"auto\", 1] allows the height of odd rows to be driven my it‚Äôs contents and even rows to be 1fr. * A single string containing CSS length units. In this case, the value is supplied directly to grid-auto-rows. * A dictionary of row heights at different breakpoints, where each key is a breakpoint name (one of \"xs\", \"sm\", \"md\", \"lg\", \"xl\", or \"xxl\") and where the values may be any of the above options.\n\nWhether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nWhether or not each element is wrapped in a fillable container.\n\nAny valid CSS unit to use for the gap between columns.\n\nCSS class(es) to apply to the containing element.\n\nA valid CSS unit (e.g., height=\"200px\"). Use min_height and max_height in a filling layout to ensure that the layout container does not shrink below a min_height or grow beyond a max_height.\n\nAdditional attributes to apply to the containing element.\n\nReturns\n\nAn Tag element.\n\nSee Also\n\n- layout_column_wrap for laying out elements into a uniform grid.\n\nReference\n\n- Bootstrap CSS Grid\n- Bootstrap Breakpoints\n\nExamples\n\n",
    "code_examples": [
      "ui.layout_columns(\n    *args,\n    col_widths=None,\n    row_heights=None,\n    fill=True,\n    fillable=True,\n    gap=None,\n    class_=None,\n    height=None,\n    min_height=None,\n    max_height=None,\n    **kwargs,\n)",
      "ui.layout_columns(\n    *args,\n    col_widths=None,\n    row_heights=None,\n    fill=True,\n    fillable=True,\n    gap=None,\n    class_=None,\n    height=None,\n    min_height=None,\n    max_height=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom model_plots import *  # model plots and cards\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.panel_title(ui.h2(\"Model Dashboard\")),\n    ui.markdown(\"Using `ui.layout_columns()` for the layout.\"),\n    ui.layout_columns(\n        card_loss,\n        card_acc,\n        card_feat,\n        col_widths={\"sm\": (5, 7, 12)},\n        # row_heights=(2, 3),\n        # height=\"700px\",\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot\n    def loss_over_time():\n        return plot_loss_over_time()\n\n    @render.plot\n    def accuracy_over_time():\n        return plot_accuracy_over_time()\n\n    @render.plot\n    def feature_importance():\n        return plot_feature_importance()\n\n\napp = App(app_ui, server)\n\n\n## file: model_plots.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import ui\n\n\ndef plot_loss_over_time():\n    epochs = np.arange(1, 101)\n    loss = 1000 / np.sqrt(epochs) + np.random.rand(100) * 25\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.plot(epochs, loss)\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Loss\")\n    return fig\n\n\ndef plot_accuracy_over_time():\n    epochs = np.arange(1, 101)\n    accuracy = np.sqrt(epochs) / 12 + np.random.rand(100) * 0.15\n    accuracy = [np.min([np.max(accuracy[:i]), 1]) for i in range(1, 101)]\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.plot(epochs, accuracy)\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Accuracy\")\n    return fig\n\n\ndef plot_feature_importance():\n    features = [\"Product Category\", \"Price\", \"Brand\", \"Rating\", \"Number of Reviews\"]\n    importance = np.random.rand(5)\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.barh(features, importance)\n    plt.xlabel(\"Importance\")\n    return fig\n\n\ncard_loss = ui.card(\n    ui.card_header(\"Loss Over Time\"),\n    ui.output_plot(\"loss_over_time\"),\n    full_screen=True,\n)\n\ncard_acc = ui.card(\n    ui.card_header(\"Accuracy Over Time\"),\n    ui.output_plot(\"accuracy_over_time\"),\n    full_screen=True,\n)\n\ncard_feat = ui.card(\n    ui.card_header(\"Feature Importance\"),\n    ui.output_plot(\"feature_importance\"),\n    full_screen=True,\n)\n\n"
    ]
  },
  {
    "id": "api_core_ui_layout_column_wrap_html",
    "url": "api/core/ui.layout_column_wrap.html",
    "title": "ui.layout_column_wrap ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.layout_column_wrap\n\nui.layout_column_wrap\n\nA grid-like, column-first layout\n\nWraps a 1d sequence of UI elements into a 2d grid. The number of columns (and rows) in the grid depends on the column width and the size of the display.\n\nParameters\n\nUnnamed arguments should be UI elements (e.g., card). Named arguments become attributes on the containing Tag element.\n\nThe desired width of each card. It can be one of the following: * A (unit-less) number between 0 and 1, specified as 1/num, where num represents the number of desired columns. * A CSS length unit representing either the minimum (when fixed_width=False) or fixed width (fixed_width=True). * None, which allows power users to set the grid-template-columns CSS property manually, either via a style attribute or a CSS stylesheet. * If missing, a value of 200px will be used.\n\nWhen width is greater than 1 or is a CSS length unit, e.g., \"200px\", fixed_width indicates whether that width value represents the absolute size of each column (fixed_width=TRUE) or the minimum size of a column (fixed_width=FALSE). When fixed_width=FALSE, new columns are added to a row when width space is available and columns will never exceed the container or viewport size. When fixed_width=TRUE, all columns will be exactly width wide, which may result in columns overflowing the parent container.\n\nIf \"all\" (the default), every card in every row of the grid will have the same height. If \"row\", then every card in each row of the grid will have the same height, but heights may vary between rows.\n\nWhether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nWhether or not each element is wrapped in a fillable container.\n\nA valid CSS unit (e.g., height=\"200px\"). Use min_height and max_height in a filling layout to ensure that the layout container does not shrink below a min_height or grow beyond a max_height.\n\nAny valid CSS unit to use for the height when on mobile devices (or narrow windows).\n\nAny valid CSS unit to use for the gap between columns.\n\nA CSS class to apply to the containing element.\n\nAdditional attributes to apply to the containing element.\n\nReturns\n\nA Tag element.\n\nSee Also\n\n- layout_columns for laying out elements into a responsive 12-column grid.\n\nExamples\n\n",
    "code_examples": [
      "ui.layout_column_wrap(\n    *args,\n    width=MISSING,\n    fixed_width=False,\n    heights_equal='all',\n    fill=True,\n    fillable=True,\n    height=None,\n    min_height=None,\n    max_height=None,\n    height_mobile=None,\n    gap=None,\n    class_=None,\n    **kwargs,\n)",
      "ui.layout_column_wrap(\n    *args,\n    width=MISSING,\n    fixed_width=False,\n    heights_equal='all',\n    fill=True,\n    fillable=True,\n    height=None,\n    min_height=None,\n    max_height=None,\n    height_mobile=None,\n    gap=None,\n    class_=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, ui\n\ny = ui.card(\"A simple card\")\n\napp_ui = ui.page_fluid(\n    # Always has 2 columns (on non-mobile)\n    ui.layout_column_wrap(y, y, y, width=1 / 2),\n    ui.hr(),\n    # Has three columns when viewport is wider than 750px\n    ui.layout_column_wrap(y, y, y, width=\"250px\"),\n)\n\n\napp = App(app_ui, server=None)\n\n"
    ]
  },
  {
    "id": "api_core_ui_card_html",
    "url": "api/core/ui.card.html",
    "title": "ui.card ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.card\n\nui.card\n\nA Bootstrap card component\n\nA general purpose container for grouping related UI elements together with a border and optional padding. To learn more about card()s, see this article.\n\nParameters\n\nUI elements.\n\nIf True, an icon will appear when hovering over the card body. Clicking the icon expands the card to fit viewport size.\n\nAny valid CSS unit (e.g., height=\"200px\"). Doesn‚Äôt apply when a card is made full_screen.\n\nWhether or not to allow the card to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nAdditional CSS classes for the returned Tag.\n\nProvide a unique identifier for the card or to report its full screen state to Shiny. For example, using id=\"my_card\", you can observe the card‚Äôs full screen state with input.my_card_full_screen().\n\nHTML attributes on the returned Tag.\n\nReturns\n\nAn div tag.\n\nSee Also\n\n- card_header for creating a header within the card.\n- card_footer for creating a footer within the card.\n\nExamples\n\n",
    "code_examples": [
      "ui.card(\n    *args,\n    full_screen=False,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    id=None,\n    **kwargs,\n)",
      "ui.card(\n    *args,\n    full_screen=False,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    id=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.card_header(\"This is the header\"),\n        ui.p(\"This is the body.\"),\n        ui.p(\"This is still the body.\"),\n        ui.card_footer(\"This is the footer\"),\n        full_screen=True,\n    ),\n)\n\n\napp = App(app_ui, server=None)\n\n"
    ]
  },
  {
    "id": "api_core_ui_card_header_html",
    "url": "api/core/ui.card_header.html",
    "title": "ui.card_header ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.card_header\n\nui.card_header\n\nCard header container\n\nA general container for the \"header\" of a card. This component is designed to be provided as a direct child to card.\n\nThe header has a different background color and border than the rest of the card.\n\nParameters\n\nContents to the header container. Or tag attributes that are supplied to the resolved Tag object.\n\nMethod for the returned Tag object. Defaults to div.\n\nAdditional HTML attributes for the returned Tag.\n\nReturns\n\nA CardItem object.\n\nSee Also\n\n- card for creating a card component.\n- card_footer for creating a footer within the card.\n\nExamples\n\n",
    "code_examples": [
      "ui.card_header(*args, container=tags.div, **kwargs)",
      "ui.card_header(*args, container=tags.div, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.card_header(\"This is the header\"),\n        ui.p(\"This is the body.\"),\n        ui.p(\"This is still the body.\"),\n        ui.card_footer(\"This is the footer\"),\n        full_screen=True,\n    )\n)\n\n\napp = App(app_ui, server=None)\n\n"
    ]
  },
  {
    "id": "api_core_ui_card_footer_html",
    "url": "api/core/ui.card_footer.html",
    "title": "ui.card_footer ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.card_footer\n\nui.card_footer\n\nCard footer container\n\nA general container for the \"footer\" of a card. This component is designed to be provided as a direct child to card.\n\nThe footer has a different background color and border than the rest of the card.\n\nParameters\n\nContents to the footer container. Or tag attributes that are supplied to the resolved Tag object.\n\nAdditional HTML attributes for the returned Tag.\n\nReturns\n\nA CardItem object.\n\nSee Also\n\n- card for creating a card component.\n- card_footer for creating a footer within the card.\n\nExamples\n\n",
    "code_examples": [
      "ui.card_footer(*args, **kwargs)",
      "ui.card_footer(*args, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.card_header(\"This is the header\"),\n        ui.p(\"This is the body.\"),\n        ui.p(\"This is still the body.\"),\n        ui.card_footer(\"This is the footer\"),\n        full_screen=True,\n    )\n)\n\n\napp = App(app_ui, server=None)\n\n"
    ]
  },
  {
    "id": "api_core_ui_popover_html",
    "url": "api/core/ui.popover.html",
    "title": "ui.popover ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.popover\n\nui.popover\n\nAdd a popover to a UI element.\n\nDisplay additional information when clicking on a UI element (typically a button).\n\nParameters\n\nThe UI element to serve as the popover trigger (typically a input_action_button or similar). If trigger renders as multiple HTML elements (e.g., it‚Äôs a TagList), the last HTML element is used for the trigger. If the trigger should contain all of those elements, wrap the object in a div or span.\n\nUI elements for the popover‚Äôs body. Character strings are automatically escaped unless marked as HTML.\n\nA title (header) for the popover.\n\nA character string. Required to re-actively respond to the visibility of the popover (via the input.<ID>() value) and/or update the visibility/contents of the popover.\n\nThe placement of the popover relative to its trigger.\n\nA list of additional options <https://getbootstrap.com/docs/5.3/components/popovers/#options>_.\n\nClosing popovers\n\nIn addition to clicking the close_button, popovers can be closed by pressing the Esc/Space key when the popover (and/or its trigger) is focused.\n\nAccessibility of Popover Triggers\n\nBecause the user needs to interact with the trigger element to see the popover, it‚Äôs best practice to use an element that is typically accessible via keyboard interactions, like a button or a link.\n\nIf you use a non-interactive element, like a <span> or text, popover() will automatically add the tabindex=\"0\" attribute to the trigger element to make sure that users can reach the element with the keyboard. This means that in most cases you can use any element you want as the trigger.\n\nOne place where it‚Äôs important to consider the accessibility of the trigger is when using an icon without any accompanying text. In these cases, many icon elements are created with the assumption that the icon is decorative, which will make it inaccessible to users of assistive technologies.\n\nWhen using an icon as the primary trigger, ensure that the icon does not have aria-hidden=\"true\" or role=\"presentation\" attributes. Icon packages typically provide a way to specify a title for the icon, as well as a way to specify that the icon is not decorative. The title should be a short description of the purpose of the trigger, rather than a description of the icon itself.\n\nFor example:\n\nSee Also\n\n- https://getbootstrap.com/docs/5.3/components/popovers/\n- update_popover\n- tooltip\n\nExamples\n\n",
    "code_examples": [
      "ui.popover(\n    trigger,\n    *args,\n    title=None,\n    id=None,\n    placement='auto',\n    options=None,\n    **kwargs,\n)",
      "ui.popover(\n    trigger,\n    *args,\n    title=None,\n    id=None,\n    placement='auto',\n    options=None,\n    **kwargs,\n)",
      "icon_title = \"Settings\"\ndef bs_gear_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(\"gear\", title = icon_title)`\n    return ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-gear \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z\"></path><path d=\"M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z\"></path></svg>')\n\nui.popover(\n    bs_gear_icon(icon_title),\n    title = icon_title,\n    ui.input_slider(\"n\", \"Number of points\", 1, 100, 50)\n)",
      "icon_title = \"Settings\"\ndef bs_gear_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(\"gear\", title = icon_title)`\n    return ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-gear \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z\"></path><path d=\"M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z\"></path></svg>')\n\nui.popover(\n    bs_gear_icon(icon_title),\n    title = icon_title,\n    ui.input_slider(\"n\", \"Number of points\", 1, 100, 50)\n)",
      "icon_title = \"Settings\"\ndef fa_gear_icon(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(\"gear\", a11y = \"sem\", title = icon_title)`\n    return ui.HTML(f'<svg aria-label=\"{title}\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z\"/></svg>')\nui.popover(\n    fa_gear_icon(icon_title),\n    title = icon_title,\n    ui.input_slider(\"n\", \"Number of points\", 1, 100, 50)\n)",
      "icon_title = \"Settings\"\ndef fa_gear_icon(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(\"gear\", a11y = \"sem\", title = icon_title)`\n    return ui.HTML(f'<svg aria-label=\"{title}\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z\"/></svg>')\nui.popover(\n    fa_gear_icon(icon_title),\n    title = icon_title,\n    ui.input_slider(\"n\", \"Number of points\", 1, 100, 50)\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import gear_fill\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.popover(\n        ui.input_action_button(\"btn\", \"A button\", class_=\"mt-3\"),\n        \"A popover with more context and information than should be used in a tooltip.\",\n        \"You can even have multiple DOM elements in a popover!\",\n        id=\"btn_popover\",\n    ),\n    ui.hr(),\n    ui.card(\n        ui.card_header(\n            \"Plot title (Click the gear to change variables)\",\n            ui.popover(\n                ui.span(\n                    gear_fill,\n                    style=\"position:absolute; top: 5px; right: 7px;\",\n                ),\n                \"Put dropdowns here to alter your plot!\",\n                ui.input_selectize(\"x\", \"X\", [\"x1\", \"x2\", \"x3\"]),\n                ui.input_selectize(\"y\", \"Y\", [\"y1\", \"y2\", \"y3\"]),\n                placement=\"right\",\n                id=\"card_popover\",\n            ),\n        ),\n        ui.output_text_verbatim(\"plot_txt\", placeholder=True),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def plot_txt():\n        return f\"<Making plot using x: {input.x()} and y: {input.y()}>\"\n\n\napp = App(app_ui, server=server)\n\n\n## file: icons.py\nfrom shiny import ui\n\n# https://icons.getbootstrap.com/icons/gear-fill/\ngear_fill = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-gear-fill\" viewBox=\"0 0 16 16\"><path d=\"M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z\"/></svg>'\n)\n\n"
    ]
  },
  {
    "id": "api_core_ui_tooltip_html",
    "url": "api/core/ui.tooltip.html",
    "title": "ui.tooltip ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.tooltip\n\nui.tooltip\n\nAdd a tooltip to a UI element.\n\nDisplay additional information when focusing (or hovering over) a UI element.\n\nParameters\n\nA UI element (i.e., Tag) to serve as the tooltips trigger. It‚Äôs good practice for this element to be a keyboard-focusable and interactive element (e.g., input_action_button, input_action_link, etc.) so that the tooltip is accessible to keyboard and assistive technology users.\n\nContents to the tooltip‚Äôs body. Or tag attributes that are supplied to the resolved Tag object.\n\nA character string. Required to reactively respond to the visibility of the tooltip (via the input[id] value) and/or update the visibility/contents of the tooltip.\n\nThe placement of the tooltip relative to its trigger.\n\nA list of additional Bootstrap options.\n\nDetails\n\nIf trigger yields multiple HTML elements (e.g., a TagList or complex shinywidgets object), the last HTML element is used as the trigger. If the trigger should contain all of those elements, wrap the object in a div or span.\n\nAccessibility of Tooltip Triggers\n\nBecause the user needs to interact with the trigger element to see the tooltip, it‚Äôs best practice to use an element that is typically accessible via keyboard interactions, like a button or a link.\n\nIf you use a non-interactive element, like a <span> or text, tooltip() will automatically add the tabindex=\"0\" attribute to the trigger element to make sure that users can reach the element with the keyboard. This means that in most cases you can use any element you want as the trigger.\n\nOne place where it‚Äôs important to consider the accessibility of the trigger is when using an icon without any accompanying text. In these cases, many icon elements are created with the assumption that the icon is decorative, which will make it inaccessible to users of assistive technologies.\n\nWhen using an icon as the primary trigger, ensure that the icon does not have aria-hidden=\"true\" or role=\"presentation\" attributes. Icon packages typically provide a way to specify a title for the icon, as well as a way to specify that the icon is not decorative. The title should be a short description of the purpose of the trigger, rather than a description of the icon itself.\n\nFor example:\n\nSee Also\n\n- Bootstrap tooltips documentation\n\nExamples\n\n",
    "code_examples": [
      "ui.tooltip(trigger, *args, id=None, placement='auto', options=None, **kwargs)",
      "ui.tooltip(trigger, *args, id=None, placement='auto', options=None, **kwargs)",
      "icon_title = \"About tooltips\"\ndef bs_info_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(\"info-circle\", title = icon_title)`\n    return ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-info-circle \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"></path><path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"></path></svg>')\n\nui.tooltip(\n    bs_info_icon(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "icon_title = \"About tooltips\"\ndef bs_info_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(\"info-circle\", title = icon_title)`\n    return ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-info-circle \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"></path><path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"></path></svg>')\n\nui.tooltip(\n    bs_info_icon(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "icon_title = \"About tooltips\"\ndef fa_info_circle(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(\"info-circle\", a11y = \"sem\", title = icon_title)`\n    return ui.HTML(f'<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>')\nui.tooltip(\n    fa_info_circle(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "icon_title = \"About tooltips\"\ndef fa_info_circle(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(\"info-circle\", a11y = \"sem\", title = icon_title)`\n    return ui.HTML(f'<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>')\nui.tooltip(\n    fa_info_circle(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import question_circle_fill\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button\", class_=\"mt-3\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n    ),\n    ui.hr(),\n    ui.card(\n        ui.card_header(\n            ui.tooltip(\n                ui.span(\"Card title \", question_circle_fill),\n                \"Additional info\",\n                placement=\"right\",\n                id=\"card_tooltip\",\n            ),\n        ),\n        \"Card body content...\",\n    ),\n)\n\n\napp = App(app_ui, server=None)\n\n\n## file: icons.py\nfrom shiny import ui\n\n# https://icons.getbootstrap.com/icons/question-circle-fill/\nquestion_circle_fill = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-question-circle-fill mb-1\" viewBox=\"0 0 16 16\"><path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.496 6.033h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286a.237.237 0 0 0 .241.247zm2.325 6.443c.61 0 1.029-.394 1.029-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94 0 .533.425.927 1.01.927z\"/></svg>'\n)\n\n"
    ]
  },
  {
    "id": "api_core_ui_accordion_html",
    "url": "api/core/ui.accordion.html",
    "title": "ui.accordion ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.accordion\n\nui.accordion\n\nCreate a vertically collapsing accordion.\n\nParameters\n\nAccordionPanel objects returned from accordion_panel. Or tag attributes that are supplied to the returned Tag object.\n\nIf provided, you can use input.id() in your server logic to determine which of the accordion_panels are currently active. The value will correspond to the accordion_panel‚Äôs value argument.\n\nA list of accordion_panel values to open (i.e., show) by default. The default value of None will open the first accordion_panel. Use a value of True to open all (or False to open none) of the items. It‚Äôs only possible to open more than one panel when multiple=True.\n\nWhether multiple accordion_panel can be open at once.\n\nAdditional CSS classes to include on the accordion div.\n\nAny valid CSS unit; for example, height=‚Äú100%‚Äù.\n\nAny valid CSS unit; for example, height=‚Äú100%‚Äù.\n\nAttributes to this tag.\n\nReturns\n\nAccordion panel Tag object.\n\nReferences\n\nBootstrap Accordion\n\nSee Also\n\n- accordion_panel\n- update_accordion\n- insert_accordion_panel\n- remove_accordion_panel\n- update_accordion_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.accordion(\n    *args,\n    id=None,\n    open=None,\n    multiple=True,\n    class_=None,\n    width=None,\n    height=None,\n    **kwargs,\n)",
      "ui.accordion(\n    *args,\n    id=None,\n    open=None,\n    multiple=True,\n    class_=None,\n    width=None,\n    height=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\n\ndef make_items():\n    return [\n        ui.accordion_panel(f\"Section {letter}\", f\"Some narrative for section {letter}\")\n        for letter in \"ABCDE\"\n    ]\n\n\n# # First shown by default\n# ui.accordion(*make_items())\n\n# # Nothing shown by default\n# ui.accordion(*make_items(), open=False)\n# # Everything shown by default\n# ui.accordion(*make_items(), open=True)\n\n# # Show particular sections\n# ui.accordion(*make_items(), open=\"Section B\")\n# ui.accordion(*make_items(), open=[\"Section A\", \"Section B\"])\n\n\napp_ui = ui.page_fluid(\n    ui.markdown(\"#### Accordion: (`multiple=False`)\"),\n    # Provide an id to create a shiny input binding\n    ui.accordion(*make_items(), id=\"acc_single\", multiple=False),\n    ui.output_text_verbatim(\"acc_single_val\", placeholder=True),\n    ui.tags.br(),\n    ui.markdown(\"#### Accordion: (`multiple=True`)\"),\n    ui.accordion(*make_items(), id=\"acc_multiple\"),\n    ui.output_text_verbatim(\"acc_multiple_val\", placeholder=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def acc_single_val():\n        return \"input.acc_single(): \" + str(input.acc_single())\n\n    @render.text\n    def acc_multiple_val():\n        return \"input.acc_multiple(): \" + str(input.acc_multiple())\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_accordion_panel_html",
    "url": "api/core/ui.accordion_panel.html",
    "title": "ui.accordion_panel ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.accordion_panel\n\nui.accordion_panel\n\nSingle accordion panel.\n\nParameters\n\nA title to appear in the accordion_panel‚Äôs header.\n\nContents to the accordion panel body. Or tag attributes that are supplied to the returned Tag object.\n\nA character string that uniquely identifies this panel. If MISSING, the title will be used.\n\nA Tag which is positioned just before the title.\n\nTag attributes to the accordion-body div Tag.\n\nReturns\n\nAccordionPanel object.\n\nReferences\n\nBootstrap Accordion\n\nSee Also\n\n- accordion\n- update_accordion\n- insert_accordion_panel\n- remove_accordion_panel\n- update_accordion_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.accordion_panel(title, *args, value=MISSING, icon=None, **kwargs)",
      "ui.accordion_panel(title, *args, value=MISSING, icon=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\nitems = [\n    ui.accordion_panel(f\"Section {letter}\", f\"Some narrative for section {letter}\")\n    for letter in \"ABCDE\"\n]\n\napp_ui = ui.page_fluid(\n    # Provide an id to create a shiny input binding\n    ui.accordion(*items, id=\"acc\"),\n    ui.h4(\"Accordion:\"),\n    ui.output_text_verbatim(\"acc_val\", placeholder=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        print(input.acc())\n\n    @render.text\n    def acc_val():\n        return \"input.acc(): \" + str(input.acc())\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_column_html",
    "url": "api/core/ui.column.html",
    "title": "ui.column ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.column\n\nui.column\n\nResponsive row-column based layout\n\nSee row for more information.\n\nParameters\n\nThe width of the column (an integer between 1 and 12).\n\nUI elements to place within the column.\n\nThe number of columns to offset this column from the end of the previous column.\n\nAttributes to place on the column tag.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- row\n\nExamples\n\n",
    "code_examples": [
      "ui.column(width, *args, offset=0, **kwargs)",
      "ui.column(width, *args, offset=0, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(4, ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)),\n        ui.column(8, ui.output_plot(\"plot\")),\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_row_html",
    "url": "api/core/ui.row.html",
    "title": "ui.row ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.row\n\nui.row\n\nResponsive row-column based layout\n\nLayout UI components using Bootstrap's grid layout system. Use row() to group elements that should appear on the same line (if the browser has adequate width) and column to define how much horizontal space within a 12-unit wide grid each on of these elements should occupy. See the layout guide for more context and examples. (The article is about Shiny for R, but the general principles are the same.)\n\nParameters\n\nAny number of child elements.\n\nAttributes to place on the row tag.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- column\n\nExamples\n\n",
    "code_examples": [
      "ui.row(*args, **kwargs)",
      "ui.row(*args, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(4, ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)),\n        ui.column(8, ui.output_plot(\"plot\")),\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_select_html",
    "url": "api/core/ui.input_select.html",
    "title": "ui.input_select ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_select\n\nui.input_select\n\nCreate a select list that can be used to choose a single or multiple items from a list of values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\n\nThe values that should be initially selected, if any.\n\nIs selection of multiple items allowed?\n\nWhether to use selectize.js or not.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nNumber of items to show in the selection box; a larger number will result in a taller box. Normally, when multiple=False, a select input will be a drop-down list, but when size is set, it will be a box instead.\n\nReturns\n\nA UI element.\n\nNotes\n\nIf multiple=False, the server value is a string with the value of the selected item. If multiple=True, the server value is a tuple containing the values of the selected items. When multiple=True and nothing is selected, this value will be None.\n\nSee Also\n\n- input_selectize\n- update_select\n- input_radio_buttons\n- input_checkbox_group\n\nExamples\n\n",
    "code_examples": [
      "ui.input_select(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    selectize=False,\n    width=None,\n    size=None,\n    remove_button=None,\n    options=None,\n)",
      "ui.input_select(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    selectize=False,\n    width=None,\n    size=None,\n    remove_button=None,\n    options=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(\n        \"state\",\n        \"Choose a state:\",\n        {\n            \"East Coast\": {\"NY\": \"New York\", \"NJ\": \"New Jersey\", \"CT\": \"Connecticut\"},\n            \"West Coast\": {\"WA\": \"Washington\", \"OR\": \"Oregon\", \"CA\": \"California\"},\n            \"Midwest\": {\"MN\": \"Minnesota\", \"WI\": \"Wisconsin\", \"IA\": \"Iowa\"},\n        },\n    ),\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return \"You choose: \" + str(input.state())\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_selectize_html",
    "url": "api/core/ui.input_selectize.html",
    "title": "ui.input_selectize ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_selectize\n\nui.input_selectize\n\nCreate a select list that can be used to choose a single or multiple items from a list of values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\n\nThe values that should be initially selected, if any.\n\nIs selection of multiple items allowed?\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhether to add a remove button. This uses the clear_button and remove_button selectize plugins which can also be supplied as options. By default it will apply a remove button to multiple selections, but not single selections.\n\nA dictionary of options. See the documentation of selectize.js for possible options. If you want to pass a JavaScript function, wrap the string in ui.JS.\n\nReturns\n\nA UI element.\n\nNotes\n\nIf multiple=False, the server value is a string with the value of the selected item. If multiple=True, the server value is a tuple containing the values of the selected items. When multiple=True and nothing is selected, this value will be None.\n\nSee Also\n\n- input_select\n- input_radio_buttons\n- input_checkbox_group\n\nExamples\n\n",
    "code_examples": [
      "ui.input_selectize(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    width=None,\n    remove_button=None,\n    options=None,\n)",
      "ui.input_selectize(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    width=None,\n    remove_button=None,\n    options=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom html import escape  # noqa: F401\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\nstates = {\n    \"East Coast\": {\"NY\": \"New York\", \"NJ\": \"New Jersey\", \"CT\": \"Connecticut\"},\n    \"West Coast\": {\"WA\": \"Washington\", \"OR\": \"Oregon\", \"CA\": \"California\"},\n    \"Midwest\": {\"MN\": \"Minnesota\", \"WI\": \"Wisconsin\", \"IA\": \"Iowa\"},\n}\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(\n        \"state\",\n        \"Choose a state:\",\n        states,\n        multiple=True,\n    ),\n    ui.output_text(\"value\"),\n    ui.input_selectize(\n        \"state2\",\n        \"Selectize Options\",\n        states,\n        multiple=True,\n        options=(\n            {\n                \"placeholder\": \"Enter text\",\n                \"render\": ui.js_eval(\n                    '{option: function(item, escape) {return \"<div><strong>Select \" + escape(item.label) + \"</strong></div>\";}}'\n                ),\n                \"create\": True,\n            }\n        ),\n    ),\n    ui.input_selectize(\n        \"state3\",\n        \"Selectize plugins\",\n        states,\n        multiple=True,\n        options={\"plugins\": [\"clear_button\"]},\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return \"You choose: \" + str(input.state())\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_slider_html",
    "url": "api/core/ui.input_slider.html",
    "title": "ui.input_slider ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_slider\n\nui.input_slider\n\nConstructs a slider widget to select a number, date, or date-time from a range.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nInitial value.\n\nInterval to use when stepping between min and max.\n\nFalse to hide tick marks, True to show them according to some simple heuristics.\n\nTrue to show simple animation controls with default settings; False not to; or a custom settings list, such as those created using AnimationOptions.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nSeparator between thousands places in numbers.\n\nA prefix string to put in front of the value.\n\nA suffix string to put after the value.\n\nOnly used if the slider values are date or datetime objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is ‚Äú%F‚Äù (like ‚Äú2015-07-01‚Äù), and for Datetimes, the default is ‚Äú%F %T‚Äù (like ‚Äú2015-07-01 15:32:10‚Äù).\n\nOnly used if the values are datetime objects. A string specifying the time zone offset for the displayed times, in the format ‚Äú+HHMM‚Äù or ‚Äú-HHMM‚Äù. If None (the default), times will be displayed in the browser‚Äôs time zone. The value ‚Äú+0000‚Äù will result in UTC time.\n\nThis option is used only if it is a range slider (with two values). If True (the default), the range can be dragged. In other words, the min and max can be dragged together. If False, the range cannot be dragged.\n\nReturns\n\nA UI element\n\nNotes\n\nA number, date, or date-time (depending on the class of value), or in the case of slider range, a tuple of two numbers/dates/date-times.\n\nSee Also\n\n- update_slider\n\nExamples\n\n",
    "code_examples": [
      "ui.input_slider(\n    id,\n    label,\n    min,\n    max,\n    value,\n    *,\n    step=None,\n    ticks=False,\n    animate=False,\n    width=None,\n    sep=',',\n    pre=None,\n    post=None,\n    time_format=None,\n    timezone=None,\n    drag_range=True,\n)",
      "ui.input_slider(\n    id,\n    label,\n    min,\n    max,\n    value,\n    *,\n    step=None,\n    ticks=False,\n    animate=False,\n    width=None,\n    sep=',',\n    pre=None,\n    post=None,\n    time_format=None,\n    timezone=None,\n    drag_range=True,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"obs\", \"Number of bins:\", min=10, max=100, value=30),\n    ui.output_plot(\"distPlot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot\n    def distPlot():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.obs(), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_dark_mode_html",
    "url": "api/core/ui.input_dark_mode.html",
    "title": "ui.input_dark_mode ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_dark_mode\n\nui.input_dark_mode\n\nCreates a dark mode switch input that toggles the app between dark and light modes.\n\nParameters\n\nAn optional ID for the dark mode switch. When included, the current color mode is reported in the value of the input with this ID.\n\nThe initial mode of the dark mode switch. By default or when set to None, the user‚Äôs system settings for the preferred color scheme will be used. Otherwise, set to \"light\" or \"dark\" to force the initial mode.\n\nAdditional attributes to be added to the dark mode switch, such as class_ or style.\n\nReturns\n\nA dark mode toggle switch UI element.\n\nReferences\n\n- https://getbootstrap.com/docs/5.3/customize/color-modes\n\nExamples\n\n",
    "code_examples": [
      "ui.input_dark_mode(id=None, mode=None, **kwargs)",
      "ui.input_dark_mode(id=None, mode=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"One\",\n        ui.layout_sidebar(\n            ui.sidebar(\n                ui.input_slider(\"n\", \"N\", min=0, max=100, value=20),\n            ),\n            ui.output_plot(\"plot\"),\n        ),\n    ),\n    ui.nav_panel(\n        \"Two\",\n        ui.layout_column_wrap(\n            ui.card(\"Second page content.\"),\n            ui.card(\n                ui.card_header(\"Server-side color mode setting\"),\n                ui.input_action_button(\"make_light\", \"Switch to light mode\"),\n                ui.input_action_button(\"make_dark\", \"Switch to dark mode\"),\n            ),\n        ),\n    ),\n    ui.nav_spacer(),\n    ui.nav_control(ui.input_dark_mode(id=\"mode\")),\n    title=\"Shiny Dark Mode\",\n    id=\"page\",\n    fillable=\"One\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.make_light)\n    def _():\n        ui.update_dark_mode(\"light\")\n\n    @reactive.effect\n    @reactive.event(input.make_dark)\n    def _():\n        ui.update_dark_mode(\"dark\")\n\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n\n        # Theme the plot to match light/dark mode\n        fig.patch.set_facecolor(\"none\")\n        ax.set_facecolor(\"none\")\n\n        color_fg = \"black\" if input.mode() == \"light\" else \"silver\"\n        ax.tick_params(axis=\"both\", colors=color_fg)\n        ax.spines[\"bottom\"].set_color(color_fg)\n        ax.spines[\"top\"].set_color(color_fg)\n        ax.spines[\"left\"].set_color(color_fg)\n        ax.spines[\"right\"].set_color(color_fg)\n\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_date_html",
    "url": "api/core/ui.input_date.html",
    "title": "ui.input_date ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_date\n\nui.input_date\n\nCreates a text input which, when clicked on, brings up a calendar that the user can click on to select dates.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe starting date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe minimum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe maximum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe format of the date to display in the browser. Defaults to \"yyyy-mm-dd\".\n\nThe date range shown when the input object is first clicked. Can be ‚Äúmonth‚Äù (the default), ‚Äúyear‚Äù, or ‚Äúdecade‚Äù.\n\nWhich day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).\n\nThe language used for month and day names. Default is ‚Äúen‚Äù. Other valid values include ‚Äúar‚Äù, ‚Äúaz‚Äù, ‚Äúbg‚Äù, ‚Äúbs‚Äù, ‚Äúca‚Äù, ‚Äúcs‚Äù, ‚Äúcy‚Äù, ‚Äúda‚Äù, ‚Äúde‚Äù, ‚Äúel‚Äù, ‚Äúen-AU‚Äù, ‚Äúen-GB‚Äù, ‚Äúeo‚Äù, ‚Äúes‚Äù, ‚Äúet‚Äù, ‚Äúeu‚Äù, ‚Äúfa‚Äù, ‚Äúfi‚Äù, ‚Äúfo‚Äù, ‚Äúfr-CH‚Äù, ‚Äúfr‚Äù, ‚Äúgl‚Äù, ‚Äúhe‚Äù, ‚Äúhr‚Äù, ‚Äúhu‚Äù, ‚Äúhy‚Äù, ‚Äúid‚Äù, ‚Äúis‚Äù, ‚Äúit-CH‚Äù, ‚Äúit‚Äù, ‚Äúja‚Äù, ‚Äúka‚Äù, ‚Äúkh‚Äù, ‚Äúkk‚Äù, ‚Äúko‚Äù, ‚Äúkr‚Äù, ‚Äúlt‚Äù, ‚Äúlv‚Äù, ‚Äúme‚Äù, ‚Äúmk‚Äù, ‚Äúmn‚Äù, ‚Äúms‚Äù, ‚Äúnb‚Äù, ‚Äúnl-BE‚Äù, ‚Äúnl‚Äù, ‚Äúno‚Äù, ‚Äúpl‚Äù, ‚Äúpt-BR‚Äù, ‚Äúpt‚Äù, ‚Äúro‚Äù, ‚Äúrs-latin‚Äù, ‚Äúrs‚Äù, ‚Äúru‚Äù, ‚Äúsk‚Äù, ‚Äúsl‚Äù, ‚Äúsq‚Äù, ‚Äúsr-latin‚Äù, ‚Äúsr‚Äù, ‚Äúsv‚Äù, ‚Äúsw‚Äù, ‚Äúth‚Äù, ‚Äútr‚Äù, ‚Äúuk‚Äù, ‚Äúvi‚Äù, ‚Äúzh-CN‚Äù, and ‚Äúzh-TW‚Äù.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhether or not to close the datepicker immediately when a date is selected.\n\nWhich dates should be disabled (in yyyy-mm-dd format).\n\nDays of the week that should be disabled. Should be a integer vector with values from 0 (Sunday) to 6 (Saturday).\n\nReturns\n\nA UI element.\n\nNote\n\nThe date format string specifies how the date will be displayed in the browser. It allows the following values:\n\n- yy: Year without century (12)\n- yyyy: Year with century (2012)\n- mm: Month number, with leading zero (01-12)\n- m: Month number, without leading zero (1-12)\n- M: Abbreviated month name\n- MM: Full month name\n- dd: Day of month with leading zero\n- d: Day of month without leading zero\n- D: Abbreviated weekday name\n- DD: Full weekday name\n\nNotes\n\nA date object.\n\nSee Also\n\n- update_date\n- input_date_range\n\nExamples\n\n",
    "code_examples": [
      "ui.input_date(\n    id,\n    label,\n    *,\n    value=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    width=None,\n    autoclose=True,\n    datesdisabled=None,\n    daysofweekdisabled=None,\n)",
      "ui.input_date(\n    id,\n    label,\n    *,\n    value=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    width=None,\n    autoclose=True,\n    datesdisabled=None,\n    daysofweekdisabled=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import date\n\nfrom shiny import App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date(\"date1\", \"Has default date:\", value=\"2016-02-29\"),\n    # Default value is the date in client's time zone\n    ui.input_date(\"date2\", \"Client's current date:\"),\n    # value is always yyyy-mm-dd, even if the display format is different\n    ui.input_date(\"date3\", \"Format mm/dd/yy:\", value=\"2016-02-29\", format=\"mm/dd/yy\"),\n    # Pass in a Date object\n    ui.input_date(\"date4\", \"Default uses date object:\", value=date(2016, 2, 29)),\n    # Use different language and different first day of week\n    ui.input_date(\n        \"date5\",\n        \"Language is German and the week starts on Monday:\",\n        language=\"ru\",\n        weekstart=1,\n    ),\n    # Start with decade view instead of default month view\n    ui.input_date(\"date6\", \"Start Date picker in Decade view:\", startview=\"decade\"),\n    # Disable Mondays and Tuesdays.\n    ui.input_date(\"date7\", \"Disable Monday and Tuesday:\", daysofweekdisabled=[1, 2]),\n    # Disable specific dates.\n    ui.input_date(\n        \"date8\",\n        \"Disable specific dates:\",\n        value=\"2016-02-29\",\n        datesdisabled=[\"2016-03-01\", \"2016-03-02\"],\n    ),\n    # Set min and max dates.\n    ui.input_date(\n        \"date9\",\n        \"Set min and max dates:\",\n        value=\"2016-02-03\",\n        min=\"2016-02-01\",\n        max=\"2016-02-29\",\n    ),\n    # Set width of the date field\n    ui.input_date(\"date10\", \"Set width of text input:\", width=\"600px\"),\n    # Set autoclose to false\n    ui.input_date(\"date11\", \"Auto close is disabled:\", autoclose=False),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_date_range_html",
    "url": "api/core/ui.input_date_range.html",
    "title": "ui.input_date_range ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_date_range\n\nui.input_date_range\n\nCreates a pair of text inputs which, when clicked on, bring up calendars that the user can click on to select dates.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe initial start date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe initial end date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe minimum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe maximum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe format of the date to display in the browser.\n\nThe date range shown when the input object is first clicked. Can be ‚Äúmonth‚Äù (the default), ‚Äúyear‚Äù, or ‚Äúdecade‚Äù.\n\nWhich day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).\n\nThe language used for month and day names. Default is ‚Äúen‚Äù. Other valid values include ‚Äúar‚Äù, ‚Äúaz‚Äù, ‚Äúbg‚Äù, ‚Äúbs‚Äù, ‚Äúca‚Äù, ‚Äúcs‚Äù, ‚Äúcy‚Äù, ‚Äúda‚Äù, ‚Äúde‚Äù, ‚Äúel‚Äù, ‚Äúen-AU‚Äù, ‚Äúen-GB‚Äù, ‚Äúeo‚Äù, ‚Äúes‚Äù, ‚Äúet‚Äù, ‚Äúeu‚Äù, ‚Äúfa‚Äù, ‚Äúfi‚Äù, ‚Äúfo‚Äù, ‚Äúfr-CH‚Äù, ‚Äúfr‚Äù, ‚Äúgl‚Äù, ‚Äúhe‚Äù, ‚Äúhr‚Äù, ‚Äúhu‚Äù, ‚Äúhy‚Äù, ‚Äúid‚Äù, ‚Äúis‚Äù, ‚Äúit-CH‚Äù, ‚Äúit‚Äù, ‚Äúja‚Äù, ‚Äúka‚Äù, ‚Äúkh‚Äù, ‚Äúkk‚Äù, ‚Äúko‚Äù, ‚Äúkr‚Äù, ‚Äúlt‚Äù, ‚Äúlv‚Äù, ‚Äúme‚Äù, ‚Äúmk‚Äù, ‚Äúmn‚Äù, ‚Äúms‚Äù, ‚Äúnb‚Äù, ‚Äúnl-BE‚Äù, ‚Äúnl‚Äù, ‚Äúno‚Äù, ‚Äúpl‚Äù, ‚Äúpt-BR‚Äù, ‚Äúpt‚Äù, ‚Äúro‚Äù, ‚Äúrs-latin‚Äù, ‚Äúrs‚Äù, ‚Äúru‚Äù, ‚Äúsk‚Äù, ‚Äúsl‚Äù, ‚Äúsq‚Äù, ‚Äúsr-latin‚Äù, ‚Äúsr‚Äù, ‚Äúsv‚Äù, ‚Äúsw‚Äù, ‚Äúth‚Äù, ‚Äútr‚Äù, ‚Äúuk‚Äù, ‚Äúvi‚Äù, ‚Äúzh-CN‚Äù, and ‚Äúzh-TW‚Äù.\n\nString to display between the start and end input boxes.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhether or not to close the datepicker immediately when a date is selected.\n\nReturns\n\nA UI element.\n\nNote\n\nThe date format string specifies how the date will be displayed in the browser. It allows the following values:\n\n- yy: Year without century (12)\n- yyyy: Year with century (2012)\n- mm: Month number, with leading zero (01-12)\n- m: Month number, without leading zero (1-12)\n- M: Abbreviated month name\n- MM: Full month name\n- dd: Day of month with leading zero\n- d: Day of month without leading zero\n- D: Abbreviated weekday name\n- DD: Full weekday name\n\nNotes\n\nA tuple of date objects.\n\nSee Also\n\n- update_date_range\n- input_date\n\nExamples\n\n",
    "code_examples": [
      "ui.input_date_range(\n    id,\n    label,\n    *,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    separator=' to ',\n    width=None,\n    autoclose=True,\n)",
      "ui.input_date_range(\n    id,\n    label,\n    *,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    separator=' to ',\n    width=None,\n    autoclose=True,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import date\n\nfrom shiny import App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(\n    # Default start and end is the current date in the client's time zone\n    ui.input_date_range(\"daterange1\", \"Date range:\"),\n    # Set start and end dates\n    ui.input_date_range(\n        \"daterange2\", \"Set start and end date:\", start=\"2001-01-01\", end=\"2010-12-31\"\n    ),\n    # Start and end are always specified in yyyy-mm-dd, even if the display\n    # format is different\n    ui.input_date_range(\n        \"daterange3\",\n        \"Min, max, start, and end dates are set with custom format and separator:\",\n        start=\"2001-01-01\",\n        end=\"2010-12-31\",\n        min=\"2001-01-01\",\n        max=\"2012-12-21\",\n        format=\"mm/dd/yy\",\n        separator=\" - \",\n    ),\n    # Pass in Date objects\n    ui.input_date_range(\n        \"daterange4\",\n        \"Default start and end use date objects:\",\n        start=date(2001, 1, 1),\n        end=date(2010, 12, 31),\n    ),\n    # Use different language and different first day of week\n    ui.input_date_range(\n        \"daterange5\",\n        \"Language is German and we starts on Monday:\",\n        language=\"de\",\n        weekstart=1,\n    ),\n    # Start with decade view instead of default month view\n    ui.input_date_range(\n        \"daterange6\", \"Start Date picker in Decade view:\", startview=\"decade\"\n    ),\n    # Set width of the daterange field\n    ui.input_date_range(\"daterange7\", \"Set width of text input:\", width=\"600px\"),\n    # Set autoclose to false\n    ui.input_date_range(\"daterange8\", \"Auto close is disabled:\", autoclose=False),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_checkbox_html",
    "url": "api/core/ui.input_checkbox.html",
    "title": "ui.input_checkbox ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_checkbox\n\nui.input_checkbox\n\nCreate a checkbox that can be used to specify logical values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nReturns\n\nA UI element.\n\nNotes\n\nTrue if checked, False otherwise.\n\nSee Also\n\n- input_switch\n- update_checkbox\n- input_checkbox_group\n- input_radio_buttons\n\nExamples\n\n",
    "code_examples": [
      "ui.input_checkbox(id, label, value=False, *, width=None)",
      "ui.input_checkbox(id, label, value=False, *, width=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"somevalue\", \"Some value\", False),\n    ui.output_ui(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    def value():\n        return input.somevalue()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_checkbox_group_html",
    "url": "api/core/ui.input_checkbox_group.html",
    "title": "ui.input_checkbox_group ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_checkbox_group\n\nui.input_checkbox_group\n\nCreate a group of checkboxes that can be used to toggle multiple choices independently.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\nThe values that should be initially selected, if any.\n\nIf True, the result is displayed inline.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nReturns\n\nA UI element.\n\nNotes\n\nA tuple of string(s) with the selected value(s) (if any).\n\nSee Also\n\n- update_checkbox_group\n- input_checkbox\n- input_radio_buttons\n\nExamples\n\n",
    "code_examples": [
      "ui.input_checkbox_group(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "ui.input_checkbox_group(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, req, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox_group(\n        \"colors\",\n        \"Choose color(s):\",\n        {\n            \"red\": ui.span(\"Red\", style=\"color: #FF0000;\"),\n            \"green\": ui.span(\"Green\", style=\"color: #00AA00;\"),\n            \"blue\": ui.span(\"Blue\", style=\"color: #0000AA;\"),\n        },\n    ),\n    ui.output_ui(\"val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    def val():\n        req(input.colors())\n        return \"You chose \" + \", \".join(input.colors())\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_switch_html",
    "url": "api/core/ui.input_switch.html",
    "title": "ui.input_switch ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_switch\n\nui.input_switch\n\nCreate a switch that can be used to specify logical values. Similar to input_checkbox, but implies to the user that the change will take effect immediately.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nReturns\n\nA UI element.\n\nNotes\n\nTrue if checked, False otherwise.\n\nSee Also\n\n- input_checkbox\n- update_switch\n- input_checkbox_group\n- input_radio_buttons\n\nExamples\n\n",
    "code_examples": [
      "ui.input_switch(id, label, value=False, *, width=None)",
      "ui.input_switch(id, label, value=False, *, width=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"somevalue\", \"Some value\", False),\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return input.somevalue()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_radio_buttons_html",
    "url": "api/core/ui.input_radio_buttons.html",
    "title": "ui.input_radio_buttons ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_radio_buttons\n\nui.input_radio_buttons\n\nCreate a set of radio buttons used to select an item from a list.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\nThe values that should be initially selected, if any.\n\nIf True, the result is displayed inline.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nReturns\n\nA UI element\n\nNotes\n\nA string with the selected value.\n\nSee Also\n\n- update_radio_buttons\n- input_checkbox_group\n- input_checkbox\n\nExamples\n\n",
    "code_examples": [
      "ui.input_radio_buttons(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "ui.input_radio_buttons(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(\n        \"rb\",\n        \"Choose one:\",\n        {\n            \"html\": ui.HTML(\"<span style='color:red;'>Red Text</span>\"),\n            \"text\": \"Normal text\",\n        },\n    ),\n    ui.output_ui(\"val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    def val():\n        return \"You chose \" + input.rb()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_numeric_html",
    "url": "api/core/ui.input_numeric.html",
    "title": "ui.input_numeric ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_numeric\n\nui.input_numeric\n\nCreate an input control for entry of numeric values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nInterval to use when stepping between min and max.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Enter is pressed.\n\nReturns\n\nA UI element.\n\nNotes\n\nA numeric value.\n\nSee Also\n\n- update_numeric\n\nExamples\n\n",
    "code_examples": [
      "ui.input_numeric(\n    id,\n    label,\n    value,\n    *,\n    min=None,\n    max=None,\n    step=None,\n    width=None,\n    update_on='change',\n)",
      "ui.input_numeric(\n    id,\n    label,\n    value,\n    *,\n    min=None,\n    max=None,\n    step=None,\n    width=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"obs\", \"Observations:\", 10, min=1, max=100),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return input.obs()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_text_html",
    "url": "api/core/ui.input_text.html",
    "title": "ui.input_text ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_text\n\nui.input_text\n\nCreate an input control for entry of text values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nA hint as to what can be entered into the control.\n\nWhether to enable browser autocompletion of the text input. If None, then it will use the browser‚Äôs default behavior. Some values include ‚Äúon‚Äù, ‚Äúoff‚Äù, ‚Äúname‚Äù, ‚Äúusername‚Äù, and ‚Äúemail‚Äù. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete to learn more about autocomplete‚Äôs supported values.\n\nWhether to enable browser spell checking of the text input (default is None). If None, then it will use the browser‚Äôs default behavior.\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Enter is pressed.\n\nReturns\n\nA UI element\n\nNotes\n\nA string containing the current text input. The default value is \"\" unless value is provided.\n\nSee Also\n\n- input_text_area\n\nExamples\n\n",
    "code_examples": [
      "ui.input_text(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    autocomplete='off',\n    spellcheck=None,\n    update_on='change',\n)",
      "ui.input_text(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    autocomplete='off',\n    spellcheck=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"caption\", \"Caption:\", \"Data summary\"),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return input.caption()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_text_area_html",
    "url": "api/core/ui.input_text_area.html",
    "title": "ui.input_text_area ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_text_area\n\nui.input_text_area\n\nCreate a textarea input control for entry of unstructured text values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nThe CSS height, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nValue of the visible character columns of the input, e.g., 80. This argument will only take effect if there is not a CSS width rule defined for this element; such a rule could come from the width argument of this function or from a containing page layout such as page_fluid.\n\nThe value of the visible character rows of the input, e.g., 6. If the height argument is specified, height will take precedence in the browser‚Äôs rendering.\n\nA hint as to what can be entered into the control.\n\nWhich directions the textarea box can be resized. Can be one of ‚Äúboth‚Äù, ‚Äúnone‚Äù, ‚Äúvertical‚Äù, and ‚Äúhorizontal‚Äù. The default, None, will use the client browser‚Äôs default setting for resizing textareas.\n\nIf True, then the textarea will automatically resize the height to fit the input text.\n\nWhether to enable browser autocompletion of the text input (default is ‚Äúoff‚Äù). If None, then it will use the browser‚Äôs default behavior. Other possible values include ‚Äúon‚Äù, ‚Äúname‚Äù, ‚Äúusername‚Äù, and ‚Äúemail‚Äù. See Mozilla‚Äôs autocomplete documentation for more.\n\nWhether to enable browser spell checking of the text input (default is None). If None, then it will use the browser‚Äôs default behavior.\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Ctrl/Cmd + Enter is pressed.\n\nReturns\n\nA UI element\n\nNotes\n\nA string containing the current text input. The default value is \"\" unless value is provided.\n\nSee Also\n\n- input_text\n\nExamples\n\n",
    "code_examples": [
      "ui.input_text_area(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    height=None,\n    cols=None,\n    rows=None,\n    placeholder=None,\n    resize=None,\n    autoresize=False,\n    autocomplete=None,\n    spellcheck=None,\n    update_on='change',\n)",
      "ui.input_text_area(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    height=None,\n    cols=None,\n    rows=None,\n    placeholder=None,\n    resize=None,\n    autoresize=False,\n    autocomplete=None,\n    spellcheck=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text_area(\n        \"caption_regular\",\n        \"Caption:\",\n        \"Data summary\\nwith\\nmultiple\\nlines\",\n    ),\n    ui.output_text_verbatim(\"value_regular\", placeholder=True),\n    ui.input_text_area(\n        \"caption_autoresize\",\n        ui.markdown(\"Caption (w/ `autoresize=True`):\"),\n        \"Data summary\\nwith\\nmultiple\\nlines\",\n        autoresize=True,\n    ),\n    ui.output_text_verbatim(\"value_autoresize\", placeholder=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value_regular():\n        return input.caption_regular()\n\n    @render.text\n    def value_autoresize():\n        return input.caption_autoresize()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_password_html",
    "url": "api/core/ui.input_password.html",
    "title": "ui.input_password ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_password\n\nui.input_password\n\nCreate an password control for entry of passwords.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nThe placeholder of the input.\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Enter is pressed.\n\nReturns\n\nA UI element.\n\nNotes\n\nA string of the password input. The default value is unless value is provided.\n\nSee Also\n\n- update_text\n\nExamples\n\n",
    "code_examples": [
      "ui.input_password(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    update_on='change',\n)",
      "ui.input_password(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_password(\"password\", \"Password:\"),\n    ui.input_action_button(\"go\", \"Go\"),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    @reactive.event(input.go)\n    def value():\n        return input.password()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_action_button_html",
    "url": "api/core/ui.input_action_button.html",
    "title": "ui.input_action_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_action_button\n\nui.input_action_button\n\nCreates an action button whose value is initially zero, and increments by one each time it is pressed.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nIf True, the button will not be clickable. Use update_action_button to dynamically enable/disable the button.\n\nAttributes to be applied to the button.\n\nReturns\n\nA UI element\n\nNotes\n\nAn integer representing the number of clicks.\n\nSee Also\n\n- update_action_button\n- input_action_link\n- event\n\nExamples\n\n",
    "code_examples": [
      "ui.input_action_button(\n    id,\n    label,\n    *,\n    icon=None,\n    width=None,\n    disabled=False,\n    **kwargs,\n)",
      "ui.input_action_button(\n    id,\n    label,\n    *,\n    icon=None,\n    width=None,\n    disabled=False,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500),\n    ui.input_action_button(\"go\", \"Go!\", class_=\"btn-success\"),\n    ui.output_plot(\"plot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    # Use reactive.event() to invalidate the plot only when the button is pressed\n    # (not when the slider is changed)\n    @reactive.event(input.go, ignore_none=False)\n    def plot():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(input.n())\n        fig, ax = plt.subplots()\n        ax.hist(x, bins=30, density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"name\", \"Your Name\"),\n    ui.input_action_button(\"greet\", \"Say Hello\", disabled=True),\n    ui.output_ui(\"hello\"),\n)\n\n\ndef server(input: Inputs):\n    @reactive.effect\n    @reactive.event(input.name)\n    def set_button_state():\n        if input.name():\n            ui.update_action_button(\"greet\", disabled=False)\n        else:\n            ui.update_action_button(\"greet\", disabled=True)\n\n    @render.ui\n    @reactive.event(input.greet)\n    def hello():\n        return ui.p(f\"Hello, {input.name()}!\", class_=\"fs-1 text-primary mt-3\")\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_action_link_html",
    "url": "api/core/ui.input_action_link.html",
    "title": "ui.input_action_link ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_action_link\n\nui.input_action_link\n\nCreates a link whose value is initially zero, and increments by one each time it is pressed.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nAttributes to be applied to the link.\n\nReturns\n\nA UI element\n\nNotes\n\nAn integer representing the number of clicks.\n\nSee Also\n\n- update_action_link\n- input_action_button\n- event\n\nExamples\n\n",
    "code_examples": [
      "ui.input_action_link(id, label, *, icon=None, **kwargs)",
      "ui.input_action_link(id, label, *, icon=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500),\n    ui.input_action_link(\"go\", \"Go!\"),\n    ui.output_plot(\"plot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    # reactive.event() to invalidate the plot when the button is pressed but not when\n    # the slider is changed\n    @reactive.event(input.go, ignore_none=False)\n    def plot():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(input.n())\n        fig, ax = plt.subplots()\n        ax.hist(x, bins=30, density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_input_task_button_html",
    "url": "api/core/ui.input_task_button.html",
    "title": "ui.input_task_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_task_button\n\nui.input_task_button\n\nCreates a button for launching longer-running operations.\n\nIts value is initially zero, and increments by one each time it is pressed. It is similar to input_action_button, except it prevents the user from clicking when its operation is already in progress.\n\nUpon click, it automatically displays a customizable progress message and disables itself; and after the server has dealt with whatever reactivity is triggered from the click, the button automatically resets to its original appearance and re-enables itself.\n\nIn some advanced use cases, it may be necessary to keep a task button in its busy state even after the normal reactive processing has completed. Calling :func:~shiny.ui.update_task_button(id, state = \"busy\") from the server will opt out of any currently pending reset for a specific task button. After doing so, the button can be re-enabled by calling update_task_button(id, state = &quot;ready&quot;) after each click's work is complete.\n\nYou can also pass an explicit auto_reset = FALSE to input_task_button(), which means that button will never be automatically re-enabled and will require update_task_button(id, state = &quot;ready&quot;) to be called each time.\n\nNote that, as a general rule, Shiny's update family of functions do not take effect at the instant that they are called, but are held until the end of the current reactive cycle. So if you have many different reactive calculations and outputs, you don't have to be too careful about when you call update_task_button(id, state = &quot;ready&quot;), as the button on the client will not actually re-enable until the same moment that all of the updated outputs simultaneously sent to the client.\n\nParameters\n\nAn input id.\n\nA button label.\n\n[Experimental] Can be used to add additional states besides ‚Äúready‚Äù and ‚Äúbusy‚Äù. Pass a span with slot=\"state_name\" for each new state, and call update_task_button with state=\"state_name\" to switch the button to that state.\n\nAn icon to appear inline with the button/link.\n\nA label to appear when the button is busy.\n\nAn icon to appear inline with the button/link when the button is busy.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nOne of the Bootstrap theme colors (‚Äòprimary‚Äô, ‚Äòdefault‚Äô, ‚Äòsecondary‚Äô, ‚Äòsuccess‚Äô, ‚Äòdanger‚Äô, ‚Äòwarning‚Äô, ‚Äòinfo‚Äô, ‚Äòlight‚Äô, ‚Äòdark‚Äô), or None to leave off the Bootstrap-specific button CSS classes. Defaults to ‚Äòprimary‚Äô.\n\nWhether to automatically reset the button to ‚Äúready‚Äù after the task completes. If False, the button will remain in the ‚Äúbusy‚Äù state until update_task_button is called with state=\"ready\". Also note that even if auto_reset=True, calling update_task_button with state=\"busy\" will prevent the button from automatically resetting.\n\nAttributes to be applied to the button.\n\nReturns\n\nA UI element\n\nNotes\n\nAn integer representing the number of clicks.\n\nSee Also\n\n- update_task_button\n- input_action_button\n- event\n\nExamples\n\n",
    "code_examples": [
      "ui.input_task_button(\n    id,\n    label,\n    *args,\n    icon=None,\n    label_busy='Processing...',\n    icon_busy=MISSING,\n    width=None,\n    type='primary',\n    auto_reset=True,\n    **kwargs,\n)",
      "ui.input_task_button(\n    id,\n    label,\n    *args,\n    icon=None,\n    label_busy='Processing...',\n    icon_busy=MISSING,\n    width=None,\n    type='primary',\n    auto_reset=True,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nfrom datetime import datetime\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fixed(\n    ui.h5(\"Current time\"),\n    ui.output_text(\"current_time\"),\n    ui.p(\n        \"Notice that the time above updates every second, even if you click the button below.\"\n    ),\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_numeric(\"x\", \"x\", 1),\n            ui.input_numeric(\"y\", \"y\", 2),\n            ui.input_task_button(\"btn\", \"Compute, slowly\"),\n            ui.input_action_button(\"btn_cancel\", \"Cancel\"),\n        ),\n        ui.h5(\"Sum of x and y\"),\n        ui.output_text(\"show_result\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def current_time():\n        reactive.invalidate_later(1)\n        return datetime.now().strftime(\"%H:%M:%S\")\n\n    @ui.bind_task_button(button_id=\"btn\")\n    @reactive.extended_task\n    async def slow_compute(a: int, b: int) -> int:\n        await asyncio.sleep(3)\n        return a + b\n\n    @reactive.effect\n    @reactive.event(input.btn, ignore_none=False)\n    def handle_click():\n        slow_compute(input.x(), input.y())\n\n    @reactive.effect\n    @reactive.event(input.btn_cancel)\n    def handle_cancel():\n        slow_compute.cancel()\n\n    @render.text\n    def show_result():\n        return str(slow_compute.result())\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_value_box_html",
    "url": "api/core/ui.value_box.html",
    "title": "ui.value_box ‚Äì Shiny for Python",
    "description": "",
    "content": "- Value boxes\n- ui.value_box\n\nui.value_box\n\nValue box\n\nAn opinionated (card-powered) box, designed for displaying a value and title. Optionally, a showcase can provide context for what the value represents (for example, it could hold an icon, or even a output_plot).\n\nParameters\n\nA string, number, or Tag child to display as the title or value of the value box. The title appears above the value.\n\nUnnamed arguments may be any Tag children to display below value. Named arguments are passed to card as element attributes.\n\nA Tag child to showcase (e.g., an icon, a output_plot, etc).\n\nOne of \"left center\" (default), \"top right\" or \"bottom\". Alternatively, you can customize the showcase layout options with the showcase_left_center, showcase_top_right, or showcase_bottom functions. Use the options functions when you want to control the height or width of the showcase area.\n\nThe name of a theme (e.g. \"primary\", \"danger\", \"purple\", \"bg-green\", \"text-red\") for the value box, or a theme constructed with value_box_theme. The theme names provide a convenient way to use your app‚Äôs Bootstrap theme colors as the foreground or background colors of the value box. For more control, you can create your own theme with value_box_theme where you can pass foreground and background colors directly. Bootstrap supported color themes: \"blue\", \"purple\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"teal\", and \"cyan\". These colors can be used with bg-NAME, text-NAME, and bg-gradient-NAME1-NAME2 to change the background, foreground, or use a background gradient respectively. If a theme string does not start with text- or bg-, it will be auto prefixed with bg-.\n\nIf True, an icon will appear when hovering over the card body. Clicking the icon expands the card to fit viewport size.\n\nAny valid CSS unit (e.g., height=\"200px\"). Doesn‚Äôt apply when a value box is made full_screen.\n\nWhether to allow the value box to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nUtility classes for customizing the appearance of the summary card. Use bg-* and text-* classes (e.g, \"bg-danger\" and \"text-light\") to customize the background/foreground colors.\n\nProvide a unique identifier for the :func:~shiny.ui.value_box() to report its state to Shiny. For example, using id=\"my_value_box\", you can observe the value box‚Äôs full screen state with input.my_value_box()[\"full_screen\"].\n\nAdditional attributes to pass to card.\n\nReturns\n\nA card\n\nSee Also\n\n- value_box_theme\n- showcase_bottom\n- showcase_left_center\n- showcase_top_right\n- card\n\nExamples\n\n",
    "code_examples": [
      "ui.value_box(\n    title,\n    value,\n    *args,\n    showcase=None,\n    showcase_layout='left center',\n    full_screen=False,\n    theme=None,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    id=None,\n    **kwargs,\n)",
      "ui.value_box(\n    title,\n    value,\n    *args,\n    showcase=None,\n    showcase_layout='left center',\n    full_screen=False,\n    theme=None,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    id=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import piggy_bank\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=piggy_bank,\n            theme=\"bg-gradient-orange-red\",\n            full_screen=True,\n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=piggy_bank,\n            theme=\"text-green\",\n            showcase_layout=\"top right\",\n            full_screen=True,\n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=piggy_bank,\n            theme=\"purple\",\n            showcase_layout=\"bottom\",\n            full_screen=True,\n        ),\n    )\n)\n\n\napp = App(app_ui, server=None)\n\n\n## file: icons.py\nfrom shiny import ui\n\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\n"
    ]
  },
  {
    "id": "api_core_ui_value_box_theme_html",
    "url": "api/core/ui.value_box_theme.html",
    "title": "ui.value_box_theme ‚Äì Shiny for Python",
    "description": "",
    "content": "- Value boxes\n- ui.value_box_theme\n\nui.value_box_theme\n\nValue box theme\n\nA theme for a value_box. Themes provide a convenient way to use your app's Bootstrap theme colors as the foreground or background colors of the value box. For more control, you can create your own theme with value_box_theme where you can pass foreground and background value.\n\nSee rstudio/bslib#themes for more examples.\n\nParameters\n\nThe name of the theme, e.g. \"primary\", \"danger\", \"purple\". name can also be a Bootstrap-supported color: \"blue\", \"purple\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"teal\", and \"cyan\". These colors can be used with bg-NAME, text-NAME, and bg-gradient-NAME1-NAME2. If a name does not start with text- or bg-, it will be auto-prefixed with bg-.\n\nThe background and foreground colors for the theme.\n\nReturns\n\nA ValueBoxTheme\n\nSee Also\n\n- value_box\n\n",
    "code_examples": [
      "ui.value_box_theme(name=None, *, fg=None, bg=None)",
      "ui.value_box_theme(name=None, *, fg=None, bg=None)"
    ]
  },
  {
    "id": "api_core_ui_showcase_bottom_html",
    "url": "api/core/ui.showcase_bottom.html",
    "title": "ui.showcase_bottom ‚Äì Shiny for Python",
    "description": "",
    "content": "- Value boxes\n- ui.showcase_bottom\n\nui.showcase_bottom\n\nShowcase bottom\n\nA showcase_bottom is a ShowcaseLayout with the following default properties:\n\n- width is \"100%\"\n- width_full_screen is None\n- height is \"auto\"\n- height_full_screen is \"2fr\"\n- max_height is \"100px\"\n- max_height_full_screen is None\n\nSee Also\n\n- showcase_left_center\n- showcase_top_right\n- value_box\n\nExamples\n\n",
    "code_examples": [
      "ui.showcase_bottom(\n    width='100%',\n    width_full_screen=None,\n    height='auto',\n    height_full_screen='2fr',\n    max_height='100px',\n    max_height_full_screen=None,\n)",
      "ui.showcase_bottom(\n    width='100%',\n    width_full_screen=None,\n    height='auto',\n    height_full_screen='2fr',\n    max_height='100px',\n    max_height_full_screen=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import arrow_up, piggy_bank\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            ui.h1(ui.HTML(\"$1 <i>Billion</i> Dollars\")),\n            ui.span(arrow_up, \" 30% VS PREVIOUS 30 DAYS\"),\n            showcase=piggy_bank,\n            theme=\"bg-gradient-orange-cyan\",\n            full_screen=True,\n        ),\n        ui.value_box(\n            \"KPI Title\",\n            ui.h1(ui.HTML(\"$1 <i>Billion</i> Dollars\")),\n            ui.span(arrow_up, \" 30% VS PREVIOUS 30 DAYS\"),\n            showcase=piggy_bank,\n            theme=\"text-green\",\n            showcase_layout=\"top right\",\n            full_screen=True,\n        ),\n        ui.value_box(\n            \"KPI Title\",\n            ui.h1(ui.HTML(\"$1 <i>Billion</i> Dollars\")),\n            ui.span(arrow_up, \" 30% VS PREVIOUS 30 DAYS\"),\n            showcase=piggy_bank,\n            theme=\"purple\",\n            showcase_layout=\"bottom\",\n            full_screen=True,\n        ),\n    )\n)\n\n\napp = App(app_ui, server=None)\n\n\n## file: icons.py\nfrom shiny import ui\n\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\narrow_up = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-arrow-up \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><path fill-rule=\"evenodd\" d=\"M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z\"></path></svg>'\n)\n\n"
    ]
  },
  {
    "id": "api_core_ui_showcase_left_center_html",
    "url": "api/core/ui.showcase_left_center.html",
    "title": "ui.showcase_left_center ‚Äì Shiny for Python",
    "description": "",
    "content": "- Value boxes\n- ui.showcase_left_center\n\nui.showcase_left_center\n\nShowcase left center\n\nA showcase_left_center is a ShowcaseLayout with the following default properties:\n\n- width is \"30%\"\n- width_full_screen is \"1fr\"\n- max_height is \"100px\"\n- max_height_full_screen is \"67%\"\n\nSee Also\n\n- showcase_top_right\n- showcase_bottom\n- value_box\n\nExamples\n\n",
    "code_examples": [
      "ui.showcase_left_center(\n    width='30%',\n    width_full_screen='1fr',\n    max_height='100px',\n    max_height_full_screen='67%',\n)",
      "ui.showcase_left_center(\n    width='30%',\n    width_full_screen='1fr',\n    max_height='100px',\n    max_height_full_screen='67%',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import arrow_up, piggy_bank\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            ui.h1(ui.HTML(\"$1 <i>Billion</i> Dollars\")),\n            ui.span(arrow_up, \" 30% VS PREVIOUS 30 DAYS\"),\n            showcase=piggy_bank,\n            theme=\"bg-gradient-orange-cyan\",\n            full_screen=True,\n        ),\n        ui.value_box(\n            \"KPI Title\",\n            ui.h1(ui.HTML(\"$1 <i>Billion</i> Dollars\")),\n            ui.span(arrow_up, \" 30% VS PREVIOUS 30 DAYS\"),\n            showcase=piggy_bank,\n            theme=\"text-green\",\n            showcase_layout=\"top right\",\n            full_screen=True,\n        ),\n        ui.value_box(\n            \"KPI Title\",\n            ui.h1(ui.HTML(\"$1 <i>Billion</i> Dollars\")),\n            ui.span(arrow_up, \" 30% VS PREVIOUS 30 DAYS\"),\n            showcase=piggy_bank,\n            theme=\"purple\",\n            showcase_layout=\"bottom\",\n            full_screen=True,\n        ),\n    )\n)\n\n\napp = App(app_ui, server=None)\n\n\n## file: icons.py\nfrom shiny import ui\n\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\narrow_up = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-arrow-up \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><path fill-rule=\"evenodd\" d=\"M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z\"></path></svg>'\n)\n\n"
    ]
  },
  {
    "id": "api_core_ui_showcase_top_right_html",
    "url": "api/core/ui.showcase_top_right.html",
    "title": "ui.showcase_top_right ‚Äì Shiny for Python",
    "description": "",
    "content": "- Value boxes\n- ui.showcase_top_right\n\nui.showcase_top_right\n\nShowcase top right\n\nA showcase_top_right is a ShowcaseLayout with the following default properties:\n\n- width is \"40%\"\n- width_full_screen is \"1fr\"\n- max_height is \"75px\"\n- max_height_full_screen is \"67%\"\n\nSee Also\n\n- showcase_left_center\n- showcase_bottom\n- value_box\n\nExamples\n\n",
    "code_examples": [
      "ui.showcase_top_right(\n    width='40%',\n    width_full_screen='1fr',\n    max_height='75px',\n    max_height_full_screen='67%',\n)",
      "ui.showcase_top_right(\n    width='40%',\n    width_full_screen='1fr',\n    max_height='75px',\n    max_height_full_screen='67%',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import arrow_up, piggy_bank\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            ui.h1(ui.HTML(\"$1 <i>Billion</i> Dollars\")),\n            ui.span(arrow_up, \" 30% VS PREVIOUS 30 DAYS\"),\n            showcase=piggy_bank,\n            theme=\"bg-gradient-orange-cyan\",\n            full_screen=True,\n        ),\n        ui.value_box(\n            \"KPI Title\",\n            ui.h1(ui.HTML(\"$1 <i>Billion</i> Dollars\")),\n            ui.span(arrow_up, \" 30% VS PREVIOUS 30 DAYS\"),\n            showcase=piggy_bank,\n            theme=\"text-green\",\n            showcase_layout=\"top right\",\n            full_screen=True,\n        ),\n        ui.value_box(\n            \"KPI Title\",\n            ui.h1(ui.HTML(\"$1 <i>Billion</i> Dollars\")),\n            ui.span(arrow_up, \" 30% VS PREVIOUS 30 DAYS\"),\n            showcase=piggy_bank,\n            theme=\"purple\",\n            showcase_layout=\"bottom\",\n            full_screen=True,\n        ),\n    )\n)\n\n\napp = App(app_ui, server=None)\n\n\n## file: icons.py\nfrom shiny import ui\n\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\narrow_up = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-arrow-up \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><path fill-rule=\"evenodd\" d=\"M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z\"></path></svg>'\n)\n\n"
    ]
  },
  {
    "id": "api_core_ui_nav_panel_html",
    "url": "api/core/ui.nav_panel.html",
    "title": "ui.nav_panel ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.nav_panel\n\nui.nav_panel\n\nCreate a nav item pointing to some internal content.\n\nParameters\n\nA title to display. Can be a character string or UI elements (i.e., tags).\n\nUI elements to display when the item is active.\n\nThe value of the item. Use this value to determine whether the item is active (when an id is provided to the nav container) or to programmatically select the item (e.g., update_navs). You can also provide the value to the selected argument of the navigation container (e.g., navset_tab).\n\nAn icon to appear inline with the button/link.\n\nSee Also\n\n- nav_menu\n- nav_control\n- nav_spacer\n- navset_bar\n- navset_tab\n- navset_pill\n- navset_underline\n- navset_card_tab\n- navset_card_pill\n- navset_card_underline\n- navset_pill_list\n- navset_hidden\n\nExamples\n\n",
    "code_examples": [
      "ui.nav_panel(title, *args, value=None, icon=None)",
      "ui.nav_panel(title, *args, value=None, icon=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_bar(\n        ui.nav_panel(\"Page 1\", \"Page 1 content\"),\n        ui.nav_panel(\n            \"Page 2\",\n            ui.navset_card_underline(\n                ui.nav_panel(\"Tab 1\", \"Tab 1 content\"),\n                ui.nav_panel(\"Tab 2\", \"Tab 2 content\"),\n                ui.nav_panel(\"Tab 3\", \"Tab 3 content\"),\n            ),\n        ),\n        title=\"Nav Panel Example\",\n    ),\n)\n\n\ndef server(input: Inputs):\n    pass\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_nav_spacer_html",
    "url": "api/core/ui.nav_spacer.html",
    "title": "ui.nav_spacer ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.nav_spacer\n\nui.nav_spacer\n\nCreate space between nav items.\n\nSee Also\n\n- nav_panel\n- nav_menu\n- nav_control\n- navset_bar\n- navset_tab\n- navset_pill\n- navset_underline\n- navset_card_tab\n- navset_card_pill\n- navset_card_underline\n- navset_pill_list\n- navset_hidden\n\nExample\n\nSee nav_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.nav_spacer()",
      "ui.nav_spacer()",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_underline(\n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_spacer(),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        id=\"selected_navset_underline\",\n    ),\n    ui.h5(\"Selected:\"),\n    ui.output_code(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @render.code\n    def selected():\n        return input.selected_navset_underline()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_nav_menu_html",
    "url": "api/core/ui.nav_menu.html",
    "title": "ui.nav_menu ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.nav_menu\n\nui.nav_menu\n\nCreate a menu of nav items.\n\nParameters\n\nA title to display. Can be a character string or UI elements (i.e., tags).\n\nA collection of nav items (e.g., nav_panel) and/or strings. Strings will be rendered as a section header unless the string is a set of two or more hyphens (e.g., ---), in which case it will be rendered as a divider.\n\nThe value of the item. Use this value to determine whether the item is active (when an id is provided to the nav container) or to programmatically select the item (e.g., update_navs). You can also provide the value to the selected argument of the navigation container (e.g., navset_tab).\n\nAn icon to appear inline with the button/link.\n\nHorizontal alignment of the dropdown menu relative to dropdown toggle.\n\nReturns\n\nA UI element representing both the navigation menu.\n\nSee Also\n\n- nav_panel\n- nav_control\n- nav_spacer\n- navset_bar\n- navset_tab\n- navset_pill\n- navset_underline\n- navset_card_tab\n- navset_card_pill\n- navset_card_underline\n- navset_pill_list\n- navset_hidden\n\nExample\n\nSee nav_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.nav_menu(title, *args, value=None, icon=None, align='left')",
      "ui.nav_menu(title, *args, value=None, icon=None, align='left')",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_card_pill(\n        ui.nav_menu(\n            \"Nav Menu items\",\n            ui.nav_panel(\"A\", \"Panel A content\"),\n            ui.nav_panel(\"B\", \"Panel B content\"),\n            ui.nav_panel(\"C\", \"Panel C content\"),\n        ),\n        id=\"selected_card_pill\",\n    ),\n    ui.h5(\"Selected:\"),\n    ui.output_code(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @render.code\n    def selected():\n        return input.selected_card_pill()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_nav_control_html",
    "url": "api/core/ui.nav_control.html",
    "title": "ui.nav_control ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.nav_control\n\nui.nav_control\n\nPlace a control in the navigation container.\n\nParameters\n\nUI elements to display as the nav item.\n\nSee Also\n\n- nav_panel\n- nav_menu\n- nav_spacer\n- navset_bar\n- navset_tab\n- navset_pill\n- navset_underline\n- navset_card_tab\n- navset_card_pill\n- navset_card_underline\n- navset_pill_list\n- navset_hidden\n\nExample\n\nSee nav_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.nav_control(*args)",
      "ui.nav_control(*args)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_card_underline(\n        ui.nav_control(ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")),\n        ui.nav_control(\n            ui.a(\n                \"Learn Shiny\",\n                href=\"https://shiny.posit.co/py/docs/overview.html\",\n                target=\"_blank\",\n            )\n        ),\n    ),\n    id=\"tab\",\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_navset_bar_html",
    "url": "api/core/ui.navset_bar.html",
    "title": "ui.navset_bar ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.navset_bar\n\nui.navset_bar\n\nRender nav items as a navbar.\n\nParameters\n\nA collection of nav items (e.g., shiny.ui.nav_panel).\n\nTitle to display in the navbar.\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nA Sidebar component to display on every nav_panel page.\n\nWhether or not to allow fill items to grow/shrink to fit the browser window. If True, all nav() pages are fillable. A character vector, matching the value of nav()s to be filled, may also be provided. Note that, if a sidebar is provided, fillable makes the main content portion fillable.\n\nA CSS length unit defining the gap (i.e., spacing) between elements provided to *args. This value is only used when the navbar is fillable.\n\nPadding to use for the body. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. The length can be between one and four. If one, then that value will be used for all four sides. If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. If three, then the first will be used for top, the second will be left and right, and the third will be bottom. If four, then the values will be interpreted as top, right, bottom, and left respectively. This value is only used when the navbar is fillable.\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nTrue to use fluid layout; False to use fixed layout.\n\nConfigure the appearance and behavior of the navbar using navbar_options to set properties like position, background color, and more. navbar_options was added in v1.3.0 and replaces deprecated arguments position, bg, inverse, collapsible, and underline.\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. Determines whether the navbar should be displayed at the top of the page with normal scrolling behavior (‚Äústatic-top‚Äù), pinned at the top (‚Äúfixed-top‚Äù), or pinned at the bottom (‚Äúfixed-bottom‚Äù). Note that using ‚Äúfixed-top‚Äù or ‚Äúfixed-bottom‚Äù will cause the navbar to overlay your body content, unless you add padding (e.g., tags.style(\"body {padding-top: 70px;}\")).\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. Background color of the navbar (a CSS color).\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. Either True for a light text color or False for a dark text color.\n\nDeprecated in v1.3.0. Please use navbar_options instead; see navbar_options for details. True to automatically collapse the elements into an expandable menu on mobile devices or narrow window widths.\n\nSee Also\n\n- page_navbar\n- nav_panel\n- nav_menu\n- nav_control\n- nav_spacer\n- navset_tab\n- navset_pill\n- navset_underline\n- navset_card_tab\n- navset_card_pill\n- navset_card_underline\n- navset_pill_list\n- navset_hidden\n\nExample\n\nSee nav_panel.\n\nExamples\n\n",
    "code_examples": [
      "ui.navset_bar(\n    *args,\n    title,\n    id=None,\n    selected=None,\n    sidebar=None,\n    fillable=True,\n    gap=None,\n    padding=None,\n    header=None,\n    footer=None,\n    navbar_options=None,\n    fluid=True,\n    position=DEPRECATED,\n    bg=DEPRECATED,\n    inverse=DEPRECATED,\n    underline=DEPRECATED,\n    collapsible=DEPRECATED,\n)",
      "ui.navset_bar(\n    *args,\n    title,\n    id=None,\n    selected=None,\n    sidebar=None,\n    fillable=True,\n    gap=None,\n    padding=None,\n    header=None,\n    footer=None,\n    navbar_options=None,\n    fluid=True,\n    position=DEPRECATED,\n    bg=DEPRECATED,\n    inverse=DEPRECATED,\n    underline=DEPRECATED,\n    collapsible=DEPRECATED,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_bar(\n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"selected_navset_bar\",\n        title=\"Navset Bar\",\n    ),\n    ui.h5(\"Selected:\"),\n    ui.output_code(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @render.code\n    def selected():\n        return input.selected_navset_bar()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_navset_tab_html",
    "url": "api/core/ui.navset_tab.html",
    "title": "ui.navset_tab ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.navset_tab\n\nui.navset_tab\n\nRender nav items as a tabset.\n\nParameters\n\nA collection of nav items (e.g., shiny.ui.nav_panel).\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nSee Also\n\n- nav_panel\n- nav_menu\n- nav_control\n- nav_spacer\n- navset_bar\n- navset_pill\n- navset_underline\n- navset_card_tab\n- navset_card_pill\n- navset_card_underline\n- navset_pill_list\n- navset_hidden\n\nExample\n\nSee nav_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.navset_tab(*args, id=None, selected=None, header=None, footer=None)",
      "ui.navset_tab(*args, id=None, selected=None, header=None, footer=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_tab(\n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"selected_navset_tab\",\n    ),\n    ui.h5(\"Selected:\"),\n    ui.output_code(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @render.code\n    def selected():\n        return input.selected_navset_tab()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_navset_pill_html",
    "url": "api/core/ui.navset_pill.html",
    "title": "ui.navset_pill ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.navset_pill\n\nui.navset_pill\n\nRender nav items as a pillset.\n\nParameters\n\nA collection of nav items (e.g., shiny.ui.nav_panel).\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nSee Also\n\n- nav_panel\n- nav_menu\n- nav_control\n- nav_spacer\n- navset_bar\n- navset_tab\n- navset_underline\n- navset_card_tab\n- navset_card_pill\n- navset_card_underline\n- navset_pill_list\n- navset_hidden\n\nExample\n\nSee nav_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.navset_pill(*args, id=None, selected=None, header=None, footer=None)",
      "ui.navset_pill(*args, id=None, selected=None, header=None, footer=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_pill(\n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"selected_navset_pill\",\n    ),\n    ui.h5(\"Selected:\"),\n    ui.output_code(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @render.code\n    def selected():\n        return input.selected_navset_pill()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_navset_underline_html",
    "url": "api/core/ui.navset_underline.html",
    "title": "ui.navset_underline ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.navset_underline\n\nui.navset_underline\n\nRender nav items whose active/focused navigation links are styled with an underline.\n\nParameters\n\nA collection of nav items (e.g., shiny.ui.nav_panel).\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nSee Also\n\n- nav_panel\n- nav_menu\n- nav_control\n- nav_spacer\n- navset_bar\n- navset_tab\n- navset_pill\n- navset_card_tab\n- navset_card_pill\n- navset_card_underline\n- navset_pill_list\n- navset_hidden\n\nExample\n\nSee nav_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.navset_underline(*args, id=None, selected=None, header=None, footer=None)",
      "ui.navset_underline(*args, id=None, selected=None, header=None, footer=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_underline(\n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"selected_navset_underline\",\n    ),\n    ui.h5(\"Selected:\"),\n    ui.output_code(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @render.code\n    def selected():\n        return input.selected_navset_underline()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_navset_card_tab_html",
    "url": "api/core/ui.navset_card_tab.html",
    "title": "ui.navset_card_tab ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.navset_card_tab\n\nui.navset_card_tab\n\nRender nav items as a tabset inside a card container.\n\nParameters\n\nA collection of nav items (e.g., shiny.ui.nav_panel).\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nA Sidebar component to display on every nav() page.\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nSee Also\n\n- nav_panel\n- nav_menu\n- nav_control\n- nav_spacer\n- navset_bar\n- navset_tab\n- navset_pill\n- navset_underline\n- navset_card_pill\n- navset_card_underline\n- navset_pill_list\n- navset_hidden\n\nExample\n\nSee nav_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.navset_card_tab(\n    *args,\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n)",
      "ui.navset_card_tab(\n    *args,\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_card_tab(\n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"selected_navset_card_tab\",\n    ),\n    ui.h5(\"Selected:\"),\n    ui.output_code(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @render.code\n    def selected():\n        return input.selected_navset_card_tab()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_navset_card_pill_html",
    "url": "api/core/ui.navset_card_pill.html",
    "title": "ui.navset_card_pill ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.navset_card_pill\n\nui.navset_card_pill\n\nRender nav items as a pillset inside a card container.\n\nParameters\n\nA collection of nav items (e.g., shiny.ui.nav_panel).\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nA shiny.ui.Sidebar component to display on every nav_panel page.\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nPlacement of the nav items relative to the content.\n\nSee Also\n\n- nav_panel\n- nav_menu\n- nav_control\n- nav_spacer\n- navset_bar\n- navset_tab\n- navset_pill\n- navset_underline\n- navset_card_tab\n- navset_card_underline\n- navset_pill_list\n- navset_hidden\n\nExample\n\nSee nav_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.navset_card_pill(\n    *args,\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n    placement='above',\n)",
      "ui.navset_card_pill(\n    *args,\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n    placement='above',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_card_pill(\n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"selected_navset_card_pill\",\n    ),\n    ui.h5(\"Selected:\"),\n    ui.output_code(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @render.code\n    def selected():\n        return input.selected_navset_card_pill()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_navset_card_underline_html",
    "url": "api/core/ui.navset_card_underline.html",
    "title": "ui.navset_card_underline ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.navset_card_underline\n\nui.navset_card_underline\n\nRender nav items inside a card container. Active/focused navigation links are styled with an underline.\n\nParameters\n\nA collection of nav items (e.g., shiny.ui.nav_panel).\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nA shiny.ui.Sidebar component to display on every nav_panel page.\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nPlacement of the nav items relative to the content.\n\nSee Also\n\n- nav_panel\n- nav_menu\n- nav_control\n- nav_spacer\n- navset_bar\n- navset_tab\n- navset_pill\n- navset_underline\n- navset_card_tab\n- navset_card_pill\n- navset_pill_list\n- navset_hidden\n\nExample\n\nSee nav_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.navset_card_underline(\n    *args,\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n    placement='above',\n)",
      "ui.navset_card_underline(\n    *args,\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n    placement='above',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_card_underline(\n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"selected_navset_card_underline\",\n    ),\n    ui.h5(\"Selected:\"),\n    ui.output_code(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @render.code\n    def selected():\n        return input.selected_navset_card_underline()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_navset_pill_list_html",
    "url": "api/core/ui.navset_pill_list.html",
    "title": "ui.navset_pill_list ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.navset_pill_list\n\nui.navset_pill_list\n\nRender nav items as a vertical pillset.\n\nParameters\n\nA collection of nav items (e.g., shiny.ui.nav_panel).\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match its value).\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nTrue to place a well (gray rounded rectangle) around the navigation list.\n\nColumn widths of the navigation list and tabset content areas respectively.\n\nSee Also\n\n- nav_panel\n- nav_menu\n- nav_control\n- nav_spacer\n- navset_bar\n- navset_tab\n- navset_pill\n- navset_underline\n- navset_card_tab\n- navset_card_pill\n- navset_card_underline\n- navset_hidden\n\nExample\n\nSee nav_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.navset_pill_list(\n    *args,\n    id=None,\n    selected=None,\n    header=None,\n    footer=None,\n    well=True,\n    widths=(4, 8),\n)",
      "ui.navset_pill_list(\n    *args,\n    id=None,\n    selected=None,\n    header=None,\n    footer=None,\n    well=True,\n    widths=(4, 8),\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_pill_list(\n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"selected_navset_pill_list\",\n    ),\n    ui.h5(\"Selected:\"),\n    ui.output_code(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @render.code\n    def selected():\n        return input.selected_navset_pill_list()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_navset_hidden_html",
    "url": "api/core/ui.navset_hidden.html",
    "title": "ui.navset_hidden ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.navset_hidden\n\nui.navset_hidden\n\nRender nav contents without the nav items.\n\nParameters\n\nA collection of nav items (e.g., shiny.ui.nav_panel).\n\nIf provided, will create an input value that holds the currently selected nav item.\n\nChoose a particular nav item to select by default value (should match it‚Äôs value).\n\nUI to display above the selected content.\n\nUI to display below the selected content.\n\nSee Also\n\n- nav_panel\n- nav_menu\n- nav_control\n- nav_spacer\n- navset_bar\n- navset_tab\n- navset_pill\n- navset_underline\n- navset_card_tab\n- navset_card_pill\n- navset_card_underline\n- navset_pill_list\n\nExamples\n\n",
    "code_examples": [
      "ui.navset_hidden(*args, id=None, selected=None, header=None, footer=None)",
      "ui.navset_hidden(*args, id=None, selected=None, header=None, footer=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_radio_buttons(\n            \"controller\", \"Controller\", [\"1\", \"2\", \"3\"], selected=\"1\"\n        )\n    ),\n    ui.navset_hidden(\n        ui.nav_panel(None, \"Panel 1 content\", value=\"panel1\"),\n        ui.nav_panel(None, \"Panel 2 content\", value=\"panel2\"),\n        ui.nav_panel(None, \"Panel 3 content\", value=\"panel3\"),\n        id=\"hidden_tabs\",\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.controller)\n    def _():\n        ui.update_navs(\"hidden_tabs\", selected=\"panel\" + str(input.controller()))\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_navbar_options_html",
    "url": "api/core/ui.navbar_options.html",
    "title": "ui.navbar_options ‚Äì Shiny for Python",
    "description": "",
    "content": "- Navigation (tab) panels\n- ui.navbar_options\n\nui.navbar_options\n\nConfigure the appearance and behavior of the navbar.\n\nNavbar style with Bootstrap 5 and Bootswatch themes\n\nIn Shiny v1.3.0, the default navbar colors for Bootswatch themes are less opinionated by default and follow light or dark mode (see input_dark_mode).\n\nYou can use ui.navbar_options() to adjust the colors of the navbar when using a Bootswatch preset theme with Bootstrap 5. For example, the Bootswatch documentation for the Flatly theme shows 4 navbar variations. Inspecting the source code for the first example reveals the following markup:\n\nNote that this navbar uses the bg-primary class for a dark navy background. The navbar's white text is controlled by the data-bs-theme=\"dark\" attribute, which is used by Bootstrap for light text on a dark background. In Shiny, you can achieve this look with:\n\nThis particular combination of class=\"bg-primary\" and theme=\"dark\" works well for most Bootswatch presets. Note that in Shiny Express, theme and navbar_options both are set using page_opts.\n\nAnother variation from the Flatly documentation features a navbar with dark text on a light background:\n\nThe above options set navbar foreground and background colors that are always the same in both light and dark modes. To customize the navbar colors used in light or dark mode, you can use the $navbar-light-bg and $navbar-dark-bg Sass variables. When provided, Shiny will automatically choose to use light or dark text as the foreground color.\n\nFinally, you can also use the $navbar-bg Sass variable to set the navbar background color for both light and dark modes:\n\nParameters\n\nDetermines whether the navbar should be displayed at the top of the page with normal scrolling behavior (\"static-top\"), pinned at the top (\"fixed-top\"), or pinned at the bottom (\"fixed-bottom\"). Note that using \"fixed-top\" or \"fixed-bottom\" will cause the navbar to overlay your body content, unless you add padding (e.g., tags.style(\"body {padding-top: 70px;}\"))\n\nBackground color of the navbar (a CSS color).\n\nThe navbar theme: either \"dark\" for a light text color (on a dark background) or \"light\" for a dark text color (on a light background). If \"auto\" (the default) and bg is provided, the best contrast to bg is chosen.\n\nIf True, adds an underline effect to the navbar.\n\nIf True, automatically collapses the elements into an expandable menu on mobile devices or narrow window widths.\n\nAdditional HTML attributes to apply to the navbar container element.\n\nReturns:\n\nNavbarOptions A NavbarOptions object configured with the specified options.\n\nExamples\n\n",
    "code_examples": [
      "ui.navbar_options(\n    position=MISSING,\n    bg=MISSING,\n    theme=MISSING,\n    underline=MISSING,\n    collapsible=MISSING,\n    **attrs,\n)",
      "ui.navbar_options(\n    position=MISSING,\n    bg=MISSING,\n    theme=MISSING,\n    underline=MISSING,\n    collapsible=MISSING,\n    **attrs,\n)",
      "<nav class=\"navbar navbar-expand-lg bg-primary\" data-bs-theme=\"dark\">\n  <!-- all of the navbar html -->\n</nav>",
      "<nav class=\"navbar navbar-expand-lg bg-primary\" data-bs-theme=\"dark\">\n  <!-- all of the navbar html -->\n</nav>",
      "ui.page_navbar(\n  theme=ui.Theme(version=5, preset=\"flatly\"),\n  navbar_options=ui.navbar_options(class=\"bg-primary\", theme=\"dark\")\n)",
      "ui.page_navbar(\n  theme=ui.Theme(version=5, preset=\"flatly\"),\n  navbar_options=ui.navbar_options(class=\"bg-primary\", theme=\"dark\")\n)",
      "ui.page_navbar(\n  theme = ui.Theme(version=5, preset=\"flatly\"),\n  navbar_options = ui.navbar_options(class=\"bg-light\", theme=\"light\")\n)",
      "ui.page_navbar(\n  theme = ui.Theme(version=5, preset=\"flatly\"),\n  navbar_options = ui.navbar_options(class=\"bg-light\", theme=\"light\")\n)",
      "ui.page_navbar(\n    theme=(\n        ui.Theme(version=5, preset = \"flatly\")\n        .add_defaults(\n            navbar_light_bg=\"#18BC9C\", # flatly's success color (teal)\n            navbar_dark_bg=\"#2C3E50\"   # flatly's primary color (navy)\n        )\n    )\n  )\n)",
      "ui.page_navbar(\n    theme=(\n        ui.Theme(version=5, preset = \"flatly\")\n        .add_defaults(\n            navbar_light_bg=\"#18BC9C\", # flatly's success color (teal)\n            navbar_dark_bg=\"#2C3E50\"   # flatly's primary color (navy)\n        )\n    )\n  )\n)",
      "ui.page_navbar(\n    theme=ui.Theme(version=5, preset=\"flatly\").add_defaults(navbar_bg=\"#E74C3C\") # flatly's red\n)",
      "ui.page_navbar(\n    theme=ui.Theme(version=5, preset=\"flatly\").add_defaults(navbar_bg=\"#E74C3C\") # flatly's red\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_bar(\n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"selected_navset_bar\",\n        title=\"Navset Bar\",\n        navbar_options=ui.navbar_options(\n            bg=\"#B73A85\",\n            theme=\"dark\",\n            underline=False,\n        ),\n    ),\n    ui.h5(\"Selected:\"),\n    ui.output_code(\"selected\"),\n)\n\n\ndef server(input, output, session):\n    @render.code\n    def selected():\n        return input.selected_navset_bar()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_panel_absolute_html",
    "url": "api/core/ui.panel_absolute.html",
    "title": "ui.panel_absolute ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI panels\n- ui.panel_absolute\n\nui.panel_absolute\n\nCreate a panel of absolutely positioned content.\n\nCreates a <div> tag whose CSS position is set to absolute (or fixed if fixed = True). In HTML, absolute coordinates are specified relative to an element's nearest parent element whose position is not set to static (the default). If no such parent is found, the coordinates are relative to the page borders. If you're not sure what that means, just keep in mind that you may get strange results if you use this function from inside of certain types of panels.\n\nParameters\n\nUI elements to include inside the panel.\n\nDistance between the top of the panel and the top of the page or parent container.\n\nDistance between the left side of the panel and the left of the page or parent container.\n\nDistance between the right side of the panel and the right of the page or parent container.\n\nDistance between the bottom of the panel and the bottom of the page or parent container.\n\nWidth of the panel.\n\nHeight of the panel.\n\nIf True, allows the user to move the panel by clicking and dragging.\n\nPositions the panel relative to the browser window and prevents it from being scrolled with the rest of the page.\n\nThe type of cursor that should appear when the user mouses over the panel. Use \"move\" for a north-east-south-west icon, \"default\" for the usual cursor arrow, or \"inherit\" for the usual cursor behavior (including changing to an I-beam when the cursor is over text). The default is \"auto\", which is equivalent to \"move\" if draggable else \"inherit\".\n\nAttributes added to the content‚Äôs container tag.\n\nReturns\n\nA UI element\n\nTip\n\nThe position (top, left, right, bottom) and size (width, height) parameters are all optional, but you should specify exactly two of top, bottom, and height and exactly two of left, right, and width for predictable results.\n\nLike most other distance parameters in Shiny, the position and size parameters take a number (interpreted as pixels) or a valid CSS size string, such as \"100px\" (100 pixels) or \"25%\".\n\nFor arcane HTML reasons, to have the panel fill the page or parent, specify 0 for top, left, right, and bottom rather than the more obvious width = \"100%\" and height = \"100%\".\n\nExamples\n\n",
    "code_examples": [
      "ui.panel_absolute(\n    *args,\n    top=None,\n    left=None,\n    right=None,\n    bottom=None,\n    width=None,\n    height=None,\n    draggable=False,\n    fixed=False,\n    cursor='auto',\n    **kwargs,\n)",
      "ui.panel_absolute(\n    *args,\n    top=None,\n    left=None,\n    right=None,\n    bottom=None,\n    width=None,\n    height=None,\n    draggable=False,\n    fixed=False,\n    cursor='auto',\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"A basic absolute panel example\", \"Demo\"),\n    ui.panel_absolute(\n        ui.panel_well(\n            \"Drag me around!\", ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)\n        ),\n        draggable=True,\n        width=\"300px\",\n        right=\"50px\",\n        top=\"25%\",\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_panel_fixed_html",
    "url": "api/core/ui.panel_fixed.html",
    "title": "ui.panel_fixed ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI panels\n- ui.panel_fixed\n\nui.panel_fixed\n\nCreate a panel of absolutely positioned content.\n\nThis function is equivalent to calling panel_absolute with fixed=True (i.e., the panel does not scroll with the rest of the page). See panel_absolute for more information.\n\nParameters\n\nUI elements to include inside the panel.\n\nArguments passed along to panel_absolute.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- panel_absolute\n\n",
    "code_examples": [
      "ui.panel_fixed(\n    *args,\n    top=None,\n    left=None,\n    right=None,\n    bottom=None,\n    width=None,\n    height=None,\n    draggable=False,\n    cursor='auto',\n    **kwargs,\n)",
      "ui.panel_fixed(\n    *args,\n    top=None,\n    left=None,\n    right=None,\n    bottom=None,\n    width=None,\n    height=None,\n    draggable=False,\n    cursor='auto',\n    **kwargs,\n)"
    ]
  },
  {
    "id": "api_core_ui_panel_conditional_html",
    "url": "api/core/ui.panel_conditional.html",
    "title": "ui.panel_conditional ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI panels\n- ui.panel_conditional\n\nui.panel_conditional\n\nCreate a conditional panel.\n\nShow UI elements only if a JavaScript condition is true.\n\nParameters\n\nA JavaScript expression that will be evaluated repeatedly to determine whether the panel should be displayed.\n\nUI elements to include inside the panel.\n\nAttributes to place on the panel tag.\n\nReturns\n\nA UI element.\n\nNote\n\nIn the JS expression, you can refer to input and output JavaScript objects that contain the current values of input and output. For example, if you have an input with an id of foo, then you can use input.foo to read its value. (Be sure not to modify the input/output objects, as this may cause unpredictable behavior.)\n\nYou are not recommended to use special JavaScript characters such as a period . in the input id‚Äôs, but if you do use them anyway, for example, id = \"foo.bar\", you will have to use input[\"foo.bar\"] instead of input.foo.bar to read the input value.\n\nTip\n\nA more powerful (but slower) way to conditionally show UI content is to use ui.\n\nSee Also\n\n- ui\n- output_ui\n\nExamples\n\n",
    "code_examples": [
      "ui.panel_conditional(condition, *args, **kwargs)",
      "ui.panel_conditional(condition, *args, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"show\", \"Show radio buttons\", False),\n    ui.panel_conditional(\n        \"input.show\", ui.input_radio_buttons(\"radio\", \"Choose \", [\"slider\", \"select\"])\n    ),\n    ui.panel_conditional(\n        \"input.show && input.radio === 'slider'\",\n        ui.input_slider(\"slider\", None, min=0, max=100, value=50),\n    ),\n    ui.panel_conditional(\n        \"input.show && input.radio === 'select'\",\n        ui.input_select(\"select\", None, [\"A\", \"B\", \"C\"]),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_panel_title_html",
    "url": "api/core/ui.panel_title.html",
    "title": "ui.panel_title ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI panels\n- ui.panel_title\n\nui.panel_title\n\nCreate title(s) for the application.\n\nParameters\n\nA title to display in the app‚Äôs UI.\n\nA title to display on the browser tab.\n\nReturns\n\nA UI element.\n\nNote\n\nThis result of this function causes a side effect of adding a title tag to the head of the document (this is necessary for the browser to display the title in the browser window). You can also specify a page title explicitly using the title parameter of the top-level page function (e.g., page_fluid).\n\nExamples\n\n",
    "code_examples": [
      "ui.panel_title(title, window_title=MISSING)",
      "ui.panel_title(title, window_title=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(ui.panel_title(\"Page title\", \"Window title\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_panel_well_html",
    "url": "api/core/ui.panel_well.html",
    "title": "ui.panel_well ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI panels\n- ui.panel_well\n\nui.panel_well\n\nCreate a well panel.\n\nCreates a panel with a slightly inset border and gray background. Equivalent to Bootstrap's well CSS class.\n\nParameters\n\nUI elements to include inside the panel.\n\nAttributes to place on the panel tag.\n\nReturns\n\nA UI element.\n\n",
    "code_examples": [
      "ui.panel_well(*args, **kwargs)",
      "ui.panel_well(*args, **kwargs)"
    ]
  },
  {
    "id": "api_core_ui_input_file_html",
    "url": "api/core/ui.input_file.html",
    "title": "ui.input_file ‚Äì Shiny for Python",
    "description": "",
    "content": "- Uploads & downloads\n- ui.input_file\n\nui.input_file\n\nCreate a file upload control that can be used to upload one or more files.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nWhether the user should be allowed to select and upload multiple files at once.\n\nUnique file type specifier(s) which give the browser a hint as to the type of file the server expects. Many browsers use this to prevent the user from selecting an invalid file. Examples of valid values include a case insensitive extension (e.g. .csv or .rds), a valid MIME type (e.g. text/plain or application/pdf) or one of audio/*, video/*, or image/* meaning any audio, video, or image type, respectively.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nThe label used on the button.\n\nThe text to show on the input before a file has been uploaded.\n\nOn mobile devices, this can be used to open the device‚Äôs camera for input. If ‚Äúenvironment‚Äù, it will open the rear-facing camera. If ‚Äúuser‚Äù, it will open the front-facing camera. By default, it will accept either still photos or video. To accept only still photos, use accept=\"image/*\"; to accept only video, use accept=\"video/*\".\n\nReturns\n\nA UI element.\n\nNotes\n\nA list of dictionaries (one for each file upload) with the following keys:\n\n- name: The filename provided by the web browser. This is not the path to read to get at the actual data that was uploaded (see ‚Äòdatapath‚Äô).\n- size: The size of the uploaded data, in bytes.\n- type: The MIME type reported by the browser (for example, ‚Äòtext/plain‚Äô), or empty string if the browser didn‚Äôt know.\n- datapath: The path to a temp file that contains the data that was uploaded. This file may be deleted if the user performs another upload operation.\n\nSee Also\n\n- download_button\n\nExamples\n\n",
    "code_examples": [
      "ui.input_file(\n    id,\n    label,\n    *,\n    multiple=False,\n    accept=None,\n    width=None,\n    button_label='Browse...',\n    placeholder='No file selected',\n    capture=None,\n)",
      "ui.input_file(\n    id,\n    label,\n    *,\n    multiple=False,\n    accept=None,\n    width=None,\n    button_label='Browse...',\n    placeholder='No file selected',\n    capture=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"file1\", \"Choose CSV File\", accept=[\".csv\"], multiple=False),\n    ui.input_checkbox_group(\n        \"stats\",\n        \"Summary Stats\",\n        choices=[\"Row Count\", \"Column Count\", \"Column Names\"],\n        selected=[\"Row Count\", \"Column Count\", \"Column Names\"],\n    ),\n    ui.output_table(\"summary\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.calc\n    def parsed_file():\n        file: list[FileInfo] | None = input.file1()\n        if file is None:\n            return pd.DataFrame()\n        return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]\n            file[0][\"datapath\"]\n        )\n\n    @render.table\n    def summary():\n        df = parsed_file()\n\n        if df.empty:\n            return pd.DataFrame()\n\n        # Get the row count, column count, and column names of the DataFrame\n        row_count = df.shape[0]\n        column_count = df.shape[1]\n        names = df.columns.tolist()\n        column_names = \", \".join(str(name) for name in names)\n\n        # Create a new DataFrame to display the information\n        info_df = pd.DataFrame(\n            {\n                \"Row Count\": [row_count],\n                \"Column Count\": [column_count],\n                \"Column Names\": [column_names],\n            }\n        )\n\n        # input.stats() is a list of strings; subset the columns based on the selected\n        # checkboxes\n        return info_df.loc[:, input.stats()]\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_download_button_html",
    "url": "api/core/ui.download_button.html",
    "title": "ui.download_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- Uploads & downloads\n- ui.download_button\n\nui.download_button\n\nCreate a download button\n\nParameters\n\nAn id for the download.\n\nAn input label.\n\nAn icon to display on the button.\n\nThe width of the button.\n\nAdditional attributes for the button.\n\nReturns\n\nA UI element\n\nSee Also\n\n- download\n- download_link\n\nExamples\n\n",
    "code_examples": [
      "ui.download_button(id, label, *, icon=None, width=None, **kwargs)",
      "ui.download_button(id, label, *, icon=None, width=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nimport random\nfrom datetime import date\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.download_button(\"downloadData\", \"Download\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.download(\n        filename=lambda: f\"Êñ∞Âûã-{date.today().isoformat()}-{random.randint(100, 999)}.csv\"\n    )\n    async def downloadData():\n        await asyncio.sleep(0.25)\n        yield \"one,two,three\\n\"\n        yield \"Êñ∞,1,2\\n\"\n        yield \"Âûã,4,5\\n\"\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n"
    ]
  },
  {
    "id": "api_core_ui_download_link_html",
    "url": "api/core/ui.download_link.html",
    "title": "ui.download_link ‚Äì Shiny for Python",
    "description": "",
    "content": "- Uploads & downloads\n- ui.download_link\n\nui.download_link\n\nCreate a download button.\n\nParameters\n\nAn id for the download.\n\nAn input label.\n\nAn icon to display on the button.\n\nThe width of the button.\n\nAdditional attributes for the button.\n\nReturns\n\nA UI element\n\nSee Also\n\n- download\n- download_button\n\nExamples\n\n",
    "code_examples": [
      "ui.download_link(id, label, *, icon=None, width=None, **kwargs)",
      "ui.download_link(id, label, *, icon=None, width=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nimport random\nfrom datetime import date\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.download_link(\"downloadData\", \"Download\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.download(\n        filename=lambda: f\"Êñ∞Âûã-{date.today().isoformat()}-{random.randint(100, 999)}.csv\"\n    )\n    async def downloadData():\n        await asyncio.sleep(0.25)\n        yield \"one,two,three\\n\"\n        yield \"Êñ∞,1,2\\n\"\n        yield \"Âûã,4,5\\n\"\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n"
    ]
  },
  {
    "id": "api_core_ui_Chat_html",
    "url": "api/core/ui.Chat.html",
    "title": "ui.chat ‚Äì Shiny for Python",
    "description": "",
    "content": "- Chat interface\n- ui.Chat\n\nui.Chat\n\nCreate a chat interface.\n\nA UI component for building conversational interfaces. With it, end users can submit messages, which will cause a .on_user_submit() callback to run. That callback gets passed the user input message, which can be used to generate a response. The response can then be appended to the chat using .append_message() or .append_message_stream().\n\nHere's a rough outline for how to implement a Chat:\n\nIn the outline above, my_model.generate_response() is a placeholder for the function that generates a response based on the chat's messages. This function will look different depending on the model you're using, but it will generally involve passing the messages to the model and getting a response back. Also, you'll typically have a choice to stream=True the response generation, and in that case, you'll use .append_message_stream() instead of .append_message() to append the response to the chat. Streaming is preferrable when available since it allows for more responsive and scalable chat interfaces.\n\nIt is also highly recommended to use a package like chatlas to generate responses, especially when responses should be aware of the chat history, support tool calls, etc. See this article to learn more.\n\nParameters\n\nA unique identifier for the chat session. In Shiny Core, make sure this id matches a corresponding chat_ui call in the UI.\n\nA sequence of messages to display in the chat. Each message can be either a string or a dictionary with content and role keys. The content key should contain a string, and the role key can be ‚Äúassistant‚Äù or ‚Äúuser‚Äù. Content strings are interpreted as markdown and rendered to HTML on the client. Content may also include specially formatted input suggestion links (see .append_message_stream() for more information).\n\nHow to handle errors that occur in response to user input. When \"unhandled\", the app will stop running when an error occurs. Otherwise, a notification is displayed to the user and the app continues to run. * \"auto\": Sanitize the error message if the app is set to sanitize errors, otherwise display the actual error message. * \"actual\": Display the actual error message to the user. * \"sanitize\": Sanitize the error message before displaying it to the user. * \"unhandled\": Do not display any error message to the user.\n\nThe tokenizer to use for calculating token counts, which is required to impose token_limits in .messages(). If not provided, a default generic tokenizer is attempted to be loaded from the tokenizers library. A specific tokenizer may also be provided by following the TokenEncoding (tiktoken or tozenizers) protocol (e.g., tiktoken.encoding_for_model(\"gpt-4o\")).\n\nExamples\n\nAttributes\n\nMethods\n\nappend_message\n\nAppend a message to the chat.\n\nParameters\n\nThe message to append. A variety of message formats are supported including a string, a dictionary with content and role keys, or a relevant chat completion object from platforms like OpenAI, Anthropic, Ollama, and others. Content strings are interpreted as markdown and rendered to HTML on the client. Content may also include specially formatted input suggestion links (see note below).\n\nAn optional icon to display next to the message, currently only used for assistant messages. The icon can be any HTML element (e.g., an img tag) or a string of HTML.\n\nNote\n\nInput suggestions are special links that send text to the user input box when clicked (or accessed via keyboard). They can be created in the following ways:\n\n- <span class='suggestion'>Suggestion text</span>: An inline text link that places ‚ÄòSuggestion text‚Äô in the user input box when clicked.\n- <img data-suggestion='Suggestion text' src='image.jpg'>: An image link with the same functionality as above.\n- <span data-suggestion='Suggestion text'>Actual text</span>: An inline text link that places ‚ÄòSuggestion text‚Äô in the user input box when clicked.\n\nA suggestion can also be submitted automatically by doing one of the following:\n\n- Adding a submit CSS class or a data-suggestion-submit=\"true\" attribute to the suggestion element.\n- Holding the Ctrl/Cmd key while clicking the suggestion link.\n\nNote that a user may also opt-out of submitting a suggestion by holding the Alt/Option key while clicking the suggestion link.\n\nUse .append_message_stream() instead of this method when stream=True (or similar) is specified in model‚Äôs completion method.\n\nappend_message_stream\n\nAppend a message as a stream of message chunks.\n\nParameters\n\nAn (async) iterable of message chunks to append. A variety of message chunk formats are supported, including a string, a dictionary with content and role keys, or a relevant chat completion object from platforms like OpenAI, Anthropic, Ollama, and others. Content strings are interpreted as markdown and rendered to HTML on the client. Content may also include specially formatted input suggestion links (see note below).\n\nAn optional icon to display next to the message, currently only used for assistant messages. The icon can be any HTML element (e.g., an img tag) or a string of HTML.\n\nNote\n\nReturns\n\nAn extended task that represents the streaming task. The .result() method of the task can be called in a reactive context to get the final state of the stream.\n\nclear_messages\n\nClear all chat messages.\n\ndestroy\n\nDestroy the chat instance.\n\nmessages\n\nReactively read chat messages\n\nObtain chat messages within a reactive context. The default behavior is intended for passing messages along to a model for response generation where you typically want to:\n\n- Cap the number of tokens sent in a single request (i.e., token_limits).\n- Apply user input transformations (i.e., transform_user), if any.\n- Not apply assistant response transformations (i.e., transform_assistant) since these are predominantly for display purposes (i.e., the model shouldn't concern itself with how the responses are displayed).\n\nParameters\n\nThe message format to return. The default value of MISSING means chat messages are returned as ChatMessage objects (a dictionary with content and role keys). Other supported formats include: * \"anthropic\": Anthropic message format. * \"google\": Google message (aka content) format. * \"langchain\": LangChain message format. * \"openai\": OpenAI message format. * \"ollama\": Ollama message format.\n\nLimit the conversation history based on token limits. If specified, only the most recent messages that fit within the token limits are returned. This is useful for avoiding ‚Äúexceeded token limit‚Äù errors when sending messages to the relevant model, while still providing the most recent context available. A specified value must be a tuple of two integers. The first integer is the maximum number of tokens that can be sent to the model in a single request. The second integer is the amount of tokens to reserve for the model‚Äôs response. Note that token counts based on the tokenizer provided to the Chat constructor.\n\nWhether to return user input messages with transformation applied. This only matters if a transform_user_input was provided to the chat constructor. The default value of \"all\" means all user input messages are transformed. The value of \"last\" means only the last user input message is transformed. The value of \"none\" means no user input messages are transformed.\n\nWhether to return assistant messages with transformation applied. This only matters if an transform_assistant_response was provided to the chat constructor.\n\nNote\n\nMessages are listed in the order they were added. As a result, when this method is called in a .on_user_submit() callback (as it most often is), the last message will be the most recent one submitted by the user.\n\nReturns\n\nA tuple of chat messages.\n\non_user_submit\n\nDefine a function to invoke when user input is submitted.\n\nApply this method as a decorator to a function (fn) that should be invoked when the user submits a message. This function can take an optional argument, which will be the user input message.\n\nIn many cases, the implementation of fn should also do the following:\n\n- Generate a response based on the user input.\n\n- If the response should be aware of chat history, use a package like chatlas to manage the chat state, or use the .messages() method to get the chat history.\n\n- Append that response to the chat component using .append_message() ( or .append_message_stream() if the response is streamed).\n\nParameters\n\nA function to invoke when user input is submitted.\n\nNote\n\nThis method creates a reactive effect that only gets invalidated when the user submits a message. Thus, the function fn can read other reactive dependencies, but it will only be re-invoked when the user submits a message.\n\nset_user_message\n\nDeprecated. Use update_user_input(value=value) instead.\n\ntransform_assistant_response\n\nTransform assistant responses.\n\nUse this method as a decorator on a function (fn) that transforms assistant responses before displaying them in the chat. This is useful for post-processing model responses before displaying them to the user.\n\nParameters\n\nA function that takes a string and returns either a string, shiny.ui.HTML, or None. If fn returns a string, it gets interpreted and parsed as a markdown on the client (and the resulting HTML is then sanitized). If fn returns shiny.ui.HTML, it will be displayed as-is. If fn returns None, the response is effectively ignored.\n\nNote\n\nWhen doing an .append_message_stream(), fn gets called on every chunk of the response (thus, it should be performant), and can optionally access more information (i.e., arguments) about the stream. The 1st argument (required) contains the accumulated content, the 2nd argument (optional) contains the current chunk, and the 3rd argument (optional) is a boolean indicating whether this chunk is the last one in the stream.\n\ntransform_user_input\n\nTransform user input.\n\nUse this method as a decorator on a function (fn) that transforms user input before storing it in the chat messages returned by .messages(). This is useful for implementing RAG workflows, like taking a URL and scraping it for text before sending it to the model.\n\nParameters\n\nA function to transform user input before storing it in the chat .messages(). If fn returns None, the user input is effectively ignored, and .on_user_submit() callbacks are suspended until more input is submitted. This behavior is often useful to catch and handle errors that occur during transformation. In this case, the transform function should append an error message to the chat (via .append_message()) to inform the user of the error.\n\nupdate_user_input\n\nUpdate the user input.\n\nParameters\n\nThe value to set the user input to.\n\nThe placeholder text for the user input.\n\nWhether to automatically submit the text for the user. Requires value.\n\nWhether to move focus to the input element. Requires value.\n\nuser_input\n\nReactively read the user's message.\n\nParameters\n\nWhether to apply the user input transformation function (if one was provided).\n\nReturns\n\nThe user input message (before any transformation).\n\nNote\n\nMost users shouldn‚Äôt need to use this method directly since the last item in .messages() contains the most recent user input. It can be useful for:\n\n- Taking a reactive dependency on the user‚Äôs input outside of a .on_user_submit() callback.\n- Maintaining message state separately from .messages().\n\n",
    "code_examples": [
      "ui.Chat(self, id, *, messages=(), on_error='auto', tokenizer=None)",
      "ui.Chat(self, id, *, messages=(), on_error='auto', tokenizer=None)",
      "from shiny.express import ui\n\n# Create and display chat instance\nchat = ui.Chat(id=\"my_chat\")\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Create a response message stream\n    response = await my_model.generate_response(user_input, stream=True)\n    # Append the response into the chat\n    await chat.append_message_stream(response)",
      "from shiny.express import ui\n\n# Create and display chat instance\nchat = ui.Chat(id=\"my_chat\")\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Create a response message stream\n    response = await my_model.generate_response(user_input, stream=True)\n    # Append the response into the chat\n    await chat.append_message_stream(response)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.panel_title(\"Hello Shiny Chat\"),\n    ui.chat_ui(\"chat\"),\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = \"\"\"\nHi! This is a simple Shiny `Chat` UI. Enter a message below and I will\nsimply repeat it back to you. For more examples, see this\n[folder of examples](https://github.com/posit-dev/py-shiny/tree/main/shiny/templates/chat).\n\"\"\"\n\n\ndef server(input, output, session):\n    chat = ui.Chat(id=\"chat\", messages=[welcome])\n\n    # Define a callback to run when the user submits a message\n    @chat.on_user_submit\n    async def handle_user_input(user_input: str):\n        # Append a response to the chat\n        await chat.append_message(f\"You said: {user_input}\")\n\n\napp = App(app_ui, server)\n\n\n## file: _template.json\n{\n  \"type\": \"app\",\n  \"id\": \"chat-hello\",\n  \"title\": \"Hello Shiny Chat\",\n  \"next_steps\": [\n    \"Run the app with `shiny run app.py`.\"\n  ]\n}\n\n\n## file: requirements.txt\nshiny\n\n",
      "ui.Chat.append_message(message, *, icon=None)",
      "ui.Chat.append_message(message, *, icon=None)",
      "ui.Chat.append_message_stream(message, *, icon=None)",
      "ui.Chat.append_message_stream(message, *, icon=None)",
      "ui.Chat.clear_messages()",
      "ui.Chat.clear_messages()",
      "ui.Chat.destroy()",
      "ui.Chat.destroy()",
      "ui.Chat.messages(\n    format=MISSING,\n    token_limits=None,\n    transform_user='all',\n    transform_assistant=False,\n)",
      "ui.Chat.messages(\n    format=MISSING,\n    token_limits=None,\n    transform_user='all',\n    transform_assistant=False,\n)",
      "ui.Chat.on_user_submit(fn=None)",
      "ui.Chat.on_user_submit(fn=None)",
      "ui.Chat.set_user_message(value)",
      "ui.Chat.set_user_message(value)",
      "ui.Chat.transform_assistant_response(fn=None)",
      "ui.Chat.transform_assistant_response(fn=None)",
      "ui.Chat.transform_user_input(fn=None)",
      "ui.Chat.transform_user_input(fn=None)",
      "ui.Chat.update_user_input(\n    value=None,\n    placeholder=None,\n    submit=False,\n    focus=False,\n)",
      "ui.Chat.update_user_input(\n    value=None,\n    placeholder=None,\n    submit=False,\n    focus=False,\n)",
      "ui.Chat.user_input(transform=False)",
      "ui.Chat.user_input(transform=False)"
    ]
  },
  {
    "id": "api_core_ui_chat_ui_html",
    "url": "api/core/ui.chat_ui.html",
    "title": "ui.chat_ui ‚Äì Shiny for Python",
    "description": "",
    "content": "- Chat interface\n- ui.chat_ui\n\nui.chat_ui\n\nUI container for a chat component (Shiny Core).\n\nThis function is for locating a Chat instance in a Shiny Core app. If you are using Shiny Express, use the ui method instead.\n\nParameters\n\nA unique identifier for the chat UI.\n\nA sequence of messages to display in the chat. Each message can be either a string or a dictionary with content and role keys. The content key should contain a string, and the role key can be ‚Äúassistant‚Äù or ‚Äúuser‚Äù. Content strings are interpreted as markdown and rendered to HTML on the client. Content may also include specially formatted input suggestion links (see append_message_stream for more information).\n\nPlaceholder text for the chat input.\n\nThe width of the chat container.\n\nThe height of the chat container.\n\nWhether the chat should vertically take available space inside a fillable container.\n\nThe icon to use for the assistant chat messages. Can be a HTML or a tag in the form of HTML or Tag. If None, a default robot icon is used.\n\nAdditional attributes for the chat container element.\n\nExamples\n\n",
    "code_examples": [
      "ui.chat_ui(\n    id,\n    *,\n    messages=None,\n    placeholder='Enter a message...',\n    width='min(680px, 100%)',\n    height='auto',\n    fill=True,\n    icon_assistant=None,\n    **kwargs,\n)",
      "ui.chat_ui(\n    id,\n    *,\n    messages=None,\n    placeholder='Enter a message...',\n    width='min(680px, 100%)',\n    height='auto',\n    fill=True,\n    icon_assistant=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.panel_title(\"Hello Shiny Chat\"),\n    ui.chat_ui(\"chat\"),\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = \"\"\"\nHi! This is a simple Shiny `Chat` UI. Enter a message below and I will\nsimply repeat it back to you. For more examples, see this\n[folder of examples](https://github.com/posit-dev/py-shiny/tree/main/shiny/templates/chat).\n\"\"\"\n\n\ndef server(input, output, session):\n    chat = ui.Chat(id=\"chat\", messages=[welcome])\n\n    # Define a callback to run when the user submits a message\n    @chat.on_user_submit\n    async def handle_user_input(user_input: str):\n        # Append a response to the chat\n        await chat.append_message(f\"You said: {user_input}\")\n\n\napp = App(app_ui, server)\n\n\n## file: _template.json\n{\n  \"type\": \"app\",\n  \"id\": \"chat-hello\",\n  \"title\": \"Hello Shiny Chat\",\n  \"next_steps\": [\n    \"Run the app with `shiny run app.py`.\"\n  ]\n}\n\n\n## file: requirements.txt\nshiny\n\n"
    ]
  },
  {
    "id": "api_core_ui_MarkdownStream_html",
    "url": "api/core/ui.MarkdownStream.html",
    "title": "ui.markdownstream ‚Äì Shiny for Python",
    "description": "",
    "content": "- Streaming markdown\n- ui.MarkdownStream\n\nui.MarkdownStream\n\nA component for streaming markdown or HTML content.\n\nParameters\n\nA unique identifier for this MarkdownStream. In Shiny Core, make sure this id matches a corresponding output_markdown_stream call in the app‚Äôs UI.\n\nHow to handle errors that occur while streaming. When \"unhandled\", the app will stop running when an error occurs. Otherwise, a notification is displayed to the user and the app continues to run. * \"auto\": Sanitize the error message if the app is set to sanitize errors, otherwise display the actual error message. * \"actual\": Display the actual error message to the user. * \"sanitize\": Sanitize the error message before displaying it to the user. * \"unhandled\": Do not display any error message to the user.\n\nNote\n\nMarkdown is parsed on the client via marked.js. Consider using markdown for server-side rendering of markdown content.\n\nExamples\n\nMethods\n\nclear\n\nEmpty the UI element of the MarkdownStream.\n\nget_latest_stream_result\n\nReactively read the latest stream result.\n\nThis method reads a reactive value containing the result of the latest .stream(). Therefore, this method must be called in a reactive context (e.g., a render function, a calc, or a effect).\n\nReturns\n\nThe result of the latest stream (a string).\n\nRaises\n\nA silent exception if no stream has completed yet.\n\nstream\n\nSend a stream of content to the UI.\n\nStream content into the relevant UI element.\n\nParameters\n\nThe content to stream. This can be a Iterable or an AsyncIterable of strings. Note that this includes synchronous and asynchronous generators, which is a useful way to stream content in as it arrives (e.g. from a LLM).\n\nWhether to clear the existing content before streaming the new content.\n\nNote\n\nIf you already have the content available as a string, you can do .stream([content]) to set the content.\n\nReturns\n\nAn extended task that represents the streaming task. The .result() method of the task can be called in a reactive context to get the final state of the stream.\n\n",
    "code_examples": [
      "ui.MarkdownStream(self, id, *, on_error='auto')",
      "ui.MarkdownStream(self, id, *, on_error='auto')",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\n\nimport requests\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.card_header(\"Shiny's README.md\"),\n        ui.output_markdown_stream(\"shiny_readme\"),\n        height=\"400px\",\n        class_=\"mt-3\",\n        full_screen=True,\n    ),\n)\n\n\ndef server(input, output, session):\n    # Read in the README.md file from the py-shiny repository\n    readme = requests.get(\n        \"https://raw.githubusercontent.com/posit-dev/py-shiny/refs/heads/main/README.md\"\n    )\n    readme_chunks = readme.text.replace(\"\\n\", \" \\n \").split(\" \")\n\n    # Generate words from the README.md file (with a small delay)\n    async def chunk_generator():\n        for chunk in readme_chunks:\n            await asyncio.sleep(0.02)\n            yield chunk + \" \"\n\n    md = ui.MarkdownStream(\"shiny_readme\")\n\n    @reactive.effect\n    async def _():\n        await md.stream(chunk_generator())\n\n\napp = App(app_ui, server)\n\n",
      "ui.MarkdownStream.clear()",
      "ui.MarkdownStream.clear()",
      "ui.MarkdownStream.get_latest_stream_result()",
      "ui.MarkdownStream.get_latest_stream_result()",
      "ui.MarkdownStream.stream(content, clear=True)",
      "ui.MarkdownStream.stream(content, clear=True)"
    ]
  },
  {
    "id": "api_core_ui_output_markdown_stream_html",
    "url": "api/core/ui.output_markdown_stream.html",
    "title": "ui.output_markdown_stream ‚Äì Shiny for Python",
    "description": "",
    "content": "- Streaming markdown\n- ui.output_markdown_stream\n\nui.output_markdown_stream\n\nCreate a UI element for a MarkdownStream.\n\nThis function is only relevant for Shiny Core. In Shiny Express, use ui to create the UI element.\n\nParameters\n\nA unique identifier for the UI element. This id should match the id of the MarkdownStream instance.\n\nSome content to display before any streaming occurs.\n\nThe content type. Default is ‚Äúmarkdown‚Äù (specifically, CommonMark). Other supported options are: - \"html\": for rendering HTML content. - \"text\": for plain text. - \"semi-markdown\": for rendering markdown, but with HTML tags escaped.\n\nWhether to automatically scroll to the bottom of a scrollable container when new content is added. Default is True.\n\nThe width of the UI element.\n\nThe height of the UI element.\n\nExamples\n\n",
    "code_examples": [
      "ui.output_markdown_stream(\n    id,\n    *,\n    content='',\n    content_type='markdown',\n    auto_scroll=True,\n    width='100%',\n    height='auto',\n)",
      "ui.output_markdown_stream(\n    id,\n    *,\n    content='',\n    content_type='markdown',\n    auto_scroll=True,\n    width='100%',\n    height='auto',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\n\nimport requests\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.card_header(\"Shiny's README.md\"),\n        ui.output_markdown_stream(\"shiny_readme\"),\n        height=\"400px\",\n        class_=\"mt-3\",\n        full_screen=True,\n    ),\n)\n\n\ndef server(input, output, session):\n    # Read in the README.md file from the py-shiny repository\n    readme = requests.get(\n        \"https://raw.githubusercontent.com/posit-dev/py-shiny/refs/heads/main/README.md\"\n    )\n    readme_chunks = readme.text.replace(\"\\n\", \" \\n \").split(\" \")\n\n    # Generate words from the README.md file (with a small delay)\n    async def chunk_generator():\n        for chunk in readme_chunks:\n            await asyncio.sleep(0.02)\n            yield chunk + \" \"\n\n    md = ui.MarkdownStream(\"shiny_readme\")\n\n    @reactive.effect\n    async def _():\n        await md.stream(chunk_generator())\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_Theme_html",
    "url": "api/core/ui.Theme.html",
    "title": "ui.theme ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.Theme\n\nui.Theme\n\nCreate a custom Shiny theme.\n\nThe Theme class allows you to create a custom Shiny theme by providing custom Sass code. The theme can be based on one of the available presets, such as \"shiny\" or \"bootstrap\", or a Bootswatch theme. Use the .add_*() methods can be chained together to add custom Sass functions, defaults, mixins, and rules.\n\nPass the Theme object directly to the theme argument of any Shiny page function, such as page_sidebar or page_navbar. In Shiny Express apps, use the theme argument of page_opts to set the app theme.\n\nNote: Compiling custom themes requires the libsass package, which is not installed by default with Shiny. Use pip install libsass or pip install \"shiny[theme]\" to install it.\n\nCustomized themes are compiled to CSS when the theme is used. The Theme class caches the compiled CSS so that it's only compiled for the first user to load your app, but you can speed up app loading (and avoid the runtime libsass dependency) by pre-compiling the theme CSS and saving it to a file. To do this, use the .to_css() method to render the theme to a single minified CSS string.\n\nRun this script with python my_theme.py to generate the CSS file. Once saved to a file, the CSS can be used in any Shiny app by passing the file path to the theme argument instead of the Theme object.\n\nParameters\n\nThe name of the preset to use as a base. \"shiny\" is the default theme for Shiny apps and \"bootstrap\" uses standard Bootstrap 5 styling. Bootswatch theme presets are also available. Use Theme.available_presets() to see the full list.\n\nA custom name for the theme. If not provided, the preset name will be used.\n\nAdditional paths to include when looking for Sass files used in @import statements in the theme. This can be a single path as a string or pathlib.Path, or a list of paths. The paths should point to directories containing additional Sass files that the theme depends on.\n\nRaises\n\nIf the preset is not a valid theme preset.\n\nMethods\n\nadd_defaults\n\nAdd custom default values to the theme.\n\nSass code added via this method will be placed before the default values of the theme preset, allowing you to override or extend the default values.\n\nParameters\n\nSass code, as a single or multiple strings, containing default value declarations to add.\n\nKeyword arguments containing default value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, .add_defaults(primary_color=\"#ff0000\") is equivalent to .add_defaults(\"$primary-color: #ff0000 !default;\").\n\nadd_functions\n\nAdd custom Sass functions to the theme.\n\nSass code added via this method will be placed after the function declarations from the theme preset, allowing you to override or extend the default functions.\n\nParameters\n\nThe Sass functions to add as a single or multiple strings.\n\nadd_mixins\n\nAdd custom Sass mixins to the theme.\n\nSass code added via this method will be placed after the mixin declarations from the theme preset, allowing you to override or extend the default mixins.\n\nParameters\n\nSass code, as a single or multiple strings, containing mixins to add.\n\nKeyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, .add_mixins(primary_color=\"#ff0000\") is equivalent to .add_mixins(\"$primary-color: #ff0000;\").\n\nadd_rules\n\nAdd custom Sass rules to the theme.\n\nSass code added via this method will be placed after the rule declarations from the theme preset, allowing you to override or extend the default rules.\n\nParameters\n\nSass code, as a single or multiple strings, containing rules to add.\n\nKeyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, .add_rules(primary_color=\"#ff0000\") is equivalent to .add_rules(\"$primary-color: #ff0000;\").\n\nadd_sass_layer_file\n\nAdd a Sass layer file to the theme.\n\nThis method reads a special .scss file formatted with layer boundary comments to denote regions of functions, defaults, mixins, and rules. It then splits the file into these constituent pieces and adds them to the appropriate layers of the theme.\n\nThe theme file should contain at least one of the following boundary comments:\n\nEach layer, once extracted, is added to the theme using the corresponding add_ method, e.g. the scss:rules layer is added via .add_rules().\n\nLayer types can appear more than once in the .scss file. They are coalesced into a single layer by order of appearance and then added as a block via their corresponding add_ method.\n\nParameters\n\nThe path to the .scss file to be added.\n\nRaises\n\nIf the .scss file doesn‚Äôt contain at least one valid region decorator.\n\nadd_uses\n\nAdd custom Sass \"uses\" declarations to the theme.\n\nSass code added via this method will be placed before the function declarations from the theme preset, allowing you to add Sass code that appears before any other Sass code in the theme layer.\n\nParameters\n\nThe Sass functions to add as a single or multiple strings.\n\navailable_presets\n\nGet a list of available theme presets.\n\nfrom_brand\n\nCreate a custom Shiny theme from a _brand.yml\n\nCreates a custom Shiny theme for your brand using brand.yml, a single YAML file that describes the brand's color and typography. Learn more about writing a _brand.yml file for your brand at the brand.yml homepage.\n\nAs a simple example, suppose your brand guidelines include a color palette with custom orange and black colors. The orange is used as the primary accent color and the black for all text. For typography, the brand also uses Roboto and Roboto Mono from Google Fonts for text and monospace-styled text, respectively. Here's a _brand.yml file for this brand:\n\nYou can store the _brand.yml file next to your Shiny app.py or, for larger projects, in a parent folder. To use a theme generated from the _brand.yml file, call from_brand on __file__ and pass the result to the theme argument of page_opts (Shiny Express) or the theme argument of shiny.ui.page_* functions, like page_sidebar.\n\nParameters\n\nA brand_yml.Brand instance, or a path to help locate _brand.yml. For a path, you can pass __file__ or a directory containing the _brand.yml or a path directly to the _brand.yml file.\n\nReturns\n\nA shiny.ui.Theme instance with a custom Shiny theme created from the brand guidelines (see brand_yml.Brand).\n\nto_css\n\nCompile the theme to CSS and return the result as a string.\n\nParameters\n\nA dictionary of keyword arguments to pass to sass.compile().\n\nReturns\n\nThe compiled CSS for the theme. The value is cached such that previously compiled themes are returned immediately. Adding additional custom Sass code or changing the preset will invalidate the cache.\n\nto_sass\n\nReturns the custom theme as a single Sass string.\n\nReturns\n\nThe custom theme as a single Sass string.\n\n",
    "code_examples": [
      "ui.Theme(self, preset=None, name=None, include_paths=None)",
      "ui.Theme(self, preset=None, name=None, include_paths=None)",
      "from pathlib import Path\n\nfrom shiny import ui\n\nmy_theme = (\n    ui.Theme(\"shiny\")\n    .add_defaults(\n        my_purple=\"#aa00aa\",\n    )\n    .add_mixins(\n        headings_color=\"$my-purple\",\n    )\n)\n\nwith open(Path(__file__).parent / \"my_theme.css\", \"w\") as f:\n    f.write(my_theme.to_css())",
      "from pathlib import Path\n\nfrom shiny import ui\n\nmy_theme = (\n    ui.Theme(\"shiny\")\n    .add_defaults(\n        my_purple=\"#aa00aa\",\n    )\n    .add_mixins(\n        headings_color=\"$my-purple\",\n    )\n)\n\nwith open(Path(__file__).parent / \"my_theme.css\", \"w\") as f:\n    f.write(my_theme.to_css())",
      "from pathlib import Path\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Hello, themed Shiny!\"),\n    # App content here\n    title=\"My App\",\n    theme=Path(__file__).parent / \"my_theme.css\",\n)\n\ndef server(input):\n    pass\n\napp = App(app_ui, server)",
      "from pathlib import Path\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Hello, themed Shiny!\"),\n    # App content here\n    title=\"My App\",\n    theme=Path(__file__).parent / \"my_theme.css\",\n)\n\ndef server(input):\n    pass\n\napp = App(app_ui, server)",
      "ui.Theme.add_defaults(*args, **kwargs)",
      "ui.Theme.add_defaults(*args, **kwargs)",
      "ui.Theme.add_functions(*args)",
      "ui.Theme.add_functions(*args)",
      "ui.Theme.add_mixins(*args, **kwargs)",
      "ui.Theme.add_mixins(*args, **kwargs)",
      "ui.Theme.add_rules(*args, **kwargs)",
      "ui.Theme.add_rules(*args, **kwargs)",
      "ui.Theme.add_sass_layer_file(path)",
      "ui.Theme.add_sass_layer_file(path)",
      "/*-- scss:uses --*/\n/*-- scss:functions --*/\n/*-- scss:defaults --*/\n/*-- scss:mixins --*/\n/*-- scss:rules --*/",
      "/*-- scss:uses --*/\n/*-- scss:functions --*/\n/*-- scss:defaults --*/\n/*-- scss:mixins --*/\n/*-- scss:rules --*/",
      "ui.Theme.add_uses(*args)",
      "ui.Theme.add_uses(*args)",
      "ui.Theme.available_presets()",
      "ui.Theme.available_presets()",
      "ui.Theme.from_brand(brand)",
      "ui.Theme.from_brand(brand)",
      "meta:\n  name: brand.yml Example\n\ncolor:\n  palette:\n    orange: \"#F96302\"\n    black: \"#000000\"\n  foreground: black\n  primary: orange\n\ntypography:\n  fonts:\n    - family: Roboto\n      source: google\n    - family: Roboto Mono\n      source: google\n  base: Roboto\n  monospace: Roboto Mono",
      "meta:\n  name: brand.yml Example\n\ncolor:\n  palette:\n    orange: \"#F96302\"\n    black: \"#000000\"\n  foreground: black\n  primary: orange\n\ntypography:\n  fonts:\n    - family: Roboto\n      source: google\n    - family: Roboto Mono\n      source: google\n  base: Roboto\n  monospace: Roboto Mono",
      "from shiny.express import input, render, ui\n\nui.page_opts(theme=ui.Theme.from_brand(__file__))\n\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.code\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"",
      "from shiny.express import input, render, ui\n\nui.page_opts(theme=ui.Theme.from_brand(__file__))\n\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.code\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"",
      "ui.Theme.to_css(compile_args=None)",
      "ui.Theme.to_css(compile_args=None)",
      "ui.Theme.to_sass()",
      "ui.Theme.to_sass()"
    ]
  },
  {
    "id": "api_core_ui_HTML_html",
    "url": "api/core/ui.HTML.html",
    "title": "ui.html ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.HTML\n\nui.HTML\n\nMark a string as raw HTML. This will prevent the string from being escaped when rendered inside an HTML tag.\n\nExamples\n\n",
    "code_examples": [
      "ui.HTML(self, html)",
      "ui.HTML(self, html)",
      ">>> from htmltools import HTML, div\n>>> div(\"<p>Hello</p>\")\n<div>&lt;p&gt;Hello&lt;/p&gt;</div>\n>>> div(HTML(\"<p>Hello</p>\"))\n<div><p>Hello</p></div>",
      ">>> from htmltools import HTML, div\n>>> div(\"<p>Hello</p>\")\n<div>&lt;p&gt;Hello&lt;/p&gt;</div>\n>>> div(HTML(\"<p>Hello</p>\"))\n<div><p>Hello</p></div>"
    ]
  },
  {
    "id": "api_core_ui_TagList_html",
    "url": "api/core/ui.TagList.html",
    "title": "ui.taglist ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.TagList\n\nui.TagList\n\nCreate an HTML tag list (i.e., a fragment of HTML)\n\nParameters\n\nThe tag children to add to the list.\n\nExamples\n\nMethods\n\nappend\n\nAppend tag children to the end of the list.\n\nextend\n\nExtend the children by appending an iterable of children.\n\nget_dependencies\n\nGet any dependencies needed to render the HTML.\n\nParameters\n\nWhether to deduplicate the dependencies.\n\nget_html_string\n\nReturn the HTML string for this tag list.\n\nParameters\n\nNumber of spaces to indent each line of the HTML.\n\nEnd-of-line character(s).\n\nWhether to add whitespace between the opening tag and the first child. If either this is True, or the child‚Äôs add_ws attribute is True, then whitespace will be added; if they are both False, then no whitespace will be added.\n\ninsert\n\nInsert tag children before a given index.\n\nrender\n\nGet string representation as well as its HTML dependencies.\n\nsave_html\n\nSave to a HTML file.\n\nParameters\n\nThe file to save to.\n\nThe directory to save the dependencies to.\n\nWhether to include the version number in the dependency folder name.\n\nReturns\n\nThe path to the generated HTML file.\n\nshow\n\nPreview as a complete HTML document.\n\nParameters\n\nThe renderer to use.\n\ntagify\n\nConvert any tagifiable children to Tag/TagList objects.\n\n",
    "code_examples": [
      "ui.TagList(self, *args)",
      "ui.TagList(self, *args)",
      ">>> from htmltools import TagList, div\n>>> TagList(\"hello\", div(id=\"foo\", class_=\"bar\"))\nhello\n<div id=\"foo\" class=\"bar\"></div>",
      ">>> from htmltools import TagList, div\n>>> TagList(\"hello\", div(id=\"foo\", class_=\"bar\"))\nhello\n<div id=\"foo\" class=\"bar\"></div>",
      "ui.TagList.append(item, *args)",
      "ui.TagList.append(item, *args)",
      "ui.TagList.extend(other)",
      "ui.TagList.extend(other)",
      "ui.TagList.get_dependencies(dedup=True)",
      "ui.TagList.get_dependencies(dedup=True)",
      "ui.TagList.get_html_string(\n    indent=0,\n    eol='\\n',\n    *,\n    add_ws=True,\n    _escape_strings=True,\n)",
      "ui.TagList.get_html_string(\n    indent=0,\n    eol='\\n',\n    *,\n    add_ws=True,\n    _escape_strings=True,\n)",
      "ui.TagList.insert(i, item)",
      "ui.TagList.insert(i, item)",
      "ui.TagList.render()",
      "ui.TagList.render()",
      "ui.TagList.save_html(file, *, libdir='lib', include_version=True)",
      "ui.TagList.save_html(file, *, libdir='lib', include_version=True)",
      "ui.TagList.show(renderer='auto')",
      "ui.TagList.show(renderer='auto')",
      "ui.TagList.tagify()",
      "ui.TagList.tagify()"
    ]
  },
  {
    "id": "api_core_ui_tags_html",
    "url": "api/core/ui.tags.html",
    "title": "ui.tags ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.tags\n\nui.tags\n\nui.tags\n\nFunctions for creating HTML tags.\n\n",
    "code_examples": []
  },
  {
    "id": "api_core_ui_markdown_html",
    "url": "api/core/ui.markdown.html",
    "title": "ui.markdown ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.markdown\n\nui.markdown\n\nConvert a string of markdown to ui.HTML.\n\nParameters\n\nA string of text containing markdown.\n\nA function (with at least 1 argument) which accepts a string of markdown and returns a string of HTML. By default, a customized instance of the markdown_id.main.MarkdownIt class (which supports Github-flavored markdown) from the markdown-it package is used.\n\nAdditional keyword arguments passed to the render_func.\n\nReturns\n\nAn HTML string of the rendered markdown.\n\nExamples\n\n",
    "code_examples": [
      "ui.markdown(text, *, render_func=None, **kwargs)",
      "ui.markdown(text, *, render_func=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, ui\n\nui_app = ui.page_fluid(\n    ui.markdown(\n        \"\"\"\n        # Hello World\n\n        This is **markdown** and here is some `code`:\n\n        ```python\n        print('Hello world!')\n        ```\n        \"\"\"\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(ui_app, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_include_css_html",
    "url": "api/core/ui.include_css.html",
    "title": "ui.include_css ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.include_css\n\nui.include_css\n\nInclude a CSS file.\n\nParameters\n\nA path to a CSS file.\n\nOne of the following: * \"link\" is the link to the CSS file via a link tag. This method is generally preferable to \"inline\" since it allows the browser to cache the file. * \"link_files\" is the same as \"link\", but also allow for the CSS file to request other files within path‚Äòs immediate parent directory (e.g., @import() another file). Note that this isn‚Äôt the default behavior because you should be careful not to include files in the same directory as path that contain sensitive information. A good general rule of thumb to follow is to have path be located in a subdirectory of the app directory. For example, if the app‚Äôs source is located at /app/app.py, then path should be somewhere like /app/css/custom.css (and all the other relevant accompanying ‚Äôsafe‚Äô files should be located under /app/css/). * \"inline\" is the inline the CSS file contents within a style tag.\n\nReturns\n\nIf method=\"inline\", returns a style tag; otherwise, returns a link tag.\n\nNote\n\nBy default this places a link (or style) tag in the body of the document, which isn‚Äôt optimal for performance, and may result in a Flash of Unstyled Content (FOUC). To instead place the CSS in the head of the document, you can wrap it in head_content:\n\nSee Also\n\n- style\n- link\n- include_js\n\nExamples\n\n",
    "code_examples": [
      "ui.include_css(path, *, method='link')",
      "ui.include_css(path, *, method='link')",
      "from htmltools import head_content\nfrom shiny import ui\n\nui.page_fluid(\n    ui.head_content(ui.include_css(\"custom.css\")),\n\n    # You can also inline css by passing a dictionary with a `style` element.\n    ui.div(\n        {\"style\": \"font-weight: bold;\"},\n        ui.p(\"Some text!\"),\n    )\n)",
      "from htmltools import head_content\nfrom shiny import ui\n\nui.page_fluid(\n    ui.head_content(ui.include_css(\"custom.css\")),\n\n    # You can also inline css by passing a dictionary with a `style` element.\n    ui.div(\n        {\"style\": \"font-weight: bold;\"},\n        ui.p(\"Some text!\"),\n    )\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom pathlib import Path\n\nfrom shiny import App, ui\n\ncss_file = Path(__file__).parent / \"css\" / \"styles.css\"\n\napp_ui = ui.page_fluid(\n    \"Almost before we knew it, we had left the ground!!!\",\n    ui.include_css(css_file),\n    ui.div(\n        # Style individual elements with an attribute dictionary.\n        {\"style\": \"font-weight: bold\"},\n        ui.p(\"Bold text\"),\n    ),\n)\n\napp = App(app_ui, None)\n\n\n## file: css/styles.css\nbody {\n  font-size: 3rem;\n  background-color: pink\n}\n\n"
    ]
  },
  {
    "id": "api_core_ui_include_js_html",
    "url": "api/core/ui.include_js.html",
    "title": "ui.include_js ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.include_js\n\nui.include_js\n\nInclude a JavaScript file.\n\nParameters\n\nA path to a JS file.\n\nOne of the following: * \"link\" is the link to the CSS file via a link tag. This method is generally preferable to \"inline\" since it allows the browser to cache the file. * \"link_files\" is the same as \"link\", but also allow for the CSS file to request other files within path‚Äòs immediate parent directory (e.g., @import() another file). Note that this isn‚Äôt the default behavior because you should be careful not to include files in the same directory as path that contain sensitive information. A good general rule of thumb to follow is to have path be located in a subdirectory of the app directory. For example, if the app‚Äôs source is located at /app/app.py, then path should be somewhere like /app/css/custom.css (and all the other relevant accompanying ‚Äôsafe‚Äô files should be located under /app/css/). * \"inline\" is the inline the CSS file contents within a style tag.\n\nAttributes which are passed on to ~shiny.ui.tags.script.\n\nReturns\n\nA script tag.\n\nNote\n\nThis places a script tag in the body of the document. If you want to place the tag in the head of the document instead, you can wrap it in head_content (in this case, just make sure you‚Äôre aware that the DOM probably won‚Äôt be ready when the script is executed).\n\nSee Also\n\n- script\n- include_css\n\nExamples\n\n",
    "code_examples": [
      "ui.include_js(path, *, method='link', **kwargs)",
      "ui.include_js(path, *, method='link', **kwargs)",
      "ui.page_fluid(\n    ui.head_content(ui.include_js(\"custom.js\")),\n)\n\n# Alternately you can inline Javscript by changing the method.\nui.page_fluid(\n    ui.head_content(ui.include_js(\"custom.js\", method = \"inline\")),\n)",
      "ui.page_fluid(\n    ui.head_content(ui.include_js(\"custom.js\")),\n)\n\n# Alternately you can inline Javscript by changing the method.\nui.page_fluid(\n    ui.head_content(ui.include_js(\"custom.js\", method = \"inline\")),\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom pathlib import Path\n\nfrom shiny import App, ui\n\njs_file = Path(__file__).parent / \"js\" / \"app.js\"\n\napp_ui = ui.page_fluid(\n    \"If you see this page before 'OK'-ing the alert box, something went wrong\",\n    ui.include_js(js_file),\n)\n\n\napp = App(app_ui, None)\n\n\n## file: js/app.js\nalert(\"If you're seeing this, the javascript file was included successfully.\");\n\n"
    ]
  },
  {
    "id": "api_core_ui_insert_ui_html",
    "url": "api/core/ui.insert_ui.html",
    "title": "ui.insert_ui ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.insert_ui\n\nui.insert_ui\n\nInsert UI objects.\n\nParameters\n\nThe UI object you want to insert. This can be anything that you usually put inside your app‚Äôs UI function. If you‚Äôre inserting multiple elements in one call, make sure to wrap them in either a TagList or a div (the latter option has the advantage that you can give it an id to make it easier to reference or remove it later on). If you want to insert raw HTML, use HTML.\n\nA string that is accepted by jQuery‚Äôs selector (i.e. the string s to be placed in a $(s) jQuery call) which determines the element(s) relative to which you want to insert your UI object.\n\nWhere your UI object should go relative to the selector: ‚ÄúbeforeBegin‚Äù: before the selector element itself; ‚ÄúbeforeEnd‚Äù: just inside the selector element, after its last child (default); ‚ÄúafterEnd‚Äù: after the selector element itself. Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML.\n\nIn case your selector matches more than one element, multiple determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).\n\nWhether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThis function allows you to dynamically add arbitrary UI into your app, whenever you want, as many times as you want. Unlike ui, the UI generated with insert_ui is persistent: once it‚Äôs created, it stays there until removed by remove_ui. Each new call to insert_ui creates more UI objects, in addition to the ones already there (all independent from one another). To update a part of the UI (ex: an input object), you must use the appropriate render function or a customized reactive function.\n\nSee Also\n\n- remove_ui\n- ui\n\nExamples\n\n",
    "code_examples": [
      "ui.insert_ui(\n    ui,\n    selector,\n    where='beforeEnd',\n    multiple=False,\n    immediate=False,\n    session=None,\n)",
      "ui.insert_ui(\n    ui,\n    selector,\n    where='beforeEnd',\n    multiple=False,\n    immediate=False,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"add\", \"Add UI\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.add)\n    def _():\n        ui.insert_ui(\n            ui.input_text(\"txt\" + str(input.add()), \"Enter some text\"),\n            selector=\"#add\",\n            where=\"afterEnd\",\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_remove_ui_html",
    "url": "api/core/ui.remove_ui.html",
    "title": "ui.remove_ui ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.remove_ui\n\nui.remove_ui\n\nRemove UI objects.\n\nParameters\n\nA string that is accepted by jQuery‚Äôs selector (i.e. the string x to be placed in a $(x) jQuery call), which determines the element(s) to remove. If you want to remove a Shiny input or output, note that many of these are wrapped in <div>s, so you may need to use a somewhat complex selector ‚Äî see the Examples below. (Alternatively, you could also wrap the inputs/outputs that you want to be able to remove easily in a <div> with an id.)\n\nIn case your selector matches more than one element, multiple determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).\n\nWhether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nSee Also\n\n- insert_ui\n- ui\n\nExamples\n\n",
    "code_examples": [
      "ui.remove_ui(selector, multiple=False, immediate=False, session=None)",
      "ui.remove_ui(selector, multiple=False, immediate=False, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"rmv\", \"Remove UI\"),\n    ui.input_text(\"txt\", \"Click button above to remove me\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.rmv)\n    def _():\n        ui.remove_ui(selector=\"div:has(> #txt)\")\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_busy_indicators_use_html",
    "url": "api/core/ui.busy_indicators.use.html",
    "title": "ui.busy_indicators.use ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.busy_indicators.use\n\nui.busy_indicators.use\n\nEnable/disable busy indication\n\nBusy indicators provide a visual cue to users when the server is busy calculating outputs or otherwise performing tasks (e.g., producing downloads). When enabled (they are by default), a spinner is shown on each calculating/recalculating output, and a pulsing banner is shown at the top of the page when the app is otherwise busy. To disable, include the result of this function in anywhere in the app's UI.\n\nParameters\n\nWhether to show a spinner on each calculating/recalculating output.\n\nWhether to show a pulsing banner at the top of the page when the app is busy.\n\nWhether to fade recalculating outputs. A value of False is equivalent to shiny.ui.busy_indicators.options(fade_opacity=1).\n\nNote\n\nWhen both spinners and pulse are set to True, the pulse is disabled when spinner(s) are active. When both spinners and pulse are set to False, no busy indication is shown (other than the gray-ing out of recalculating outputs).\n\nSee Also\n\n- options for customizing busy indicators.\n\n",
    "code_examples": [
      "ui.busy_indicators.use(spinners=True, pulse=True, fade=True)",
      "ui.busy_indicators.use(spinners=True, pulse=True, fade=True)"
    ]
  },
  {
    "id": "api_core_ui_busy_indicators_options_html",
    "url": "api/core/ui.busy_indicators.options.html",
    "title": "ui.busy_indicators.options ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.busy_indicators.options\n\nui.busy_indicators.options\n\nCustomize spinning busy indicators.\n\nBusy indicators provide a visual cue to users when the server is busy calculating outputs or otherwise performing tasks (e.g., producing downloads). This function allows you to customize the appearance of those busy indicators. To apply the customization, include the result of this function inside the app's UI.\n\nParameters\n\nThe type of spinner. Pre-bundled types are listed in the BusySpinnerType type. A Path to a local SVG file can also be provided. The SVG should adhere to the following rules: * The SVG itself should contain the animation. * It should avoid absolute sizes (the spinner‚Äôs containing DOM element size is set in CSS by spinner_size, so it should fill that container). * It should avoid setting absolute colors (the spinner‚Äôs containing DOM element color is set in CSS by spinner_color, so it should inherit that color).\n\nThe color of the spinner. This can be any valid CSS color. Defaults to the app‚Äôs ‚Äúprimary‚Äù color (if Bootstrap is on the page).\n\nThe size of the spinner. This can be any valid CSS size.\n\nThe amount of time to wait before showing the spinner. This can be any valid CSS time and can useful for not showing the spinner if the computation finishes quickly.\n\nA character string containing a CSS selector for scoping the spinner customization. The default (None) will apply the spinner customization to the parent element of the spinner.\n\nThe opacity (a number between 0 and 1) for recalculating output. Set to 1 to ‚Äúdisable‚Äù the fade.\n\nA string containing a CSS selector for scoping the fade customization. The default (None) applies the fade customization to the parent element.\n\nA CCS background definition for the pulse. The default uses a linear-gradient of the theme‚Äôs indigo, purple, and pink colors.\n\nThe height of the pulsing banner. This can be any valid CSS size.\n\nThe speed of the pulsing banner. This can be any valid CSS time.\n\nSee Also\n\n- use for enabling/disabling busy indicators.\n\nExamples\n\n",
    "code_examples": [
      "ui.busy_indicators.options(\n    spinner_type=None,\n    spinner_color=None,\n    spinner_size=None,\n    spinner_delay=None,\n    spinner_selector=None,\n    fade_opacity=None,\n    fade_selector=None,\n    pulse_background=None,\n    pulse_height=None,\n    pulse_speed=None,\n)",
      "ui.busy_indicators.options(\n    spinner_type=None,\n    spinner_color=None,\n    spinner_size=None,\n    spinner_delay=None,\n    spinner_selector=None,\n    fade_opacity=None,\n    fade_selector=None,\n    pulse_background=None,\n    pulse_height=None,\n    pulse_speed=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport os\nimport time\n\nimport numpy as np\nimport seaborn as sns\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_selectize(\n            \"indicator_types\",\n            \"Busy indicator types\",\n            [\"spinners\", \"pulse\"],\n            multiple=True,\n            selected=[\"spinners\", \"pulse\"],\n        ),\n        ui.download_button(\"download\", \"Download source\"),\n    ),\n    ui.card(\n        ui.card_header(\n            \"Plot that takes a few seconds to render\",\n            ui.input_task_button(\"simulate\", \"Simulate\"),\n            class_=\"d-flex justify-content-between align-items-center\",\n        ),\n        ui.output_plot(\"plot\"),\n    ),\n    ui.busy_indicators.options(spinner_type=\"bars3\"),\n    ui.output_ui(\"indicator_types_ui\"),\n    title=\"Busy indicators demo\",\n)\n\n\ndef server(input):\n\n    @render.plot\n    def plot():\n        input.simulate()\n        time.sleep(3)\n        sns.lineplot(x=np.arange(100), y=np.random.randn(100))\n\n    @render.ui\n    def indicator_types_ui():\n        return ui.busy_indicators.use(\n            spinners=\"spinners\" in input.indicator_types(),\n            pulse=\"pulse\" in input.indicator_types(),\n        )\n\n    @render.download\n    def download():\n        time.sleep(3)\n        path = os.path.join(os.path.dirname(__file__), \"app-core.py\")\n        return path\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_fill_as_fillable_container_html",
    "url": "api/core/ui.fill.as_fillable_container.html",
    "title": "ui.fill.as_fillable_container ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.fill.as_fillable_container\n\nui.fill.as_fillable_container\n\nCoerce a tag to a fillable container.\n\nFilling layouts are built on the foundation of fillable containers and fill items (fill carriers are both fillable containers and fill items). This is why most UI components (e.g., card, layout_sidebar) possess both fillable and fill arguments (to control their fill behavior). However, sometimes it's useful to add, remove, and/or test fillable/fill properties on arbitrary Tag, which these functions are designed to do.\n\nParameters\n\na Tag object.\n\nReturns\n\nA copy of the original Tag object (tag) with additional attributes (and an HTMLDependency).\n\nSee Also\n\n- as_fill_item\n- remove_all_fill\n\nExamples\n\n",
    "code_examples": [
      "ui.fill.as_fillable_container(tag)",
      "ui.fill.as_fillable_container(tag)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\nimport htmltools\n\nfrom shiny import App, ui\nfrom shiny.ui import fill\n\n\ndef outer_inner() -> htmltools.Tag:\n    inner = ui.div(\n        id=\"inner\",\n        style=htmltools.css(\n            height=\"200px\",\n            border=\"3px blue solid\",\n        ),\n    )\n    outer = ui.div(\n        inner,\n        id=\"outer\",\n        style=htmltools.css(\n            height=\"300px\",\n            border=\"3px red solid\",\n        ),\n    )\n    return outer\n\n\nouter0 = outer_inner()\n\nouter1 = outer_inner()\nouter1 = fill.as_fillable_container(outer1)\n\nouter2 = outer_inner()\nouter2 = fill.as_fillable_container(outer2)\nouter2.children[0] = fill.as_fill_item(outer2.children[0])\n\napp_ui = ui.page_fluid(\n    ui.markdown(\n        \"\"\"\\\n        # `as_fillable_container()`\n\n        For an item to fill its parent element,\n        * the item must have `as_fill_item()` be called on it\n        * the parent container must have `as_fillable_container()` called on it\n\n        If both methods are called, the inner child will naturally expand into its parent container.\n        \"\"\"\n    ),\n    ui.row(\n        ui.column(4, ui.h5(\"Default behavior\")),\n        ui.column(4, ui.h5(ui.markdown(\"`as_fillable_container(red)`\"))),\n        ui.column(\n            4,\n            ui.h5(ui.markdown(\"`as_fill_item(blue)` + `as_fillable_container(red)`\")),\n        ),\n    ),\n    ui.row(\n        ui.column(4, ui.div(outer0)),\n        ui.column(4, ui.div(outer1)),\n        ui.column(4, ui.span(outer2)),\n    ),\n)\n\n\napp = App(app_ui, server=None)\n\n"
    ]
  },
  {
    "id": "api_core_ui_fill_as_fill_item_html",
    "url": "api/core/ui.fill.as_fill_item.html",
    "title": "ui.fill.as_fill_item ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.fill.as_fill_item\n\nui.fill.as_fill_item\n\nCoerce a tag to a fill item.\n\nFilling layouts are built on the foundation of fillable containers and fill items (fill carriers are both fillable containers and fill items). This is why most UI components (e.g., card, layout_sidebar) possess both fillable and fill arguments (to control their fill behavior). However, sometimes it's useful to add, remove, and/or test fillable/fill properties on arbitrary Tag, which these functions are designed to do.\n\nParameters\n\na Tag object.\n\nReturns\n\nA copy of the original Tag object (tag) with additional attributes (and an HTMLDependency).\n\nSee Also\n\n- as_fillable_container\n- remove_all_fill\n\nExamples\n\n",
    "code_examples": [
      "ui.fill.as_fill_item(tag)",
      "ui.fill.as_fill_item(tag)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\nimport htmltools\n\nfrom shiny import App, ui\nfrom shiny.ui import fill\n\n\ndef outer_inner() -> htmltools.Tag:\n    inner = ui.div(\n        id=\"inner\",\n        style=htmltools.css(\n            height=\"200px\",\n            border=\"3px blue solid\",\n        ),\n    )\n    outer = ui.div(\n        inner,\n        id=\"outer\",\n        style=htmltools.css(\n            height=\"300px\",\n            border=\"3px red solid\",\n        ),\n    )\n    return outer\n\n\nouter0 = outer_inner()\n\nouter1 = outer_inner()\nouter1.children[0] = fill.as_fill_item(outer1.children[0])\n\nouter2 = outer_inner()\nouter2 = fill.as_fillable_container(outer2)\nouter2.children[0] = fill.as_fill_item(outer2.children[0])\n\n\napp_ui = ui.page_fluid(\n    ui.markdown(\n        \"\"\"\\\n        # `as_fill_item()`\n\n        For an item to fill its parent element,\n        * the item must have `as_fill_item()` be called on it\n        * the parent container must have `as_fillable_container()` called on it\n\n        If both methods are called, the inner child will naturally expand into its parent container.\n        \"\"\"\n    ),\n    ui.row(\n        ui.column(4, ui.h5(\"Default behavior\")),\n        ui.column(4, ui.h5(ui.markdown(\"`as_fill_item(blue)`\"))),\n        ui.column(\n            4,\n            ui.h5(ui.markdown(\"`as_fill_item(blue)` + `as_fillable_container(red)`\")),\n        ),\n    ),\n    ui.row(\n        ui.column(4, ui.div(outer0)),\n        ui.column(4, ui.div(outer1)),\n        ui.column(4, ui.span(outer2)),\n    ),\n)\n\n\napp = App(app_ui, server=None)\n\n"
    ]
  },
  {
    "id": "api_core_ui_fill_remove_all_fill_html",
    "url": "api/core/ui.fill.remove_all_fill.html",
    "title": "ui.fill.remove_all_fill ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.fill.remove_all_fill\n\nui.fill.remove_all_fill\n\nRemove any filling layouts from a tag.\n\nFilling layouts are built on the foundation of fillable containers and fill items (fill carriers are both fillable containers and fill items). This is why most UI components (e.g., card, layout_sidebar) possess both fillable and fill arguments (to control their fill behavior). However, sometimes it's useful to add, remove, and/or test fillable/fill properties on arbitrary Tag, which these functions are designed to do.\n\nParameters\n\na Tag object.\n\nReturns\n\nA copy of the original Tag object with filling layout attributes removed.\n\nSee Also\n\n- as_fill_item\n- as_fillable_container\n\n",
    "code_examples": [
      "ui.fill.remove_all_fill(tag)",
      "ui.fill.remove_all_fill(tag)"
    ]
  },
  {
    "id": "api_core_ui_css_as_css_unit_html",
    "url": "api/core/ui.css.as_css_unit.html",
    "title": "ui.css.as_css_unit ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.css.as_css_unit\n\nui.css.as_css_unit\n\nConvert a value into a CSS unit.\n\nParameters\n\nA value to convert into a CSS unit.\n\nReturns\n\nIf the value is None, then None. If the value is 0, then \"0\". If the value is numeric, then a formatted pixel value. Otherwise, the value as-is.\n\nExamples\n\n",
    "code_examples": [
      "ui.css.as_css_unit(value)",
      "ui.css.as_css_unit(value)",
      "from shiny.ui.css import as_css_unit\n\nas_css_unit(0)",
      "from shiny.ui.css import as_css_unit\n\nas_css_unit(0)",
      "as_css_unit(300)",
      "as_css_unit(300)",
      "as_css_unit(\"1em\")",
      "as_css_unit(\"1em\")"
    ]
  },
  {
    "id": "api_core_ui_css_as_css_padding_html",
    "url": "api/core/ui.css.as_css_padding.html",
    "title": "ui.css.as_css_padding ‚Äì Shiny for Python",
    "description": "",
    "content": "- Custom UI\n- ui.css.as_css_padding\n\nui.css.as_css_padding\n\nConvert a CSS unit or list of CSS units into a CSS padding value.\n\nParameters\n\nA CSS unit or list of CSS units.\n\nReturns\n\nA CSS padding value.\n\nExamples\n\n",
    "code_examples": [
      "ui.css.as_css_padding(padding)",
      "ui.css.as_css_padding(padding)",
      "from shiny.ui.css import as_css_padding\n\nas_css_padding([0, \"1em\"])",
      "from shiny.ui.css import as_css_padding\n\nas_css_padding([0, \"1em\"])"
    ]
  },
  {
    "id": "api_core_ui_update_select_html",
    "url": "api/core/ui.update_select.html",
    "title": "ui.update_select ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_select\n\nui.update_select\n\nChange the value of a select input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\n\nThe values that should be initially selected, if any.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_select\n- update_selectize\n\nExamples\n\n",
    "code_examples": [
      "ui.update_select(id, *, label=None, choices=None, selected=None, session=None)",
      "ui.update_select(id, *, label=None, choices=None, selected=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tags.p(\"The checkbox group controls the select input\"),\n    ui.input_checkbox_group(\n        \"inCheckboxGroup\", \"Input checkbox\", [\"Item A\", \"Item B\", \"Item C\"]\n    ),\n    ui.input_select(\"inSelect\", \"Select input\", [\"Item A\", \"Item B\", \"Item C\"]),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        x = input.inCheckboxGroup()\n\n        # Can use [] to remove all choices\n        if x is None:\n            x = []\n        elif isinstance(x, str):\n            x = [x]\n\n        ui.update_select(\n            \"inSelect\",\n            label=\"Select input label \" + str(len(x)),\n            choices=x,\n            selected=x[len(x) - 1] if len(x) > 0 else None,\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_selectize_html",
    "url": "api/core/ui.update_selectize.html",
    "title": "ui.update_selectize ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_selectize\n\nui.update_selectize\n\nChange the value of a selectize.js powered input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\n\nThe values that should be initially selected, if any.\n\nOptions to send to update, see input_selectize for details.\n\nWhether to store choices on the server side, and load the select options dynamically on searching, instead of writing all choices into the page at once (i.e., only use the client-side version of selectize.js)\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_selectize\n\nExamples\n\n",
    "code_examples": [
      "ui.update_selectize(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    options=None,\n    server=False,\n    session=None,\n)",
      "ui.update_selectize(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    options=None,\n    server=False,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(\"x\", \"Server side selectize\", choices=[], multiple=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        ui.update_selectize(\n            \"x\",\n            choices=[f\"Foo {i}\" for i in range(10000)],\n            selected=[\"Foo 0\", \"Foo 1\"],\n            server=True,\n        )\n\n\napp = App(app_ui, server, debug=True)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_slider_html",
    "url": "api/core/ui.update_slider.html",
    "title": "ui.update_slider ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_slider\n\nui.update_slider\n\nChange the value of a slider input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nSpecifies the interval between each selectable value on the slider. Either None (the default), which uses a heuristic to determine the step size or a single number. If the values are dates, step is in days; if the values are date-times, step is in seconds.\n\nOnly used if the slider values are date or datetime objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is ‚Äú%F‚Äù (like ‚Äú2015-07-01‚Äù), and for Datetimes, the default is ‚Äú%F %T‚Äù (like ‚Äú2015-07-01 15:32:10‚Äù).\n\nOnly used if the values are datetime objects. A string specifying the time zone offset for the displayed times, in the format ‚Äú+HHMM‚Äù or ‚Äú-HHMM‚Äù. If None (the default), times will be displayed in the browser‚Äôs time zone. The value ‚Äú+0000‚Äù will result in UTC time.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_slider\n\nExamples\n\n",
    "code_examples": [
      "ui.update_slider(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    step=None,\n    time_format=None,\n    timezone=None,\n    session=None,\n)",
      "ui.update_slider(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    step=None,\n    time_format=None,\n    timezone=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fixed(\n    ui.input_slider(\n        \"receiver\", \"Receiver:\", min=0, max=100, value=50, step=1, width=\"100%\"\n    ),\n    ui.p(\n        \"Change the min and max values below to see the receiver slider above update.\"\n    ),\n    ui.layout_column_wrap(\n        ui.input_slider(\"min\", \"Min:\", min=0, max=50, value=0, step=1),\n        ui.input_slider(\"max\", \"Max:\", min=50, max=100, value=100, step=1),\n        width=1 / 2,\n    ),\n)\n\n\ndef server(input, output, session):\n    @reactive.effect\n    def _():\n        # You can update the value, min, max, and step.\n        ui.update_slider(\n            \"receiver\",\n            value=max(min(input.receiver(), input.max()), input.min()),\n            min=input.min(),\n            max=input.max(),\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_dark_mode_html",
    "url": "api/core/ui.update_dark_mode.html",
    "title": "ui.update_dark_mode ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_dark_mode\n\nui.update_dark_mode\n\n",
    "code_examples": [
      "ui.update_dark_mode(mode, *, session=None)",
      "ui.update_dark_mode(mode, *, session=None)"
    ]
  },
  {
    "id": "api_core_ui_update_date_html",
    "url": "api/core/ui.update_date.html",
    "title": "ui.update_date ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_date\n\nui.update_date\n\nChange the value of a date input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe starting date. Either a date() object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_date\n\nExamples\n\n",
    "code_examples": [
      "ui.update_date(id, *, label=None, value=None, min=None, max=None, session=None)",
      "ui.update_date(id, *, label=None, value=None, min=None, max=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import date, timedelta\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Day of month\", min=1, max=30, value=10),\n    ui.input_date(\"inDate\", \"Input date\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        d = date(2013, 4, input.n())\n        ui.update_date(\n            \"inDate\",\n            label=\"Date label \" + str(input.n()),\n            value=d,\n            min=d - timedelta(days=3),\n            max=d + timedelta(days=3),\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_date_range_html",
    "url": "api/core/ui.update_date_range.html",
    "title": "ui.update_date_range ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_date_range\n\nui.update_date_range\n\nChange the start and end values of a date range input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe initial start date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe initial end date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_date_range\n\nExamples\n\n",
    "code_examples": [
      "ui.update_date_range(\n    id,\n    *,\n    label=None,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    session=None,\n)",
      "ui.update_date_range(\n    id,\n    *,\n    label=None,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import date, timedelta\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Day of month\", min=1, max=30, value=10),\n    ui.input_date_range(\"inDateRange\", \"Input date\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        d = date(2013, 4, input.n())\n        ui.update_date_range(\n            \"inDateRange\",\n            label=\"Date range label \" + str(input.n()),\n            start=d - timedelta(days=1),\n            end=d + timedelta(days=1),\n            min=d - timedelta(days=5),\n            max=d + timedelta(days=5),\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_checkbox_html",
    "url": "api/core/ui.update_checkbox.html",
    "title": "ui.update_checkbox ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_checkbox\n\nui.update_checkbox\n\nChange the value of a checkbox input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_checkbox\n\nExamples\n\n",
    "code_examples": [
      "ui.update_checkbox(id, *, label=None, value=None, session=None)",
      "ui.update_checkbox(id, *, label=None, value=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"controller\", \"Controller\", min=0, max=1, value=0, step=1),\n    ui.input_checkbox(\"inCheckbox\", \"Input checkbox\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        # True if controller is odd, False if even.\n        x_even = input.controller() % 2 == 1\n        ui.update_checkbox(\"inCheckbox\", value=x_even)\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_checkbox_group_html",
    "url": "api/core/ui.update_checkbox_group.html",
    "title": "ui.update_checkbox_group ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_checkbox_group\n\nui.update_checkbox_group\n\nChange the value of a checkbox group input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\nThe values that should be initially selected, if any.\n\nIf True, the result is displayed inline\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_checkbox_group\n\nExamples\n\n",
    "code_examples": [
      "ui.update_checkbox_group(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    inline=False,\n    session=None,\n)",
      "ui.update_checkbox_group(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    inline=False,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tags.p(\"The first checkbox group controls the second\"),\n    ui.input_checkbox_group(\n        \"inCheckboxGroup\", \"Input checkbox\", [\"Item A\", \"Item B\", \"Item C\"]\n    ),\n    ui.input_checkbox_group(\n        \"inCheckboxGroup2\", \"Input checkbox 2\", [\"Item A\", \"Item B\", \"Item C\"]\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        x = input.inCheckboxGroup()\n\n        # Can also set the label and select items\n        ui.update_checkbox_group(\n            \"inCheckboxGroup2\",\n            label=\"Checkboxgroup label \" + str(len(x)),\n            choices=x,\n            selected=x,\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_switch_html",
    "url": "api/core/ui.update_switch.html",
    "title": "ui.update_switch ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_switch\n\nui.update_switch\n\nChange the value of a switch input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_switch\n\n",
    "code_examples": [
      "ui.update_switch(id, *, label=None, value=None, session=None)",
      "ui.update_switch(id, *, label=None, value=None, session=None)"
    ]
  },
  {
    "id": "api_core_ui_update_radio_buttons_html",
    "url": "api/core/ui.update_radio_buttons.html",
    "title": "ui.update_radio_buttons ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_radio_buttons\n\nui.update_radio_buttons\n\nChange the value of a radio input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\nThe values that should be initially selected, if any.\n\nIf ``True```, the result is displayed inline\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_radio_buttons\n\nExamples\n\n",
    "code_examples": [
      "ui.update_radio_buttons(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    inline=False,\n    session=None,\n)",
      "ui.update_radio_buttons(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    inline=False,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tags.p(\"The first radio button group controls the second\"),\n    ui.input_radio_buttons(\n        \"inRadioButtons\", \"Input radio buttons\", [\"Item A\", \"Item B\", \"Item C\"]\n    ),\n    ui.input_radio_buttons(\n        \"inRadioButtons2\", \"Input radio buttons 2\", [\"Item A\", \"Item B\", \"Item C\"]\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        x = input.inRadioButtons()\n\n        # Can also set the label and select items\n        ui.update_radio_buttons(\n            \"inRadioButtons2\",\n            label=\"Radio buttons label \" + x,\n            choices=[x],\n            selected=x,\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_numeric_html",
    "url": "api/core/ui.update_numeric.html",
    "title": "ui.update_numeric ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_numeric\n\nui.update_numeric\n\nChange the value of a number input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nInterval to use when stepping between min and max.\n\nThe Session object passed to the server function of a App.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_numeric\n\nExamples\n\n",
    "code_examples": [
      "ui.update_numeric(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    step=None,\n    session=None,\n)",
      "ui.update_numeric(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    step=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"controller\", \"Controller\", min=0, max=20, value=10),\n    ui.input_numeric(\"inNumber\", \"Input number\", 0),\n    ui.input_numeric(\"inNumber2\", \"Input number 2\", 0),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        x = input.controller()\n        ui.update_numeric(\"inNumber\", value=x)\n        ui.update_numeric(\n            \"inNumber2\",\n            label=\"Number label \" + str(x),\n            value=x,\n            min=x - 10,\n            max=x + 10,\n            step=5,\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_text_html",
    "url": "api/core/ui.update_text.html",
    "title": "ui.update_text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_text\n\nui.update_text\n\nChange the value of a text input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nA hint as to what can be entered into the control.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_text\n\nExamples\n\n",
    "code_examples": [
      "ui.update_text(id, *, label=None, value=None, placeholder=None, session=None)",
      "ui.update_text(id, *, label=None, value=None, placeholder=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.input_radio_buttons(\n            \"pet_type\", \"Pet type\", [\"Dog\", \"Cat\", \"Bird\"], inline=True\n        ),\n        ui.input_radio_buttons(\"pet_sex\", \"Pet sex\", [\"Male\", \"Female\"], inline=True),\n        ui.input_text(\"name\", \"Pet name\", \"Charlie\"),\n        ui.input_text(\"royal_name\", \"Royal Name\", \"King Charlie\"),\n        width=1 / 2,\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.pet_type)\n    def _():\n        # Update the label of the pet name input\n        ui.update_text(\"name\", label=f\"{input.pet_type()}'s name\")\n\n    @reactive.effect\n    def _():\n        # Update the value of the royal name input\n        royal_noun = \"King\" if input.pet_sex() == \"Male\" else \"Queen\"\n        ui.update_text(\"royal_name\", value=f\"{royal_noun} {input.name()}\")\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_text_area_html",
    "url": "api/core/ui.update_text_area.html",
    "title": "ui.update_text_area ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_text_area\n\nui.update_text_area\n\nChange the value of a text input on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nA new value.\n\nA hint as to what can be entered into the control.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_text\n\nExamples\n\n",
    "code_examples": [
      "ui.update_text_area(\n    id,\n    *,\n    label=None,\n    value=None,\n    placeholder=None,\n    session=None,\n)",
      "ui.update_text_area(\n    id,\n    *,\n    label=None,\n    value=None,\n    placeholder=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.input_radio_buttons(\n            \"pet_type\", \"Pet type\", [\"Dog\", \"Cat\", \"Bird\"], inline=True\n        ),\n        ui.input_radio_buttons(\"pet_sex\", \"Pet sex\", [\"Male\", \"Female\"], inline=True),\n        ui.input_text(\"name\", \"Pet name\", \"Charlie\"),\n        ui.input_text(\"royal_name\", \"Royal Name\", \"King Charlie\"),\n        width=1 / 2,\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.pet_type)\n    def _():\n        # Update the label of the pet name input\n        ui.update_text(\"name\", label=f\"{input.pet_type()}'s name\")\n\n    @reactive.effect\n    def _():\n        # Update the value of the royal name input\n        royal_noun = \"King\" if input.pet_sex() == \"Male\" else \"Queen\"\n        ui.update_text(\"royal_name\", value=f\"{royal_noun} {input.name()}\")\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_navs_html",
    "url": "api/core/ui.update_navs.html",
    "title": "ui.update_navs ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_navs\n\nui.update_navs\n\nChange the value of a navs container on the client.\n\nParameters\n\nAn input id.\n\nThe values that should be initially selected, if any.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- navset_tab\n- navset_pill\n- page_navbar\n\nExamples\n\n",
    "code_examples": [
      "ui.update_navs(id, selected=None, session=None)",
      "ui.update_navs(id, selected=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(ui.input_slider(\"controller\", \"Controller\", min=1, max=3, value=1)),\n    ui.navset_card_tab(\n        ui.nav_panel(\"Panel 1\", \"Panel 1 content\", value=\"panel1\"),\n        ui.nav_panel(\"Panel 2\", \"Panel 2 content\", value=\"panel2\"),\n        ui.nav_panel(\"Panel 3\", \"Panel 3 content\", value=\"panel3\"),\n        id=\"inTabset\",\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        ui.update_navs(\"inTabset\", selected=\"panel\" + str(input.controller()))\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_action_button_html",
    "url": "api/core/ui.update_action_button.html",
    "title": "ui.update_action_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_action_button\n\nui.update_action_button\n\nChange the label and/or icon of an action button on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nIf True, disable the button making it unclickable; if False, the button will become enabled and clickable.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_action_button\n\nExamples\n\n",
    "code_examples": [
      "ui.update_action_button(\n    id,\n    *,\n    label=None,\n    icon=None,\n    disabled=None,\n    session=None,\n)",
      "ui.update_action_button(\n    id,\n    *,\n    label=None,\n    icon=None,\n    disabled=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, req, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"update\", \"Update other buttons and link\"),\n    ui.br(),\n    ui.input_action_button(\"goButton\", \"Go\"),\n    ui.br(),\n    ui.input_action_button(\"goButton2\", \"Go 2\", icon=\"ü§©\"),\n    ui.br(),\n    ui.input_action_button(\"goButton3\", \"Go 3\"),\n    ui.br(),\n    ui.input_action_link(\"goLink\", \"Go Link\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        req(input.update())\n        # Updates goButton's label and icon\n        ui.update_action_button(\"goButton\", label=\"New label\", icon=\"üìÖ\")\n        # Leaves goButton2's label unchanged and removes its icon\n        ui.update_action_button(\"goButton2\", icon=[])\n        # Leaves goButton3's icon, if it exists, unchanged and changes its label\n        ui.update_action_button(\"goButton3\", label=\"New label 3\")\n        # Updates goLink's label and icon\n        ui.update_action_link(\"goLink\", label=\"New link label\", icon=\"üîó\")\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_action_link_html",
    "url": "api/core/ui.update_action_link.html",
    "title": "ui.update_action_link ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_action_link\n\nui.update_action_link\n\nChange the label and/or icon of an action link on the client.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\nNote\n\nThe input updater functions send a message to the client, telling it to change the settings of an input object. The messages are collected and sent after all the observers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in the first place. For example, input_numeric and update_numeric take a similar set of arguments.\n\nAny arguments with None values will be ignored; they will not result in any changes to the input object on the client.\n\nFor update_radio_buttons, update_checkbox_group, and update_select, the set of choices can be cleared by using choices=[]. Similarly, for these inputs, the selected item can be cleared by using selected=[].\n\nSee Also\n\n- input_action_link\n\nExamples\n\n",
    "code_examples": [
      "ui.update_action_link(id, *, label=None, icon=None, session=None)",
      "ui.update_action_link(id, *, label=None, icon=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, req, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"update\", \"Update other buttons and link\"),\n    ui.br(),\n    ui.input_action_button(\"goButton\", \"Go\"),\n    ui.br(),\n    ui.input_action_button(\"goButton2\", \"Go 2\", icon=\"ü§©\"),\n    ui.br(),\n    ui.input_action_button(\"goButton3\", \"Go 3\"),\n    ui.br(),\n    ui.input_action_link(\"goLink\", \"Go Link\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        req(input.update())\n        # Updates goButton's label and icon\n        ui.update_action_button(\"goButton\", label=\"New label\", icon=\"üìÖ\")\n        # Leaves goButton2's label unchanged and removes its icon\n        ui.update_action_button(\"goButton2\", icon=[])\n        # Leaves goButton3's icon, if it exists, unchanged and changes its label\n        ui.update_action_button(\"goButton3\", label=\"New label 3\")\n        # Updates goLink's label and icon\n        ui.update_action_link(\"goLink\", label=\"New link label\", icon=\"üîó\")\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_task_button_html",
    "url": "api/core/ui.update_task_button.html",
    "title": "ui.update_task_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update inputs\n- ui.update_task_button\n\nui.update_task_button\n\nChange the state of a task button on the client.\n\nWhen a task button is clicked, it automatically changes to the \"busy\" state. This function can be used to change the state back to \"ready\" when the task is complete.\n\nYou can also use this function to change the state to \"busy\" manually, which will prevent the button from automatically resetting to \"ready\" after a click.\n\nParameters\n\nAn input id.\n\nThe new state of the button. One of ‚Äúready‚Äù, ‚Äúbusy‚Äù, or a custom state name added via input_task_button.\n\nA Session instance. If not provided, it is inferred via get_current_session.\n\n",
    "code_examples": [
      "ui.update_task_button(id, *, state=None, session=None)",
      "ui.update_task_button(id, *, state=None, session=None)"
    ]
  },
  {
    "id": "api_core_ui_update_sidebar_html",
    "url": "api/core/ui.update_sidebar.html",
    "title": "ui.update_sidebar ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- ui.update_sidebar\n\nui.update_sidebar\n\nUpdate a sidebar's visibility.\n\nSet a sidebar state during an active Shiny user session.\n\nParameters\n\nThe id of the sidebar to toggle.\n\nThe desired visible state of the sidebar, where True opens the sidebar and False closes the sidebar (if not already in that state).\n\nA Shiny session object (the default should almost always be used).\n\nSee Also\n\n- sidebar\n- layout_sidebar\n\nExamples\n\n",
    "code_examples": [
      "ui.update_sidebar(id, *, show=None, session=None)",
      "ui.update_sidebar(id, *, show=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\"Sidebar content\", id=\"sidebar\"),\n    ui.input_action_button(\"open_sidebar\", label=\"Open sidebar\", class_=\"me-3\"),\n    ui.input_action_button(\"close_sidebar\", label=\"Close sidebar\", class_=\"me-3\"),\n    ui.br(),\n    ui.br(),\n    ui.output_text_verbatim(\"state\"),\n    fillable=False,\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.open_sidebar)\n    def _():\n        ui.update_sidebar(\"sidebar\", show=True)\n\n    @reactive.effect\n    @reactive.event(input.close_sidebar)\n    def _():\n        ui.update_sidebar(\"sidebar\", show=False)\n\n    @render.text\n    def state():\n        return f\"input.sidebar(): {input.sidebar()}\"\n\n\napp = App(app_ui, server=server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_tooltip_html",
    "url": "api/core/ui.update_tooltip.html",
    "title": "ui.update_tooltip ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- ui.update_tooltip\n\nui.update_tooltip\n\nUpdate tooltip contents.\n\nParameters\n\nA character string that matches an existing tooltip id.\n\nContents to the tooltip‚Äôs body.\n\nOpens (True) or closes (False) the tooltip.\n\nA Shiny session object (the default should almost always be used).\n\nExamples\n\n",
    "code_examples": [
      "ui.update_tooltip(id, *args, show=None, session=None)",
      "ui.update_tooltip(id, *args, show=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"btn_show\", \"Show tooltip\", class_=\"mt-3 me-3\"),\n    ui.input_action_button(\"btn_close\", \"Close tooltip\", class_=\"mt-3 me-3\"),\n    ui.input_action_button(\n        \"btn_update\", \"Update tooltip phrase (and show tooltip)\", class_=\"mt-3 me-3\"\n    ),\n    ui.tooltip(\n        ui.input_action_button(\n            \"btn_w_tooltip\", \"A button w/ a tooltip\", class_=\"btn-primary mt-5\"\n        ),\n        \"A message\",\n        id=\"tooltip_id\",\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.btn_show)\n    def _():\n        ui.update_tooltip(\"tooltip_id\", show=True)\n\n    @reactive.effect\n    @reactive.event(input.btn_close)\n    def _():\n        ui.update_tooltip(\"tooltip_id\", show=False)\n\n    @reactive.effect\n    @reactive.event(input.btn_update)\n    def _():\n        content = (\n            \"A \" + \" \".join([\"NEW\" for _ in range(input.btn_update())]) + \" message\"\n        )\n\n        ui.update_tooltip(\"tooltip_id\", content, show=True)\n\n    @reactive.effect\n    @reactive.event(input.btn_w_tooltip)\n    def _():\n        ui.notification_show(\"Button clicked!\", duration=3, type=\"message\")\n\n\napp = App(app_ui, server=server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_popover_html",
    "url": "api/core/ui.update_popover.html",
    "title": "ui.update_popover ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- ui.update_popover\n\nui.update_popover\n\nUpdate the contents or title of a popover.\n\nParameters\n\nThe id of the popover DOM element to update.\n\nThe new contents of the popover.\n\nThe new title of the popover.\n\nOpens (True) or closes (False) the popover.\n\nA Shiny session object (the default should almost always be used).\n\nSee Also\n\n- popover\n\nExamples\n\n",
    "code_examples": [
      "ui.update_popover(id, *args, title=None, show=None, session=None)",
      "ui.update_popover(id, *args, title=None, show=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"btn_show\", \"Show popover\", class_=\"mt-3 me-3\"),\n    ui.input_action_button(\"btn_close\", \"Close popover\", class_=\"mt-3 me-3\"),\n    ui.br(),\n    ui.br(),\n    ui.popover(\n        ui.input_action_button(\"btn_w_popover\", \"A button w/ a popover\", class_=\"mt-3\"),\n        \"A message\",\n        id=\"popover_id\",\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.btn_show)\n    def _():\n        ui.update_popover(\"popover_id\", show=True)\n\n    @reactive.effect\n    @reactive.event(input.btn_close)\n    def _():\n        ui.update_popover(\"popover_id\", show=False)\n\n    @reactive.effect\n    @reactive.event(input.btn_w_popover)\n    def _():\n        ui.notification_show(\"Button clicked!\", duration=3, type=\"message\")\n\n\napp = App(app_ui, server=server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_accordion_html",
    "url": "api/core/ui.update_accordion.html",
    "title": "ui.update_accordion ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- ui.update_accordion\n\nui.update_accordion\n\nDynamically set accordions' states.\n\nDynamically (i.e., programmatically) update/modify accordions in a Shiny app. These functions require an id to be provided to the accordion and must also be called within an active Shiny session.\n\nParameters\n\nA string that matches an existing accordion‚Äôs id.\n\nEither a string or list of strings (used to identify particular accordion_panel(s) by their value) or a bool to set the state of all panels.\n\nA Shiny session object (the default should almost always be used).\n\nReferences\n\nBootstrap Accordion\n\nSee Also\n\n- accordion\n- accordion_panel\n- insert_accordion_panel\n- remove_accordion_panel\n- update_accordion_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.update_accordion(id, *, show, session=None)",
      "ui.update_accordion(id, *, show, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\nitems = [\n    ui.accordion_panel(f\"Section {letter}\", f\"Some narrative for section {letter}\")\n    for letter in \"ABCDE\"\n]\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"set_acc\", \"Only open sections A,C,E\", class_=\"mt-3 mb-3\"),\n    # Provide an id to create a shiny input binding\n    ui.accordion(*items, id=\"acc\", open=[\"Section B\", \"Section D\"], multiple=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.set_acc)\n    def _():\n        ui.update_accordion(\"acc\", show=[\"Section A\", \"Section C\", \"Section E\"])\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_update_accordion_panel_html",
    "url": "api/core/ui.update_accordion_panel.html",
    "title": "ui.update_accordion_panel ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- ui.update_accordion_panel\n\nui.update_accordion_panel\n\nDynamically update accordion panel contents.\n\nDynamically (i.e., programmatically) update/modify accordion panels in a Shiny app. These functions require an id to be provided to the accordion and must also be called within an active Shiny session.\n\nParameters\n\nA string that matches an existing accordion‚Äôs id.\n\nThe value of an existing panel to update.\n\nIf provided, the new body contents of the panel.\n\nIf not missing, the new title of the panel.\n\nIf not missing, the new value of the panel.\n\nIf not missing, the new icon of the panel.\n\nA Shiny session object (the default should almost always be used).\n\nReferences\n\nBootstrap Accordion\n\nSee Also\n\n- accordion\n- accordion_panel\n- update_accordion\n- insert_accordion_panel\n- remove_accordion_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.update_accordion_panel(\n    id,\n    target,\n    *body,\n    title=MISSING,\n    value=MISSING,\n    icon=MISSING,\n    show=None,\n    session=None,\n)",
      "ui.update_accordion_panel(\n    id,\n    target,\n    *body,\n    title=MISSING,\n    value=MISSING,\n    icon=MISSING,\n    show=None,\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\n\ndef make_panel(letter: str) -> ui.AccordionPanel:\n    return ui.accordion_panel(\n        f\"Section {letter}\",\n        f\"Some narrative for section {letter}\",\n        value=f\"sec_{letter}\",\n    )\n\n\nitems = [make_panel(letter) for letter in \"ABCDE\"]\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"update_panel\", \"Update (and open) Sections\"),\n    ui.accordion(*items, id=\"acc\", multiple=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.update_panel)\n    def _():\n        txt = \" (updated)\" if input.update_panel() else \"\"\n        show = bool(input.update_panel() % 2 == 1)\n        for letter in \"ABCDE\":\n            ui.update_accordion_panel(\n                \"acc\",\n                f\"sec_{letter}\",\n                f\"Some{txt} narrative for section {letter}\",\n                title=f\"Section {letter}{txt}\",\n                # Open Accordion Panel to see updated contents\n                show=show,\n            )\n        next_show_txt = \"close\" if show else \"open\"\n\n        ui.update_switch(\"update_panel\", label=f\"Update (and {next_show_txt}) Sections\")\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_insert_accordion_panel_html",
    "url": "api/core/ui.insert_accordion_panel.html",
    "title": "ui.insert_accordion_panel ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- ui.insert_accordion_panel\n\nui.insert_accordion_panel\n\nInsert an accordion_panel.\n\nParameters\n\nA string that matches an existing accordion‚Äôs id.\n\nAn accordion_panel object to insert.\n\nThe value of an existing panel to insert next to.\n\nShould panel be added before or after the target? When target=None, \"after\" will append after the last panel and \"before\" will prepend before the first panel.\n\nA Shiny session object (the default should almost always be used).\n\nReferences\n\nBootstrap Accordion\n\nSee Also\n\n- accordion\n- accordion_panel\n- update_accordion\n- remove_accordion_panel\n- update_accordion_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.insert_accordion_panel(\n    id,\n    panel,\n    target=None,\n    position='after',\n    session=None,\n)",
      "ui.insert_accordion_panel(\n    id,\n    panel,\n    target=None,\n    position='after',\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\n\ndef make_panel(letter: str) -> ui.AccordionPanel:\n    return ui.accordion_panel(\n        f\"Section {letter}\", f\"Some narrative for section {letter}\"\n    )\n\n\nitems = [make_panel(letter) for letter in \"ABCDE\"]\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"add_panel\", \"Add random panel\", class_=\"mt-3 mb-3\"),\n    ui.accordion(*items, id=\"acc\", multiple=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.add_panel)\n    def _():\n        ui.insert_accordion_panel(\"acc\", make_panel(str(random.randint(0, 10000))))\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_remove_accordion_panel_html",
    "url": "api/core/ui.remove_accordion_panel.html",
    "title": "ui.remove_accordion_panel ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- ui.remove_accordion_panel\n\nui.remove_accordion_panel\n\nRemove an accordion_panel.\n\nParameters\n\nA string that matches an existing accordion‚Äôs id.\n\nThe value of an existing panel to remove.\n\nA Shiny session object (the default should almost always be used).\n\nReferences\n\nBootstrap Accordion\n\nSee Also\n\n- accordion\n- accordion_panel\n- update_accordion\n- insert_accordion_panel\n- update_accordion_panel\n\nExamples\n\n",
    "code_examples": [
      "ui.remove_accordion_panel(id, target, session=None)",
      "ui.remove_accordion_panel(id, target, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\n\ndef make_panel(letter: str) -> ui.AccordionPanel:\n    return ui.accordion_panel(\n        f\"Section {letter}\", f\"Some narrative for section {letter}\"\n    )\n\n\nitems = [make_panel(letter) for letter in \"ABCDE\"]\n\nchoices = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nrandom.shuffle(choices)\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\n        \"remove_panel\",\n        f\"Remove Section {choices[-1]}\",\n        class_=\"mt-3 mb-3\",\n    ),\n    \" (Sections randomly picked at server start)\",\n    ui.accordion(*items, id=\"acc\", multiple=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Copy the list for user\n    user_choices = [choice for choice in choices]\n\n    @reactive.effect\n    @reactive.event(input.remove_panel)\n    def _():\n        if len(user_choices) == 0:\n            ui.notification_show(\"No more panels to remove!\")\n            return\n\n        # Remove panel\n        ui.remove_accordion_panel(\"acc\", f\"Section {user_choices.pop()}\")\n\n        label = \"No more panels to remove!\"\n        if len(user_choices) > 0:\n            label = f\"Remove Section {user_choices[-1]}\"\n        ui.update_action_button(\"remove_panel\", label=label)\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_output_plot_html",
    "url": "api/core/ui.output_plot.html",
    "title": "ui.output_plot ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_plot\n\nui.output_plot\n\nCreate a output container for a static plot.\n\nPlace a plot result in the user interface. See plot for more details on what types of plots are supported.\n\nParameters\n\nAn output id.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nThe CSS height, e.g. ‚Äò100%‚Äô or ‚Äò600px‚Äô.\n\nIf True, the result is displayed inline.\n\nThis can be a boolean or an object created by click_opts. The default is False, but if you use True (or equivalently, click_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_click(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position.\n\nThis is just like the click parameter, but for double-click events.\n\nSimilar to the click argument, this can be a boolean or an object created by hover_opts. The default is False, but if you use True (or equivalently, hover_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_hover(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, use hover_opts.\n\nSimilar to the click argument, this can be a boolean or an object created by brush_opts. The default is False, but if you use True (or equivalently, brush_opts()), the plot will allow the user to ‚Äúbrush‚Äù in the plotting area, and will send information about the brushed area to the server, and the value will be accessible via input.plot_brush(). Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, use brush_opts. Multiple output_image/output_plot calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.\n\nWhether or not to allow the plot output to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable). If no fill value is provided, it will default to the inverse of inline.\n\nReturns\n\nA UI element\n\nSee Also\n\n- plot\n- output_image\n\nExamples\n\n",
    "code_examples": [
      "ui.output_plot(\n    id,\n    width='100%',\n    height='400px',\n    *,\n    inline=False,\n    click=False,\n    dblclick=False,\n    hover=False,\n    brush=False,\n    fill=MISSING,\n)",
      "ui.output_plot(\n    id,\n    width='100%',\n    height='400px',\n    *,\n    inline=False,\n    click=False,\n    dblclick=False,\n    hover=False,\n    brush=False,\n    fill=MISSING,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\n        \"n\", \"input_slider()\", min=10, max=100, value=50, step=5, animate=True\n    ),\n    ui.output_plot(\"p\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot\n    def p():\n        np.random.seed(19680801)\n        x_rand = 100 + 15 * np.random.randn(437)\n        fig, ax = plt.subplots()\n        ax.hist(x_rand, int(input.n()), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_output_image_html",
    "url": "api/core/ui.output_image.html",
    "title": "ui.output_image ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_image\n\nui.output_image\n\nCreate a output container for a static image.\n\nParameters\n\nAn output id.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nThe CSS height, e.g. ‚Äò100%‚Äô or ‚Äò600px‚Äô.\n\nIf True, the result is displayed inline.\n\nThis can be a boolean or an object created by click_opts. The default is False, but if you use True (or equivalently, click_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_click(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position.\n\nThis is just like the click parameter, but for double-click events.\n\nSimilar to the click argument, this can be a boolean or an object created by hover_opts. The default is False, but if you use True (or equivalently, hover_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_hover(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, use hover_opts.\n\nSimilar to the click argument, this can be a boolean or an object created by brush_opts. The default is False, but if you use True (or equivalently, brush_opts()), the plot will allow the user to ‚Äúbrush‚Äù in the plotting area, and will send information about the brushed area to the server, and the value will be accessible via input.plot_brush(). Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, use brush_opts. Multiple output_image/output_plot calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.\n\nWhether or not to allow the image output to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nReturns\n\nA UI element\n\nSee Also\n\n- image\n- output_plot\n\nExamples\n\n",
    "code_examples": [
      "ui.output_image(\n    id,\n    width='100%',\n    height='400px',\n    *,\n    inline=False,\n    click=False,\n    dblclick=False,\n    hover=False,\n    brush=False,\n    fill=False,\n)",
      "ui.output_image(\n    id,\n    width='100%',\n    height='400px',\n    *,\n    inline=False,\n    click=False,\n    dblclick=False,\n    hover=False,\n    brush=False,\n    fill=False,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny.types import ImgData\n\napp_ui = ui.page_fluid(ui.output_image(\"image\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.image\n    def image():\n        from pathlib import Path\n\n        dir = Path(__file__).resolve().parent\n        img: ImgData = {\"src\": str(dir / \"posit-logo.png\"), \"width\": \"100px\"}\n        return img\n\n\napp = App(app_ui, server)\n\n\n## file: posit-logo.png\n## type: binary\\n"
    ]
  },
  {
    "id": "api_core_ui_output_table_html",
    "url": "api/core/ui.output_table.html",
    "title": "ui.output_table ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_table\n\nui.output_table\n\nCreate a output container for a table.\n\nParameters\n\nAn output id.\n\nAdditional attributes to add to the container.\n\nReturns\n\nSee Also\n\n- table\n\nExamples\n\n",
    "code_examples": [
      "ui.output_table(id, **kwargs)",
      "ui.output_table(id, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pathlib\n\nimport pandas as pd\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\ndir = pathlib.Path(__file__).parent\nmtcars = pd.read_csv(dir / \"mtcars.csv\")\n\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"highlight\", \"Highlight min/max values\"),\n    ui.output_table(\"result\"),\n    # Legend\n    ui.panel_conditional(\n        \"input.highlight\",\n        ui.panel_absolute(\n            \"Yellow is maximum, grey is minimum\",\n            bottom=\"6px\",\n            right=\"6px\",\n            class_=\"p-1 bg-light border\",\n        ),\n    ),\n    class_=\"p-3\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.table\n    def result():\n        if not input.highlight():\n            # If we're not highlighting values, we can simply\n            # return the pandas data frame as-is; @render.table\n            # will call .to_html() on it.\n            return mtcars\n        else:\n            # We need to use the pandas Styler API. The default\n            # formatting options for Styler are not the same as\n            # DataFrame.to_html(), so we set a few options to\n            # make them match.\n            return (\n                mtcars.style.set_table_attributes(\n                    'class=\"dataframe shiny-table table w-auto\"'\n                )\n                .hide(axis=\"index\")\n                .format(\n                    {\n                        \"mpg\": \"{0:0.1f}\",\n                        \"disp\": \"{0:0.1f}\",\n                        \"drat\": \"{0:0.2f}\",\n                        \"wt\": \"{0:0.3f}\",\n                        \"qsec\": \"{0:0.2f}\",\n                    }\n                )\n                .set_table_styles(\n                    [dict(selector=\"th\", props=[(\"text-align\", \"right\")])]\n                )\n                .highlight_min(color=\"silver\")\n                .highlight_max(color=\"yellow\")\n            )\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n"
    ]
  },
  {
    "id": "api_core_ui_output_data_frame_html",
    "url": "api/core/ui.output_data_frame.html",
    "title": "ui.output_data_frame ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_data_frame\n\nui.output_data_frame\n\nCreate an output container for an interactive table or grid. Features fast virtualized scrolling, sorting, filtering, and row selection (single or multiple).\n\nParameters\n\nAn output id.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- shiny.render.data_frame\n\nExamples\n\n",
    "code_examples": [
      "ui.output_data_frame(id)",
      "ui.output_data_frame(id)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas  # noqa: F401 (this line needed for Shinylive to load plotly.express)\nimport plotly.express as px\nfrom shinywidgets import output_widget, render_widget\n\nfrom shiny import App, reactive, render, req, ui\n\n# Load the Gapminder dataset\ndf = px.data.gapminder()\n\n# Prepare a summary DataFrame\nsummary_df = (\n    df.groupby(\"country\")\n    .agg(\n        {\n            \"pop\": [\"min\", \"max\", \"mean\"],\n            \"lifeExp\": [\"min\", \"max\", \"mean\"],\n            \"gdpPercap\": [\"min\", \"max\", \"mean\"],\n        }\n    )\n    .reset_index()\n)\n\nsummary_df.columns = [\"_\".join(col).strip() for col in summary_df.columns.values]\nsummary_df.rename(columns={\"country_\": \"country\"}, inplace=True)\n\napp_ui = ui.page_fillable(\n    {\"class\": \"p-3\"},\n    ui.markdown(\n        \"**Instructions**: Select one or more countries in the table below to see more information.\"\n    ),\n    ui.layout_columns(\n        ui.card(ui.output_data_frame(\"summary_data\"), height=\"400px\"),\n        ui.card(output_widget(\"country_detail_pop\"), height=\"400px\"),\n        ui.card(output_widget(\"country_detail_percap\"), height=\"400px\"),\n        col_widths=[12, 6, 6],\n    ),\n)\n\n\ndef server(input, output, session):\n    @render.data_frame\n    def summary_data():\n        return render.DataGrid(summary_df.round(2), selection_mode=\"rows\")\n\n    @reactive.calc\n    def filtered_df():\n        data_selected = summary_data.data_view(selected=True)\n        req(not data_selected.empty)\n        countries = data_selected[\"country\"]\n        # Filter data for selected countries\n        return df[df[\"country\"].isin(countries)]\n\n    @render_widget\n    def country_detail_pop():\n        return px.line(\n            filtered_df(),\n            x=\"year\",\n            y=\"pop\",\n            color=\"country\",\n            title=\"Population Over Time\",\n        )\n\n    @render_widget\n    def country_detail_percap():\n        return px.line(\n            filtered_df(),\n            x=\"year\",\n            y=\"gdpPercap\",\n            color=\"country\",\n            title=\"GDP per Capita Over Time\",\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_output_text_html",
    "url": "api/core/ui.output_text.html",
    "title": "ui.output_text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_text\n\nui.output_text\n\nCreate a output container for some text.\n\nParameters\n\nAn output id.\n\nIf True, the result is displayed inline.\n\nA Callable that returns the output container.\n\nReturns\n\nA UI element\n\nNote\n\nText is HTML-escaped prior to rendering.\n\nSee Also\n\n- text\n- output_text_verbatim\n\nExamples\n\n",
    "code_examples": [
      "ui.output_text(id, inline=False, container=None)",
      "ui.output_text(id, inline=False, container=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"txt\", \"Enter the text to display below:\", \"delete me\"),\n    ui.row(\n        ui.column(6, ui.code(\"ui.output_text()\"), ui.output_text(\"text\")),\n        ui.column(\n            6,\n            ui.code(\"ui.output_text_verbatim(placeholder=True)\"),\n            ui.output_text_verbatim(\"verb\", placeholder=True),\n        ),\n    ),\n    ui.row(\n        ui.column(6),\n        ui.column(\n            6,\n            ui.code(\"ui.output_text_verbatim(placeholder=False)\"),\n            ui.output_text_verbatim(\"verb_no_placeholder\", placeholder=False),\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def text():\n        return input.txt()\n\n    @render.text\n    def verb():\n        return input.txt()\n\n    @render.text\n    def verb_no_placeholder():\n        return input.txt()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_output_code_html",
    "url": "api/core/ui.output_code.html",
    "title": "ui.output_code ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_code\n\nui.output_code\n\nCreate a output container for code (monospaced text).\n\nThis is similar to output_text, except that it displays the text in a fixed-width container with a gray-ish background color and border.\n\nParameters\n\nAn output id.\n\nIf the output is empty or None, should an empty rectangle be displayed to serve as a placeholder? (This does not affect behavior when the output is nonempty.)\n\nReturns\n\nA UI element\n\nNote\n\nThis function is currently the same as output_text_verbatim, but this may change in future versions of Shiny.\n\nSee Also\n\n- text\n- output_text\n- output_text_verbatim\n\nExample\n\nSee output_text\n\n",
    "code_examples": [
      "ui.output_code(id, placeholder=True)",
      "ui.output_code(id, placeholder=True)"
    ]
  },
  {
    "id": "api_core_ui_output_text_verbatim_html",
    "url": "api/core/ui.output_text_verbatim.html",
    "title": "ui.output_text_verbatim ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_text_verbatim\n\nui.output_text_verbatim\n\nCreate a output container for some text.\n\nPlace a text result in the user interface. Differs from output_text in that it wraps the text in a fixed-width container with a gray-ish background color and border.\n\nParameters\n\nAn output id.\n\nIf the output is empty or None, should an empty rectangle be displayed to serve as a placeholder? (This does not affect behavior when the output is nonempty.)\n\nReturns\n\nA UI element\n\nSee Also\n\n- text\n- output_text\n\nExample\n\nSee output_text\n\nExamples\n\n",
    "code_examples": [
      "ui.output_text_verbatim(id, placeholder=False)",
      "ui.output_text_verbatim(id, placeholder=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"caption\", \"Caption:\", \"Data summary\"),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return input.caption()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_output_ui_html",
    "url": "api/core/ui.output_ui.html",
    "title": "ui.output_ui ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_ui\n\nui.output_ui\n\nCreate a output container for a UI (i.e., HTML) element.\n\nParameters\n\nAn output id.\n\nIf True, the result is displayed inline.\n\nA Callable that returns the output container.\n\nWhether or not to allow the UI output to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nWhether or not the UI output area should be considered a fillable (i.e., flexbox) container.\n\nAttributes to be applied to the output container.\n\nReturns\n\nA UI element\n\nSee Also\n\n- ui\n- output_text\n\nExamples\n\n",
    "code_examples": [
      "ui.output_ui(\n    id,\n    inline=False,\n    container=None,\n    fill=False,\n    fillable=False,\n    **kwargs,\n)",
      "ui.output_ui(\n    id,\n    inline=False,\n    container=None,\n    fill=False,\n    fillable=False,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"add\", \"Add more controls\"),\n    ui.output_ui(\"moreControls\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    @reactive.event(input.add)\n    def moreControls():\n        return ui.TagList(\n            ui.input_slider(\"n\", \"N\", min=1, max=1000, value=500),\n            ui.input_text(\"label\", \"Label\"),\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_render_plot_html",
    "url": "api/core/render.plot.html",
    "title": "render.plot ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.plot\n\nrender.plot\n\nReactively render a plot object as an HTML image.\n\nParameters\n\nAlternative text for the image if it cannot be displayed or viewed (i.e., the user uses a screen reader).\n\nWidth of the plot in pixels. If None or MISSING, the width will be determined by the size of the corresponding output_plot. (You should not need to use this argument in most Shiny apps‚Äìset the desired width on output_plot instead.)\n\nHeight of the plot in pixels. If None or MISSING, the height will be determined by the size of the corresponding output_plot. (You should not need to use this argument in most Shiny apps‚Äìset the desired height on output_plot instead.)\n\nAdditional keyword arguments passed to the relevant method for saving the image (e.g., for matplotlib, arguments to savefig(); for PIL and plotnine, arguments to save()).\n\nReturns\n\nA decorator for a function that returns any of the following: 1. A matplotlib.figure.Figure instance. 2. An matplotlib.artist.Artist instance. 3. A list/tuple of Figure/Artist instances. 4. An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance. 5. A PIL.Image.Image instance.\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_plot container (see output_plot for example usage).\n\nSee Also\n\n- output_plot\n- image\n\nExamples\n\n",
    "code_examples": [
      "render.plot(\n    self,\n    _fn=None,\n    *,\n    alt=None,\n    width=MISSING,\n    height=MISSING,\n    **kwargs,\n)",
      "render.plot(\n    self,\n    _fn=None,\n    *,\n    alt=None,\n    width=MISSING,\n    height=MISSING,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\n        \"n\", \"input_slider()\", min=10, max=100, value=50, step=5, animate=True\n    ),\n    ui.output_plot(\"p\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot\n    def p():\n        np.random.seed(19680801)\n        x_rand = 100 + 15 * np.random.randn(437)\n        fig, ax = plt.subplots()\n        ax.hist(x_rand, int(input.n()), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_render_image_html",
    "url": "api/core/render.image.html",
    "title": "render.image ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.image\n\nrender.image\n\nReactively render a image file as an HTML image.\n\nParameters\n\nIf True, the image file will be deleted after rendering.\n\nReturns\n\nA decorator for a function that returns an ImgData object.\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_image container (see output_image for example usage).\n\nSee Also\n\n- output_image\n- ImgData\n- plot\n\nExamples\n\n",
    "code_examples": [
      "render.image(self, _fn=None, *, delete_file=False)",
      "render.image(self, _fn=None, *, delete_file=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny.types import ImgData\n\napp_ui = ui.page_fluid(ui.output_image(\"image\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.image\n    def image():\n        from pathlib import Path\n\n        dir = Path(__file__).resolve().parent\n        img: ImgData = {\"src\": str(dir / \"posit-logo.png\"), \"width\": \"100px\"}\n        return img\n\n\napp = App(app_ui, server)\n\n\n## file: posit-logo.png\n## type: binary\\n"
    ]
  },
  {
    "id": "api_core_render_table_html",
    "url": "api/core/render.table.html",
    "title": "render.table ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.table\n\nrender.table\n\nReactively render a pandas DataFrame object (or similar) as a basic HTML table.\n\nConsider using data_frame instead of this renderer, as it provides high performance virtual scrolling, built-in filtering and sorting, and a better default appearance. This renderer may still be helpful if you use pandas styling features that are not currently supported by data_frame.\n\nParameters\n\nWhether to print index (row) labels. (Ignored for pandas Styler objects; call style.hide(axis=\"index\") from user code instead.)\n\nCSS classes (space separated) to apply to the resulting table. By default, we use table shiny-table w-auto which is designed to look reasonable with Bootstrap 5. (Ignored for pandas Styler objects; call style.set_table_attributes('class=\"dataframe table shiny-table w-auto\"') from user code instead.)\n\nAdditional keyword arguments passed to pandas.DataFrame.to_html() or pandas.io.formats.style.Styler.to_html().\n\nReturns\n\nA decorator for a function that returns any of the following: 1. A pandas DataFrame object. 2. A pandas Styler object. 3. Any object that has a .to_pandas() method (e.g., a Polars data frame or Arrow table).\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_table container (see output_table for example usage).\n\nSee Also\n\n- output_table for the corresponding UI component to this render function.\n\nExamples\n\n",
    "code_examples": [
      "render.table(\n    self,\n    _fn=None,\n    *,\n    index=False,\n    classes='table shiny-table w-auto',\n    border=0,\n    **kwargs,\n)",
      "render.table(\n    self,\n    _fn=None,\n    *,\n    index=False,\n    classes='table shiny-table w-auto',\n    border=0,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pathlib\n\nimport pandas as pd\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\ndir = pathlib.Path(__file__).parent\nmtcars = pd.read_csv(dir / \"mtcars.csv\")\n\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"highlight\", \"Highlight min/max values\"),\n    ui.output_table(\"result\"),\n    # Legend\n    ui.panel_conditional(\n        \"input.highlight\",\n        ui.panel_absolute(\n            \"Yellow is maximum, grey is minimum\",\n            bottom=\"6px\",\n            right=\"6px\",\n            class_=\"p-1 bg-light border\",\n        ),\n    ),\n    class_=\"p-3\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.table\n    def result():\n        if not input.highlight():\n            # If we're not highlighting values, we can simply\n            # return the pandas data frame as-is; @render.table\n            # will call .to_html() on it.\n            return mtcars\n        else:\n            # We need to use the pandas Styler API. The default\n            # formatting options for Styler are not the same as\n            # DataFrame.to_html(), so we set a few options to\n            # make them match.\n            return (\n                mtcars.style.set_table_attributes(\n                    'class=\"dataframe shiny-table table w-auto\"'\n                )\n                .hide(axis=\"index\")\n                .format(\n                    {\n                        \"mpg\": \"{0:0.1f}\",\n                        \"disp\": \"{0:0.1f}\",\n                        \"drat\": \"{0:0.2f}\",\n                        \"wt\": \"{0:0.3f}\",\n                        \"qsec\": \"{0:0.2f}\",\n                    }\n                )\n                .set_table_styles(\n                    [dict(selector=\"th\", props=[(\"text-align\", \"right\")])]\n                )\n                .highlight_min(color=\"silver\")\n                .highlight_max(color=\"yellow\")\n            )\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n"
    ]
  },
  {
    "id": "api_core_render_text_html",
    "url": "api/core/render.text.html",
    "title": "render.text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.text\n\nrender.text\n\nReactively render text.\n\nWhen used in Shiny Express applications, this defaults to displaying the text as normal text on the web page. When used in Shiny Core applications, this should be paired with output_text in the UI.\n\nParameters\n\n(Express only). If True, the result is displayed inline. (This argument is passed to output_text.)\n\nReturns\n\nA decorator for a function that returns a string.\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_text container (see output_text for example usage).\n\nSee Also\n\n- code\n- output_text\n\nExamples\n\n",
    "code_examples": [
      "render.text(self, _fn=None, *, inline=False)",
      "render.text(self, _fn=None, *, inline=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"txt\", \"Enter the text to display below:\", \"delete me\"),\n    ui.row(\n        ui.column(6, ui.code(\"ui.output_text()\"), ui.output_text(\"text\")),\n        ui.column(\n            6,\n            ui.code(\"ui.output_text_verbatim(placeholder=True)\"),\n            ui.output_text_verbatim(\"verb\", placeholder=True),\n        ),\n    ),\n    ui.row(\n        ui.column(6),\n        ui.column(\n            6,\n            ui.code(\"ui.output_text_verbatim(placeholder=False)\"),\n            ui.output_text_verbatim(\"verb_no_placeholder\", placeholder=False),\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def text():\n        return input.txt()\n\n    @render.text\n    def verb():\n        return input.txt()\n\n    @render.text\n    def verb_no_placeholder():\n        return input.txt()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_render_code_html",
    "url": "api/core/render.code.html",
    "title": "render.code ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.code\n\nrender.code\n\nReactively render text as code (monospaced).\n\nWhen used in Shiny Express applications, this defaults to displaying the text in a monospace font in a code block. When used in Shiny Core applications, this should be paired with output_code in the UI.\n\nParameters\n\n(Express only) If the output is empty or None, should an empty rectangle be displayed to serve as a placeholder? This does not affect behavior when the output is nonempty. (This argument is passed to output_code.)\n\nReturns\n\nA decorator for a function that returns a string.\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_code container (see output_code for example usage).\n\nSee Also\n\n- code\n- output_code\n\n",
    "code_examples": [
      "render.code(self, _fn=None, *, placeholder=True)",
      "render.code(self, _fn=None, *, placeholder=True)"
    ]
  },
  {
    "id": "api_core_render_ui_html",
    "url": "api/core/render.ui.html",
    "title": "render.ui ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.ui\n\nrender.ui\n\nReactively render HTML content.\n\nNote: If you want to write your function with Shiny Express syntax, where the UI components are automatically captured as the code is evaluated, use express instead of this function.\n\nThis function is used to render HTML content, but it requires that the funciton returns the content, using Shiny Core syntax.\n\nReturns\n\nA decorator for a function that returns an object of type TagChild.\n\nTips\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_ui container (see output_ui for example usage).\n\nSee Also\n\n- express\n- expressify\n- output_ui\n\nExamples\n\n",
    "code_examples": [
      "render.ui(self, _fn=None)",
      "render.ui(self, _fn=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"add\", \"Add more controls\"),\n    ui.output_ui(\"moreControls\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    @reactive.event(input.add)\n    def moreControls():\n        return ui.TagList(\n            ui.input_slider(\"n\", \"N\", min=1, max=1000, value=500),\n            ui.input_text(\"label\", \"Label\"),\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_render_express_html",
    "url": "api/core/render.express.html",
    "title": "render.express ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.express\n\nrender.express\n\nReactively render HTML content with output captured as in Shiny Express\n\nThis is similar to ui, except that ui uses the return value from the the decorated function, whereas this function works like Shiny Express: as it executes each line of the decorated function, it calls :func:~sys.displayhook() on the result. This has the effect of \"capturing\" the output of each line.\n\nThis decorator can be thought of as a combination of ui (for rendering and sending the dynamic UI to the client), and ~shiny.express.expressify (for capturing the output of each line).\n\nReturns\n\nA decorator for a function that returns None.\n\nSee Also\n\n- ui\n- output_ui\n- expressify\n- hold\n\nExamples\n\n",
    "code_examples": [
      "render.express(\n    self,\n    _fn=None,\n    *,\n    inline=False,\n    container=None,\n    fill=False,\n    fillable=False,\n    **kwargs,\n)",
      "render.express(\n    self,\n    _fn=None,\n    *,\n    inline=False,\n    container=None,\n    fill=False,\n    fillable=False,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"name\", \"Name\", \"Socrates\"),\n    ui.input_text(\"years\", \"Years\", \"470-399 BC\"),\n    ui.output_ui(\"person\"),\n)\n\n\ndef server(input, output, session):\n\n    @render.express\n    def person():\n        from shiny.express import ui\n\n        with ui.card(class_=\"mt-3\"):\n            ui.h3(input.name())\n            input.years()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_render_download_html",
    "url": "api/core/render.download.html",
    "title": "render.download ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.download\n\nrender.download\n\nDecorator to register a function to handle a download.\n\nThis decorator is used to register a function that will be called when the user clicks a download link or button. The decorated function may be sync or async, and should do one of the following:\n\n- Return a string. This will be assumed to be a filename; Shiny will return this file to the browser, and the downloaded file will have the same filename as the original, with an inferred mime type. This is the most convenient IF the file already exists on disk. But if the function must create a temporary file, then this method should not be used, because the temporary file will not be deleted by Shiny. Use the yield method instead.\n- yield one or more strings or bytestrings (b\"...\" or io.BytesIO().getvalue()). If strings are yielded, they'll be encoded in UTF-8. (This is better for temp files as after you're done yielding you can delete the temp file, or use a tempfile.TemporaryFile context manager) With this method, it's important that the @render.download decorator have a filename argument, as the decorated function won't help with that.\n\nParameters\n\nThe filename of the download.\n\nThe media type of the download.\n\nThe encoding of the download.\n\n(Express only) A label for the button. Defaults to ‚ÄúDownload‚Äù.\n\nReturns\n\nThe decorated function.\n\nSee Also\n\n- download_button\n- download_link\n\nExamples\n\n",
    "code_examples": [
      "render.download(\n    self,\n    fn=None,\n    *,\n    filename=None,\n    media_type=None,\n    encoding='utf-8',\n    label='Download',\n)",
      "render.download(\n    self,\n    fn=None,\n    *,\n    filename=None,\n    media_type=None,\n    encoding='utf-8',\n    label='Download',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nimport io\nimport os\nfrom datetime import date\nfrom typing import Any\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\n\ndef make_example(id: str, label: str, title: str, desc: str, extra: Any = None):\n    return ui.column(\n        4,\n        ui.div(\n            {\"class\": \"card mb-4\"},\n            ui.div(title, class_=\"card-header\"),\n            ui.div(\n                {\"class\": \"card-body\"},\n                ui.p(desc, class_=\"card-text text-muted\"),\n                extra,\n                ui.download_button(id, label, class_=\"btn-primary\"),\n            ),\n        ),\n    )\n\n\napp_ui = ui.page_fluid(\n    ui.row(\n        make_example(\n            \"download1\",\n            label=\"Download CSV\",\n            title=\"Simple case\",\n            desc=\"Downloads a pre-existing file, using its existing name on disk.\",\n        ),\n    ),\n    ui.row(\n        make_example(\n            \"download2\",\n            label=\"Download plot\",\n            title=\"Dynamic data generation\",\n            desc=\"Downloads a PNG that's generated on the fly.\",\n            extra=[\n                ui.input_text(\"title\", \"Plot title\", \"Random scatter plot\"),\n                ui.input_slider(\n                    \"num_points\", \"Number of data points\", min=1, max=100, value=50\n                ),\n            ],\n        ),\n    ),\n    ui.row(\n        make_example(\n            \"download3\",\n            \"Download\",\n            \"Dynamic filename\",\n            \"Demonstrates that filenames can be generated on the fly (and use Unicode characters!).\",\n        ),\n    ),\n    ui.row(\n        make_example(\n            \"download4\",\n            \"Download\",\n            \"Failed downloads\",\n            \"Throws an error in the download handler, download should not succeed.\",\n        ),\n    ),\n    ui.row(\n        make_example(\n            \"download5\",\n            \"Download\",\n            \"Undefined download\",\n            \"This button doesn't have corresponding server code registered to it, download should result in 404 error\",\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.download()\n    def download1():\n        \"\"\"\n        This is the simplest case. The implementation simply returns the name of a file.\n        Note that the function name (`download1`) determines which download_button()\n        corresponds to this function.\n        \"\"\"\n\n        path = os.path.join(os.path.dirname(__file__), \"mtcars.csv\")\n        return path\n\n    @render.download(filename=\"image.png\")\n    def download2():\n        \"\"\"\n        Another way to implement a file download is by yielding bytes; either all at\n        once, like in this case, or by yielding multiple times. When using this\n        approach, you should pass a filename argument to @render.download, which\n        determines what the browser will name the downloaded file.\n        \"\"\"\n\n        print(input.num_points())\n        x = np.random.uniform(size=input.num_points())\n        y = np.random.uniform(size=input.num_points())\n        plt.figure()\n        plt.scatter(x, y)\n        plt.title(input.title())\n        with io.BytesIO() as buf:\n            plt.savefig(buf, format=\"png\")\n            yield buf.getvalue()\n\n    @render.download(\n        filename=lambda: f\"Êñ∞Âûã-{date.today().isoformat()}-{np.random.randint(100, 999)}.csv\"\n    )\n    async def download3():\n        await asyncio.sleep(0.25)\n        yield \"one,two,three\\n\"\n        yield \"Êñ∞,1,2\\n\"\n        yield \"Âûã,4,5\\n\"\n\n    @output(id=\"download4\")\n    @render.download(filename=\"failuretest.txt\")\n    async def _():\n        yield \"hello\"\n        raise Exception(\"This error was caused intentionally\")\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n"
    ]
  },
  {
    "id": "api_core_render_data_frame_html",
    "url": "api/core/render.data_frame.html",
    "title": "render.data_frame ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.data_frame\n\nrender.data_frame\n\nDecorator for a function that returns a pandas, polars, or eager narwhals compatible DataFrame object to render as an interactive table or grid. Features fast virtualized scrolling, sorting, filtering, and row selection (single or multiple).\n\nReturns\n\nA decorator for a function that returns any of the following: 1. A DataGrid or DataTable object, which can be used to customize the appearance and behavior of the data frame output. 2. A pandas, polars, or eager narwhals compatible DataFrame object. This object will be internally upgraded to a default shiny.render.DataGrid(df).\n\nRow selection\n\nWhen using the row selection feature, you can access the selected rows by using the <data_frame_renderer>.cell_selection() method, where <data_frame_renderer> is the @render.data_frame function name that corresponds with the id= used in outout_data_frame. Internally, <data_frame_renderer>.cell_selection() retrieves the selected cell information from session‚Äôs input.<data_frame_renderer>_cell_selection() value and upgrades it for consistent subsetting.\n\nFor example, to filter your pandas data frame (df) down to the selected rows you can use:\n\n- df.iloc[list(input.<data_frame_renderer>_cell_selection()[\"rows\"])]\n- df.iloc[list(<data_frame_renderer>.cell_selection()[\"rows\"])]\n- <data_frame_renderer>.data_view(selected=True)\n\nThe last method (.data_view(selected=True)) will also apply any sorting, filtering, or edits that has been applied by the user.\n\nEditing cells\n\nWhen a returned DataTable or DataGrid object has editable=True, app users will be able to edit the cells in the table. After a cell has been edited, the edited value will be sent to the server for processing. The handling methods are set via @<data_frame_renderer>.set_patch_fn or @<data_frame_renderer>.set_patches_fn decorators. By default, both decorators will return the corresponding value as a string.\n\nData methods\n\nThere are several methods available to inspect and update data frame renderer. It is important to know the side effects of each method to know how they interact with each other.\n\n- Data frame render method: When this method is reactively executed, the .data() data frame is set to the underlying data frame and all .cell_patches() are removed. When this method is reactively executed, all user state is reset. This includes the user‚Äôs edits, sorting, filtering.\n- .data(): Reactive calculation that returns the render method‚Äôs underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n- .cell_patches(): Reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame.\n- .data_patched(): Reactive calculation that returns the .data() data frame with all .cell_patches() patches applied.\n- .data_view(*, selected: bool): Reactive function that returns the .data_patched() data frame with the user‚Äôs sorting and filtering applied. It represents the data frame as viewed by the user within the browser. If selected=True, only the selected rows are returned.\n- .update_cell_value(value, row, col): Sets a new entry in .cell_patches(). Calling this method will not reset the user‚Äôs sorting or filtering.\n- .update_data(data): Updates the .data() data frame with new data. Calling this method will remove all .cell_patches(). Calling this method will not reset the user‚Äôs sorting or filtering.\n\n- When this method is reactively executed, the .data() data frame is set to the underlying data frame and all .cell_patches() are removed.\n- When this method is reactively executed, all user state is reset. This includes the user‚Äôs edits, sorting, filtering.\n\n- Reactive calculation that returns the render method‚Äôs underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n\n- Reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame.\n\n- Reactive calculation that returns the .data() data frame with all .cell_patches() patches applied.\n\n- Reactive function that returns the .data_patched() data frame with the user‚Äôs sorting and filtering applied. It represents the data frame as viewed by the user within the browser.\n- If selected=True, only the selected rows are returned.\n\n- Sets a new entry in .cell_patches().\n- Calling this method will not reset the user‚Äôs sorting or filtering.\n\n- Updates the .data() data frame with new data.\n- Calling this method will remove all .cell_patches().\n- Calling this method will not reset the user‚Äôs sorting or filtering.\n\nNote: All data methods are shallow copies of each other. If they are mutated in place, it will modify the underlying data object and possibly alter other data objects.\n\nNarwhals\n\nShiny uses narwhals to manage data frame interactions. From their website: ‚ÄúExtremely lightweight and extensible compatibility layer between dataframe libraries!‚Äù. This allows for seamless integration between pandas, polars, and any other eagerly defined data frame type.\n\nThere are some reasonable limitations to the narwhals compatibility layer. As they are found, they will be added to this list: * When converting the column type who does not have a 1:1 mapping between libraries (such as pandas‚Äô columns containing str and dict items both share the same object data type), narwhals will only inspect the first row to disambiguate the cell type. This could lead to false negatives in the data type conversion. Shiny could inspect each column in an attempt to disambiguate the cell type, but this would be a costly operation. The best way to avoid this is to use consistent typing. For example, if your first row of the pandas column contains a string and the second row of the same column contains a ui.TagList, the column will incorrectly be interpreted as a string. To get around this, you can wrap all cells (or at the very lest the first cell) in the same column within a ui.TagList as it will not insert any tags, but it will cause the column to be interpreted as html where possible. (tl/dr: Use consistent typing in your columns!)\n\nTip\n\nThis decorator should be applied before the @output decorator (if that decorator is used). Also, the name of the decorated function (or @output(id=...)) should match the id of a output_data_frame container (see output_data_frame for example usage).\n\nSee Also\n\n- output_data_frame\n- DataGrid and DataTable are the objects you can return from the rendering function to specify options.\n\nExamples\n\nMethods\n\ncell_patches\n\nReactive calculation of the data frame's edits.\n\nThis reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame.\n\nReturns\n\nA list of cell patches to apply to the data frame.\n\ncell_selection\n\nReactive calculation of selected cell information.\n\nThis method is a wrapper around input.<id>_cell_selection(), where <id> is the id of the data frame output. This method returns the selected rows and will cause reactive updates as the selected rows change.\n\nThe value has been enhanced from it's vanilla form to include the missing cols key (or rows key) as a tuple of integers representing all column (or row) numbers. This allows for consistent usage within code when subsetting your data. These missing keys are not sent over the wire as they are independent of the selection.\n\nReturns\n\nCellSelection representing the indices of the selected cells. If no cells are currently selected, None is returned.\n\ndata\n\nReactive calculation of the data frame's data.\n\nThis reactive calculation returns the render method's underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n\nThe returned value is a shallow copy of the original data frame. It is possible that alterations to the .data() data frame could alter other associated data frame values. Please be cautious when using this value directly.\n\nReturns\n\nThis reactive calculation returns the render method‚Äôs underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n\ndata_patched\n\nReactive calculation of the data frame's patched data.\n\nThis method returns the .data() data frame with all .cell_patches() patches applied.\n\nThe returned value is a shallow copy of the original data frame. It is possible that alterations to the .data_patched() data frame could alter other associated data frame values. Please be cautious when using this value directly.\n\nReturns\n\nThe patched data frame.\n\ndata_view\n\nReactive function that retrieves the data how it is viewed within the browser.\n\nThis function will return the .data_patched() data frame with the user's sorting and filtering applied. It represents the data frame as viewed by the user within the browser.\n\nThe returned value is a shallow copy of the original data frame. It is possible that alterations to the .data_view() data frame could alter other associated date frame values. Please be cautious when using this value directly.\n\nParameters\n\nIf True, subset the viewed data to the selected area. Defaults to False (all rows).\n\nReturns\n\nA view of the (possibly selected) data frame as seen in the browser.\n\nSee Also\n\n- pandas.DataFrame.copy API documentation\n- polars.DataFrame.clone API documentation\n- narwhals.DataFrame.clone API documentation\n\nExamples\n\ndata_view_rows\n\nReactive calculation of the data frame's user view row numbers.\n\nThis value is a wrapper around input.<id>_data_view_rows(), where <id> is the id of the data frame output.\n\nReturns\n\nThe row numbers of the data frame that are currently being viewed in the browser after sorting and filtering has been applied.\n\nfilter\n\nReactive calculation of the data frame's column filters.\n\nReturns\n\nAn array of column number and value information. If the column type is a number, a tuple of (min, max) is used for value. If no min (or max) value is set, None is used in its place. If the column type is a string, the string value is used for value.\n\ninput_cell_selection\n\n[Deprecated] Reactive calculation of selected cell information.\n\nPlease use ~shiny.render.data_frame's .cell_selection() method instead.\n\nselection_modes\n\nReactive calculation of the data frame's possible selection modes.\n\nReturns\n\nThe possible selection modes for the data frame.\n\nset_patch_fn\n\nDecorator to set the function that updates a single cell in the data frame.\n\nThe default patch function returns the value as is.\n\nParameters\n\nA function that accepts a kwarg patch and returns the processed patch.value for the cell.\n\nExamples\n\nset_patches_fn\n\nDecorator to set the function that updates a batch of cells in the data frame.\n\nThe default patches function calls the async ._patch_fn() on each input patch and returns the updated patch values.\n\nThere are no checks made on the quantity of patches returned. The user can return more, less, or the same number of patches as the input patches. This allows for the app author to own more control over which columns are updated and how they are updated.\n\nParameters\n\nA function that accepts a kwarg patches and returns a list of (possibly updated) patches to apply to the data frame.\n\nExamples\n\nsort\n\nReactive calculation of the data frame's column sorting information.\n\nReturns\n\nAn array of column number and is descending information.\n\nupdate_cell_selection\n\nUpdate the cell selection in the data frame.\n\nCurrently only single (\"type\": \"row\") or multiple (\"type\": \"rows\") row selection is supported.\n\nIf the current data frame selection mode is \"none\" and a non-none selection is provided, a warning will be raised and no rows will be selected. If cells are supposes to be selected, the selection mode returned from the render function must (currently) be set to \"row\" or \"rows\".\n\nParameters\n\nThe cell selection to apply to the data frame. This can be a CellSelection object, \"all\" to select all cells (if possible), or None to clear the selection.\n\nupdate_cell_value\n\nUpdate the value of a cell in the data frame.\n\nCalling this method will set a new entry in .cell_patches(). It will not reset the user's sorting or filtering of their rendered data frame.\n\nParameters\n\nThe new value to set the cell to.\n\nThe row index of the cell to update.\n\nThe column index of the cell to update.\n\nupdate_data\n\nUpdate the data frame with new data.\n\nCalling this method will update the .data() data frame with new data and will remove all .cell_patches(). It will not reset the user's sorting or filtering of their rendered data frame. Any incompatible sorting or filtering settings will be silently dropped.\n\nParameters\n\nThe new data to render.\n\nupdate_filter\n\nUpdate the column filtering in the data frame.\n\nParameters\n\nA list of column filtering information. If None, filtering will be removed.\n\nExamples\n\nupdate_sort\n\nUpdate the column sorting in the data frame.\n\nThe sort will be applied in reverse order so that the first value has the highest precedence. This mean ties will go to the second sort column (and so on).\n\nParameters\n\nA list of column sorting information. If None, sorting will be removed. int values will be upgraded to {\"col\": int, \"desc\": <DESC>} where <DESC> is True if the column is number like and False otherwise.\n\nExamples\n\n",
    "code_examples": [
      "render.data_frame(self, fn)",
      "render.data_frame(self, fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas  # noqa: F401 (this line needed for Shinylive to load plotly.express)\nimport plotly.express as px\nfrom shinywidgets import output_widget, render_widget\n\nfrom shiny import App, reactive, render, req, ui\n\n# Load the Gapminder dataset\ndf = px.data.gapminder()\n\n# Prepare a summary DataFrame\nsummary_df = (\n    df.groupby(\"country\")\n    .agg(\n        {\n            \"pop\": [\"min\", \"max\", \"mean\"],\n            \"lifeExp\": [\"min\", \"max\", \"mean\"],\n            \"gdpPercap\": [\"min\", \"max\", \"mean\"],\n        }\n    )\n    .reset_index()\n)\n\nsummary_df.columns = [\"_\".join(col).strip() for col in summary_df.columns.values]\nsummary_df.rename(columns={\"country_\": \"country\"}, inplace=True)\n\napp_ui = ui.page_fillable(\n    {\"class\": \"p-3\"},\n    ui.markdown(\n        \"**Instructions**: Select one or more countries in the table below to see more information.\"\n    ),\n    ui.layout_columns(\n        ui.card(ui.output_data_frame(\"summary_data\"), height=\"400px\"),\n        ui.card(output_widget(\"country_detail_pop\"), height=\"400px\"),\n        ui.card(output_widget(\"country_detail_percap\"), height=\"400px\"),\n        col_widths=[12, 6, 6],\n    ),\n)\n\n\ndef server(input, output, session):\n    @render.data_frame\n    def summary_data():\n        return render.DataGrid(summary_df.round(2), selection_mode=\"rows\")\n\n    @reactive.calc\n    def filtered_df():\n        data_selected = summary_data.data_view(selected=True)\n        req(not data_selected.empty)\n        countries = data_selected[\"country\"]\n        # Filter data for selected countries\n        return df[df[\"country\"].isin(countries)]\n\n    @render_widget\n    def country_detail_pop():\n        return px.line(\n            filtered_df(),\n            x=\"year\",\n            y=\"pop\",\n            color=\"country\",\n            title=\"Population Over Time\",\n        )\n\n    @render_widget\n    def country_detail_percap():\n        return px.line(\n            filtered_df(),\n            x=\"year\",\n            y=\"gdpPercap\",\n            color=\"country\",\n            title=\"GDP per Capita Over Time\",\n        )\n\n\napp = App(app_ui, server)\n\n",
      "render.data_frame.cell_patches()",
      "render.data_frame.cell_patches()",
      "render.data_frame.cell_selection()",
      "render.data_frame.cell_selection()",
      "render.data_frame.data()",
      "render.data_frame.data()",
      "render.data_frame.data_patched()",
      "render.data_frame.data_patched()",
      "render.data_frame.data_view(selected=False)",
      "render.data_frame.data_view(selected=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Editable data frame\n                    * Edit the cells!\n                    * Sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_original\"),\n        ),\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Updated data from the first data frame\n                    * Select the rows!\n                    * Filter and sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_edited\"),\n        ),\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Selected data from the second data frame\n                    * Sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_selected\"),\n        ),\n        col_widths=[4, 4, 4],\n    ),\n)\n\n\ndef server(input, output, session):\n    df = reactive.value(mtcars.iloc[:, range(4)])\n\n    @render.data_frame\n    def df_original():\n        return render.DataGrid(\n            df(),\n            editable=True,\n        )\n\n    # Convert edited values to the correct data type\n    @df_original.set_patch_fn\n    def _(*, patch: render.CellPatch) -> render.CellValue:\n        if patch[\"column_index\"] in [0, 2]:\n            return float(patch[\"value\"])\n        return int(patch[\"value\"])\n\n    @render.data_frame\n    def df_edited():\n        return render.DataGrid(\n            # Reactive value is updated when the user edits the data within `df_original` output\n            df_original.data_view(),\n            selection_mode=\"rows\",\n            filters=True,\n        )\n\n    @render.data_frame\n    def df_selected():\n        return render.DataGrid(\n            # Reactive value is updated when the user selects rows the data within `df_edited` output\n            df_edited.data_view(selected=True),\n            selection_mode=\"rows\",\n        )\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
      "render.data_frame.data_view_rows()",
      "render.data_frame.data_view_rows()",
      "render.data_frame.filter()",
      "render.data_frame.filter()",
      "render.data_frame.input_cell_selection()",
      "render.data_frame.input_cell_selection()",
      "render.data_frame.selection_modes()",
      "render.data_frame.selection_modes()",
      "render.data_frame.set_patch_fn(fn)",
      "render.data_frame.set_patch_fn(fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Editable data frame\n                    * Edit the cells!\n                    * Sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_original\"),\n        ),\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Updated data from the first data frame\n                    * Select the rows!\n                    * Filter and sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_edited\"),\n        ),\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Selected data from the second data frame\n                    * Sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_selected\"),\n        ),\n        col_widths=[4, 4, 4],\n    ),\n)\n\n\ndef server(input, output, session):\n    df = reactive.value(mtcars.iloc[:, range(4)])\n\n    @render.data_frame\n    def df_original():\n        return render.DataGrid(\n            df(),\n            editable=True,\n        )\n\n    # Convert edited values to the correct data type\n    @df_original.set_patch_fn\n    def _(*, patch: render.CellPatch) -> render.CellValue:\n        if patch[\"column_index\"] in [0, 2]:\n            return float(patch[\"value\"])\n        return int(patch[\"value\"])\n\n    @render.data_frame\n    def df_edited():\n        return render.DataGrid(\n            # Reactive value is updated when the user edits the data within `df_original` output\n            df_original.data_view(),\n            selection_mode=\"rows\",\n            filters=True,\n        )\n\n    @render.data_frame\n    def df_selected():\n        return render.DataGrid(\n            # Reactive value is updated when the user selects rows the data within `df_edited` output\n            df_edited.data_view(selected=True),\n            selection_mode=\"rows\",\n        )\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
      "render.data_frame.set_patches_fn(fn)",
      "render.data_frame.set_patches_fn(fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nimport pandas as pd\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fillable(\n    {\"class\": \"p-3\"},\n    ui.markdown(\n        \"\"\"\n        #### Instructions:\n        * Run the app locally so that the edits to the underlying CSV file will persist.\n        * Edit the cells in the table.\n\n        #### Note:\n        The data frame will not be re-rendered as the result of `df()` has not updated.\n\n        Once the `df()` is invalidated, all local edits are forgotten, and the data frame will be re-rendered. However, since the edits were saved to the CSV file, the edits will persist between refreshes (when run locally).\n        \"\"\"\n    ),\n    ui.card(\n        ui.output_data_frame(\"my_data_frame\"),\n    ),\n)\n\nhere = Path(__file__).parent\n\n\ndef server(input, output, session):\n    mtcars_df = reactive.value(pd.read_csv(here / \"mtcars.csv\").iloc[:, range(4)])\n\n    # A copy of the data frame that will store all the edits\n    edited_df = reactive.value(None)\n\n    # Copy mtcars_df to edited_df when mtcars_df changes and on initial load\n    @reactive.effect\n    def _sync_mtcars_to_edited_df():\n        edited_df.set(mtcars_df())\n\n    @render.data_frame\n    def my_data_frame():\n        return render.DataGrid(\n            mtcars_df(),\n            editable=True,\n        )\n\n    # Save the edited values to the data source (ex: the CSV file)\n    @my_data_frame.set_patches_fn\n    def _(*, patches: list[render.CellPatch]) -> list[render.CellPatch]:\n        for patch in patches:\n            if patch[\"column_index\"] in [0, 2]:\n                patch[\"value\"] = float(patch[\"value\"])\n            else:\n                patch[\"value\"] = int(patch[\"value\"])\n\n        # \"Save to the database\" by writing the edited data to a CSV file\n        df = edited_df().copy()\n        for patch in patches:\n            df.iloc[patch[\"row_index\"], patch[\"column_index\"]] = patch[\"value\"]\n        edited_df.set(df)\n        df.to_csv(here / \"mtcars.csv\", index=False)\n        print(\"Saved the edited data to './mtcars.csv'\")\n\n        return patches\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp\n21.0,6,160.0,110\n21.0,6,160.0,110\n22.8,4,108.0,93\n21.4,6,258.0,110\n18.7,8,360.0,175\n18.1,6,225.0,105\n14.3,8,360.0,245\n24.4,4,146.7,62\n22.8,4,140.8,95\n19.2,6,167.6,123\n17.8,6,167.6,123\n16.4,8,275.8,180\n17.3,8,275.8,180\n15.2,8,275.8,180\n10.4,8,472.0,205\n10.4,8,460.0,215\n14.7,8,440.0,230\n32.4,4,78.7,66\n30.4,4,75.7,52\n33.9,4,71.1,65\n21.5,4,120.1,97\n15.5,8,318.0,150\n15.2,8,304.0,150\n13.3,8,350.0,245\n19.2,8,400.0,175\n27.3,4,79.0,66\n26.0,4,120.3,91\n30.4,4,95.1,113\n15.8,8,351.0,264\n19.7,6,145.0,175\n15.0,8,301.0,335\n21.4,4,121.0,109\n\n",
      "render.data_frame.sort()",
      "render.data_frame.sort()",
      "render.data_frame.update_cell_selection(selection)",
      "render.data_frame.update_cell_selection(selection)",
      "render.data_frame.update_cell_value(value, *, row, col)",
      "render.data_frame.update_cell_value(value, *, row, col)",
      "render.data_frame.update_data(data)",
      "render.data_frame.update_data(data)",
      "render.data_frame.update_filter(filter)",
      "render.data_frame.update_filter(filter)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fillable(\n    ui.card(\n        ui.layout_column_wrap(\n            ui.input_action_button(\"btn\", \"Filter on columns 0, 1, and 3\"),\n            ui.input_action_button(\"reset\", \"Reset column filters\"),\n            fill=False,\n        ),\n        ui.output_data_frame(\"df\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    data = reactive.value(mtcars.iloc[:, range(4)])\n\n    @render.data_frame\n    def df():\n        return render.DataGrid(data(), filters=True)\n\n    @reactive.effect\n    @reactive.event(input.reset)\n    async def _():\n        await df.update_filter(None)\n\n    @reactive.effect\n    @reactive.event(input.btn)\n    async def _():\n        await df.update_filter(\n            [\n                {\"col\": 0, \"value\": [19, 25]},\n                {\"col\": 1, \"value\": [None, 6]},\n                {\"col\": 3, \"value\": [100, None]},\n            ]\n        )\n\n\napp = App(app_ui, server, debug=True)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
      "render.data_frame.update_sort(sort)",
      "render.data_frame.update_sort(sort)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fillable(\n    ui.card(\n        ui.layout_column_wrap(\n            ui.input_action_button(\"btn\", \"Sort on columns 1‚Üë and 3‚Üì\"),\n            ui.input_action_button(\"reset\", \"Reset sorting\"),\n            fill=False,\n        ),\n        ui.output_data_frame(\"df\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    data = reactive.value(mtcars.iloc[:, range(4)])\n\n    @render.data_frame\n    def df():\n        return render.DataGrid(data())\n\n    @reactive.effect\n    @reactive.event(input.reset)\n    async def _():\n        await df.update_sort(None)\n\n    @reactive.effect\n    @reactive.event(input.btn)\n    async def _():\n        await df.update_sort([{\"col\": 1, \"desc\": False}, {\"col\": 3, \"desc\": True}])\n\n\napp = App(app_ui, server, debug=True)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n"
    ]
  },
  {
    "id": "api_core_render_DataGrid_html",
    "url": "api/core/render.DataGrid.html",
    "title": "render.datagrid ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.DataGrid\n\nrender.DataGrid\n\nHolds the data and options for a data_frame output, for a spreadsheet-like view.\n\nThis class is used to wrap the returned data frame from a @render.data_frame render function. It allows you to specify options for the data grid, such as the width and height of the grid, whether to show a summary message, whether to show filter inputs, whether the cells are editable, and how the cells are selected.\n\nWhile there are currently no execution or parameter differences between DataGrid and DataTable other than CSS styling in the browser, the two classes are kept separate to allow for future extensibility.\n\nParameters\n\nA pandas, polars, or eager narwhals compatible DataFrame object.\n\nA maximum amount of horizontal space for the data grid to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. The default is fit-content, which sets the grid‚Äôs width according to its contents. Set this to 100% to use the maximum available horizontal space.\n\nA maximum amount of vertical space for the data grid to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the grid will scroll. Set the height to \"auto\" to allow the grid to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).\n\nIf True (the default), shows a message like ‚ÄúViewing rows 1 through 10 of 20‚Äù below the grid when not all of the rows are being shown. If False, the message is not displayed. You can also specify a string template to customize the message, containing {start}, {end}, and {total} tokens. For example: \"Viendo filas {start} a {end} de {total}\".\n\nIf True, shows a row of filter inputs below the headers, one for each column.\n\nIf True, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.\n\nSingle string or a set/list/tuple of string values to define possible ways to select data within the data frame. Supported values: * Use \"none\" to disable any cell selections or editing. * Use \"row\" to allow a single row to be selected at a time. * Use \"rows\" to allow multiple rows to be selected by clicking on them individually. Resolution rules: * If \"none\" is supplied, all other values will be ignored. * If both \"row\" and \"rows\" are supplied, \"row\" will be dropped (supporting \"rows\").\n\nA style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If styles=None, no styling will be applied. Style info object key/value description: * location: This value \"body\" and is not required. * rows: The row numbers to which the style should be applied. If None, the style will be applied to all rows. * cols: The column numbers to which the style should be applied. If None, the style will be applied to all columns. * style: A dictionary of CSS properties and values to apply to the selected rows and columns. Traditional kebab-cased CSS property names (e.g. background-color) will work in addition to camelCased CSS property names (e.g. backgroundColor). * class: A string of CSS class names to apply to the selected rows and columns. If both style and class are missing or None, nothing will be applied. If both rows and cols are missing or None, the style will be applied to the complete data frame.\n\nDeprecated. Please use selection_mode= instead.\n\nReturns\n\nAn object suitable for being returned from a @render.data_frame-decorated output function.\n\nSee Also\n\n- output_data_frame - The UI placeholder for a data frame output.\n- data_frame - The render method for data frames.\n- DataTable - A more tabular view of the data.\n\nExamples\n\nMethods\n\nto_payload\n\nConverts the DataGrid object to a payload dictionary.\n\nReturns\n\nThe payload dictionary representing the DataGrid object.\n\n",
    "code_examples": [
      "render.DataGrid(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height=None,\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "render.DataGrid(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height=None,\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\nimport seaborn as sns\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.head_content(\n        ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\")\n    ),\n    ui.input_select(\n        \"selection_mode\",\n        \"Selection mode\",\n        {\n            \"none\": \"(None)\",\n            \"row\": \"Single row\",\n            \"rows\": \"Multiple rows\",\n        },\n        selected=\"rows\",\n    ),\n    ui.input_switch(\"filters\", \"Filters\", True),\n    ui.input_switch(\"editable\", \"Editable\", True),\n    ui.layout_column_wrap(\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataGrid\")),\n            ui.output_data_frame(\"grid\"),\n        ),\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataTable\")),\n            ui.output_data_frame(\"table\"),\n        ),\n        width=1 / 2,\n    ),\n    class_=\"p-3\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    df: reactive.value[pd.DataFrame] = reactive.value(\n        sns.load_dataset(\"anagrams\").iloc[:, 1:]\n    )\n\n    def update_data_with_patch(patch):\n        df_copy = df().copy()\n        fn = str if patch[\"column_index\"] == 0 else int\n        df_copy.iat[patch[\"row_index\"], patch[\"column_index\"]] = fn(patch[\"value\"])\n        df.set(df_copy)\n\n    height = 350\n    width = \"fit-content\"\n\n    @render.data_frame\n    def grid():\n        return render.DataGrid(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @grid.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n    @render.data_frame\n    def table():\n        return render.DataTable(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @table.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n\napp = App(app_ui, server)\n\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\n\nfrom shiny import App, Inputs, render, ui\n\ngreen_styles = [\n    {\n        \"rows\": [2, 4],\n        \"cols\": [2, 4],\n        \"style\": {\n            \"background-color\": \"mediumspringgreen\",\n            \"width\": \"300px\",\n            \"height\": \"100px\",\n        },\n    }\n]\n\nn = 6\ndf = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n    }\n)\n\nhi_styles = [\n    {\n        # No `rows` or `cols` means apply to all cells\n        \"class\": \"posit-bg\",\n        \"style\": {\n            \"border\": \"transparent\",\n            \"color\": \"transparent\",\n        },\n    },\n    {\n        \"rows\": [3],\n        \"cols\": [2],\n        \"class\": \"posit-blue-bg\",\n        \"style\": {\n            \"width\": \"100px\",\n            \"height\": \"75px\",\n        },\n    },\n    {\n        \"cols\": [1, 3, 5],\n        \"class\": \"posit-blue-bg\",\n    },\n    {\n        \"cols\": [7],\n        \"rows\": [0, 1, 2, 3, 5],\n        \"class\": \"posit-orange-bg\",\n    },\n]\n\nn = 7\nhi_pd = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n        \"f\": range(n * 5, n * 6),\n        \"g\": range(n * 6, n * 7),\n        \"h\": range(n * 7, n * 8),\n        \"i\": range(n * 8, n * 9),\n    }\n)\n\n\napp_ui = ui.page_fillable(\n    ui.h2(\"Data Frame with Styles applied to 4 cells\"),\n    ui.output_data_frame(\"my_df\"),\n    ui.hr(),\n    ui.tags.style(\n        ui.HTML(\n            \"\"\"\n        .posit-bg {\n            background-color: #242a26 ;\n        }\n        .posit-blue-bg {\n            background-color: #447099 ;\n        }\n        .posit-orange-bg {\n            background-color: #ED642F ;\n        }\n        \"\"\"\n        )\n    ),\n    ui.h2(\n        \"Custom styles applied to all cells within a data frame \", ui.HTML(\"&#128075;\")\n    ),\n    ui.output_data_frame(\"hi_df\"),\n)\n\n\ndef server(input: Inputs):\n    @render.data_frame\n    def my_df():\n        return render.DataGrid(\n            df,\n            styles=green_styles,\n        )\n\n    @render.data_frame\n    def hi_df():\n        return render.DataGrid(\n            hi_pd,\n            styles=hi_styles,\n        )\n\n\napp = App(app_ui, server)\n\n",
      "render.DataGrid.to_payload()",
      "render.DataGrid.to_payload()"
    ]
  },
  {
    "id": "api_core_render_DataTable_html",
    "url": "api/core/render.DataTable.html",
    "title": "render.datatable ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.DataTable\n\nrender.DataTable\n\nHolds the data and options for a data_frame output, for a spreadsheet-like view.\n\nThis class is used to wrap the returned data frame from a @render.data_frame render function. It allows you to specify options for the data table, such as the width and height of the table, whether to show a summary message, whether to show filter inputs, whether the cells are editable, and how the cells are selected.\n\nWhile there are currently no execution or parameter differences between DataGrid and DataTable other than CSS styling in the browser, the two classes are kept separate to allow for future extensibility.\n\nParameters\n\nA pandas, polars, or eager narwhals compatible DataFrame object.\n\nA maximum amount of vertical space for the data table to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. The default is fit-content, which sets the table‚Äôs width according to its contents. Set this to 100% to use the maximum available horizontal space.\n\nA maximum amount of vertical space for the data table to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the table body will scroll. Set the height to None to allow the table to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).\n\nIf True (the default), shows a message like ‚ÄúViewing rows 1 through 10 of 20‚Äù below the grid when not all of the rows are being shown. If False, the message is not displayed. You can also specify a string template to customize the message, containing {start}, {end}, and {total} tokens. For example: \"Viendo filas {start} a {end} de {total}\".\n\nIf True, shows a row of filter inputs below the headers, one for each column.\n\nIf True, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.\n\nSingle string or a set/list/tuple of string values to define possible ways to select data within the data frame. Supported values: * Use \"none\" to disable any cell selections or editing. * Use \"row\" to allow a single row to be selected at a time. * Use \"rows\" to allow multiple rows to be selected by clicking on them individually. Resolution rules: * If \"none\" is supplied, all other values will be ignored. * If both \"row\" and \"rows\" are supplied, \"row\" will be dropped (supporting \"rows\").\n\nA style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If styles=None, no styling will be applied. Style info object key/value description: * location: This value \"body\" and is not required. * rows: The row numbers to which the style should be applied. If None, the style will be applied to all rows. * cols: The column numbers to which the style should be applied. If None, the style will be applied to all columns. * style: A dictionary of CSS properties and values to apply to the selected rows and columns. Traditional kebab-cased CSS property names (e.g. background-color) will work in addition to camelCased CSS property names (e.g. backgroundColor). * class: A string of CSS class names to apply to the selected rows and columns. If both style and class are missing or None, nothing will be applied. If both rows and cols are missing or None, the style will be applied to the complete data frame.\n\nDeprecated. Please use mode={row_selection_mode}_row instead.\n\nReturns\n\nAn object suitable for being returned from a @render.data_frame-decorated output function.\n\nSee Also\n\n- output_data_frame - The UI placeholder for a data frame output.\n- data_frame - The render method for data frames.\n- DataTable - A more grid view of the data.\n\nExamples\n\nMethods\n\nto_payload\n\nConverts the DataTable object to a payload dictionary.\n\nReturns\n\nThe payload dictionary representing the DataTable object.\n\n",
    "code_examples": [
      "render.DataTable(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height='500px',\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "render.DataTable(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height='500px',\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\nimport seaborn as sns\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.head_content(\n        ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\")\n    ),\n    ui.input_select(\n        \"selection_mode\",\n        \"Selection mode\",\n        {\n            \"none\": \"(None)\",\n            \"row\": \"Single row\",\n            \"rows\": \"Multiple rows\",\n        },\n        selected=\"rows\",\n    ),\n    ui.input_switch(\"filters\", \"Filters\", True),\n    ui.input_switch(\"editable\", \"Editable\", True),\n    ui.layout_column_wrap(\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataGrid\")),\n            ui.output_data_frame(\"grid\"),\n        ),\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataTable\")),\n            ui.output_data_frame(\"table\"),\n        ),\n        width=1 / 2,\n    ),\n    class_=\"p-3\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    df: reactive.value[pd.DataFrame] = reactive.value(\n        sns.load_dataset(\"anagrams\").iloc[:, 1:]\n    )\n\n    def update_data_with_patch(patch):\n        df_copy = df().copy()\n        fn = str if patch[\"column_index\"] == 0 else int\n        df_copy.iat[patch[\"row_index\"], patch[\"column_index\"]] = fn(patch[\"value\"])\n        df.set(df_copy)\n\n    height = 350\n    width = \"fit-content\"\n\n    @render.data_frame\n    def grid():\n        return render.DataGrid(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @grid.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n    @render.data_frame\n    def table():\n        return render.DataTable(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @table.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n\napp = App(app_ui, server)\n\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\n\nfrom shiny import App, Inputs, render, ui\n\ngreen_styles = [\n    {\n        \"rows\": [2, 4],\n        \"cols\": [2, 4],\n        \"style\": {\n            \"background-color\": \"mediumspringgreen\",\n            \"width\": \"300px\",\n            \"height\": \"100px\",\n        },\n    }\n]\n\nn = 6\ndf = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n    }\n)\n\nhi_styles = [\n    {\n        # No `rows` or `cols` means apply to all cells\n        \"class\": \"posit-bg\",\n        \"style\": {\n            \"border\": \"transparent\",\n            \"color\": \"transparent\",\n        },\n    },\n    {\n        \"rows\": [3],\n        \"cols\": [2],\n        \"class\": \"posit-blue-bg\",\n        \"style\": {\n            \"width\": \"100px\",\n            \"height\": \"75px\",\n        },\n    },\n    {\n        \"cols\": [1, 3, 5],\n        \"class\": \"posit-blue-bg\",\n    },\n    {\n        \"cols\": [7],\n        \"rows\": [0, 1, 2, 3, 5],\n        \"class\": \"posit-orange-bg\",\n    },\n]\n\nn = 7\nhi_pd = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n        \"f\": range(n * 5, n * 6),\n        \"g\": range(n * 6, n * 7),\n        \"h\": range(n * 7, n * 8),\n        \"i\": range(n * 8, n * 9),\n    }\n)\n\n\napp_ui = ui.page_fillable(\n    ui.h2(\"Data Frame with Styles applied to 4 cells\"),\n    ui.output_data_frame(\"my_df\"),\n    ui.hr(),\n    ui.tags.style(\n        ui.HTML(\n            \"\"\"\n        .posit-bg {\n            background-color: #242a26 ;\n        }\n        .posit-blue-bg {\n            background-color: #447099 ;\n        }\n        .posit-orange-bg {\n            background-color: #ED642F ;\n        }\n        \"\"\"\n        )\n    ),\n    ui.h2(\n        \"Custom styles applied to all cells within a data frame \", ui.HTML(\"&#128075;\")\n    ),\n    ui.output_data_frame(\"hi_df\"),\n)\n\n\ndef server(input: Inputs):\n    @render.data_frame\n    def my_df():\n        return render.DataGrid(\n            df,\n            styles=green_styles,\n        )\n\n    @render.data_frame\n    def hi_df():\n        return render.DataGrid(\n            hi_pd,\n            styles=hi_styles,\n        )\n\n\napp = App(app_ui, server)\n\n",
      "render.DataTable.to_payload()",
      "render.DataTable.to_payload()"
    ]
  },
  {
    "id": "api_core_reactive_calc_html",
    "url": "api/core/reactive.Calc.html",
    "title": "reactive.calc ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.calc\n\nreactive.calc\n\nMark a function as a reactive calculation.\n\nA reactive calculation is a function whose return value depends on other reactive value(s) (i.e., Inputs, Values, and other reactive calculations). Whenever a reactive value changes, any reactive calculations that depend on it are \"invalidated\" and automatically re-execute if called while invalid. If a reactive calculation is marked as invalidated, any other reactive calculations that recently called it are also marked as invalidated. In this way, invalidations ripple through reactive calculations that depend on each other.\n\nParameters\n\nA Session instance. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nA decorator that marks a function as a reactive calculation.\n\nTip\n\nReactive calculations should not produce any side effects; to reactively produce side effects, use effect instead.\n\nReactive calculations are analagous to reactive expressions in Shiny for R.\n\nSee Also\n\n- Inputs\n- Value\n- effect\n- invalidate_later\n- event\n\nExamples\n\n",
    "code_examples": [
      "reactive.calc(fn=None, *, session=MISSING)",
      "reactive.calc(fn=None, *, session=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\nimport time\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.layout_columns(\n            ui.input_action_button(\"first\", \"Invalidate first (slow) computation\"),\n            ui.input_action_button(\"second\", \"Invalidate second (fast) computation\"),\n        ),\n        ui.output_text_verbatim(\"result\"),\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.calc\n    def first():\n        input.first()\n        p = ui.Progress()\n        for i in range(30):\n            p.set(i / 30, message=\"Computing, please wait...\")\n            time.sleep(0.1)\n        p.close()\n        return random.randint(1, 1000)\n\n    @reactive.calc\n    def second():\n        input.second()\n        return random.randint(1, 1000)\n\n    @render.text\n    def result():\n        return first() + second()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_reactive_effect_html",
    "url": "api/core/reactive.Effect.html",
    "title": "reactive.effect ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.effect\n\nreactive.effect\n\nMark a function as a reactive side effect.\n\nA reactive effect is like a reactive calculation (calc) in that it can read reactive values and call reactive calculations, and will automatically re-execute when those dependencies change. But unlike reactive calculations, it doesn't return a result and can't be used as an input to other reactive expressions. Thus, reactive effects are only useful for their side effects (for example, performing I/O).\n\nAnother contrast between reactive calculations and effects is their execution strategy. Reactive calculations use lazy evaluation; that is, when their dependencies change, they don't re-execute right away but rather wait until they are called by someone else. Indeed, if they are not called, then they will never re-execute. In contrast, effects use eager evaluation; as soon as their dependencies change, they schedule themselves to re-execute.\n\nParameters\n\nIf TRUE, start the effect in a suspended state (i.e., it will not execute until resumed and invalidated).\n\nThe new priority. A higher value means higher priority: an effect with a higher priority value will execute before all effects with lower priority values. Positive, negative, and zero values are allowed.\n\nA Session instance. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nA decorator that marks a function as a reactive effect (Effect_).\n\nTip\n\nReactive effects are analagous to observers in Shiny for R.\n\nSee Also\n\n- Inputs\n- Value\n- effect\n- invalidate_later\n- event\n\nExamples\n\n",
    "code_examples": [
      "reactive.effect(fn=None, *, suspended=False, priority=0, session=MISSING)",
      "reactive.effect(fn=None, *, suspended=False, priority=0, session=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(ui.input_action_button(\"btn\", \"Press me!\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.btn)\n    def _():\n        ui.insert_ui(\n            ui.p(\"Number of clicks: \", input.btn()),\n            selector=\"#btn\",\n            where=\"afterEnd\",\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_reactive_value_html",
    "url": "api/core/reactive.Value.html",
    "title": "reactive.value ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.value\n\nreactive.value\n\nCreate a reactive value.\n\nReactive values are the source of reactivity in Shiny. Changes to reactive values invalidate downstream reactive functions (calc, effect, and render functions decorated with @output). When these functions are invalidated, they get scheduled to re-execute.\n\nShiny input values are read-only reactive values. For example, input.x is a reactive value object, and to get the current value, you can call input.x() or input.x.get(). When you do that inside of a reactive function, the function takes a dependency on the reactive value.\n\nParameters\n\nAn optional initial value.\n\nIf True, then the reactive value cannot be set().\n\nReturns\n\nAn instance of a reactive value.\n\nRaises\n\nIf get is called before a value is provided/set.\n\nNote\n\nA reactive value may only be read from within a reactive function (e.g., calc, effect, shiny.render.text, etc.) and, when doing so, the function takes a reactive dependency on the value (i.e., when the value changes, the calling reactive function will re-execute).\n\nSee Also\n\n- Inputs\n- calc\n- effect\n\nExamples\n\nMethods\n\nfreeze\n\nFreeze the reactive value.\n\nFreezing is equivalent to unsetting the value, but it does not invalidate dependents.\n\nget\n\nRead the reactive value.\n\nReturns\n\nA value.\n\nRaises\n\nIf the value is not set.\n\nIf called from outside a reactive function.\n\nis_set\n\nCheck if the reactive value is set.\n\nReturns\n\nTrue if the value is set, False otherwise.\n\nset\n\nSet the reactive value to a new value.\n\nParameters\n\nA value.\n\nReturns\n\nTrue if the value was set to a different value and False otherwise.\n\nRaises\n\nIf called on a read-only reactive value.\n\nunset\n\nUnset the reactive value.\n\nReturns\n\nTrue if the value was set prior to this unsetting.\n\n",
    "code_examples": [
      "reactive.value(self, value=MISSING, *, read_only=False)",
      "reactive.value(self, value=MISSING, *, read_only=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_action_button(\"minus\", \"-1\"),\n        ui.input_action_button(\"plus\", \"+1\"),\n    ),\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    val = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.minus)\n    def _():\n        newVal = val.get() - 1\n        val.set(newVal)\n\n    @reactive.effect\n    @reactive.event(input.plus)\n    def _():\n        newVal = val.get() + 1\n        val.set(newVal)\n\n    @render.text\n    def value():\n        return str(val.get())\n\n\napp = App(app_ui, server)\n\n",
      "reactive.value.freeze()",
      "reactive.value.freeze()",
      "reactive.value.get()",
      "reactive.value.get()",
      "reactive.value.is_set()",
      "reactive.value.is_set()",
      "reactive.value.set(value)",
      "reactive.value.set(value)",
      "reactive.value.unset()",
      "reactive.value.unset()"
    ]
  },
  {
    "id": "api_core_reactive_Calc_html",
    "url": "api/core/reactive.Calc.html",
    "title": "reactive.calc ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.calc\n\nreactive.calc\n\nMark a function as a reactive calculation.\n\nA reactive calculation is a function whose return value depends on other reactive value(s) (i.e., Inputs, Values, and other reactive calculations). Whenever a reactive value changes, any reactive calculations that depend on it are \"invalidated\" and automatically re-execute if called while invalid. If a reactive calculation is marked as invalidated, any other reactive calculations that recently called it are also marked as invalidated. In this way, invalidations ripple through reactive calculations that depend on each other.\n\nParameters\n\nA Session instance. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nA decorator that marks a function as a reactive calculation.\n\nTip\n\nReactive calculations should not produce any side effects; to reactively produce side effects, use effect instead.\n\nReactive calculations are analagous to reactive expressions in Shiny for R.\n\nSee Also\n\n- Inputs\n- Value\n- effect\n- invalidate_later\n- event\n\nExamples\n\n",
    "code_examples": [
      "reactive.calc(fn=None, *, session=MISSING)",
      "reactive.calc(fn=None, *, session=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\nimport time\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.layout_columns(\n            ui.input_action_button(\"first\", \"Invalidate first (slow) computation\"),\n            ui.input_action_button(\"second\", \"Invalidate second (fast) computation\"),\n        ),\n        ui.output_text_verbatim(\"result\"),\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.calc\n    def first():\n        input.first()\n        p = ui.Progress()\n        for i in range(30):\n            p.set(i / 30, message=\"Computing, please wait...\")\n            time.sleep(0.1)\n        p.close()\n        return random.randint(1, 1000)\n\n    @reactive.calc\n    def second():\n        input.second()\n        return random.randint(1, 1000)\n\n    @render.text\n    def result():\n        return first() + second()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_reactive_Effect_html",
    "url": "api/core/reactive.Effect.html",
    "title": "reactive.effect ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.effect\n\nreactive.effect\n\nMark a function as a reactive side effect.\n\nA reactive effect is like a reactive calculation (calc) in that it can read reactive values and call reactive calculations, and will automatically re-execute when those dependencies change. But unlike reactive calculations, it doesn't return a result and can't be used as an input to other reactive expressions. Thus, reactive effects are only useful for their side effects (for example, performing I/O).\n\nAnother contrast between reactive calculations and effects is their execution strategy. Reactive calculations use lazy evaluation; that is, when their dependencies change, they don't re-execute right away but rather wait until they are called by someone else. Indeed, if they are not called, then they will never re-execute. In contrast, effects use eager evaluation; as soon as their dependencies change, they schedule themselves to re-execute.\n\nParameters\n\nIf TRUE, start the effect in a suspended state (i.e., it will not execute until resumed and invalidated).\n\nThe new priority. A higher value means higher priority: an effect with a higher priority value will execute before all effects with lower priority values. Positive, negative, and zero values are allowed.\n\nA Session instance. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nA decorator that marks a function as a reactive effect (Effect_).\n\nTip\n\nReactive effects are analagous to observers in Shiny for R.\n\nSee Also\n\n- Inputs\n- Value\n- effect\n- invalidate_later\n- event\n\nExamples\n\n",
    "code_examples": [
      "reactive.effect(fn=None, *, suspended=False, priority=0, session=MISSING)",
      "reactive.effect(fn=None, *, suspended=False, priority=0, session=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(ui.input_action_button(\"btn\", \"Press me!\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.btn)\n    def _():\n        ui.insert_ui(\n            ui.p(\"Number of clicks: \", input.btn()),\n            selector=\"#btn\",\n            where=\"afterEnd\",\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_reactive_Value_html",
    "url": "api/core/reactive.Value.html",
    "title": "reactive.value ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.value\n\nreactive.value\n\nCreate a reactive value.\n\nReactive values are the source of reactivity in Shiny. Changes to reactive values invalidate downstream reactive functions (calc, effect, and render functions decorated with @output). When these functions are invalidated, they get scheduled to re-execute.\n\nShiny input values are read-only reactive values. For example, input.x is a reactive value object, and to get the current value, you can call input.x() or input.x.get(). When you do that inside of a reactive function, the function takes a dependency on the reactive value.\n\nParameters\n\nAn optional initial value.\n\nIf True, then the reactive value cannot be set().\n\nReturns\n\nAn instance of a reactive value.\n\nRaises\n\nIf get is called before a value is provided/set.\n\nNote\n\nA reactive value may only be read from within a reactive function (e.g., calc, effect, shiny.render.text, etc.) and, when doing so, the function takes a reactive dependency on the value (i.e., when the value changes, the calling reactive function will re-execute).\n\nSee Also\n\n- Inputs\n- calc\n- effect\n\nExamples\n\nMethods\n\nfreeze\n\nFreeze the reactive value.\n\nFreezing is equivalent to unsetting the value, but it does not invalidate dependents.\n\nget\n\nRead the reactive value.\n\nReturns\n\nA value.\n\nRaises\n\nIf the value is not set.\n\nIf called from outside a reactive function.\n\nis_set\n\nCheck if the reactive value is set.\n\nReturns\n\nTrue if the value is set, False otherwise.\n\nset\n\nSet the reactive value to a new value.\n\nParameters\n\nA value.\n\nReturns\n\nTrue if the value was set to a different value and False otherwise.\n\nRaises\n\nIf called on a read-only reactive value.\n\nunset\n\nUnset the reactive value.\n\nReturns\n\nTrue if the value was set prior to this unsetting.\n\n",
    "code_examples": [
      "reactive.value(self, value=MISSING, *, read_only=False)",
      "reactive.value(self, value=MISSING, *, read_only=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_action_button(\"minus\", \"-1\"),\n        ui.input_action_button(\"plus\", \"+1\"),\n    ),\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    val = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.minus)\n    def _():\n        newVal = val.get() - 1\n        val.set(newVal)\n\n    @reactive.effect\n    @reactive.event(input.plus)\n    def _():\n        newVal = val.get() + 1\n        val.set(newVal)\n\n    @render.text\n    def value():\n        return str(val.get())\n\n\napp = App(app_ui, server)\n\n",
      "reactive.value.freeze()",
      "reactive.value.freeze()",
      "reactive.value.get()",
      "reactive.value.get()",
      "reactive.value.is_set()",
      "reactive.value.is_set()",
      "reactive.value.set(value)",
      "reactive.value.set(value)",
      "reactive.value.unset()",
      "reactive.value.unset()"
    ]
  },
  {
    "id": "api_core_reactive_event_html",
    "url": "api/core/reactive.event.html",
    "title": "reactive.event ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.event\n\nreactive.event\n\nMark a function to react only when an \"event\" occurs.\n\nShiny's reactive programming framework is primarily designed for calculated values (calc) and side-effect-causing actions (effect) that respond to any of their inputs changing. That's often what is desired in Shiny apps, but not always: sometimes you want to wait for a specific action to be taken from the user, like clicking an input_action_button, before calculating or taking an action. You do not want the calculation or action to be prematurely triggered if other reactive values that it calls are invalidated. The reactive value (or function) which triggers other calculations or actions in this way is called an event.\n\nThese situations demand a more imperative, \"event handling\" style of programming, which @reactive.event() provides. It does this by using the isolate primitive under-the-hood to essentially \"limit\" the set of reactive dependencies to those in args. In other words, the event can call as many reactive values as it likes in its code body without taking a reactive dependency on them; it will be invalidated only when a dependency listed in args is invalidated.\n\nParameters\n\nOne or more callables that represent the event; most likely this will be a reactive input value linked to a input_action_button or similar (e.g., input.click), but it can also be a (reactive or non-reactive) function that returns a value.\n\nWhether to ignore the event if the value is None or 0.\n\nIf False, the event triggers on the first run.\n\nReturns\n\nA decorator that marks a function as an event handler.\n\nTip\n\nThis decorator must be applied before the relevant reactivity decorator (i.e., @reactive.event must be applied before @reactive.effect, @reactive.calc, @render.ui, etc).\n\nExamples\n\n",
    "code_examples": [
      "reactive.event(*args, ignore_none=True, ignore_init=False)",
      "reactive.event(*args, ignore_none=True, ignore_init=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.markdown(\n        f\"\"\"\n        This example demonstrates how `@reactive.event()` can be used to restrict\n        execution of: (1) a `@render` function, (2) `@reactive.calc`, or (3)\n        `@reactive.effect`.\n\n        In all three cases, the output is dependent on a random value that gets updated\n        every 0.5 seconds (currently, it is {ui.output_ui(\"number\", inline=True)}), but\n        the output is only updated when the button is clicked.\n        \"\"\"\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.input_action_button(\"btn_out\", \"(1) Update number\"),\n            ui.output_text(\"out_out\"),\n        ),\n        ui.column(\n            3,\n            ui.input_action_button(\"btn_calc\", \"(2) Show 1 / number\"),\n            ui.output_text(\"out_calc\"),\n        ),\n        ui.column(\n            3,\n            ui.input_action_button(\"btn_effect\", \"(3) Log number\"),\n            ui.div(id=\"out_effect\"),\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Update a random number every second\n    val = reactive.value(random.randint(0, 1000))\n\n    @reactive.effect\n    def _():\n        reactive.invalidate_later(0.5)\n        val.set(random.randint(0, 1000))\n\n    # Always update this output when the number is updated\n    @render.ui\n    def number():\n        return val.get()\n\n    # Since ignore_none=False, the function executes before clicking the button.\n    # (input.btn_out() is 0 on page load, but @@reactive.event() treats 0 as None for\n    # action buttons.)\n    @render.text\n    @reactive.event(input.btn_out, ignore_none=False)\n    def out_out():\n        return str(val.get())\n\n    @reactive.calc\n    @reactive.event(input.btn_calc)\n    def calc():\n        return 1 / val.get()\n\n    @render.text\n    def out_calc():\n        return str(calc())\n\n    @reactive.effect\n    @reactive.event(input.btn_effect)\n    def _():\n        ui.insert_ui(\n            ui.p(\"Random number!\", val.get()),\n            selector=\"#out_effect\",\n            where=\"afterEnd\",\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_reactive_isolate_html",
    "url": "api/core/reactive.isolate.html",
    "title": "reactive.isolate ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.isolate\n\nreactive.isolate\n\nCreate a non-reactive scope within a reactive scope.\n\nOrdinarily, the simple act of reading a reactive value causes a relationship to be established between the caller and the reactive value, where a change to the reactive value will cause the caller to re-execute. (The same applies for the act of getting a reactive calculation's value.) with isolate() lets you read a reactive value or calculation without establishing this relationship.\n\nwith isolate() can also be useful for calling reactive calculations at the console, which can be useful for debugging. To do so, wrap the calls to the reactive calculation with with isolate().\n\nReturns\n\nA context manager that executes the given expression in a scope where reactive values can be read, but do not cause the reactive scope of the caller to be re-evaluated when they change.\n\nSee Also\n\n- event\n\nExamples\n\n",
    "code_examples": [
      "reactive.isolate()",
      "reactive.isolate()",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500),\n    ui.input_action_button(\"go\", \"Go!\", class_=\"btn-success\"),\n    ui.output_plot(\"plot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        # Take a reactive dependency on the action button...\n        input.go()\n\n        # ...but don't take a reactive dependency on the slider\n        with reactive.isolate():\n            np.random.seed(19680801)\n            x = 100 + 15 * np.random.randn(input.n())\n\n        fig, ax = plt.subplots()\n        ax.hist(x, bins=30, density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_reactive_invalidate_later_html",
    "url": "api/core/reactive.invalidate_later.html",
    "title": "reactive.invalidate_later ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.invalidate_later\n\nreactive.invalidate_later\n\nScheduled Invalidation\n\nWhen called from within a reactive context, invalidate_later schedules the reactive context to be invalidated in the given number of seconds.\n\nParameters\n\nThe number of seconds to wait before invalidating.\n\nNote\n\nWhen called within a reactive function (i.e., effect, calc, shiny.render.ui, etc.), that reactive context is invalidated (and re-executes) after the interval has passed. The re-execution will reset the invalidation flag, so in a typical use case, the object will keep re-executing and waiting for the specified interval. It‚Äôs possible to stop this cycle by adding conditional logic that prevents the invalidate_later from being run.\n\nExamples\n\n",
    "code_examples": [
      "reactive.invalidate_later(delay, *, session=MISSING)",
      "reactive.invalidate_later(delay, *, session=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(ui.output_text(\"value\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        reactive.invalidate_later(0.5)\n        return \"Random int: \" + str(random.randint(0, 10000))\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_reactive_extended_task_html",
    "url": "api/core/reactive.extended_task.html",
    "title": "reactive.extended_task ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.extended_task\n\nreactive.extended_task\n\nDecorator to mark an async function as a slow computation. This will cause the function to be run in a background asyncio task, and the results will be available via the ExtendedTask object returned by the decorator.\n\nUnlike normal async render functions, effects, and calcs, extended_task async computations do not block Shiny reactive processing from proceeding. This means that they can be used to perform long-running tasks without freezing the session that owns them, nor other sessions.\n\nHowever, this also means that they cannot access reactive sources. This is because processing of inputs and reactivity is not blocked, and so the reactive sources may change while the computation is running, which is almost never the desired behavior. If any reactive sources are needed by the computation, the decorated function must take them as parameters, and the resulting ExtendedTask object must be invoked with the corresponding arguments.\n\nParameters\n\nThe function to decorate. It must be async. It can take any parameters and return any value (including None).\n\nReturns\n\nAn ExtendedTask object that can be used to check the status of the computation and retrieve the result.\n\nExamples\n\n",
    "code_examples": [
      "reactive.extended_task(func=None)",
      "reactive.extended_task(func=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nfrom datetime import datetime\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fixed(\n    ui.h5(\"Current time\"),\n    ui.output_text(\"current_time\"),\n    ui.p(\n        \"Notice that the time above updates every second, even if you click the button below.\"\n    ),\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_numeric(\"x\", \"x\", 1),\n            ui.input_numeric(\"y\", \"y\", 2),\n            ui.input_task_button(\"btn\", \"Compute, slowly\"),\n            ui.input_action_button(\"btn_cancel\", \"Cancel\"),\n        ),\n        ui.h5(\"Sum of x and y\"),\n        ui.output_text(\"show_result\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def current_time():\n        reactive.invalidate_later(1)\n        return datetime.now().strftime(\"%H:%M:%S\")\n\n    @ui.bind_task_button(button_id=\"btn\")\n    @reactive.extended_task\n    async def slow_compute(a: int, b: int) -> int:\n        await asyncio.sleep(3)\n        return a + b\n\n    @reactive.effect\n    @reactive.event(input.btn, ignore_none=False)\n    def handle_click():\n        slow_compute(input.x(), input.y())\n\n    @reactive.effect\n    @reactive.event(input.btn_cancel)\n    def handle_cancel():\n        slow_compute.cancel()\n\n    @render.text\n    def show_result():\n        return str(slow_compute.result())\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_reactive_flush_html",
    "url": "api/core/reactive.flush.html",
    "title": "reactive.flush ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.flush\n\nreactive.flush\n\nRun any pending invalidations (i.e., flush the reactive environment).\n\nWarning\n\nYou shouldn‚Äôt ever need to call this function inside of a Shiny app. It‚Äôs only useful for testing and running reactive code interactively in the console.\n\n",
    "code_examples": [
      "reactive.flush()",
      "reactive.flush()"
    ]
  },
  {
    "id": "api_core_reactive_poll_html",
    "url": "api/core/reactive.poll.html",
    "title": "reactive.poll ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.poll\n\nreactive.poll\n\nCreate a reactive polling object.\n\nPolling is a technique that approximates \"real-time\" or streaming updates, as if a data source were pushing notifications each time it is updated. The data source does not actually push notifications; a polling object repeatedly checks for changes in an efficient way at specified intervals. If a change is detected, the polling object runs a function to re-read the data source.\n\nA reactive polling object is constructed using two functions: a polling function, which is a fast-running, inexpensive function that is used to determine whether some data source has changed (such as the timestamp of a file, or a SELECT MAX(updated) FROM table query); and a slower-running reading function that actually loads and returns the data that is desired. The poll() function is intended to be used as a decorator: the poll function is passed as the poll_func arg to @poll(), while the data reading function is the target of the decorator.\n\nReactive consumers can invoke the resulting polling object to get the current data, and will automatically invalidate when the polling function detects a change. Polling objects also cache the results of the read function; for this reason, apps where all sessions depend on the same data source may want to declare the polling object at the top level of app.py (outside of the server function).\n\nBoth poll_func and the decorated (data reading) function can read reactive values and calc objects. Any invalidations triggered by reactive dependencies will apply to the reactive polling object immediately (not waiting for the interval_secs delay to expire).\n\nParameters\n\nA function to be called frequently to determine whether a data source has changed. The return value should be something that can be compared inexpensively using ==. Both regular functions and co-routine functions are allowed. Note that the poll_func should NOT return a bool that indicates whether the data source has changed. Rather, each poll_func return value will be checked for equality with its preceding poll_func return value (using == semantics by default), and if it differs, the data source will be considered changed.\n\nThe number of seconds to wait after each poll_func invocation before polling again. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.\n\nThe function that will be used to compare each poll_func return value with its immediate predecessor.\n\nReactive polling is implemented using an effect to call poll_func on a timer; use the priority argument to control the order of this Effect‚Äôs execution versus other Effects in your app. See effect for more details.\n\nA Session instance. If not provided, a session is inferred via get_current_session. If there is no current session (i.e. poll is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.\n\nReturns\n\nA decorator that should be applied to a no-argument function that (expensively) reads whatever data is desired. (This function may be a regular function or a co-routine function.) The result of the decorator is a reactive calc that always returns up-to-date data, and invalidates callers when changes are detected via polling.\n\nSee Also\n\n- file_reader\n\nExamples\n\n",
    "code_examples": [
      "reactive.poll(\n    poll_func,\n    interval_secs=1,\n    *,\n    equals=eq,\n    priority=0,\n    session=MISSING,\n)",
      "reactive.poll(\n    poll_func,\n    interval_secs=1,\n    *,\n    equals=eq,\n    priority=0,\n    session=MISSING,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\nimport random\nimport sqlite3\nfrom datetime import datetime\nfrom typing import Any, Awaitable\n\nimport pandas as pd\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\nSYMBOLS = [\"AAA\", \"BBB\", \"CCC\", \"DDD\", \"EEE\", \"FFF\"]\n\n\ndef timestamp() -> str:\n    return datetime.now().strftime(\"%x %X\")\n\n\ndef rand_price() -> float:\n    return round(random.random() * 250, 2)\n\n\n# === Initialize the database =========================================\n\n\ndef init_db(con: sqlite3.Connection) -> None:\n    cur = con.cursor()\n    try:\n        cur.executescript(\n            \"\"\"\n            CREATE TABLE stock_quotes (timestamp text, symbol text, price real);\n            CREATE INDEX idx_timestamp ON stock_quotes (timestamp);\n            \"\"\"\n        )\n        cur.executemany(\n            \"INSERT INTO stock_quotes (timestamp, symbol, price) VALUES (?, ?, ?)\",\n            [(timestamp(), symbol, rand_price()) for symbol in SYMBOLS],\n        )\n        con.commit()\n    finally:\n        cur.close()\n\n\nconn = sqlite3.connect(\":memory:\")\ninit_db(conn)\n\n\n# === Randomly update the database with an asyncio.task ==============\n\n\ndef update_db(con: sqlite3.Connection) -> None:\n    \"\"\"Update a single stock price entry at random\"\"\"\n\n    cur = con.cursor()\n    try:\n        sym = SYMBOLS[random.randint(0, len(SYMBOLS) - 1)]\n        print(f\"Updating {sym}\")\n        cur.execute(\n            \"UPDATE stock_quotes SET timestamp = ?, price = ? WHERE symbol = ?\",\n            (timestamp(), rand_price(), sym),\n        )\n        con.commit()\n    finally:\n        cur.close()\n\n\nasync def update_db_task(con: sqlite3.Connection) -> Awaitable[None]:\n    \"\"\"Task that alternates between sleeping and updating prices\"\"\"\n    while True:\n        await asyncio.sleep(random.random() * 1.5)\n        update_db(con)\n\n\nasyncio.create_task(update_db_task(conn))\n\n\n# === Create the reactive.poll object ===============================\n\n\ndef tbl_last_modified() -> Any:\n    df = pd.read_sql_query(\"SELECT MAX(timestamp) AS timestamp FROM stock_quotes\", conn)\n    return df[\"timestamp\"].to_list()\n\n\n@reactive.poll(tbl_last_modified, 0.5)\ndef stock_quotes() -> pd.DataFrame:\n    return pd.read_sql_query(\"SELECT timestamp, symbol, price FROM stock_quotes\", conn)\n\n\n# === Define the Shiny UI and server ===============================\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.markdown(\n            \"\"\"\n            # `shiny.reactive.poll` demo\n\n            This example app shows how to stream results from a database (in this\n            case, an in-memory sqlite3) with the help of `shiny.reactive.poll`.\n            \"\"\"\n        ),\n        ui.input_selectize(\n            \"symbols\", \"Filter by symbol\", [\"\"] + SYMBOLS, multiple=True\n        ),\n        ui.output_data_frame(\"table\"),\n        fill=False,\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session) -> None:\n    def filtered_quotes():\n        df = stock_quotes()\n        if input.symbols():\n            df = df[df[\"symbol\"].isin(input.symbols())]\n        return df\n\n    @render.data_frame\n    def table():\n        return filtered_quotes()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_reactive_file_reader_html",
    "url": "api/core/reactive.file_reader.html",
    "title": "reactive.file_reader ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.file_reader\n\nreactive.file_reader\n\nCreate a reactive file reader.\n\nThis is a decorator, meant to be applied to a no-argument function that reads data from a file on disk. Whenever the file changes (or to be precise, the file size or last modified time changes), past readers of the data are reactively invalidated. This makes it incredibly easy to write apps that automatically update all of their outputs as soon as files on disk change.\n\nNote that file_reader works only on single files, not directories of files.\n\nBoth the filepath function and the decorated (file reading) function can read reactive values and calc objects. Any invalidations triggered by reactive dependencies will apply to the reactive file reader object immediately (not waiting for the interval_secs delay to expire).\n\nParameters\n\nEither a string indicating the file path to be monitored, or, a no-argument function that returns such a string. The latter is useful if the file to be monitored depends on some user input, the current date/time, etc. The file path provided MUST exist, otherwise Shiny will treat it as an unhandled error and close the session. If a function is used, make sure it is high performance (or is cached, i.e. use a :class:~shiny.reactive.calc), as it will be called very frequently.\n\nThe number of seconds to wait after each time the file metadata is checked. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.\n\nReactive polling is implemented using an effect to call poll_func on a timer; use the priority argument to control the order of this Effect‚Äôs execution versus other Effects in your app. See effect for more details.\n\nA Session instance. If not provided, a session is inferred via get_current_session. If there is no current session (i.e. poll is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.\n\nReturns\n\nA decorator that should be applied to a no-argument function that (expensively)\n\nSee Also\n\n- poll\n\nExamples\n\n",
    "code_examples": [
      "reactive.file_reader(filepath, interval_secs=1, *, priority=1, session=MISSING)",
      "reactive.file_reader(filepath, interval_secs=1, *, priority=1, session=MISSING)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pathlib\n\nimport pandas as pd\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\ndir = pathlib.Path(__file__).parent\n\napp_ui = ui.page_fluid(ui.output_table(\"result\"), class_=\"p-3\")\n\n\n@reactive.file_reader(dir / \"mtcars.csv\")\ndef read_file():\n    return pd.read_csv(dir / \"mtcars.csv\")\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.table\n    def result():\n        return read_file()\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n"
    ]
  },
  {
    "id": "api_core_reactive_lock_html",
    "url": "api/core/reactive.lock.html",
    "title": "reactive.lock ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.lock\n\nreactive.lock\n\nA lock that should be held whenever manipulating the reactive graph.\n\nFor example, lock makes it safe to set a value and call flush from a different Task than the one that is running the Shiny Session.\n\n",
    "code_examples": [
      "reactive.lock()",
      "reactive.lock()"
    ]
  },
  {
    "id": "api_core_req_html",
    "url": "api/core/req.html",
    "title": "req ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- req\n\nreq\n\nThrow a silent exception for falsy values.\n\nThis is a convenient shorthand for throwing SilentException / SilentCancelOutputException if any of the arguments are falsy.\n\nThe term \"falsy\" generally indicates that a value is considered False when encountered in a logical context. We use the term a little loosely here; our usage tries to match the intuitive notions of \"Is this value missing or available?\", or \"Has the user provided an answer?\", or in the case of action buttons, \"Has the button been clicked?\". So False, None, 0, and \"\" would be examples of Falsy values.\n\nParameters\n\nAny number of arguments to check.\n\nIf True, throw SilentCancelOutputException instead of SilentException.\n\nReturns\n\nThe first argument. If no arguments are provided, returns None.\n\nExamples\n\n",
    "code_examples": [
      "req(*args, cancel_output=False)",
      "req(*args, cancel_output=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, req, ui\nfrom shiny.types import SafeException\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"safe\", \"Throw a safe error\"),\n    ui.output_ui(\"safe\"),\n    ui.input_action_button(\"unsafe\", \"Throw an unsafe error\"),\n    ui.output_ui(\"unsafe\"),\n    ui.input_text(\n        \"txt\",\n        \"Enter some text below, then remove it. Notice how the text is never fully removed.\",\n    ),\n    ui.output_ui(\"txt_out\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.calc\n    def safe_click():\n        req(input.safe())\n        return input.safe()\n\n    @render.ui\n    def safe():\n        raise SafeException(f\"You've clicked {str(safe_click())} times\")\n\n    @render.ui\n    def unsafe():\n        req(input.unsafe())\n        raise Exception(f\"Super secret number of clicks: {str(input.unsafe())}\")\n\n    @reactive.effect\n    def _():\n        req(input.unsafe())\n        print(\"unsafe clicks:\", input.unsafe())\n        # raise Exception(\"Observer exception: this should cause a crash\")\n\n    @render.ui\n    def txt_out():\n        req(input.txt(), cancel_output=True)\n        return input.txt()\n\n\napp = App(app_ui, server)\napp.sanitize_errors = True\n\n"
    ]
  },
  {
    "id": "api_core_run_app_html",
    "url": "api/core/run_app.html",
    "title": "run_app ‚Äì Shiny for Python",
    "description": "",
    "content": "- Create and run applications\n- run_app\n\nrun_app\n\nStarts a Shiny app. Press Ctrl+C (or Ctrl+Break on Windows) to stop the app.\n\nParameters\n\nThe app to run. The default, app:app, represents the ‚Äúusual‚Äù case where the application is named app inside a app.py file within the current working directory. In other cases, the app location can be specified as a <module>:<attribute> string where the :<attribute> is only necessary if the application is named something other than app. Note that <module> can be a relative path to a .py file or a directory (with an app.py file inside of it); and in this case, the relative path is resolved relative to the app_dir directory.\n\nThe address that the app should listen on.\n\nThe port that the app should listen on. Set to 0 to use a random port.\n\nThe port that should be used for an additional websocket that is used to support hot-reload. Set to 0 to use a random port.\n\nEnable auto-reload.\n\nA list of directories (in addition to the app directory) to watch for changes that will trigger an app reload.\n\nList or tuple of file globs to indicate which files should be monitored for changes. Can be combined with reload_excludes.\n\nList or tuple of file globs to indicate which files should be excluded from reload monitoring. Can be combined with reload_includes\n\nWebSocket max size message in bytes.\n\nLog level.\n\nThe directory to look for app under (by adding this to the PYTHONPATH).\n\nTreat app as an application factory, i.e. a () -> callable.\n\nLaunch app browser after app starts, using the Python webbrowser module.\n\nAdditional keyword arguments which are passed to uvicorn.run. For more information see Uvicorn documentation.\n\nTip\n\nThe shiny run command-line interface (which comes installed with Shiny) provides the same functionality as shiny.run_app().\n\nExamples\n\n",
    "code_examples": [
      "run_app(\n    app='app:app',\n    host='127.0.0.1',\n    port=8000,\n    *,\n    autoreload_port=0,\n    reload=False,\n    reload_dirs=None,\n    reload_includes=RELOAD_INCLUDES_DEFAULT,\n    reload_excludes=RELOAD_EXCLUDES_DEFAULT,\n    ws_max_size=16777216,\n    log_level=None,\n    app_dir='.',\n    factory=False,\n    launch_browser=False,\n    dev_mode=True,\n    **kwargs,\n)",
      "run_app(\n    app='app:app',\n    host='127.0.0.1',\n    port=8000,\n    *,\n    autoreload_port=0,\n    reload=False,\n    reload_dirs=None,\n    reload_includes=RELOAD_INCLUDES_DEFAULT,\n    reload_excludes=RELOAD_EXCLUDES_DEFAULT,\n    ws_max_size=16777216,\n    log_level=None,\n    app_dir='.',\n    factory=False,\n    launch_browser=False,\n    dev_mode=True,\n    **kwargs,\n)",
      "from shiny import run_app\n\n# Run ``app`` inside ``./app.py``\nrun_app()\n\n# Run ``app`` inside ``./myapp.py`` (or ``./myapp/app.py``)\nrun_app(\"myapp\")\n\n# Run ``my_app`` inside ``./myapp.py`` (or ``./myapp/app.py``)\nrun_app(\"myapp:my_app\")\n\n# Run ``my_app`` inside ``../myapp.py`` (or ``../myapp/app.py``)\nrun_app(\"myapp:my_app\", app_dir=\"..\")",
      "from shiny import run_app\n\n# Run ``app`` inside ``./app.py``\nrun_app()\n\n# Run ``app`` inside ``./myapp.py`` (or ``./myapp/app.py``)\nrun_app(\"myapp\")\n\n# Run ``my_app`` inside ``./myapp.py`` (or ``./myapp/app.py``)\nrun_app(\"myapp:my_app\")\n\n# Run ``my_app`` inside ``../myapp.py`` (or ``../myapp/app.py``)\nrun_app(\"myapp:my_app\", app_dir=\"..\")"
    ]
  },
  {
    "id": "api_core_App_html",
    "url": "api/core/App.html",
    "title": "app ‚Äì Shiny for Python",
    "description": "",
    "content": "- Create and run applications\n- App\n\nApp\n\nCreate a Shiny app instance.\n\nParameters\n\nThe UI definition for the app (e.g., a call to page_fluid or similar, with layouts and controls nested inside). You can also pass a function that takes a Request and returns a UI definition, if you need the UI definition to be created dynamically for each pageview.\n\nA function which is called once for each session, ensuring that each session is independent.\n\nStatic files to be served by the app. If this is a string or Path object, it must be a directory, and it will be mounted at /. If this is a dictionary, each key is a mount point and each value is a file or directory to be served at that mount point.\n\nWhether to enable debug mode.\n\nExamples\n\nAttributes\n\nMethods\n\ncall_pyodide\n\nCommunicate with pyodide.\n\nWarning\n\nThis method is not intended for public usage. It‚Äôs exported for use by shinylive.\n\non_shutdown\n\nRegister a callback to be called when the app is shutting down. This can be useful for cleaning up app-wide resources, like connection pools, temporary directories, worker threads/processes, etc.\n\nParameters\n\nThe callback to call. It should take no arguments, and any return value will be ignored. Try not to raise an exception in the callback, as exceptions during cleanup can hide the original exception that caused the app to shut down.\n\nReturns\n\nThe callback, to allow this method to be used as a decorator.\n\nrun\n\nRun the app.\n\nParameters\n\nKeyword arguments passed to run_app.\n\nstop\n\nStop the app (i.e., close all sessions).\n\nSee Also\n\n- close\n\n",
    "code_examples": [
      "App(self, ui, server, *, static_assets=None, debug=False)",
      "App(self, ui, server, *, static_assets=None, debug=False)",
      "from shiny import  App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(\"Hello Shiny!\")\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\napp = App(app_ui, server)",
      "from shiny import  App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(\"Hello Shiny!\")\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\napp = App(app_ui, server)",
      "App.call_pyodide(scope, receive, send)",
      "App.call_pyodide(scope, receive, send)",
      "App.on_shutdown(callback)",
      "App.on_shutdown(callback)",
      "App.run(**kwargs)",
      "App.run(**kwargs)",
      "App.stop()",
      "App.stop()"
    ]
  },
  {
    "id": "api_core_Inputs_html",
    "url": "api/core/Inputs.html",
    "title": "inputs ‚Äì Shiny for Python",
    "description": "",
    "content": "- Create and run applications\n- Inputs\n\nInputs\n\nA class representing Shiny input values.\n\nThis class provides access to a Session's input values. The input values are reactive Values, and can be accessed with the [] operator, or with .. For example, if there is an input named x, it can be accessed via input[\"x\"]() or input.x().\n\n",
    "code_examples": [
      "Inputs(self, values, ns=Root)",
      "Inputs(self, values, ns=Root)"
    ]
  },
  {
    "id": "api_core_Outputs_html",
    "url": "api/core/Outputs.html",
    "title": "outputs ‚Äì Shiny for Python",
    "description": "",
    "content": "- Create and run applications\n- Outputs\n\nOutputs\n\nA class representing Shiny output definitions.\n\n",
    "code_examples": [
      "Outputs(self, session, ns, *, outputs)",
      "Outputs(self, session, ns, *, outputs)"
    ]
  },
  {
    "id": "api_core_Session_html",
    "url": "api/core/Session.html",
    "title": "session ‚Äì Shiny for Python",
    "description": "",
    "content": "- Create and run applications\n- Session\n\nSession\n\nTools for managing user sessions and accessing session-related information.\n\nsession.get_current_session\n\nGet the current user session.\n\nReturns\n\nThe current session if one is active, otherwise None.\n\nNote\n\nShiny apps should not need to call this function directly. Instead, it is intended to be used by Shiny developers who wish to create new functions that should only be called from within an active Shiny session.\n\nSee Also\n\n- require_active_session\n\nsession.require_active_session\n\nRaise an exception if no Shiny session is currently active.\n\nParameters\n\nA Session instance. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nThe session.\n\nNote\n\nShiny apps should not need to call this function directly. Instead, it is intended to be used by Shiny developers who wish to create new functions that should only be called from within an active Shiny session.\n\nRaises\n\nIf session is not active.\n\nSee Also\n\n- get_current_session\n\nsession.session_context\n\nA context manager for current session.\n\nParameters\n\nA Session instance. If not provided, the instance is inferred via get_current_session.\n\nreactive.get_current_context\n\nGet the current reactive context.\n\nReturns\n\nA ~shiny.reactive.Context class.\n\nRaises\n\nIf called outside of a reactive context.\n\nsession.ClientData\n\nAccess (client-side) information from the browser.\n\nProvides access to client-side information, such as the URL components, the pixel ratio of the device, and the properties of outputs.\n\nEach method in this class reads a reactive input value, which means that the method will error if called outside of a reactive context.\n\nRaises\n\nIf a method is called outside of a reactive context.\n\nExamples\n\nMethods\n\noutput_accent_color\n\nReactively read the accent color of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe accent color of the output, or None if the output does not exist (or does not report its accent color).\n\noutput_bg_color\n\nReactively read the background color of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe background color of the output, or None if the output does not exist (or does not report its bg color).\n\noutput_fg_color\n\nReactively read the foreground color of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe foreground color of the output, or None if the output does not exist (or does not report its fg color).\n\noutput_font\n\nReactively read the font(s) of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe font family of the output, or None if the output does not exist (or does not report its font styles).\n\noutput_height\n\nReactively read the height of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe height of the output, or None if the output does not exist (or does not report its height).\n\noutput_hidden\n\nReactively read whether an output is hidden.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nWhether the output is hidden, or None if the output does not exist.\n\noutput_width\n\nReactively read the width of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe width of the output, or None if the output does not exist (or does not report its width).\n\npixelratio\n\nReactively read the pixel ratio of the device.\n\nurl_hash\n\nReactively read the hash part of the URL.\n\nurl_hash_initial\n\nReactively read the initial hash part of the URL.\n\nurl_hostname\n\nReactively read the hostname part of the URL.\n\nurl_pathname\n\nThe pathname part of the URL.\n\nurl_port\n\nReactively read the port part of the URL.\n\nurl_protocol\n\nReactively read the protocol part of the URL.\n\nurl_search\n\nReactively read the search part of the URL.\n\nsession.Session.send_custom_message\n\nSend a message to the client.\n\nParameters\n\nThe type of message to send.\n\nThe message to send.\n\nNote\n\nSends messages to the client which can be handled in JavaScript with Shiny.addCustomMessageHandler(type, function(message){...}). Once the message handler is added, it will be invoked each time send_custom_message() is called on the server.\n\nExamples\n\nsession.Session.send_input_message\n\nSend an input message to the session.\n\nSends a message to an input on the session's client web page; if the input is present and bound on the page at the time the message is received, then the input binding object's receiveMessage(el, message) method will be called. This method should generally not be called directly from Shiny apps, but through friendlier wrapper functions like ui.update_text().\n\nParameters\n\nAn id matching the id of an input to update.\n\nThe message to send.\n\nsession.Session.on_flush\n\nRegister a function to call before the next reactive flush.\n\nParameters\n\nThe function to call.\n\nWhether to call the function only once or on every flush.\n\nReturns\n\nA function that can be used to cancel the registration.\n\nExamples\n\nsession.Session.on_flushed\n\nRegister a function to call after the next reactive flush.\n\nParameters\n\nThe function to call.\n\nWhether to call the function only once or on every flush.\n\nReturns\n\nA function that can be used to cancel the registration.\n\nExamples\n\nsession.Session.on_ended\n\nRegisters a function to be called after the client has disconnected.\n\nParameters\n\nThe function to call.\n\nReturns\n\nA function that can be used to cancel the registration.\n\nExamples\n\nsession.Session.dynamic_route\n\nRegister a function to call when a dynamically generated, session-specific, route is requested.\n\nProvides a convenient way to serve-up session-dependent values for other clients/applications to consume.\n\nParameters\n\nA name for the route (used to determine part of the URL path).\n\nThe function to call when a request is made to the route. This function should take a single argument (a starlette.requests.Request object) and return a starlette.types.ASGIApp object.\n\nReturns\n\nThe URL path for the route.\n\nExamples\n\nsession.Session.close\n\nClose the session.\n\nExamples\n\ninput_handler.input_handlers\n\ninput_handler.input_handlers\n\nManage Shiny input handlers.\n\nAdd and/or remove input handlers of a given type. Shiny uses these handlers to pre-process input values from the client (after being deserialized) before passing them to the input argument of an App's server function.\n\nThe type is based on the getType() JavaScript method on the relevant Shiny input binding. See this article <https://shiny.posit.co/articles/js-custom-input.html>_ for more information on how to create custom input bindings. (The article is about Shiny for R, but the JavaScript and general principles are the same.)\n\nMethods\n\nadd(type: str, force: bool = False) -> Callable[[InputHandlerType], None] Register an input handler. This method returns a decorator that registers the decorated function as the handler for the given type. This handler should accept three arguments: - the input value - the input name - the Session object remove(type: str) Unregister an input handler.\n\nNote\n\nadd() ing an input handler will make it persist for the duration of the Python process (unless Shiny is explicitly reloaded). For that reason, verbose naming is encouraged to minimize the risk of colliding with other Shiny input binding(s) which happen to use the same type (if the binding is bundled with a package, we recommend the format of \"packageName.widgetName\").\n\nExample\n\nOn the Javascript side, the associated input binding must have a corresponding getType method:\n\n",
    "code_examples": [
      "session.get_current_session()",
      "session.get_current_session()",
      "session.require_active_session(session)",
      "session.require_active_session(session)",
      "session.session_context(session)",
      "session.session_context(session)",
      "reactive.get_current_context()",
      "reactive.get_current_context()",
      "session.ClientData(self, session)",
      "session.ClientData(self, session)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport textwrap\n\n# pyright: reportUnknownMemberType=false, reportUnknownVariableType=false\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_slider(\"obs\", \"Number of observations:\", min=0, max=1000, value=500),\n        open=\"closed\",\n    ),\n    ui.markdown(\n        \"\"\"\n#### `session.clientdata` values\n\nThe following methods are available from the `session.clientdata` object and allow you\nto reactively read the client data values from the browser.\n\"\"\"\n    ),\n    ui.output_text_verbatim(\"clientdatatext\"),\n    ui.output_plot(\"myplot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n    @render.code\n    def clientdatatext():\n        return textwrap.dedent(\n            f\"\"\"\n        .url_hash()         -> {session.clientdata.url_hash()}\n        .url_hash_initial() -> {session.clientdata.url_hash_initial()}\n        .url_hostname()     -> {session.clientdata.url_hostname()}\n        .url_pathname()     -> {session.clientdata.url_pathname()}\n        .url_port()         -> {session.clientdata.url_port()}\n        .url_protocol()     -> {session.clientdata.url_protocol()}\n        .url_search()       -> {session.clientdata.url_search()}\n        .pixelratio()       -> {session.clientdata.pixelratio()}\n\n        .output_height(\"myplot\")       -> {session.clientdata.output_height(\"myplot\")}\n        .output_width(\"myplot\")        -> {session.clientdata.output_width(\"myplot\")}\n        .output_hidden(\"myplot\")       -> {session.clientdata.output_hidden(\"myplot\")}\n        .output_bg_color(\"myplot\")     -> {session.clientdata.output_bg_color(\"myplot\")}\n        .output_fg_color(\"myplot\")     -> {session.clientdata.output_fg_color(\"myplot\")}\n        .output_accent_color(\"myplot\") -> {session.clientdata.output_accent_color(\"myplot\")}\n        .output_font(\"myplot\")         -> {session.clientdata.output_font(\"myplot\")}\n\n        \"\"\"\n        )\n\n    @render.plot\n    def myplot():\n        plt.figure()\n        plt.hist(np.random.normal(size=input.obs()))  # type: ignore\n        plt.title(\"This is myplot\")\n\n\napp = App(app_ui, server)\n\n",
      "session.ClientData.output_accent_color(id)",
      "session.ClientData.output_accent_color(id)",
      "session.ClientData.output_bg_color(id)",
      "session.ClientData.output_bg_color(id)",
      "session.ClientData.output_fg_color(id)",
      "session.ClientData.output_fg_color(id)",
      "session.ClientData.output_font(id)",
      "session.ClientData.output_font(id)",
      "session.ClientData.output_height(id)",
      "session.ClientData.output_height(id)",
      "session.ClientData.output_hidden(id)",
      "session.ClientData.output_hidden(id)",
      "session.ClientData.output_width(id)",
      "session.ClientData.output_width(id)",
      "session.ClientData.pixelratio()",
      "session.ClientData.pixelratio()",
      "session.ClientData.url_hash()",
      "session.ClientData.url_hash()",
      "session.ClientData.url_hash_initial()",
      "session.ClientData.url_hash_initial()",
      "session.ClientData.url_hostname()",
      "session.ClientData.url_hostname()",
      "session.ClientData.url_pathname()",
      "session.ClientData.url_pathname()",
      "session.ClientData.url_port()",
      "session.ClientData.url_port()",
      "session.ClientData.url_protocol()",
      "session.ClientData.url_protocol()",
      "session.ClientData.url_search()",
      "session.ClientData.url_search()",
      "session.Session.send_custom_message(type, message)",
      "session.Session.send_custom_message(type, message)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"msg\", \"Enter a message\"),\n    ui.input_action_button(\"submit\", \"Submit the message\"),\n    # It'd be better to use ui.insert_ui() in order to implement this kind of\n    # functionality...this is just a basic demo of how custom message handling works.\n    ui.tags.div(id=\"messages\"),\n    ui.tags.script(\n        \"\"\"\n        $(function() {\n            Shiny.addCustomMessageHandler(\"append_msg\", function(message) {\n                $(\"<p>\").text(message.msg).appendTo(\"#messages\");\n            });\n        });\n        \"\"\"\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.submit)\n    async def _():\n        await session.send_custom_message(\"append_msg\", {\"msg\": input.msg()})\n\n\napp = App(app_ui, server, debug=True)\n\n",
      "session.Session.send_input_message(id, message)",
      "session.Session.send_input_message(id, message)",
      "session.Session.on_flush(fn, once=True)",
      "session.Session.on_flush(fn, once=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"flush\", \"Trigger flush\"),\n    ui.output_ui(\"n_clicks\"),\n    ui.div(id=\"flush_time\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n        print(msg)\n        ui.insert_ui(\n            ui.p(msg),\n            selector=\"#flush_time\",\n        )\n\n    session.on_flush(log, once=False)\n\n    @render.ui\n    def n_clicks():\n        return \"Number of clicks: \" + str(input.flush())\n\n\napp = App(app_ui, server)\n\n",
      "session.Session.on_flushed(fn, once=True)",
      "session.Session.on_flushed(fn, once=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"flush\", \"Trigger flush\"),\n    ui.output_ui(\"n_clicks\"),\n    ui.div(id=\"flush_time\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n        print(msg)\n        ui.insert_ui(\n            ui.p(msg),\n            selector=\"#flush_time\",\n        )\n\n    session.on_flushed(log, once=False)\n\n    @render.ui\n    def n_clicks():\n        return \"Number of clicks: \" + str(input.flush())\n\n\napp = App(app_ui, server)\n\n",
      "session.Session.on_ended(fn)",
      "session.Session.on_ended(fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"close\", \"Close the session\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n    session.on_ended(log)\n\n    @reactive.effect\n    @reactive.event(input.close)\n    async def _():\n        await session.close()\n\n\napp = App(app_ui, server)\n\n",
      "session.Session.dynamic_route(name, handler)",
      "session.Session.dynamic_route(name, handler)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"serve\", \"Click to serve\"), ui.div(id=\"messages\")\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.serve)\n    def _():\n        async def my_handler(request: Request) -> JSONResponse:\n            return JSONResponse({\"n_clicks\": input.serve()}, status_code=200)\n\n        path = session.dynamic_route(\"my_handler\", my_handler)\n\n        print(\"Serving at: \", path)\n\n        ui.insert_ui(\n            ui.tags.script(\n                f\"\"\"\n                fetch('{path}')\n                  .then(r => r.json())\n                  .then(x => {{ $('#messages').text(`Clicked ${{x.n_clicks}} times`); }});\n                \"\"\"\n            ),\n            selector=\"body\",\n        )\n\n\napp = App(app_ui, server)\n\n",
      "session.Session.close(code=1001)",
      "session.Session.close(code=1001)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"close\", \"Close the session\"),\n    ui.p(\n        \"\"\"If this example is running on the browser (i.e., via shinylive),\n        closing the session will log a message to the JavaScript console\n        (open the browser's developer tools to see it).\n        \"\"\"\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n    session.on_ended(log)\n\n    @reactive.effect\n    @reactive.event(input.close)\n    async def _():\n        await session.close()\n\n\napp = App(app_ui, server)\n\n",
      "from shiny.input_handler import input_handlers\n@input_handlers.add(\"mypackage.intify\")\ndef _(value, name, session):\n    return int(value)",
      "from shiny.input_handler import input_handlers\n@input_handlers.add(\"mypackage.intify\")\ndef _(value, name, session):\n    return int(value)",
      "getType: function(el) {\n    return \"mypackage.intify\";\n}",
      "getType: function(el) {\n    return \"mypackage.intify\";\n}"
    ]
  },
  {
    "id": "api_core_ui_help_text_html",
    "url": "api/core/ui.help_text.html",
    "title": "ui.help_text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.help_text\n\nui.help_text\n\nCreate a help text element\n\nHelp text is stylized text which can be added to the user interface to provide additional explanation or context. Text passed to help_text receives the Bootstrap help-block class.\n\nParameters\n\nUI elements to include inside the help text.\n\nAttributes to add to the text container.\n\nReturns\n\nA UI element\n\n",
    "code_examples": [
      "ui.help_text(*args, **kwargs)",
      "ui.help_text(*args, **kwargs)"
    ]
  },
  {
    "id": "api_core_ui_notification_show_html",
    "url": "api/core/ui.notification_show.html",
    "title": "ui.notification_show ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.notification_show\n\nui.notification_show\n\nShow a notification to the user.\n\nA notification is a message that appears near the bottom corner of the app. Notifications normally disappear after a short period of time, and should multiple notifications appear together, they will stack on top of one another.\n\nParameters\n\nContents of the notification message.\n\nMessage content that represents an action. For example, this could be a link that the user can click on. This is separate from ui so customized layouts can handle the main notification content separately from the action content.\n\nNumber of seconds to display the message before it disappears. Use None to prevent the message from disappearing automatically. The user will need to click the corner of the notification to close it.\n\nIf True, display a button which will make the notification disappear when clicked. If False do not display.\n\nAn optional unique identifier for the notification. If supplied, any existing notification with the same id will be replaced with this one (otherwise, a new notification is created).\n\nA string which controls the color of the notification. This should be one of ‚Äúdefault‚Äù (gray), ‚Äúmessage‚Äù (blue), ‚Äúwarning‚Äù (yellow), or ‚Äúerror‚Äù (red).\n\nThe Session in which the notification should appear. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nThe notification‚Äôs id.\n\nSee Also\n\n- notification_remove\n- modal\n\nExamples\n\n",
    "code_examples": [
      "ui.notification_show(\n    ui,\n    *,\n    action=None,\n    duration=5,\n    close_button=True,\n    id=None,\n    type='default',\n    session=None,\n)",
      "ui.notification_show(\n    ui,\n    *,\n    action=None,\n    duration=5,\n    close_button=True,\n    id=None,\n    type='default',\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show\"),\n    \" \",\n    ui.input_action_button(\"remove\", \"Remove\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\"Message \" + str(n), duration=None)\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\n\napp = App(app_ui, server, debug=True)\n\n"
    ]
  },
  {
    "id": "api_core_ui_notification_remove_html",
    "url": "api/core/ui.notification_remove.html",
    "title": "ui.notification_remove ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.notification_remove\n\nui.notification_remove\n\nRemove a notification.\n\nnotification_remove provides a way to remove a notification programmatically. Notifications can also be removed manually by the user, or automatically after a specififed amont of time passes.\n\nParameters\n\nThe id of the notification to remove.\n\nThe Session in which the notification appears. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nThe notification‚Äôs id.\n\nSee Also\n\n- notification_show\n- modal\n\nExample\n\nSee shiny.ui.notification_show.\n\n",
    "code_examples": [
      "ui.notification_remove(id, *, session=None)",
      "ui.notification_remove(id, *, session=None)"
    ]
  },
  {
    "id": "api_core_ui_modal_html",
    "url": "api/core/ui.modal.html",
    "title": "ui.modal ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.modal\n\nui.modal\n\nCreates the UI for a modal dialog, using Bootstrap's modal class.\n\nA modal is a dialog box that appears in front of the app. Modals are typically used for showing important messages, or for presenting UI that requires input from the user, such as a user name and/or password input.\n\nParameters\n\nUI elements for the body of the modal.\n\nAn optional title for the modal dialog.\n\nUI for footer. Use None for no footer.\n\nThe size of the modal dialogue box. Use one of ‚Äús‚Äù for small, ‚Äúm‚Äù (the default) for medium, or ‚Äúl‚Äù for large.\n\nIf True, the modal dialog can be dismissed by clicking outside the dialog box, or by pressing the Escape key. If False (the default), the modal dialog can‚Äôt be dismissed in those ways; instead it must be dismissed by clicking on a modal_button(), or from a call to modal_remove() on the server.\n\nIf False, the modal dialog will have no fade-in animation (it will simply appear rather than fade in to view).\n\nAttributes to be applied to the modal‚Äôs body tag.\n\nReturns\n\nA UI element\n\nSee Also\n\n- modal_show\n- modal_remove\n- modal_button\n\nExamples\n\n",
    "code_examples": [
      "ui.modal(\n    *args,\n    title=None,\n    footer=MISSING,\n    size='m',\n    easy_close=False,\n    fade=True,\n    **kwargs,\n)",
      "ui.modal(\n    *args,\n    title=None,\n    footer=MISSING,\n    size='m',\n    easy_close=False,\n    fade=True,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            title=\"Somewhat important message\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_modal_show_html",
    "url": "api/core/ui.modal_show.html",
    "title": "ui.modal_show ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.modal_show\n\nui.modal_show\n\nShow a modal dialog.\n\nmodal_show is used to display a modal that has been created with modal.\n\nParameters\n\nTypically a modal instance.\n\nThe Session instance to display the modal in. If not provided, the session is inferred via get_current_session.\n\nSee Also\n\n- modal_remove\n- modal\n\nExamples\n\n",
    "code_examples": [
      "ui.modal_show(modal, session=None)",
      "ui.modal_show(modal, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            title=\"Somewhat important message\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_modal_remove_html",
    "url": "api/core/ui.modal_remove.html",
    "title": "ui.modal_remove ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.modal_remove\n\nui.modal_remove\n\nRemove a modal dialog box.\n\nmodal_remove provides a way to remove a modal programmatically. Modals can also be removed manually by the user if a modal_button is provided, or if the modal is created with easy_close=True.\n\nParameters\n\nThe Session instance that contains the modal to remove. If not provided, the session is inferred via get_current_session.\n\nSee Also\n\n- modal_show\n- modal\n\nExamples\n\n",
    "code_examples": [
      "ui.modal_remove(session=None)",
      "ui.modal_remove(session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\n\ndef run_model(delay=10.0):\n    import time\n\n    # Pretend to run a model for `delay` seconds\n    start_time = time.time()\n    while time.time() - start_time < delay:\n        pass\n    return time.time()\n\n\ndef the_modal():\n    return ui.modal(\n        \"The model is running, please wait.\",\n        title=\"Running model\",\n        easy_close=False,\n        footer=None,\n    )\n\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"run\", \"Run Model\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    model_result = reactive.value()\n\n    @reactive.effect\n    @reactive.event(input.run)\n    def do_run_model():\n        # Show the modal, blocking interaction with the UI\n        ui.modal_show(the_modal())\n\n        result = run_model(delay=4)\n\n        # Now that we have model results, remove the modal\n        # and update the model result reactive value\n        ui.modal_remove()\n        model_result.set(result)\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_modal_button_html",
    "url": "api/core/ui.modal_button.html",
    "title": "ui.modal_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.modal_button\n\nui.modal_button\n\nCreates a button that will dismiss a modal.\n\nmodal_button is usually passed to the footer of a modal to add a button to the footer that will close the modal.\n\nParameters\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nAttributes to be applied to the button.\n\nReturns\n\nA UI element\n\nSee Also\n\n- modal\n- modal_show\n- modal_remove\n\nExamples\n\n",
    "code_examples": [
      "ui.modal_button(label, icon=None, **kwargs)",
      "ui.modal_button(label, icon=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            title=\"Somewhat important message\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_ui_Progress_html",
    "url": "api/core/ui.Progress.html",
    "title": "ui.progress ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.Progress\n\nui.Progress\n\nInitialize a progress bar.\n\nProgress creates a computation manager that can be used with with to run a block of code. Shiny will display a progress bar while the code runs, which you can update by calling the set() and message() methods of the computation manager at strategic points in the code block.\n\nParameters\n\nThe value that represents the starting point of the progress bar. Must be less than max.\n\nThe value that represents the end of the progress bar. Must be greater than min.\n\nThe Session instance that the progress bar should appear in. If not provided, the session is inferred via get_current_session.\n\nExamples\n\nMethods\n\nclose\n\nClose the progress bar. You can also use the Progress object as a context manager, which will cause the progress bar to close on exit.\n\nParameters\n\nThe object instance\n\nNote\n\nRemoves the progress panel. Future calls to set and close will be ignored.\n\ninc\n\nIncrement the progress bar.\n\nLike set, this updates the progress panel. The difference is that inc increases the progress bar by amount, instead of setting it to a specific value.\n\nParameters\n\nThe object instance\n\nThe amount to increment in progress.\n\nThe message to be displayed to the user or None to hide the current message (if any).\n\nThe detail message to be displayed to the user or None to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.\n\nset\n\nOpens and updates the progress panel.\n\nWhen called the first time, the progress panel is displayed.\n\nParameters\n\nThe object instance\n\nThe value at which to set the progress bar, relative to min and max. None hides the progress bar, if it is currently visible.\n\nThe message to be displayed to the user or None to hide the current message (if any).\n\nThe detail message to be displayed to the user or None to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.\n\n",
    "code_examples": [
      "ui.Progress(self, min=0, max=1, session=None)",
      "ui.Progress(self, min=0, max=1, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_text(\"compute\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n                # Normally use time.sleep() instead, but it doesn't yet work in Pyodide.\n                # https://github.com/pyodide/pyodide/issues/2354\n\n        return \"Done computing!\"\n\n\napp = App(app_ui, server)\n\n",
      "ui.Progress.close()",
      "ui.Progress.close()",
      "ui.Progress.inc(amount=0.1, message=None, detail=None)",
      "ui.Progress.inc(amount=0.1, message=None, detail=None)",
      "ui.Progress.set(value=None, message=None, detail=None)",
      "ui.Progress.set(value=None, message=None, detail=None)"
    ]
  },
  {
    "id": "api_core_module_ui_html",
    "url": "api/core/module.ui.html",
    "title": "module.ui ‚Äì Shiny for Python",
    "description": "",
    "content": "- Modules\n- module.ui\n\nmodule.ui\n\n",
    "code_examples": [
      "module.ui(fn)",
      "module.ui(fn)"
    ]
  },
  {
    "id": "api_core_module_server_html",
    "url": "api/core/module.server.html",
    "title": "module.server ‚Äì Shiny for Python",
    "description": "",
    "content": "- Modules\n- module.server\n\nmodule.server\n\n",
    "code_examples": [
      "module.server(fn)",
      "module.server(fn)"
    ]
  },
  {
    "id": "api_core_Renderer_html",
    "url": "api/core/Renderer.html",
    "title": "renderer ‚Äì Shiny for Python",
    "description": "",
    "content": "- Developer facing tools\n- Create output renderers\n\nCreate output renderers\n\nPackage author methods for creating new output renderers.\n\nrender.renderer.Renderer\n\nOutput renderer class\n\nAn output renderer is a class that will take in a callable function (value function), transform the returned value into a JSON-serializable object, and send the result to the browser.\n\nWhen the value function is received, the renderer will be auto registered with the current session's Output class, hooking it into Shiny's reactive graph. By auto registering as an Output, it allows for App authors to skip adding @output above the renderer. (If programmatic id is needed, @output(id=\"foo\") can still be used!)\n\nThere are two methods that must be implemented by the subclasses: .auto_output_ui(self) and either .transform(self, value: IT) or .render(self).\n\n- In Express mode, the output renderer will automatically render its UI via .auto_output_ui(self). This helper method allows App authors to skip adding a ui.output_* function to their UI, making Express mode even more concise. If more control is needed over the UI, @ui.hold can be used to suppress the auto rendering of the UI. When using @ui.hold on a renderer, the renderer's UI will need to be added to the app to connect the rendered output to Shiny's reactive graph.\n- The render method is responsible for executing the value function and performing any transformations for the output value to be JSON-serializable (None is a valid value!). To avoid the boilerplate of resolving the value function and returning early if None is received, package authors may implement the .transform(self, value: IT) method. The transform method's sole job is to transform non-None values into an object that is JSON-serializable.\n\nExamples\n\nAttributes\n\nMethods\n\nauto_output_ui\n\nExpress mode method that automatically generates the output's UI.\n\nrender\n\nRenders the output value function.\n\nThis method is called when the renderer is requested to render its output.\n\nThe Renderer's render() implementation goes as follows:\n\n- Execute the value function supplied to the renderer.\n- If the output value is None, None will be returned.\n- If the output value is not None, the .transform() method will be called to transform the value into a JSON-serializable object.\n\nWhen overwriting this method in a subclass, the implementation should execute the value function .fn and return the transformed value (which is JSON-serializable).\n\ntransform\n\nTransform an output value into a JSON-serializable object.\n\nWhen subclassing Renderer, this method can be implemented to transform non-None values into a JSON-serializable object.\n\nIf a .render() method is not implemented, this method must be implemented. When the output is requested, the Renderer's .render() method will execute the output value function, return None if the value is None, and call this method to transform the value into a JSON-serializable object.\n\nNote, only one of .transform() or .render() should be implemented.\n\nrender.renderer.Jsonifiable\n\nrender.renderer.Jsonifiable\n\nrender.renderer.ValueFn\n\nrender.renderer.ValueFn\n\nApp-supplied output value function which returns type IT or None. This function can be synchronous or asynchronous.\n\nrender.renderer.AsyncValueFn\n\nApp-supplied output value function which returns type IT. asynchronous.\n\nType definition: Callable[[], Awaitable[IT]]\n\nMethods\n\nget_async_fn\n\nReturn the async value function.\n\nReturns\n\nAsync wrapped value function supplied to the AsyncValueFn constructor.\n\nget_sync_fn\n\nRetrieve the original, synchronous value function function.\n\nIf the original function was asynchronous, a runtime error will be thrown.\n\nReturns\n\nOriginal, synchronous function supplied to the AsyncValueFn constructor.\n\nis_async\n\nWas the original function asynchronous?\n\nReturns\n\nWhether the original function is asynchronous.\n\nrender.renderer.RendererT\n\nrender.renderer.RendererT\n\nGeneric output renderer class to pass the original Renderer subclass through a decorator function.\n\nWhen accepting and returning a Renderer class, utilize this TypeVar as to not reduce the variable type to Renderer[Any]\n\n",
    "code_examples": [
      "render.renderer.Renderer(self, _fn=None)",
      "render.renderer.Renderer(self, _fn=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\n# Import the custom renderer implementations\nfrom renderers import render_capitalize, render_upper\n\nfrom shiny import App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(\n    ui.h1(\"Capitalization renderer\"),\n    ui.input_text(\"caption\", \"Caption:\", \"Data summary\"),\n    \"@render_upper: \",\n    ui.output_text_verbatim(\"upper\", placeholder=True),\n    \"@render_upper(): \",\n    ui.output_text_verbatim(\"upper_with_paren\", placeholder=True),\n    \"@render_capitalize: \",\n    ui.output_text_verbatim(\"cap_upper\", placeholder=True),\n    \"@render_capitalize(to='lower'): \",\n    ui.output_text_verbatim(\"cap_lower\", placeholder=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Hovering over `@render_upper` will display the class documentation\n    @render_upper\n    def upper():\n        return input.caption()\n\n    # Hovering over `@render_upper` will display the class documentation as there is no\n    # `__init__()` documentation\n    @render_upper()\n    def upper_with_paren():\n        return input.caption()\n\n    # Hovering over `@render_capitalize` will display the class documentation\n    @render_capitalize\n    def cap_upper():\n        return input.caption()\n\n    # Hovering over `@render_capitalize` will display the `__init__()` documentation\n    @render_capitalize(to_case=\"lower\")\n    def cap_lower():\n        return input.caption()\n\n\napp = App(app_ui, server)\n\n\n## file: renderers.py\nfrom __future__ import annotations\n\nfrom typing import Literal, Optional\n\nfrom shiny.render.renderer import Renderer, ValueFn\nfrom shiny.ui import output_text_verbatim\n\n\nclass render_capitalize(Renderer[str]):\n    # The documentation for the class will be displayed when the user hovers over the\n    # decorator when **no** parenthesis are used. Ex: `@render_capitalize`\n    # If no documentation is supplied to the `__init__()` method, then this\n    # documentation will be displayed when parenthesis are used on the decorator.\n    \"\"\"\n    Render capitalize class documentation goes here.\n    \"\"\"\n\n    to_case: Literal[\"upper\", \"lower\", \"ignore\"]\n    \"\"\"\n    The case to render the value in.\n    \"\"\"\n    placeholder: bool\n    \"\"\"\n    Whether to render a placeholder value. (Defaults to `True`)\n    \"\"\"\n\n    def auto_output_ui(self):\n        \"\"\"\n        Express UI for the renderer\n        \"\"\"\n        return output_text_verbatim(self.output_id, placeholder=True)\n\n    def __init__(\n        self,\n        _fn: Optional[ValueFn[str]] = None,\n        *,\n        to_case: Literal[\"upper\", \"lower\", \"ignore\"] = \"upper\",\n        placeholder: bool = True,\n    ) -> None:\n        # If a different set of documentation is supplied to the `__init__` method,\n        # then this documentation will be displayed when parenthesis are used on the decorator.\n        # Ex: `@render_capitalize()`\n        \"\"\"\n        Render capitalize documentation goes here.\n\n        It is a good idea to talk about parameters here!\n\n##         Parameters {.doc-section .doc-section---------parameters}\n\n        to_case\n            The case to render the value. (`\"upper\"`)\n\n            Options:\n            - `\"upper\"`: Render the value in upper case.\n            - `\"lower\"`: Render the value in lower case.\n            - `\"ignore\"`: Do not alter the case of the value.\n\n        placeholder\n            Whether to render a placeholder value. (`True`)\n        \"\"\"\n        # Do not pass params\n        super().__init__(_fn)\n        self.to_case = to_case\n        self.placeholder = placeholder\n\n    async def render(self) -> str | None:\n        value = await self.fn()\n        if value is None:\n            # If `None` is returned, then do not render anything.\n            return None\n\n        ret = str(value)\n        if self.to_case == \"upper\":\n            return ret.upper()\n        if self.to_case == \"lower\":\n            return ret.lower()\n        if self.to_case == \"ignore\":\n            return ret\n        raise ValueError(f\"Invalid value for `to_case`: {self.to_case}\")\n\n\nclass render_upper(Renderer[str]):\n    \"\"\"\n    Minimal capitalize string transformation renderer.\n\n    No parameters are supplied to this renderer. This allows us to skip the `__init__()`\n    method and `__init__()` documentation. If you hover over this decorator with and\n    without parenthesis, you will see this documentation in both situations.\n\n    Note: This renderer is equivalent to `render_capitalize(to=\"upper\")`.\n    \"\"\"\n\n    def auto_output_ui(self):\n        \"\"\"\n        Express UI for the renderer\n        \"\"\"\n        return output_text_verbatim(self.output_id, placeholder=True)\n\n    async def transform(self, value: str) -> str:\n        \"\"\"\n        Transform the value to upper case.\n\n        This method is shorthand for the default `render()` method. It is useful to\n        transform non-`None` values. (Any `None` value returned by the app author will\n        be forwarded to the browser.)\n\n##         Parameters {.doc-section .doc-section---------parameters}\n\n        value\n            The a non-`None` value to transform.\n\n##         Returns {.doc-section .doc-section---------returns}\n\n        str\n            The transformed value. (Must be a subset of `Jsonifiable`.)\n        \"\"\"\n\n        return str(value).upper()\n\n",
      "render.renderer.Renderer.auto_output_ui()",
      "render.renderer.Renderer.auto_output_ui()",
      "render.renderer.Renderer.render()",
      "render.renderer.Renderer.render()",
      "render.renderer.Renderer.transform(value)",
      "render.renderer.Renderer.transform(value)",
      "render.renderer.AsyncValueFn(self, fn)",
      "render.renderer.AsyncValueFn(self, fn)",
      "render.renderer.AsyncValueFn.get_async_fn()",
      "render.renderer.AsyncValueFn.get_async_fn()",
      "render.renderer.AsyncValueFn.get_sync_fn()",
      "render.renderer.AsyncValueFn.get_sync_fn()",
      "render.renderer.AsyncValueFn.is_async()",
      "render.renderer.AsyncValueFn.is_async()"
    ]
  },
  {
    "id": "api_core_Htmltools_html",
    "url": "api/core/Htmltools.html",
    "title": "htmltools ‚Äì Shiny for Python",
    "description": "",
    "content": "- Developer facing tools\n- htmltools methods\n\nhtmltools methods\n\nhtmltools.HTMLDependency\n\nDefine an HTML dependency.\n\nDefine an HTML dependency (i.e. CSS and/or JavaScript bundled in a directory). HTML dependencies make it possible to use libraries like jQuery, Bootstrap, and d3 in a more composable and portable way than simply using script, link, and style tags.\n\nParameters\n\nLibrary name.\n\nLibrary version.\n\nA specification for the location of dependency files.\n\n<script> tags to include in the document‚Äôs <head>. Each tag definition should include at least the src attribute (which should be file path relative to the source file location).\n\n<link> tags to include in the document‚Äôs <head>. Each tag definition should include at least the href attribute (which should be file path relative to the source file location).\n\nWhether all files under the source directory are dependency files. If False, only the files specified in script and stylesheet are treated as dependency files.\n\n<meta> tags to include in the document‚Äôs <head>.\n\nTags to include in the document‚Äôs <head>.\n\nExamples\n\nMethods\n\nas_dict\n\nReturns a dict of the dependency's attributes.\n\nas_html_tags\n\nRender the dependency as a TagList().\n\ncopy_to\n\nCopy the dependency's files to the given path.\n\nsource_path_map\n\nReturns a dict of the absolute 'source' filepath and the 'href' path it will point to in the HTML (given the lib_prefix).\n\nhtmltools.css\n\nParameters\n\n‚ÄúorNone`` for style blocks. **kwargs Named style properties, where the name is the property name and the argument is the property value.\n\nReturns\n\nExample\n\nNote\n\n",
    "code_examples": [
      "HTMLDependency(\n    self,\n    name,\n    version,\n    *,\n    source=None,\n    script=None,\n    stylesheet=None,\n    all_files=False,\n    meta=None,\n    head=None,\n)",
      "HTMLDependency(\n    self,\n    name,\n    version,\n    *,\n    source=None,\n    script=None,\n    stylesheet=None,\n    all_files=False,\n    meta=None,\n    head=None,\n)",
      ">>> dep = HTMLDependency(\n        name=\"mypackage\",\n        version=\"1.0\",\n        source={\n            \"package\": \"mypackage\",\n            \"subdir\": \"lib/\",\n        },\n        script={\"src\": \"foo.js\"},\n        stylesheet={\"href\": \"css/foo.css\"},\n    )",
      ">>> dep = HTMLDependency(\n        name=\"mypackage\",\n        version=\"1.0\",\n        source={\n            \"package\": \"mypackage\",\n            \"subdir\": \"lib/\",\n        },\n        script={\"src\": \"foo.js\"},\n        stylesheet={\"href\": \"css/foo.css\"},\n    )",
      ">>> x = div(\"Hello\", dep)\n>>> x.render()",
      ">>> x = div(\"Hello\", dep)\n>>> x.render()",
      "HTMLDependency.as_dict(lib_prefix='lib', include_version=True)",
      "HTMLDependency.as_dict(lib_prefix='lib', include_version=True)",
      "HTMLDependency.as_html_tags(lib_prefix='lib', include_version=True)",
      "HTMLDependency.as_html_tags(lib_prefix='lib', include_version=True)",
      "HTMLDependency.copy_to(path, include_version=True)",
      "HTMLDependency.copy_to(path, include_version=True)",
      "HTMLDependency.source_path_map(lib_prefix='lib', include_version=True)",
      "HTMLDependency.source_path_map(lib_prefix='lib', include_version=True)",
      "css(collapse_='', **kwargs)",
      "css(collapse_='', **kwargs)"
    ]
  },
  {
    "id": "api_core_ExtendedTask_html",
    "url": "api/core/ExtendedTask.html",
    "title": "extendedtask ‚Äì Shiny for Python",
    "description": "",
    "content": "- Developer facing tools\n- ExtendedTask\n\nExtendedTask\n\nSupervise an extended, long-running task\n\nreactive.ExtendedTask\n\nAttributes\n\nMethods\n\ncancel\n\nCancel the current invocation, if any. If there are pending invocations, cancel those too.\n\ninvoke\n\nRequest execution of the slow computation. If there's already a computation in progress, this will queue up the new invocation to be run after the current one. The arguments to this function are passed to the underlying function.\n\nReturns\n\nImmediately returns None. The results of the computation will be available via the result() method.\n\nresult\n\nCall from a reactive context (e.g. a render function, calc, or effect) to get the result of the computation.\n\n- If the computation has finished successfully, the result will be returned.\n- If the computation has finished with an error, the error will be raised.\n- If the computation has never run, or the most recent run was cancelled, a silent exception will be raised that will clear any downstream outputs.\n- If the computation is currently running, a special type of silent exception will be raised that will cause the output to visually reflect that calculation is in progress.\n\nIf the computation has finished successfully, the result will be returned.\n\nIf the computation has finished with an error, the error will be raised.\n\nIf the computation has never run, or the most recent run was cancelled, a silent exception will be raised that will clear any downstream outputs.\n\nIf the computation is currently running, a special type of silent exception will be raised that will cause the output to visually reflect that calculation is in progress.\n\nreactive.ExtendedTask.invoke\n\nRequest execution of the slow computation. If there's already a computation in progress, this will queue up the new invocation to be run after the current one. The arguments to this function are passed to the underlying function.\n\nReturns\n\nImmediately returns None. The results of the computation will be available via the result() method.\n\nreactive.ExtendedTask.result\n\nCall from a reactive context (e.g. a render function, calc, or effect) to get the result of the computation.\n\n- If the computation has finished successfully, the result will be returned.\n- If the computation has finished with an error, the error will be raised.\n- If the computation has never run, or the most recent run was cancelled, a silent exception will be raised that will clear any downstream outputs.\n- If the computation is currently running, a special type of silent exception will be raised that will cause the output to visually reflect that calculation is in progress.\n\nIf the computation has finished successfully, the result will be returned.\n\nIf the computation has finished with an error, the error will be raised.\n\nIf the computation has never run, or the most recent run was cancelled, a silent exception will be raised that will clear any downstream outputs.\n\nIf the computation is currently running, a special type of silent exception will be raised that will cause the output to visually reflect that calculation is in progress.\n\nreactive.ExtendedTask.cancel\n\nCancel the current invocation, if any. If there are pending invocations, cancel those too.\n\n",
    "code_examples": [
      "reactive.ExtendedTask(self, func)",
      "reactive.ExtendedTask(self, func)",
      "reactive.ExtendedTask.cancel()",
      "reactive.ExtendedTask.cancel()",
      "reactive.ExtendedTask.invoke(*args, **kwargs)",
      "reactive.ExtendedTask.invoke(*args, **kwargs)",
      "reactive.ExtendedTask.result()",
      "reactive.ExtendedTask.result()",
      "reactive.ExtendedTask.invoke(*args, **kwargs)",
      "reactive.ExtendedTask.invoke(*args, **kwargs)",
      "reactive.ExtendedTask.result()",
      "reactive.ExtendedTask.result()",
      "reactive.ExtendedTask.cancel()",
      "reactive.ExtendedTask.cancel()"
    ]
  },
  {
    "id": "api_core_MiscTypes_html",
    "url": "api/core/MiscTypes.html",
    "title": "misctypes ‚Äì Shiny for Python",
    "description": "",
    "content": "- Types\n- Miscellaneous types\n\nMiscellaneous types\n\ntypes.MISSING_TYPE\n\ntypes.MISSING\n\ntypes.MISSING\n\ntypes.FileInfo\n\nClass for information about a file upload.\n\nSee Also\n\n- input_file\n\nExamples\n\nAttributes\n\ntypes.ImgData\n\nReturn type for image.\n\nSee Also\n\n- image\n\nExamples\n\nAttributes\n\ntypes.NavSetArg\n\nA value suitable for passing to a navigation container (e.g., navset_tab).\n\nMethods\n\nget_value\n\nGet the value of this navigation item (if any).\n\nThis value is only used to determine what navigation item should be shown by default when none is specified (i.e., the first navigation item that returns a value is used to determine the container's selected value).\n\nresolve\n\nResolve information provided by the navigation container.\n\nParameters\n\nThe value of the navigation item to be shown on page load.\n\nAdditional context supplied by the navigation container.\n\nui.Sidebar\n\nA sidebar object\n\nClass returned from sidebar. Please do not use this class directly. Instead, supply the sidebar object to layout_sidebar.\n\nAttributes\n\nA tuple of Tag objects that are the contents of the sidebar.\n\nA dictionary of attributes that are supplied to the sidebar contents Tag container.\n\nA valid CSS unit used for the width of the sidebar.\n\nWhere the sidebar should appear relative to the main content, one of \"left\" or \"right\".\n\nThe resolved ID. Required if wanting to reactively read (or update) the collapsible state in a Shiny app.\n\nA character title to be used as the sidebar title, which will be wrapped in a <div> element with class sidebar-title. You can also provide a custom Tag for the title element, in which case you‚Äôll likely want to give this element class = \"sidebar-title\".\n\nA dictionary with items \"bg\" for background or \"fg\" for foreground color.\n\nCSS classes for the sidebar container element, in addition to the fixed .sidebar class.\n\nA CSS length unit (passed through as_css_unit) defining the maximum height of the horizontal sidebar when viewed on mobile devices. Only applies to always-open sidebars on mobile, where by default the sidebar container is placed below the main content container on mobile devices.\n\nA CSS length unit defining the vertical gap (i.e., spacing) between elements provided to *args.\n\nPadding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. padding may be one to four values. * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left respectively.\n\nParameters\n\nA tuple of Tag objects that are the contents of the sidebar.\n\nA dictionary of attributes that are supplied to the sidebar contents Tag container.\n\nA valid CSS unit used for the width of the sidebar.\n\nWhere the sidebar should appear relative to the main content, one of \"left\" or \"right\".\n\nThe initial state of the sidebar. If a string, the possible values are: * \"open\": the sidebar starts open * \"closed\": the sidebar starts closed * \"always\": the sidebar is always open and cannot be closed Alternatively, you can provide a dictionary with keys \"desktop\" and \"mobile\" to set different initial states for desktop and mobile. For example, when {\"desktop\": \"open\", \"mobile\": \"closed\"} the sidebar is initialized in the open state on desktop screens or in the closed state on mobile screens. You can also choose to place an always-open sidebar above the main content on mobile devices by setting open={\"mobile\": \"always-above\"}.\n\nA character string. Required if wanting to reactively read (or update) the collapsible state in a Shiny app.\n\nA character title to be used as the sidebar title, which will be wrapped in a <div> element with class sidebar-title. You can also provide a custom Tag for the title element, in which case you‚Äôll likely want to give this element class = \"sidebar-title\".\n\nA background or foreground color.\n\nCSS classes for the sidebar container element, in addition to the fixed .sidebar class.\n\nA CSS length unit (passed through as_css_unit) defining the maximum height of the horizontal sidebar when viewed on mobile devices. Only applies to always-open sidebars on mobile, where by default the sidebar container is placed below the main content container on mobile devices.\n\nA CSS length unit defining the vertical gap (i.e., spacing) between elements provided to *args.\n\nPadding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. padding may be one to four values. * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left respectively.\n\nMethods\n\nopen\n\nGet or set the initial state of the sidebar. Returns a dataclass with desktop and mobile attributes.\n\nui.CardItem\n\nA wrapper around a Tag object that represents the content of a card item (e.g., card_header or card_footer).\n\nThis class is used to allow for consecutive non-card items to be bundled into a single group within card.\n\nParameters\n\nA Tag object that represents the content of a card item (e.g., card_header or card_footer).\n\nSee Also\n\n- card for creating a card component.\n- card_header for creating a header within a card.\n- card_footer for creating a footer within a card.\n\nMethods\n\nresolve\n\nResolves an object with the CardItem class by returning the item provided at initialization.\n\nReturns\n\nThe item provided at initialization.\n\ntagify\n\nTagify the item\n\nReturns\n\nA tagified TagList object.\n\nui.AccordionPanel\n\nThe internal class used to represent an accordion panel.\n\nThis class is used to represent an accordion panel. It is not intended to be instantiated directly. Instead, use accordion_panel.\n\nParameters\n\nContents to appear in the accordion panel body, or tag attributes that are supplied to the returned Tag object.\n\nA character string that uniquely identifies this panel.\n\nA Tag which is positioned just before the title.\n\nA title to appear in the accordion_panel‚Äôs header.\n\nA unique id for this panel.\n\nTag attributes to the accordion-body div Tag.\n\nSee Also\n\n- accordion\n- update_accordion\n- insert_accordion_panel\n- remove_accordion_panel\n- update_accordion_panel\n\nMethods\n\nresolve\n\nResolve the AccordionPanel into a Tag.\n\nReturns\n\nA Tag object representing the AccordionPanel.\n\ntagify\n\nResolve the AccordionPanel into a Tag.\n\nReturns\n\nA tagified resolve()d value.\n\nreactive.Context\n\nA reactive context\n\nMethods\n\nadd_pending_flush\n\nTell the reactive environment that this context should be flushed the next time flushReact() called.\n\nexecute_flush_callbacks\n\nExecute all flush callbacks\n\ninvalidate\n\nInvalidate this context. It will immediately call the callbacks that have been registered with onInvalidate().\n\non_flush\n\nRegister a function to be called when this context is flushed.\n\non_invalidate\n\nRegister a function to be called when this context is invalidated\n\nui.css.CssUnit\n\nui.css.CssUnit\n\nPossible python types that can be converted into a CSS unit. Numeric values will be converted to pixels. Values equal to 0 will be converted to \"0\". Strings will be passed through as-is.\n\nui._input_slider.SliderValueArg\n\nui._input_slider.SliderValueArg\n\nType variable.\n\nUsage::\n\nT = TypeVar('T') # Can be anything A = TypeVar('A', str, bytes) # Must be str or bytes\n\nType variables exist primarily for the benefit of static type checkers. They serve as the parameters for generic types as well as for generic function definitions. See class Generic for more information on generic types. Generic functions work as follows:\n\ndef repeat(x: T, n: int) -> List[T]: '''Return a list containing n references to x.''' return [x]*n\n\ndef longest(x: A, y: A) -> A: '''Return the longest of two strings.''' return x if len(x) >= len(y) else y\n\nThe latter example's signature is essentially the overloading of (str, str) -> str and (bytes, bytes) -> bytes. Also note that if the arguments are instances of some subclass of str, the return type is still plain str.\n\nAt runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\n\nType variables defined with covariant=True or contravariant=True can be used to declare covariant or contravariant generic types. See PEP 484 for more details. By default generic types are invariant in all type variables.\n\nType variables can be introspected. e.g.:\n\nT.__name__ == 'T' T.__constraints__ == () T.__covariant__ == False T.__contravariant__ = False A.__constraints__ == (str, bytes)\n\nNote that only type variables defined in global scope can be pickled.\n\nui._input_slider.SliderStepArg\n\nui._input_slider.SliderStepArg\n\n",
    "code_examples": [
      "types.MISSING_TYPE()",
      "types.MISSING_TYPE()",
      "types.FileInfo()",
      "types.FileInfo()",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\n\napp_ui = ui.page_fluid(\n    ui.input_file(\"file1\", \"Choose CSV File\", accept=[\".csv\"], multiple=False),\n    ui.input_checkbox_group(\n        \"stats\",\n        \"Summary Stats\",\n        choices=[\"Row Count\", \"Column Count\", \"Column Names\"],\n        selected=[\"Row Count\", \"Column Count\", \"Column Names\"],\n    ),\n    ui.output_table(\"summary\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.calc\n    def parsed_file():\n        file: list[FileInfo] | None = input.file1()\n        if file is None:\n            return pd.DataFrame()\n        return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]\n            file[0][\"datapath\"]\n        )\n\n    @render.table\n    def summary():\n        df = parsed_file()\n\n        if df.empty:\n            return pd.DataFrame()\n\n        # Get the row count, column count, and column names of the DataFrame\n        row_count = df.shape[0]\n        column_count = df.shape[1]\n        names = df.columns.tolist()\n        column_names = \", \".join(str(name) for name in names)\n\n        # Create a new DataFrame to display the information\n        info_df = pd.DataFrame(\n            {\n                \"Row Count\": [row_count],\n                \"Column Count\": [column_count],\n                \"Column Names\": [column_names],\n            }\n        )\n\n        # input.stats() is a list of strings; subset the columns based on the selected\n        # checkboxes\n        return info_df.loc[:, input.stats()]\n\n\napp = App(app_ui, server)\n\n",
      "types.ImgData()",
      "types.ImgData()",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny.types import ImgData\n\napp_ui = ui.page_fluid(ui.output_image(\"image\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.image\n    def image():\n        from pathlib import Path\n\n        dir = Path(__file__).resolve().parent\n        img: ImgData = {\"src\": str(dir / \"posit-logo.png\"), \"width\": \"100px\"}\n        return img\n\n\napp = App(app_ui, server)\n\n\n## file: posit-logo.png\n## type: binary\\n",
      "types.NavSetArg()",
      "types.NavSetArg()",
      "types.NavSetArg.get_value()",
      "types.NavSetArg.get_value()",
      "types.NavSetArg.resolve(selected, context)",
      "types.NavSetArg.resolve(selected, context)",
      "ui.Sidebar(\n    self,\n    *,\n    children,\n    attrs,\n    position='left',\n    open=None,\n    width=250,\n    id=None,\n    title=None,\n    fg=None,\n    bg=None,\n    class_=None,\n    max_height_mobile=None,\n    gap=None,\n    padding=None,\n)",
      "ui.Sidebar(\n    self,\n    *,\n    children,\n    attrs,\n    position='left',\n    open=None,\n    width=250,\n    id=None,\n    title=None,\n    fg=None,\n    bg=None,\n    class_=None,\n    max_height_mobile=None,\n    gap=None,\n    padding=None,\n)",
      "ui.Sidebar.open(value=MISSING)",
      "ui.Sidebar.open(value=MISSING)",
      "ui.CardItem(self, item)",
      "ui.CardItem(self, item)",
      "ui.CardItem.resolve()",
      "ui.CardItem.resolve()",
      "ui.CardItem.tagify()",
      "ui.CardItem.tagify()",
      "ui.AccordionPanel(self, *args, data_value, icon, title, id, **kwargs)",
      "ui.AccordionPanel(self, *args, data_value, icon, title, id, **kwargs)",
      "ui.AccordionPanel.resolve()",
      "ui.AccordionPanel.resolve()",
      "ui.AccordionPanel.tagify()",
      "ui.AccordionPanel.tagify()",
      "reactive.Context(self)",
      "reactive.Context(self)",
      "reactive.Context.add_pending_flush(priority)",
      "reactive.Context.add_pending_flush(priority)",
      "reactive.Context.execute_flush_callbacks()",
      "reactive.Context.execute_flush_callbacks()",
      "reactive.Context.invalidate()",
      "reactive.Context.invalidate()",
      "reactive.Context.on_flush(func)",
      "reactive.Context.on_flush(func)",
      "reactive.Context.on_invalidate(func)",
      "reactive.Context.on_invalidate(func)"
    ]
  },
  {
    "id": "api_core_TagTypes_html",
    "url": "api/core/TagTypes.html",
    "title": "tagtypes ‚Äì Shiny for Python",
    "description": "",
    "content": "- Types\n- Tag types\n\nTag types\n\nhtmltools.Tag\n\nThe HTML tag class.\n\nA Tag object consists of a name, attributes, and children. The name is a string, the attributes are held in a TagAttrDict object, and the children are held in a TagList object.\n\nThis class usually should not be instantiated directly. Instead, use the tag wrapper functions in htmltools.tags, like div() or a().\n\nParameters\n\nThe tag‚Äôs name.\n\nChildren for the tag.\n\nA bool indicating whether to add whitespace surrounding the tag (see Note for details).\n\nAttributes for the tag.\n\nAttributes\n\nThe tag‚Äôs name.\n\nThe tag‚Äôs attributes.\n\nThe tag‚Äôs children.\n\nNote\n\nThe _add_ws parameter controls whether whitespace is added around the tag. Inline tags (like span() and a()) default to False and block tags (like div() and p()) default to True.\n\nWhen a tag with _add_ws=True is rendered to HTML, whitespace (including indentation) is added before the opening tag (like <div>), after the closing tag (like </div>), and also between the opening tag and its first child. This usually results in formatting that is easier to read.\n\nThe only times that whitespace is not added around tags is when two sibling tags have _add_ws=False, or when a tag and its first child both have _add_ws=False. Bare strings are treated as children with _add_ws=False.\n\nIf you need fine control over whitespace in the output HTML, you can create tags with _add_ws=False and manually add whitespace, like div(\"\\n\", span(\"a\"), _add_ws=False).\n\nExamples\n\nMethods\n\nadd_class\n\nAdd a class value to the HTML class attribute.\n\nParameters\n\nThe class name to add.\n\nBool that determines if the class is added to the beginning or end of the class attribute.\n\nReturns\n\nThe modified tag.\n\nadd_style\n\nAdd a style value(s) to the HTML style attribute.\n\nParameters\n\nCSS properties and values already properly formatted. Each should already contain trailing semicolons.\n\nBool that determines if the style is added to the beginning or end of the style attribute.\n\nSee Also\n\ncss\n\nReturns\n\nThe modified tag.\n\nappend\n\nAppend tag children to the end of the list.\n\nextend\n\nExtend the children by appending an iterable of children.\n\nget_dependencies\n\nGet any HTML dependencies.\n\nget_html_string\n\nGet the HTML string representation of the tag.\n\nParameters\n\nThe number of spaces to indent the tag.\n\nThe end-of-line character(s).\n\nhas_class\n\nCheck if the tag has a particular class value.\n\nParameters\n\nThe class name to check for.\n\nReturns\n\nTrue if the tag has the class, False otherwise.\n\ninsert\n\nInsert tag children before a given index.\n\nremove_class\n\nRemove a class value from the HTML class attribute.\n\nParameters\n\nThe class name to remove.\n\nReturns\n\nThe modified tag.\n\nrender\n\nGet string representation as well as its HTML dependencies.\n\nsave_html\n\nSave to a HTML file.\n\nParameters\n\nThe file to save to.\n\nThe directory to save the dependencies to.\n\nWhether to include the version number in the dependency folder name.\n\nReturns\n\nshow\n\nPreview as a complete HTML document.\n\nParameters\n\nThe renderer to use.\n\ntagify\n\nConvert any tagifiable children to Tag/TagList objects.\n\nhtmltools.TagAttrs\n\nTagAttrs\n\nFor dictionaries of tag attributes (e.g., {\"id\": \"foo\"}), which can be passed as unnamed arguments to Tag functions like div().\n\nhtmltools.TagAttrValue\n\nTagAttrValue\n\nTypes that can be passed in as attributes to Tag functions. These values will be converted to strings before being stored as tag attributes.\n\nhtmltools.TagChild\n\nTagChild\n\nTypes of objects that can be passed as children to Tag functions like div(). The Tag functions and the TagList() constructor can accept these as unnamed arguments; they will be flattened and normalized to TagNode objects.\n\nhtmltools.TagList\n\nCreate an HTML tag list (i.e., a fragment of HTML)\n\nParameters\n\nThe tag children to add to the list.\n\nExamples\n\nMethods\n\nappend\n\nAppend tag children to the end of the list.\n\nextend\n\nExtend the children by appending an iterable of children.\n\nget_dependencies\n\nGet any dependencies needed to render the HTML.\n\nParameters\n\nWhether to deduplicate the dependencies.\n\nget_html_string\n\nReturn the HTML string for this tag list.\n\nParameters\n\nNumber of spaces to indent each line of the HTML.\n\nEnd-of-line character(s).\n\nWhether to add whitespace between the opening tag and the first child. If either this is True, or the child‚Äôs add_ws attribute is True, then whitespace will be added; if they are both False, then no whitespace will be added.\n\ninsert\n\nInsert tag children before a given index.\n\nrender\n\nGet string representation as well as its HTML dependencies.\n\nsave_html\n\nSave to a HTML file.\n\nParameters\n\nThe file to save to.\n\nThe directory to save the dependencies to.\n\nWhether to include the version number in the dependency folder name.\n\nReturns\n\nThe path to the generated HTML file.\n\nshow\n\nPreview as a complete HTML document.\n\nParameters\n\nThe renderer to use.\n\ntagify\n\nConvert any tagifiable children to Tag/TagList objects.\n\nhtmltools.TagFunction\n\nhtmltools.Tagifiable\n\nObjects with tagify() methods are considered Tagifiable. Note that an object returns a TagList, the children of the TagList must also be tagified.\n\nhtmltools.MetadataNode\n\n",
    "code_examples": [
      "Tag(self, _name, *args, _add_ws=True, **kwargs)",
      "Tag(self, _name, *args, _add_ws=True, **kwargs)",
      ">>> from htmltools import div\n>>> x = div(\"hello\", id=\"foo\", class_=\"bar\")\n>>> x\n<div id=\"foo\" class=\"bar\">hello</div>\n>>> x.show()",
      ">>> from htmltools import div\n>>> x = div(\"hello\", id=\"foo\", class_=\"bar\")\n>>> x\n<div id=\"foo\" class=\"bar\">hello</div>\n>>> x.show()",
      "Tag.add_class(class_, *, prepend=False)",
      "Tag.add_class(class_, *, prepend=False)",
      "Tag.add_style(style, *, prepend=False)",
      "Tag.add_style(style, *, prepend=False)",
      "Tag.append(*args)",
      "Tag.append(*args)",
      "Tag.extend(x)",
      "Tag.extend(x)",
      "Tag.get_dependencies(dedup=True)",
      "Tag.get_dependencies(dedup=True)",
      "Tag.get_html_string(indent=0, eol='\\n')",
      "Tag.get_html_string(indent=0, eol='\\n')",
      "Tag.has_class(class_)",
      "Tag.has_class(class_)",
      "Tag.insert(index, x)",
      "Tag.insert(index, x)",
      "Tag.remove_class(class_)",
      "Tag.remove_class(class_)",
      "Tag.render()",
      "Tag.render()",
      "Tag.save_html(file, *, libdir='lib', include_version=True)",
      "Tag.save_html(file, *, libdir='lib', include_version=True)",
      "Tag.show(renderer='auto')",
      "Tag.show(renderer='auto')",
      "Tag.tagify()",
      "Tag.tagify()",
      "TagList(self, *args)",
      "TagList(self, *args)",
      ">>> from htmltools import TagList, div\n>>> TagList(\"hello\", div(id=\"foo\", class_=\"bar\"))\nhello\n<div id=\"foo\" class=\"bar\"></div>",
      ">>> from htmltools import TagList, div\n>>> TagList(\"hello\", div(id=\"foo\", class_=\"bar\"))\nhello\n<div id=\"foo\" class=\"bar\"></div>",
      "TagList.append(item, *args)",
      "TagList.append(item, *args)",
      "TagList.extend(other)",
      "TagList.extend(other)",
      "TagList.get_dependencies(dedup=True)",
      "TagList.get_dependencies(dedup=True)",
      "TagList.get_html_string(\n    indent=0,\n    eol='\\n',\n    *,\n    add_ws=True,\n    _escape_strings=True,\n)",
      "TagList.get_html_string(\n    indent=0,\n    eol='\\n',\n    *,\n    add_ws=True,\n    _escape_strings=True,\n)",
      "TagList.insert(i, item)",
      "TagList.insert(i, item)",
      "TagList.render()",
      "TagList.render()",
      "TagList.save_html(file, *, libdir='lib', include_version=True)",
      "TagList.save_html(file, *, libdir='lib', include_version=True)",
      "TagList.show(renderer='auto')",
      "TagList.show(renderer='auto')",
      "TagList.tagify()",
      "TagList.tagify()",
      "TagFunction()",
      "TagFunction()",
      "Tagifiable()",
      "Tagifiable()",
      "MetadataNode()",
      "MetadataNode()"
    ]
  },
  {
    "id": "api_core_ExceptionTypes_html",
    "url": "api/core/ExceptionTypes.html",
    "title": "exceptiontypes ‚Äì Shiny for Python",
    "description": "",
    "content": "- Types\n- Exception types\n\nException types\n\ntypes.SilentException\n\nThrow a silent exception.\n\nNormally, when an exception occurs inside a reactive context, it's either:\n\n- Displayed to the user (as a big red error message) This happens when the exception is raised from an output context (e.g., shiny.render.ui)\n- Crashes the application This happens when the exception is raised from an shiny.reactive.effect\n\n- This happens when the exception is raised from an output context (e.g., shiny.render.ui)\n\n- This happens when the exception is raised from an shiny.reactive.effect\n\nThis exception is used to silently throw inside a reactive context, meaning that execution is paused, and no output is shown to users (or the python console).\n\nSee Also\n\n- SilentCancelOutputException\n\nExamples\n\ntypes.SilentCancelOutputException\n\nThrow a silent exception and don't clear output\n\nSimilar to SilentException, but if thrown in an output context, existing output isn't cleared.\n\nSee Also\n\n- SilentException\n\nExamples\n\ntypes.SafeException\n\nThrow a safe exception.\n\nWhen shiny.App.SANITIZE_ERRORS is True (which is the case in some production environments like Posit Connect), exceptions are sanitized to prevent leaking of sensitive information. This class provides a way to generate an error that is OK to be displayed to the user.\n\nExamples\n\n",
    "code_examples": [
      "types.SilentException()",
      "types.SilentException()",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny.types import SilentException\n\napp_ui = ui.page_fluid(\n    ui.input_text(\n        \"txt\",\n        \"Enter text to see it displayed below the input\",\n        width=\"400px\",\n    ),\n    ui.output_ui(\"txt_out\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    def txt_out():\n        if not input.txt():\n            raise SilentException()\n        return \"Your input: \" + input.txt()\n\n\napp = App(app_ui, server)\n\n",
      "types.SilentCancelOutputException()",
      "types.SilentCancelOutputException()",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny.types import SilentCancelOutputException\n\napp_ui = ui.page_fluid(\n    ui.input_text(\n        \"txt\",\n        \"Delete the input text completely: it won't get removed below the input\",\n        \"Some text\",\n        width=\"400px\",\n    ),\n    ui.output_ui(\"txt_out\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    def txt_out():\n        if not input.txt():\n            raise SilentCancelOutputException()\n        return \"Your input: \" + input.txt()\n\n\napp = App(app_ui, server)\n\n",
      "types.SafeException()",
      "types.SafeException()",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny.types import SafeException\n\napp_ui = ui.page_fluid(ui.output_ui(\"safe\"), ui.output_ui(\"unsafe\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    def safe():\n        raise SafeException(\"This is a safe exception\")\n\n    @render.ui\n    def unsafe():\n        raise Exception(\"This is an unsafe exception\")\n\n\napp = App(app_ui, server)\napp.sanitize_errors = True\n\n"
    ]
  },
  {
    "id": "api_core_render_transformer_output_transformer_html",
    "url": "api/core/render.transformer.output_transformer.html",
    "title": "render.transformer.output_transformer ‚Äì Shiny for Python",
    "description": "",
    "content": "- Deprecated\n- render.transformer.output_transformer\n\nrender.transformer.output_transformer\n\nDeprecated. Please use Renderer instead.\n\nOutput transformer decorator.\n\nThis decorator method is a convenience method to generate the appropriate types and internal implementation for an overloaded renderer method. This method will provide you with all the necessary types to define two different overloads: one for when the decorator is called without parentheses and another for when it is called with parentheses where app authors can pass in parameters to the renderer.\n\nTransform function\n\nThe output renderer‚Äôs transform function (transform_fn) is the key building block for output_transformer. It is a package author function that calls the app-defined output value function (value_fn) transforms the result of type IT into type OT.\n\nThe transform function is supplied meta output information, the (app-supplied) value function, and any keyword arguments supplied to the output tranformer decorator:\n\n- The first parameter to the handler function has the class TransformerMetadata and is typically called _meta. This information gives context to the handler while trying to resolve the app-supplied value function (typically called _fn).\n- The second parameter is the app-defined output value function (e.g. _fn). It‚Äôs return type (IT) determines what types can be returned by the app-supplied output value function. For example, if _fn has the type ValueFnAsync[str | None], both the str and None types are allowed to be returned from the app-supplied output value function.\n- The remaining parameters are the keyword arguments (e.g. alt:Optional[str] = None or **kwargs: object) that app authors may supply to the renderer (when the renderer decorator is called with parentheses). Variadic positional parameters (e.g. *args) are not allowed. All keyword arguments should have a type and default value. No default value is needed for keyword arguments that are passed through (e.g. **kwargs: Any).\n\nThe transform function‚Äôs return type (OT) determines the output type of the OutputRenderer. Note that in many cases (but not all!) IT and OT will be the same. The None type should typically be defined in both IT and OT. If IT allows for None values, it (typically) signals that nothing should be rendered. If OT allows for None and returns a None value, shiny will not render the output.\n\nNotes\n\n- When defining the renderer decorator overloads, if you have extra parameters of **kwargs: object, you may get a type error about incompatible signatures. To fix this, you can use **kwargs: Any instead or add _fn: None = None as the first parameter in the overload containing the **kwargs: object.\n- The transform_fn should be defined as an asynchronous function but should only asynchronously yield (i.e. use await syntax) when the value function (the second parameter of type ValueFn[IT]) is awaitable. If the value function is not awaitable (i.e. it is a synchronous function), then the execution of the transform function should also be synchronous.\n\nWhen defining the renderer decorator overloads, if you have extra parameters of **kwargs: object, you may get a type error about incompatible signatures. To fix this, you can use **kwargs: Any instead or add _fn: None = None as the first parameter in the overload containing the **kwargs: object.\n\nThe transform_fn should be defined as an asynchronous function but should only asynchronously yield (i.e. use await syntax) when the value function (the second parameter of type ValueFn[IT]) is awaitable. If the value function is not awaitable (i.e. it is a synchronous function), then the execution of the transform function should also be synchronous.\n\nParameters\n\nAsynchronous function used to determine the app-supplied output value function return type (IT), the transformed type (OT), and the keyword arguments (P) app authors can supply to the renderer decorator.\n\nOptional function that takes an output_id string and returns a Shiny UI object that can be used to display the output. This allows render functions to respond to _repr_html_ method calls in environments like Jupyter.\n\nReturns\n\nAn OutputTransformer object that can be used to define two overloads for your renderer function. One overload is for when the renderer is called without parentheses and the other is for when the renderer is called with parentheses.\n\nExamples\n\n",
    "code_examples": [
      "render.transformer.output_transformer(\n    transform_fn=None,\n    *,\n    default_ui=None,\n    default_ui_passthrough_args=None,\n)",
      "render.transformer.output_transformer(\n    transform_fn=None,\n    *,\n    default_ui=None,\n    default_ui_passthrough_args=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\nfrom typing import Literal, overload\n\nfrom shiny import App, Inputs, Outputs, Session, ui\nfrom shiny.render.transformer import (\n    TransformerMetadata,\n    ValueFn,\n    output_transformer,\n    resolve_value_fn,\n)\n\n#######\n# DEPRECATED. Please see `shiny.render.renderer.Renderer` for the latest API.\n# This example is kept for backwards compatibility.\n#\n#\n# Package authors can create their own output transformer methods by leveraging\n# `output_transformer` decorator.\n#\n# The transformer is kept simple for demonstration purposes, but it can be much more\n# complex (e.g. shiny.render.plotly)\n#######\n\n\n# Create renderer components from the async handler function: `capitalize_components()`\n@output_transformer()\nasync def CapitalizeTransformer(\n    # Contains information about the render call: `name` and `session`\n    _meta: TransformerMetadata,\n    # The app-supplied output value function\n    _fn: ValueFn[str | None],\n    *,\n    # Extra parameters that app authors can supply to the render decorator\n    # (e.g. `@render_capitalize(to=\"upper\")`)\n    to: Literal[\"upper\", \"lower\"] = \"upper\",\n) -> str | None:\n    # Get the value\n    value = await resolve_value_fn(_fn)\n    # Equvalent to:\n    # if shiny.render.transformer.is_async_callable(_fn):\n    #     value = await _fn()\n    # else:\n    #     value = _fn()\n\n    # Render nothing if `value` is `None`\n    if value is None:\n        return None\n\n    if to == \"upper\":\n        return value.upper()\n    if to == \"lower\":\n        return value.lower()\n    raise ValueError(f\"Invalid value for `to`: {to}\")\n\n\n# First, create an overload where users can supply the extra parameters.\n# Example of usage:\n# ```\n# @render_capitalize(to=\"upper\")\n# def value():\n#     return input.caption()\n# ```\n# Note: Return type is `OutputRendererDecorator`\n@overload\ndef render_capitalize(\n    *,\n    to: Literal[\"upper\", \"lower\"] = \"upper\",\n) -> CapitalizeTransformer.OutputRendererDecorator: ...\n\n\n# Second, create an overload where users are not using parentheses to the method.\n# While it doesn't look necessary, it is needed for the type checker.\n# Example of usage:\n# ```\n# @render_capitalize\n# def value():\n#     return input.caption()\n# ```\n# Note: `_fn` type is the transformer's `ValueFn`\n# Note: Return type is the transformer's `OutputRenderer`\n@overload\ndef render_capitalize(\n    _fn: CapitalizeTransformer.ValueFn,\n) -> CapitalizeTransformer.OutputRenderer: ...\n\n\n# Lastly, implement the renderer.\n# Note: `_fn` type is the transformer's `ValueFn` or `None`\n# Note: Return type is the transformer's `OutputRenderer` or `OutputRendererDecorator`\ndef render_capitalize(\n    _fn: CapitalizeTransformer.ValueFn | None = None,\n    *,\n    to: Literal[\"upper\", \"lower\"] = \"upper\",\n) -> (\n    CapitalizeTransformer.OutputRenderer | CapitalizeTransformer.OutputRendererDecorator\n):\n    return CapitalizeTransformer(\n        _fn,\n        CapitalizeTransformer.params(to=to),\n    )\n\n\n#######\n# End of package author code\n#######\n\napp_ui = ui.page_fluid(\n    ui.h1(\"Capitalization renderer\"),\n    ui.input_text(\"caption\", \"Caption:\", \"Data summary\"),\n    \"Renderer called with out parentheses:\",\n    ui.output_text_verbatim(\"no_parens\"),\n    \"To upper:\",\n    ui.output_text_verbatim(\"to_upper\"),\n    \"To lower:\",\n    ui.output_text_verbatim(\"to_lower\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Without parentheses\n    @render_capitalize\n    def no_parens():\n        return input.caption()\n\n    # With parentheses. Equivalent to `@render_capitalize()`\n    @render_capitalize(to=\"upper\")\n    def to_upper():\n        return input.caption()\n\n    @render_capitalize(to=\"lower\")\n    # Works with async output value functions\n    async def to_lower():\n        return input.caption()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_core_render_transformer_resolve_value_fn_html",
    "url": "api/core/render.transformer.resolve_value_fn.html",
    "title": "render.transformer.resolve_value_fn ‚Äì Shiny for Python",
    "description": "",
    "content": "- Deprecated\n- render.transformer.resolve_value_fn\n\nrender.transformer.resolve_value_fn\n\nResolve the value function\n\nThis function is used to resolve the value function (value_fn) to an object of type IT. If the value function is asynchronous, it will be awaited. If the value function is synchronous, it will be called.\n\nWhile always using an async method within an output transform function is not appropriate, this method may be safely used to avoid boilerplate.\n\nReplace this:\n\nWith this:\n\nParameters\n\nApp-supplied output value function which returns type IT. This function can be synchronous or asynchronous.\n\nReturns\n\nThe resolved value from value_fn.\n\n",
    "code_examples": [
      "render.transformer.resolve_value_fn(value_fn)",
      "render.transformer.resolve_value_fn(value_fn)",
      "if is_async_callable(_fn):\n    x = await _fn()\nelse:\n    x = cast(ValueFnSync[IT], _fn)()",
      "if is_async_callable(_fn):\n    x = await _fn()\nelse:\n    x = cast(ValueFnSync[IT], _fn)()",
      "x = await resolve_value_fn(_fn)",
      "x = await resolve_value_fn(_fn)"
    ]
  },
  {
    "id": "api_core_ExCard_html",
    "url": "api/core/ExCard.html",
    "title": "excard ‚Äì Shiny for Python",
    "description": "",
    "content": "- Experimental\n- Card\n\nCard\n\nAdditional card components that compliment ui.card.\n\nexperimental.ui.card_image\n\nA card image container\n\ncard_image creates a general container for an image within a card. This component is designed to be provided as a direct child to card.\n\nParameters\n\nA file path pointing to an image. The image will be base64 encoded and provided to the src attribute of the <img> tag. Alternatively, you may set this value to None and provide the src yourself via *args:TagAttrs or **kwargs:TagAttrValue (e.g., {\"src\": \"HOSTED_PATH_TO_IMAGE\"} or src=\"HOSTED_PATH_TO_IMAGE\").\n\nA dictionary of tag attributes that are supplied to the resolved Tag object.\n\nAn optional URL to link to.\n\nWhere to apply border-radius on the image.\n\nThe mime type of the file.\n\nAdditional CSS classes for the resolved Tag object.\n\nAny valid CSS unit (e.g., height=\"200px\"). height will not apply when a card is made full_screen. In this case, consider setting a height in card_body.\n\nWhether to allow this element to grow/shrink to fit its card container.\n\nAny valid CSS unit (e.g., width=\"100%\").\n\nMethod to wrap the returned Tag object. Defaults to card_body. If card_body is used, each image will be in separate cards. If the container method does not return a CardItem, it allows for consecutive non-CardItem objects to be bundled into a single card_body within card.\n\nAdditional HTML attributes for the resolved Tag.\n\n",
    "code_examples": [
      "experimental.ui.card_image(\n    file,\n    *args,\n    href=None,\n    border_radius='top',\n    mime_type=None,\n    class_=None,\n    height=None,\n    fill=True,\n    width=None,\n    container=card_body,\n    **kwargs,\n)",
      "experimental.ui.card_image(\n    file,\n    *args,\n    href=None,\n    border_radius='top',\n    mime_type=None,\n    class_=None,\n    height=None,\n    fill=True,\n    width=None,\n    container=card_body,\n    **kwargs,\n)"
    ]
  },
  {
    "id": "templates_querychat_index_html",
    "url": "templates/querychat/index.html",
    "title": "Shiny for Python ‚Äì Query Chat",
    "description": "Use the querychat template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nQuery Chat\n\nThis app template allows end users to ask questions about a dataset using natural language. It leverages the querychat package to make the implementation as simple as possible. Under the hood, querychat instructs the LLM to translate user questions into formal SQL queries, which are then executed against the dataset. The resulting ‚Äúmodified‚Äù data is then made available as a reactive calculation so you make further use of it in your app.\n\nTo learn more, visit querychat‚Äôs website\n\nComponents:\n\n- Chat\n\nLayouts:\n\n- Cards\n\nPackages:\n\nchatlas querychat\n\n",
    "code_examples": [
      "shiny create --template querychat --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template querychat --github posit-dev/py-shiny-templates/gen-ai"
    ]
  },
  {
    "id": "templates_sidebot_index_html",
    "url": "templates/sidebot/index.html",
    "title": "Shiny for Python ‚Äì Side bot",
    "description": "Use the sidebot template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nSide bot\n\n- Express\n- Core\n\nThe sidebot app template extends the idea of the Query Chat template to a full blown dashboard. That is, users can use natural language to drill down into a dataset, and the app will display the results in a variety of ways, including tables, plots, and value boxes. Note the app will also display the SQL used to generate the results, so users can verify the app‚Äôs interpretation of their query, and learn how to write SQL queries themselves. It also includes a ‚ú® icon, which sends a screenshot of visuals to the LLM for an explanation of the visual.\n\nSee Joe Cheng‚Äôs posit::conf(2024) presentation for a live demo of the app.\n\nComponents:\n\n- Chat\n- Data Grid\n- Plotly\n- Value box\n\nLayouts:\n\n- Cards\n- Grid layout\n\nPackages:\n\nchatlas shinywidgets plotly pandas matplotlib polars\n\n",
    "code_examples": [
      "shiny create --mode express --github jcheng5/py-databot",
      "shiny create --mode express --github jcheng5/py-databot",
      "shiny create --mode core --github jcheng5/py-databot",
      "shiny create --mode core --github jcheng5/py-databot"
    ]
  },
  {
    "id": "templates_data-sci-adventure_index_html",
    "url": "templates/data-sci-adventure/index.html",
    "title": "Shiny for Python ‚Äì Data Science Adventure",
    "description": "Use the data-sci-adventure template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nData Science Adventure\n\n- Express\n- Core\n\nA fun and useful way to explore different ‚Äúreal-life‚Äù scenarios you might encounter at work as someone who works with data. Based on some information about your role, industry, and size of the business, the app will propose a series of scenarios and ask you to make a decision at each step. The goal is to help you think through the implications of your decisions and how they might impact the business. Towards the end, the app will provide for you some Python (or R) code snippets that you can use to create a reproducible end deliverable based on your decisions.\n\nComponents:\n\n- Chat\n- Action button\n- Select input\n\nPackages:\n\nchatlas faicons shinyswatch\n\n",
    "code_examples": [
      "shiny create --template data-sci-adventure --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template data-sci-adventure --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template data-sci-adventure --mode core --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template data-sci-adventure --mode core --github posit-dev/py-shiny-templates/gen-ai"
    ]
  },
  {
    "id": "templates_dinner-recipe_index_html",
    "url": "templates/dinner-recipe/index.html",
    "title": "Shiny for Python ‚Äì What‚Äôs for dinner?",
    "description": "Use the dinner-recipe template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nWhat‚Äôs for dinner?\n\n- Express\n- Core\n\nA fun and useful way explore a dinner (or other meal) recipes based on the information provided. In addition to guiding you towards a recipe idea, it also provides buttons to: (1) extract the recipe information in a structured format and (2) restart the chat session. By wrapping the chat in a card() component, the card footer offers a natural place to include these ‚Äúbespoke‚Äù UI controls. This, plus leaning into shinyswatch for custom theming, helps the app feel more polished without much extra effort.\n\nComponents:\n\n- Chat\n- Action button\n\nLayouts:\n\n- Cards\n\nPackages:\n\nchatlas faicons shinyswatch\n\n",
    "code_examples": [
      "shiny create --template dinner-recipe --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template dinner-recipe --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template dinner-recipe --mode core --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template dinner-recipe --mode core --github posit-dev/py-shiny-templates/gen-ai"
    ]
  },
  {
    "id": "templates_workout-plan_index_html",
    "url": "templates/workout-plan/index.html",
    "title": "Shiny for Python ‚Äì Workout Plan Generator",
    "description": "Use the workout-plan template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nWorkout Plan Generator\n\n- Express\n- Core\n\nGenerate a workout plan based on your fitness goals, experience level, available equipment, etc. This app demonstrates a useful pattern of collecting user input via input controls, then using those values to fill in a prompt template which is sent to the LLM for response generation.\n\nComponents:\n\n- Chat\n- Selectize input\n- Slider input\n- Action button\n- Download button\n\nPackages:\n\nchatlas faicons\n\n",
    "code_examples": [
      "shiny create --template workout-plan --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template workout-plan --mode express --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template workout-plan --mode core --github posit-dev/py-shiny-templates/gen-ai",
      "shiny create --template workout-plan --mode core --github posit-dev/py-shiny-templates/gen-ai"
    ]
  },
  {
    "id": "api_ui_Chat_html",
    "url": "api/ui.Chat.html",
    "title": "ui.chat ‚Äì Shiny for Python",
    "description": "",
    "content": "- Chat interface\n- ui.Chat\n\nui.Chat\n\nCreate a chat interface.\n\nA UI component for building conversational interfaces. With it, end users can submit messages, which will cause a .on_user_submit() callback to run. That callback gets passed the user input message, which can be used to generate a response. The response can then be appended to the chat using .append_message() or .append_message_stream().\n\nHere's a rough outline for how to implement a Chat:\n\nIn the outline above, my_model.generate_response() is a placeholder for the function that generates a response based on the chat's messages. This function will look different depending on the model you're using, but it will generally involve passing the messages to the model and getting a response back. Also, you'll typically have a choice to stream=True the response generation, and in that case, you'll use .append_message_stream() instead of .append_message() to append the response to the chat. Streaming is preferrable when available since it allows for more responsive and scalable chat interfaces.\n\nIt is also highly recommended to use a package like chatlas to generate responses, especially when responses should be aware of the chat history, support tool calls, etc. See this article to learn more.\n\nParameters\n\nA unique identifier for the chat session. In Shiny Core, make sure this id matches a corresponding chat_ui call in the UI.\n\nA sequence of messages to display in the chat. Each message can be either a string or a dictionary with content and role keys. The content key should contain a string, and the role key can be ‚Äúassistant‚Äù or ‚Äúuser‚Äù. Content strings are interpreted as markdown and rendered to HTML on the client. Content may also include specially formatted input suggestion links (see .append_message_stream() for more information).\n\nHow to handle errors that occur in response to user input. When \"unhandled\", the app will stop running when an error occurs. Otherwise, a notification is displayed to the user and the app continues to run. * \"auto\": Sanitize the error message if the app is set to sanitize errors, otherwise display the actual error message. * \"actual\": Display the actual error message to the user. * \"sanitize\": Sanitize the error message before displaying it to the user. * \"unhandled\": Do not display any error message to the user.\n\nThe tokenizer to use for calculating token counts, which is required to impose token_limits in .messages(). If not provided, a default generic tokenizer is attempted to be loaded from the tokenizers library. A specific tokenizer may also be provided by following the TokenEncoding (tiktoken or tozenizers) protocol (e.g., tiktoken.encoding_for_model(\"gpt-4o\")).\n\nExamples\n\nAttributes\n\nMethods\n\nappend_message\n\nAppend a message to the chat.\n\nParameters\n\nThe message to append. A variety of message formats are supported including a string, a dictionary with content and role keys, or a relevant chat completion object from platforms like OpenAI, Anthropic, Ollama, and others. Content strings are interpreted as markdown and rendered to HTML on the client. Content may also include specially formatted input suggestion links (see note below).\n\nAn optional icon to display next to the message, currently only used for assistant messages. The icon can be any HTML element (e.g., an img tag) or a string of HTML.\n\nNote\n\nInput suggestions are special links that send text to the user input box when clicked (or accessed via keyboard). They can be created in the following ways:\n\n- <span class='suggestion'>Suggestion text</span>: An inline text link that places ‚ÄòSuggestion text‚Äô in the user input box when clicked.\n- <img data-suggestion='Suggestion text' src='image.jpg'>: An image link with the same functionality as above.\n- <span data-suggestion='Suggestion text'>Actual text</span>: An inline text link that places ‚ÄòSuggestion text‚Äô in the user input box when clicked.\n\nA suggestion can also be submitted automatically by doing one of the following:\n\n- Adding a submit CSS class or a data-suggestion-submit=\"true\" attribute to the suggestion element.\n- Holding the Ctrl/Cmd key while clicking the suggestion link.\n\nNote that a user may also opt-out of submitting a suggestion by holding the Alt/Option key while clicking the suggestion link.\n\nUse .append_message_stream() instead of this method when stream=True (or similar) is specified in model‚Äôs completion method.\n\nappend_message_stream\n\nAppend a message as a stream of message chunks.\n\nParameters\n\nAn (async) iterable of message chunks to append. A variety of message chunk formats are supported, including a string, a dictionary with content and role keys, or a relevant chat completion object from platforms like OpenAI, Anthropic, Ollama, and others. Content strings are interpreted as markdown and rendered to HTML on the client. Content may also include specially formatted input suggestion links (see note below).\n\nAn optional icon to display next to the message, currently only used for assistant messages. The icon can be any HTML element (e.g., an img tag) or a string of HTML.\n\nNote\n\nReturns\n\nAn extended task that represents the streaming task. The .result() method of the task can be called in a reactive context to get the final state of the stream.\n\nclear_messages\n\nClear all chat messages.\n\ndestroy\n\nDestroy the chat instance.\n\nmessages\n\nReactively read chat messages\n\nObtain chat messages within a reactive context. The default behavior is intended for passing messages along to a model for response generation where you typically want to:\n\n- Cap the number of tokens sent in a single request (i.e., token_limits).\n- Apply user input transformations (i.e., transform_user), if any.\n- Not apply assistant response transformations (i.e., transform_assistant) since these are predominantly for display purposes (i.e., the model shouldn't concern itself with how the responses are displayed).\n\nParameters\n\nThe message format to return. The default value of MISSING means chat messages are returned as ChatMessage objects (a dictionary with content and role keys). Other supported formats include: * \"anthropic\": Anthropic message format. * \"google\": Google message (aka content) format. * \"langchain\": LangChain message format. * \"openai\": OpenAI message format. * \"ollama\": Ollama message format.\n\nLimit the conversation history based on token limits. If specified, only the most recent messages that fit within the token limits are returned. This is useful for avoiding ‚Äúexceeded token limit‚Äù errors when sending messages to the relevant model, while still providing the most recent context available. A specified value must be a tuple of two integers. The first integer is the maximum number of tokens that can be sent to the model in a single request. The second integer is the amount of tokens to reserve for the model‚Äôs response. Note that token counts based on the tokenizer provided to the Chat constructor.\n\nWhether to return user input messages with transformation applied. This only matters if a transform_user_input was provided to the chat constructor. The default value of \"all\" means all user input messages are transformed. The value of \"last\" means only the last user input message is transformed. The value of \"none\" means no user input messages are transformed.\n\nWhether to return assistant messages with transformation applied. This only matters if an transform_assistant_response was provided to the chat constructor.\n\nNote\n\nMessages are listed in the order they were added. As a result, when this method is called in a .on_user_submit() callback (as it most often is), the last message will be the most recent one submitted by the user.\n\nReturns\n\nA tuple of chat messages.\n\non_user_submit\n\nDefine a function to invoke when user input is submitted.\n\nApply this method as a decorator to a function (fn) that should be invoked when the user submits a message. This function can take an optional argument, which will be the user input message.\n\nIn many cases, the implementation of fn should also do the following:\n\n- Generate a response based on the user input.\n\n- If the response should be aware of chat history, use a package like chatlas to manage the chat state, or use the .messages() method to get the chat history.\n\n- Append that response to the chat component using .append_message() ( or .append_message_stream() if the response is streamed).\n\nParameters\n\nA function to invoke when user input is submitted.\n\nNote\n\nThis method creates a reactive effect that only gets invalidated when the user submits a message. Thus, the function fn can read other reactive dependencies, but it will only be re-invoked when the user submits a message.\n\nset_user_message\n\nDeprecated. Use update_user_input(value=value) instead.\n\ntransform_assistant_response\n\nTransform assistant responses.\n\nUse this method as a decorator on a function (fn) that transforms assistant responses before displaying them in the chat. This is useful for post-processing model responses before displaying them to the user.\n\nParameters\n\nA function that takes a string and returns either a string, shiny.ui.HTML, or None. If fn returns a string, it gets interpreted and parsed as a markdown on the client (and the resulting HTML is then sanitized). If fn returns shiny.ui.HTML, it will be displayed as-is. If fn returns None, the response is effectively ignored.\n\nNote\n\nWhen doing an .append_message_stream(), fn gets called on every chunk of the response (thus, it should be performant), and can optionally access more information (i.e., arguments) about the stream. The 1st argument (required) contains the accumulated content, the 2nd argument (optional) contains the current chunk, and the 3rd argument (optional) is a boolean indicating whether this chunk is the last one in the stream.\n\ntransform_user_input\n\nTransform user input.\n\nUse this method as a decorator on a function (fn) that transforms user input before storing it in the chat messages returned by .messages(). This is useful for implementing RAG workflows, like taking a URL and scraping it for text before sending it to the model.\n\nParameters\n\nA function to transform user input before storing it in the chat .messages(). If fn returns None, the user input is effectively ignored, and .on_user_submit() callbacks are suspended until more input is submitted. This behavior is often useful to catch and handle errors that occur during transformation. In this case, the transform function should append an error message to the chat (via .append_message()) to inform the user of the error.\n\nupdate_user_input\n\nUpdate the user input.\n\nParameters\n\nThe value to set the user input to.\n\nThe placeholder text for the user input.\n\nWhether to automatically submit the text for the user. Requires value.\n\nWhether to move focus to the input element. Requires value.\n\nuser_input\n\nReactively read the user's message.\n\nParameters\n\nWhether to apply the user input transformation function (if one was provided).\n\nReturns\n\nThe user input message (before any transformation).\n\nNote\n\nMost users shouldn‚Äôt need to use this method directly since the last item in .messages() contains the most recent user input. It can be useful for:\n\n- Taking a reactive dependency on the user‚Äôs input outside of a .on_user_submit() callback.\n- Maintaining message state separately from .messages().\n\n",
    "code_examples": [
      "ui.Chat(self, id, *, messages=(), on_error='auto', tokenizer=None)",
      "ui.Chat(self, id, *, messages=(), on_error='auto', tokenizer=None)",
      "from shiny.express import ui\n\n# Create and display chat instance\nchat = ui.Chat(id=\"my_chat\")\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Create a response message stream\n    response = await my_model.generate_response(user_input, stream=True)\n    # Append the response into the chat\n    await chat.append_message_stream(response)",
      "from shiny.express import ui\n\n# Create and display chat instance\nchat = ui.Chat(id=\"my_chat\")\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def handle_user_input(user_input: str):\n    # Create a response message stream\n    response = await my_model.generate_response(user_input, stream=True)\n    # Append the response into the chat\n    await chat.append_message_stream(response)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.panel_title(\"Hello Shiny Chat\"),\n    ui.chat_ui(\"chat\"),\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = \"\"\"\nHi! This is a simple Shiny `Chat` UI. Enter a message below and I will\nsimply repeat it back to you. For more examples, see this\n[folder of examples](https://github.com/posit-dev/py-shiny/tree/main/shiny/templates/chat).\n\"\"\"\n\n\ndef server(input, output, session):\n    chat = ui.Chat(id=\"chat\", messages=[welcome])\n\n    # Define a callback to run when the user submits a message\n    @chat.on_user_submit\n    async def handle_user_input(user_input: str):\n        # Append a response to the chat\n        await chat.append_message(f\"You said: {user_input}\")\n\n\napp = App(app_ui, server)\n\n\n## file: _template.json\n{\n  \"type\": \"app\",\n  \"id\": \"chat-hello\",\n  \"title\": \"Hello Shiny Chat\",\n  \"next_steps\": [\n    \"Run the app with `shiny run app.py`.\"\n  ]\n}\n\n\n## file: requirements.txt\nshiny\n\n",
      "ui.Chat.append_message(message, *, icon=None)",
      "ui.Chat.append_message(message, *, icon=None)",
      "ui.Chat.append_message_stream(message, *, icon=None)",
      "ui.Chat.append_message_stream(message, *, icon=None)",
      "ui.Chat.clear_messages()",
      "ui.Chat.clear_messages()",
      "ui.Chat.destroy()",
      "ui.Chat.destroy()",
      "ui.Chat.messages(\n    format=MISSING,\n    token_limits=None,\n    transform_user='all',\n    transform_assistant=False,\n)",
      "ui.Chat.messages(\n    format=MISSING,\n    token_limits=None,\n    transform_user='all',\n    transform_assistant=False,\n)",
      "ui.Chat.on_user_submit(fn=None)",
      "ui.Chat.on_user_submit(fn=None)",
      "ui.Chat.set_user_message(value)",
      "ui.Chat.set_user_message(value)",
      "ui.Chat.transform_assistant_response(fn=None)",
      "ui.Chat.transform_assistant_response(fn=None)",
      "ui.Chat.transform_user_input(fn=None)",
      "ui.Chat.transform_user_input(fn=None)",
      "ui.Chat.update_user_input(\n    value=None,\n    placeholder=None,\n    submit=False,\n    focus=False,\n)",
      "ui.Chat.update_user_input(\n    value=None,\n    placeholder=None,\n    submit=False,\n    focus=False,\n)",
      "ui.Chat.user_input(transform=False)",
      "ui.Chat.user_input(transform=False)"
    ]
  },
  {
    "id": "layouts_arrange_index_html",
    "url": "layouts/arrange/index.html",
    "title": "Arrange Elements ‚Äì Shiny for Python",
    "description": "Layout elements into rows and columns that responsively adapt to a wide range of screen sizes.",
    "content": "Arrange Elements\n\nLayout elements into rows and columns that responsively adapt to a wide range of screen sizes.\n\nShiny provides two core functions for arranging elements into rows and columns:\n\n- ui.layout_columns() uses Bootstrap‚Äôs 12-column CSS Grid to create responsive and highly customizable layouts;\n- ui.layout_column_wrap() arranges elements into a grid with equally-sized cells.\n\nui.layout_columns() uses Bootstrap‚Äôs 12-column CSS Grid to create responsive and highly customizable layouts;\n\nui.layout_column_wrap() arranges elements into a grid with equally-sized cells.\n\nYou can use these functions directly to create your own layout. Grid layouts can be used within a page, panel, or card and can even be nested within each other.\n\nRelevant Functions\n\n- ui.layout_columns ui.layout_columns(*args, col_widths=None, row_heights=None, fill=True, fillable=True, gap=None, class_=None, height=None, **kwargs)\n- ui.layout_column_wrap ui.layout_columns(*args, col_widths=None, row_heights=None, fill=True, fillable=True, gap=None, class_=None, height=None, **kwargs)\n- ui.page_fixed ui.page_fixed(*args, title=None, lang=None, **kwargs)\n- ui.page_fillable ui.page_fillable(*args, padding=None, gap=None, fillable_mobile=False, title=None, lang=None, **kwargs)\n\nui.layout_columns ui.layout_columns(*args, col_widths=None, row_heights=None, fill=True, fillable=True, gap=None, class_=None, height=None, **kwargs)\n\nui.layout_column_wrap ui.layout_columns(*args, col_widths=None, row_heights=None, fill=True, fillable=True, gap=None, class_=None, height=None, **kwargs)\n\nui.page_fixed ui.page_fixed(*args, title=None, lang=None, **kwargs)\n\nui.page_fillable ui.page_fillable(*args, padding=None, gap=None, fillable_mobile=False, title=None, lang=None, **kwargs)\n\nGrid Layouts\n\nBoth ui.layout_columns() and ui.layout_column_wrap() follow the same general pattern: pass each function a series of elements to have them arranged into a grid layout.\n\n- Express\n- Core\n\n- Express\n- Core\n\nNotice two things about the above apps:\n\n- Both approaches create one or more rows, filling the rows with columns to hold its children.\n- Use the handle in the bottom right corner of the apps above to view each layout at different screen sizes (this works best on desktop screens). How do the layouts shift as the screen gets smaller or larger?\n\nBoth approaches create one or more rows, filling the rows with columns to hold its children.\n\nUse the handle in the bottom right corner of the apps above to view each layout at different screen sizes (this works best on desktop screens). How do the layouts shift as the screen gets smaller or larger?\n\nHow to choose between layout_columns() and layout_column_wrap()\n\nFor simple layouts, it can be hard to tell ui.layout_columns() and ui.layout_column_wrap() apart. Here‚Äôs a short set of questions to ask yourself to help you decide which function to use:\n\n- Are all of the items in your arrangement the same, such as a set of cards or plots? And do you want them all to have the same width and height? If yes: ui.layout_column_wrap() is best for a regularly-sized grid for a homogenous collection of elements.\n- Do you want to customize the layout‚Äôs column widths, or to have different layouts at different screen sizes (mobile vs desktop vs ultrawide)? If yes: ui.layout_columns() give you the tools to create highly customized, resposive column layouts.\n- For all other uses, pick the function you like the most. I happen to like ui.layout_columns() but you might prefer ui.layout_column_wrap().\n\nAre all of the items in your arrangement the same, such as a set of cards or plots? And do you want them all to have the same width and height?\n\nIf yes: ui.layout_column_wrap() is best for a regularly-sized grid for a homogenous collection of elements.\n\nDo you want to customize the layout‚Äôs column widths, or to have different layouts at different screen sizes (mobile vs desktop vs ultrawide)?\n\nIf yes: ui.layout_columns() give you the tools to create highly customized, resposive column layouts.\n\nFor all other uses, pick the function you like the most. I happen to like ui.layout_columns() but you might prefer ui.layout_column_wrap().\n\nResponsive, configurable column layouts\n\nIn the example above, we saw that, without your intervention, ui.layout_columns() will arrange the elements given to it into evenly sized columns. In the default case, ui.layout_columns() makes a choice about the column widths that make the most sense based on the number of items provided.\n\nFor example, when given three items, ui.layout_columns() places each item in a column with 4 width units. You can use the col_widths argument to choose a different allocation of column width units. Keep in mind that Bootstrap‚Äôs CSS Grid uses 12 units per row. In the example below, we use col_widths=(2, 4, 6) to create a row with a small, medium, and large card.\n\n- Express\n- Core\n\nThere‚Äôs a lot more that layout_columns() can do with col_widths to make highly customized layouts.\n\n- Choose different layouts with a dictionary of column widths at specific breakpoints, e.g. col_widths={\"sm\": 4, \"md\": (2, 4, 6)}.\n- Insert empty space between items with a negative column width, e.g. col_widths=c(4, -4, 4) creates two columns 4 units wide with an empty space of 4 units between them.\n\nChoose different layouts with a dictionary of column widths at specific breakpoints, e.g. col_widths={\"sm\": 4, \"md\": (2, 4, 6)}.\n\nInsert empty space between items with a negative column width, e.g. col_widths=c(4, -4, 4) creates two columns 4 units wide with an empty space of 4 units between them.\n\nLearn more in the API reference: Express | Core\n\nUniform grid layouts\n\nui.layout_column_wrap() arranges elements into a uniform grid, so its width argument applies a single value to all elements in the grid.\n\nWhen width is a fractional each item is given an equal portion of the row‚Äôs width. For example, width=1 / 2 gives each item half of the row width.\n\n- Express\n- Core\n\nWhen width is a CSS unit, like \"300px\", ui.layout_column_wrap() ensures that every item is at least as wide as width. The items in the grid expand to fill horizontal space or contract when the layout container is smaller than width.\n\nTry resizing the app preview below to see how the layout shifts at different container widths.\n\n- Express\n- Core\n\nColumn nesting\n\nBoth ui.layout_columns() and ui.layout_column_wrap() can be nested, even within each other.\n\nConsider this page layout:\n\n- Express\n- Core\n\nControlling for page width and height\n\nThere are multiple types of Shiny grids: fluid, fixed, and fillable. The fluid grid system is recommended for most applications and is the default for Shiny functions like ui.page_navbar() and ui.page_sidebar(). So far, all the examples on this page have used the fluid grid system.\n\nEach grid system uses a flexibly sub-dividable 12-column grid for layout. They differ in how they interact with the viewer‚Äôs browser window:\n\n- The fluid system always occupies the full width of the web page and re-sizes its components dynamically as the size of the page changes.\n- The fixed system occupies a fixed width of 940 pixels by default and may assume other widths when Bootstrap‚Äôs responsive layout kicks in (e.g., when on a tablet).\n- The fillable system always occupies the full width and height of the web page and re-sizes its components dynamically as the size of the page changes.\n\nThe fluid system always occupies the full width of the web page and re-sizes its components dynamically as the size of the page changes.\n\nThe fixed system occupies a fixed width of 940 pixels by default and may assume other widths when Bootstrap‚Äôs responsive layout kicks in (e.g., when on a tablet).\n\nThe fillable system always occupies the full width and height of the web page and re-sizes its components dynamically as the size of the page changes.\n\nFluid Grid System\n\n- Express\n- Core\n\nTo make a fluid grid that adapts to the width of the user‚Äôs viewing window, build your app UI with ui.page_fluid.\n\nFixed Grid System\n\n- Express\n- Core\n\nTo make a fixed grid that maintains a constant maximum width, build your app UI with ui.page_fluid.\n\nThe fixed grid system maintains a fixed page width of 940 pixels by default. If Bootstrap responsive features are enabled (they are by default in Shiny) then the grid will also adapt to be 724px or 1170px wide depending on your viewport (e.g., when on a tablet). The fixed system does this by using Bootstrap .containers, whereas the fluid system uses Bootstrap .container-fluids. Learn more about the difference here.\n\nThe main benefit of a fixed grid is that it provides stronger guarantees about how users will see the various elements of your UI laid out (because it‚Äôs not being dynamically laid out according to the width of the browser). The main drawback is that a fixed grid is more complex to work with. In general, we recommend using a fluid grid unless you absolutely require the lower level layout control afforded by a fixed grid.\n\nFillable Grid System\n\n- Express\n- Core\n\nTo make a fixed grid that maintains a constant maximum width, build your app UI with ui.page_fillable.\n\nui.page_fluid() and ui.page_fixed() create web pages that are laid out from the top down, leaving whitespace at the bottom if the page content‚Äôs height is smaller than the browser window, and scrolling if the content is larger than the window.\n\nui.page_fillable() is designed to latch the document body‚Äôs size to the size of the window. This makes it possible to fill it with content that also scales to the size of the window.\n\nFor example, ui.page_fluid(ui.output_plot(\"plot\", height=\"100%\")) will not work as expected. The plot element‚Äôs effective height will be 0 because the plot‚Äôs containing elements (<div> and <body>) have automatic height. They determine their own height based on the height of their contained elements. However, ui.page_fillable(ui.output_plot(\"plot\", height=\"100%\")) will work as expected because ui.page_fillable() fixes the <body> height at 100% of the window height.\n\nNote that ui.page_fillable(ui.output_plot(\"plot\")) may not cause the plot to fill the page. Like most Shiny output widgets, ui.output_plot()‚Äôs default height is a fixed number of pixels. You must explicitly set height=\"100%\" if you want a plot (or htmlwidget, say) to fill its container.\n\nOne must be careful what layouts/panels/elements come between the ui.page_fillable() and the plots/widgets. Any container that has an automatic height will cause children with height=\"100%\" to misbehave. Stick to functions that are designed for fill layouts, such as the ones in the Shiny package.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 175\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    \"ui.layout_columns()\",\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 175\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    \"ui.layout_columns()\",\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)\n",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\n\"ui.layout_columns()\"\n\nwith ui.layout_columns():\n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n    with ui.card():\n        \"Card 3\"",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\n\"ui.layout_columns()\"\n\nwith ui.layout_columns():\n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n    with ui.card():\n        \"Card 3\"",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    \"ui.layout_columns()\",\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    \"ui.layout_columns()\",\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 175\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    \"ui.layout_column_wrap()\",\n    ui.layout_column_wrap(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 175\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    \"ui.layout_column_wrap()\",\n    ui.layout_column_wrap(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)\n",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\n\"ui.layout_column_wrap()\"\n\nwith ui.layout_column_wrap():\n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n    with ui.card():\n        \"Card 3\"",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\n\"ui.layout_column_wrap()\"\n\nwith ui.layout_column_wrap():\n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n    with ui.card():\n        \"Card 3\"",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    \"ui.layout_column_wrap()\",\n    ui.layout_column_wrap(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    \"ui.layout_column_wrap()\",\n    ui.layout_column_wrap(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 240\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        col_widths=(2, 4, 6),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 240\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        col_widths=(2, 4, 6),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)\n",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.layout_columns(col_widths=(2, 4, 6)):\n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n    with ui.card():\n        \"Card 3\"",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.layout_columns(col_widths=(2, 4, 6)):\n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n    with ui.card():\n        \"Card 3\"",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        col_widths=(2, 4, 6),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        col_widths=(2, 4, 6),\n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 240\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_column_wrap(  \n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        ui.card(\"Card 4\"),\n        width=1 / 2,  \n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 240\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_column_wrap(  \n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        ui.card(\"Card 4\"),\n        width=1 / 2,  \n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)\n",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.layout_column_wrap(width=1 / 2):  \n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n    with ui.card():\n        \"Card 3\"\n    with ui.card():\n        \"Card 4\"",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.layout_column_wrap(width=1 / 2):  \n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n    with ui.card():\n        \"Card 3\"\n    with ui.card():\n        \"Card 4\"",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_column_wrap(  \n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        ui.card(\"Card 4\"),\n        width=1 / 2,  \n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_column_wrap(  \n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        ui.card(\"Card 4\"),\n        width=1 / 2,  \n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 240\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_column_wrap(  \n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        ui.card(\"Card 4\"),\n        width=\"300px\",  \n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 240\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_column_wrap(  \n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        ui.card(\"Card 4\"),\n        width=\"300px\",  \n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)\n",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.layout_column_wrap(width=\"300px\"):  \n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n    with ui.card():\n        \"Card 3\"\n    with ui.card():\n        \"Card 4\"",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.layout_column_wrap(width=\"300px\"):  \n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n    with ui.card():\n        \"Card 3\"\n    with ui.card():\n        \"Card 4\"",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_column_wrap(  \n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        ui.card(\"Card 4\"),\n        width=\"300px\",  \n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_column_wrap(  \n        ui.card(\"Card 1\"),\n        ui.card(\"Card 2\"),\n        ui.card(\"Card 3\"),\n        ui.card(\"Card 4\"),\n        width=\"300px\",  \n    ),\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server=server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\n            \"Card 2\",\n            ui.layout_columns(\n                ui.card(\"Card 2.1\"),\n                ui.card(\"Card 2.2\"),\n                width=1 / 2,\n            ),\n        ),\n        col_widths=(4, 8),\n    ),\n)\n\n\ndef server(input, output, session):\n    return None\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\n            \"Card 2\",\n            ui.layout_columns(\n                ui.card(\"Card 2.1\"),\n                ui.card(\"Card 2.2\"),\n                width=1 / 2,\n            ),\n        ),\n        col_widths=(4, 8),\n    ),\n)\n\n\ndef server(input, output, session):\n    return None\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.layout_columns(col_widths=(4, 8)):\n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n\n        with ui.layout_column_wrap(width=1 / 2):\n            with ui.card():\n                \"Card 2.1\"\n            with ui.card():\n                \"Card 2.2\"",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.layout_columns(col_widths=(4, 8)):\n    with ui.card():\n        \"Card 1\"\n    with ui.card():\n        \"Card 2\"\n\n        with ui.layout_column_wrap(width=1 / 2):\n            with ui.card():\n                \"Card 2.1\"\n            with ui.card():\n                \"Card 2.2\"",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\n            \"Card 2\",\n            ui.layout_columns(\n                ui.card(\"Card 2.1\"),\n                ui.card(\"Card 2.2\"),\n                width=1 / 2,\n            ),\n        ),\n        col_widths=(4, 8),\n    ),\n)\n\n\ndef server(input, output, session):\n    return None\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\"Card 1\"),\n        ui.card(\n            \"Card 2\",\n            ui.layout_columns(\n                ui.card(\"Card 2.1\"),\n                ui.card(\"Card 2.2\"),\n                width=1 / 2,\n            ),\n        ),\n        col_widths=(4, 8),\n    ),\n)\n\n\ndef server(input, output, session):\n    return None\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 500\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\"),\n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 500\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\"),\n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)\n",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny.express import input, render, ui\n\nwith ui.sidebar():\n    ui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.plot(alt=\"A histogram\")\ndef histogram():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(437)\n    plt.hist(x, input.n(), density=True)",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny.express import input, render, ui\n\nwith ui.sidebar():\n    ui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.plot(alt=\"A histogram\")\ndef histogram():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(437)\n    plt.hist(x, input.n(), density=True)",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\"),\n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\"),\n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 500\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\"),\n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 500\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\"),\n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)\n",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny.express import input, render, ui\n\nwith ui.sidebar():\n    ui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.plot(alt=\"A histogram\")\ndef histogram():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(437)\n    plt.hist(x, input.n(), density=True)",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny.express import input, render, ui\n\nwith ui.sidebar():\n    ui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.plot(alt=\"A histogram\")\ndef histogram():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(437)\n    plt.hist(x, input.n(), density=True)",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\"),\n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fixed(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\"),\n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 425\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fillable(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\", height=\"100%\"),  \n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 425\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fillable(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\", height=\"100%\"),  \n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)\n",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny.express import input, render, ui\n\nui.page_opts(fillable=True)\n\nwith ui.sidebar():\n    ui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.plot(alt=\"A histogram\")\ndef histogram():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(437)\n    plt.hist(x, input.n(), density=True)",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny.express import input, render, ui\n\nui.page_opts(fillable=True)\n\nwith ui.sidebar():\n    ui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.plot(alt=\"A histogram\")\ndef histogram():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(437)\n    plt.hist(x, input.n(), density=True)",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fillable(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\", height=\"100%\"),  \n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fillable(  \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.output_plot(\"histogram\", height=\"100%\"),  \n    ),\n)  \n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)"
    ]
  },
  {
    "id": "api_ui_MarkdownStream_html",
    "url": "api/ui.MarkdownStream.html",
    "title": "ui.markdownstream ‚Äì Shiny for Python",
    "description": "",
    "content": "- Streaming markdown\n- ui.MarkdownStream\n\nui.MarkdownStream\n\nA component for streaming markdown or HTML content.\n\nParameters\n\nA unique identifier for this MarkdownStream. In Shiny Core, make sure this id matches a corresponding output_markdown_stream call in the app‚Äôs UI.\n\nHow to handle errors that occur while streaming. When \"unhandled\", the app will stop running when an error occurs. Otherwise, a notification is displayed to the user and the app continues to run. * \"auto\": Sanitize the error message if the app is set to sanitize errors, otherwise display the actual error message. * \"actual\": Display the actual error message to the user. * \"sanitize\": Sanitize the error message before displaying it to the user. * \"unhandled\": Do not display any error message to the user.\n\nNote\n\nMarkdown is parsed on the client via marked.js. Consider using markdown for server-side rendering of markdown content.\n\nExamples\n\nMethods\n\nclear\n\nEmpty the UI element of the MarkdownStream.\n\nget_latest_stream_result\n\nReactively read the latest stream result.\n\nThis method reads a reactive value containing the result of the latest .stream(). Therefore, this method must be called in a reactive context (e.g., a render function, a calc, or a effect).\n\nReturns\n\nThe result of the latest stream (a string).\n\nRaises\n\nA silent exception if no stream has completed yet.\n\nstream\n\nSend a stream of content to the UI.\n\nStream content into the relevant UI element.\n\nParameters\n\nThe content to stream. This can be a Iterable or an AsyncIterable of strings. Note that this includes synchronous and asynchronous generators, which is a useful way to stream content in as it arrives (e.g. from a LLM).\n\nWhether to clear the existing content before streaming the new content.\n\nNote\n\nIf you already have the content available as a string, you can do .stream([content]) to set the content.\n\nReturns\n\nAn extended task that represents the streaming task. The .result() method of the task can be called in a reactive context to get the final state of the stream.\n\n",
    "code_examples": [
      "ui.MarkdownStream(self, id, *, on_error='auto')",
      "ui.MarkdownStream(self, id, *, on_error='auto')",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\n\nimport requests\n\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.card_header(\"Shiny's README.md\"),\n        ui.output_markdown_stream(\"shiny_readme\"),\n        height=\"400px\",\n        class_=\"mt-3\",\n        full_screen=True,\n    ),\n)\n\n\ndef server(input, output, session):\n    # Read in the README.md file from the py-shiny repository\n    readme = requests.get(\n        \"https://raw.githubusercontent.com/posit-dev/py-shiny/refs/heads/main/README.md\"\n    )\n    readme_chunks = readme.text.replace(\"\\n\", \" \\n \").split(\" \")\n\n    # Generate words from the README.md file (with a small delay)\n    async def chunk_generator():\n        for chunk in readme_chunks:\n            await asyncio.sleep(0.02)\n            yield chunk + \" \"\n\n    md = ui.MarkdownStream(\"shiny_readme\")\n\n    @reactive.effect\n    async def _():\n        await md.stream(chunk_generator())\n\n\napp = App(app_ui, server)\n\n",
      "ui.MarkdownStream.clear()",
      "ui.MarkdownStream.clear()",
      "ui.MarkdownStream.get_latest_stream_result()",
      "ui.MarkdownStream.get_latest_stream_result()",
      "ui.MarkdownStream.stream(content, clear=True)",
      "ui.MarkdownStream.stream(content, clear=True)"
    ]
  },
  {
    "id": "components_outputs_plot-matplotlib_html",
    "url": "components/outputs/plot-matplotlib.html",
    "title": "Plot (Matplotlib) ‚Äì Shiny for Python",
    "description": "",
    "content": "- Outputs\n- Plot (Matplotlib)\n\nPlot (Matplotlib)\n\n- Express\n- Core\n\nRelevant Functions\n\n- ui.output_plot ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)\n- @render.plot render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)\n\nui.output_plot ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)\n\n@render.plot render.plot(_fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)\n\nDetails\n\nMatplotlib is a popular Python library that can be used to create plots.\n\nFollow three steps to display a Matplotlib figure in your app:\n\n- Add ui.output_plot() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n- Define a function within the server() function that creates the figure. The name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI. If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion. If you use matplotlib.pyplot to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects: A matplotlib.figure.Figure instance A matplotlib.artist.Artist instance A list/tuple of Figure/Artist instances An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance A PIL.Image.Image instance\n- Decorate your plotting function with a @render.plot() decorator. If your plotting function is not the same as the id you used in the ui.output_plot(), you can add an additional @output(id=...) decorator. If you use the @output() decorator, make sure it is above the @render.plot() decorator.\n\nAdd ui.output_plot() to the UI of your app to create a div in which to display the figure. Where you call this function will determine where the figure will appear within the layout of the app. The id parameter you provide will be used to link to other parts of the Shiny app.\n\nDefine a function within the server() function that creates the figure.\n\n- The name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI.\n- If your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n- If you use matplotlib.pyplot to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects: A matplotlib.figure.Figure instance A matplotlib.artist.Artist instance A list/tuple of Figure/Artist instances An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance A PIL.Image.Image instance\n\nThe name of the function should be the same value you passed into the id parameter in your ui.output_plot() function call in the UI.\n\nIf your function calls reactive values, Shiny will update your figure whenever those values change, in a reactive fashion.\n\nIf you use matplotlib.pyplot to plot, your function does not need to return a value. Otherwise, your function should return one of the following objects:\n\n- A matplotlib.figure.Figure instance\n- A matplotlib.artist.Artist instance\n- A list/tuple of Figure/Artist instances\n- An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance\n- A PIL.Image.Image instance\n\nDecorate your plotting function with a @render.plot() decorator.\n\n- If your plotting function is not the same as the id you used in the ui.output_plot(), you can add an additional @output(id=...) decorator.\n- If you use the @output() decorator, make sure it is above the @render.plot() decorator.\n\nPlots as Inputs\n\nYou can use a plot as an input widget, collecting the locations of user clicks, double clicks, hovers, and brushes. To do this, set one or more of the following arguments of ui.output_plot() to True:.\n\n- click - When click = True, the plot will allow the user to click in the plotting area, and will send the coordinates of the click to the server, where they can be accessed as a reactive variable named input.<id>_click(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.\n- dblclick - This is just like the click parameter, but for double-click events. The value can be accessed as input.<id>_dblclick().\n- hover - When hover = True, the plot will allow the user to hover over the plotting area, and will send the coordinates of the cursor to the server, where they can be accessed as a reactive variable named input.<id>_hover(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, set hover to hover_opts().\n- brush - When brush = True, the plot will allow the user to ‚Äúbrush‚Äù in the plotting area, and will send information about the brushed area to the server, where it can be accessed as a reactive variable named input.<id>_brush(), where <id> is the id of the plot. Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, set brush to brush_opts().\n\nclick - When click = True, the plot will allow the user to click in the plotting area, and will send the coordinates of the click to the server, where they can be accessed as a reactive variable named input.<id>_click(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position.\n\ndblclick - This is just like the click parameter, but for double-click events. The value can be accessed as input.<id>_dblclick().\n\nhover - When hover = True, the plot will allow the user to hover over the plotting area, and will send the coordinates of the cursor to the server, where they can be accessed as a reactive variable named input.<id>_hover(), where <id> is the id of the plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, set hover to hover_opts().\n\nbrush - When brush = True, the plot will allow the user to ‚Äúbrush‚Äù in the plotting area, and will send information about the brushed area to the server, where it can be accessed as a reactive variable named input.<id>_brush(), where <id> is the id of the plot. Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, set brush to brush_opts().\n\nMultiple output_image()/output_plot() calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.\n\nVariations\n\nPlot as input\n\nUse the click, dblclick, hover, and brush arguments of ui.output_plot() to collect information about the user‚Äôs mouse interactions as a reactive variable. The app below displays the values returned, but you can also call the values from within your computations to filter tables, perform calculations, and so on.\n\n- Express\n- Core\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"n\", \"Number of bins\", 0, 100, 20)\n\n@render.plot(alt=\"A histogram\")  \ndef plot():  \n    df = load_penguins()\n    mass = df[\"body_mass_g\"]\n\n    fig, ax = plt.subplots()\n    ax.hist(mass, input.n(), density=True)\n    ax.set_title(\"Palmer Penguin Masses\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Density\")\n\n    return fig  ",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"n\", \"Number of bins\", 0, 100, 20)\n\n@render.plot(alt=\"A histogram\")  \ndef plot():  \n    df = load_penguins()\n    mass = df[\"body_mass_g\"]\n\n    fig, ax = plt.subplots()\n    ax.hist(mass, input.n(), density=True)\n    ax.set_title(\"Palmer Penguin Masses\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Density\")\n\n    return fig  ",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  \n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  \n    def plot():  \n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  \n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 720\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 720\n\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_code, output_plot\n\noutput_plot(\n    \"plot\",\n    click=True,  \n    dblclick=True,  \n    hover=True,  \n    brush=True,  \n)\n\n\"Click:\"\noutput_code(\"clk\", placeholder=True)\n\"Double Click:\"\noutput_code(\"dblclk\", placeholder=True)\n\"Hover:\"\noutput_code(\"hvr\", placeholder=True)\n\"Brush\"\noutput_code(\"brsh\", placeholder=True)\n\nwith ui.hold():\n    # Note that this Express app uses `ui.hold()` so that we can\n    # manually add the `output_plot()` and `output_code()` to the page.\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.code\n    def clk():\n        return input.plot_click()\n\n    @render.code\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.code\n    def hvr():\n        return input.plot_hover()\n\n    @render.code\n    def brsh():\n        return input.plot_brush()",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_code, output_plot\n\noutput_plot(\n    \"plot\",\n    click=True,  \n    dblclick=True,  \n    hover=True,  \n    brush=True,  \n)\n\n\"Click:\"\noutput_code(\"clk\", placeholder=True)\n\"Double Click:\"\noutput_code(\"dblclk\", placeholder=True)\n\"Hover:\"\noutput_code(\"hvr\", placeholder=True)\n\"Brush\"\noutput_code(\"brsh\", placeholder=True)\n\nwith ui.hold():\n    # Note that this Express app uses `ui.hold()` so that we can\n    # manually add the `output_plot()` and `output_code()` to the page.\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.code\n    def clk():\n        return input.plot_click()\n\n    @render.code\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.code\n    def hvr():\n        return input.plot_hover()\n\n    @render.code\n    def brsh():\n        return input.plot_brush()",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)",
      "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_plot(\n        \"plot\",\n        click=True,  \n        dblclick=True,  \n        hover=True,  \n        brush=True,  \n    ),\n    \"Click:\",\n    ui.output_text_verbatim(\"clk\", placeholder=True),\n    \"Double Click:\",\n    ui.output_text_verbatim(\"dblclk\", placeholder=True),\n    \"Hover:\",\n    ui.output_text_verbatim(\"hvr\", placeholder=True),\n    \"Brush\",\n    ui.output_text_verbatim(\"brsh\", placeholder=True),\n)\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n        bill = df[\"bill_length_mm\"]\n\n        plt.scatter(mass, bill)\n        plt.xlabel(\"Mass (g)\")\n        plt.ylabel(\"Bill Length (mm)\")\n        plt.title(\"Penguin Mass vs Bill Length\")\n\n    @render.text\n    def clk():\n        return input.plot_click()\n\n    @render.text\n    def dblclk():\n        return input.plot_dblclick()\n\n    @render.text\n    def hvr():\n        return input.plot_hover()\n\n    @render.text\n    def brsh():\n        return input.plot_brush()\n\napp = App(app_ui, server, debug=True)"
    ]
  },
  {
    "id": "api_render_ui_html",
    "url": "api/render.ui.html",
    "title": "render.ui ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.ui\n\nrender.ui\n\nReactively render HTML content.\n\nNote: If you want to write your function with Shiny Express syntax, where the UI components are automatically captured as the code is evaluated, use express instead of this function.\n\nThis function is used to render HTML content, but it requires that the funciton returns the content, using Shiny Core syntax.\n\nReturns\n\nA decorator for a function that returns an object of type TagChild.\n\nTips\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_ui container (see output_ui for example usage).\n\nSee Also\n\n- express\n- expressify\n- output_ui\n\nExamples\n\n",
    "code_examples": [
      "render.ui(self, _fn=None)",
      "render.ui(self, _fn=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"add\", \"Add more controls\"),\n    ui.output_ui(\"moreControls\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    @reactive.event(input.add)\n    def moreControls():\n        return ui.TagList(\n            ui.input_slider(\"n\", \"N\", min=1, max=1000, value=500),\n            ui.input_text(\"label\", \"Label\"),\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "layouts_sidebars_index_html",
    "url": "layouts/sidebars/index.html",
    "title": "Sidebars ‚Äì Shiny for Python",
    "description": "A sidebar layout creates a sidebar in your Shiny app, typically used for inputs, and a large main area, typically used for outputs.",
    "content": "Sidebars\n\nA sidebar layout creates a sidebar in your Shiny app, typically used for inputs, and a large main area, typically used for outputs.\n\nA sidebar layout creates a sidebar, typically used for inputs, and a large main area, typically used for outputs.\n\nRelevant Functions\n\n- ui.layout_sidebar ui.layout_sidebar(sidebar, *args, fillable=True, fill=True, bg=None, fg=None, border=None, border_radius=None, border_color=None, gap=None, padding=None, height=None, **kwargs)\n- ui.sidebar ui.sidebar(*args, width=250, position='left', open='desktop', id=None, title=None, bg=None, fg=None, class_=None, max_height_mobile=None, gap=None, padding=None)\n\nui.layout_sidebar ui.layout_sidebar(sidebar, *args, fillable=True, fill=True, bg=None, fg=None, border=None, border_radius=None, border_color=None, gap=None, padding=None, height=None, **kwargs)\n\nui.sidebar ui.sidebar(*args, width=250, position='left', open='desktop', id=None, title=None, bg=None, fg=None, class_=None, max_height_mobile=None, gap=None, padding=None)\n\nSidebar on the left\n\n- Express\n- Core\n\nFollow these steps to add a left-side sidebar to your app:\n\n- Add ui.layout_sidebar() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.layout_sidebar() creates a sidebar layout.\n- Pass ui.sidebar()as the first argument of ui.layout_sidebar() to create the sidebar. By default, the position parameter of ui.sidebar() is ‚Äúleft‚Äù and the sidebar will appear on the left.\n- Supply additional components (output components, cards, text, etc.) to ui.layout_sidebar() to define the contents of the main content area.\n\nAdd ui.layout_sidebar() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.layout_sidebar() creates a sidebar layout.\n\nPass ui.sidebar()as the first argument of ui.layout_sidebar() to create the sidebar. By default, the position parameter of ui.sidebar() is ‚Äúleft‚Äù and the sidebar will appear on the left.\n\nSupply additional components (output components, cards, text, etc.) to ui.layout_sidebar() to define the contents of the main content area.\n\nSidebar on the right\n\n- Express\n- Core\n\nFollow these steps to add a right-side sidebar to your app:\n\n- Add ui.layout_sidebar() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.layout_sidebar() creates a sidebar layout.\n- Pass ui.sidebar()as the first argument of ui.layout_sidebar() to create the sidebar.\n- Pass position=\"right\" to ui.sidebar(). The position argument controls where the sidebar appears relative to the main content.\n- Supply components (e.g., inputs) to ui.sidebar() to define the sidebar‚Äôs contents. Supply additional components (e.g., output components, cards, etc.) to ui.layout_sidebar() to define the contents of the main content area.\n\nAdd ui.layout_sidebar() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.layout_sidebar() creates a sidebar layout.\n\nPass ui.sidebar()as the first argument of ui.layout_sidebar() to create the sidebar.\n\nPass position=\"right\" to ui.sidebar(). The position argument controls where the sidebar appears relative to the main content.\n\nSupply components (e.g., inputs) to ui.sidebar() to define the sidebar‚Äôs contents. Supply additional components (e.g., output components, cards, etc.) to ui.layout_sidebar() to define the contents of the main content area.\n\nSidebar within a card\n\n- Express\n- Core\n\nFollow these steps to add a sidebar within a card to your app:\n\n- Add ui.card() to the UI of your app to create a card.\n- Pass ui.layout_sidebar() to ui.card() to define a sidebar layout within the card.\n- Add ui.sidebar() and additional elements to ui.layout_sidebar() to define the sidebar and main content as usual.\n- Add inputs or other components as desired to ui.sidebar() to define the sidebar‚Äôs contents.\n\nCollapsed sidebar\n\n- Express\n- Core\n\nui.sidebar() has an open parameter that defines whether the sidebar appears open or closed when the app launches. To create a sidebar that is initially closed, set the open parameter to \"closed\".\n\nThe other options for open are:\n\n- \"desktop\": The default. The sidebar starts open on a desktop screen and closed on mobile.\n- \"open\": The sidebar starts open and can be closed.\n- \"always\": The sidebar is always open and cannot be closed.\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n    \"Main content\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n    \"Main content\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nwith ui.sidebar(bg=\"#f8f8f8\"):  \n    \"Sidebar\"  \n\n\"Main content\"  ",
      "from shiny.express import ui\n\nwith ui.sidebar(bg=\"#f8f8f8\"):  \n    \"Sidebar\"  \n\n\"Main content\"  ",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n    \"Main content\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n    \"Main content\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", position=\"right\", bg=\"#f8f8f8\"),  \n    \"Main content\",\n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", position=\"right\", bg=\"#f8f8f8\"),  \n    \"Main content\",\n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nwith ui.sidebar(position=\"right\", bg=\"#f8f8f8\"):  \n    \"Sidebar\"  \n\n\"Main content\"",
      "from shiny.express import ui\n\nwith ui.sidebar(position=\"right\", bg=\"#f8f8f8\"):  \n    \"Sidebar\"  \n\n\"Main content\"",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", position=\"right\", bg=\"#f8f8f8\"),  \n    \"Main content\",\n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", position=\"right\", bg=\"#f8f8f8\"),  \n    \"Main content\",\n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 175\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.card(  \n        ui.card_header(\"Card with sidebar\"),\n        ui.layout_sidebar(  \n            ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n            \"Card content\",  \n        ),  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 175\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.card(  \n        ui.card_header(\"Card with sidebar\"),\n        ui.layout_sidebar(  \n            ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n            \"Card content\",  \n        ),  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.card():  \n    ui.card_header(\"Card with sidebar\")\n\n    with ui.layout_sidebar():  \n        with ui.sidebar(bg=\"#f8f8f8\"):  \n            \"Sidebar\"  \n\n        \"Card content\"  ",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.card():  \n    ui.card_header(\"Card with sidebar\")\n\n    with ui.layout_sidebar():  \n        with ui.sidebar(bg=\"#f8f8f8\"):  \n            \"Sidebar\"  \n\n        \"Card content\"  ",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.card(  \n        ui.card_header(\"Card with sidebar\"),\n        ui.layout_sidebar(  \n            ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n            \"Card content\",  \n        ),  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.card(  \n        ui.card_header(\"Card with sidebar\"),\n        ui.layout_sidebar(  \n            ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\"),  \n            \"Card content\",  \n        ),  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\", open=\"closed\"),  \n    \"Main content\",\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 125\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\", open=\"closed\"),  \n    \"Main content\",\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nwith ui.sidebar(open=\"closed\", bg=\"#f8f8f8\"):  \n    \"Sidebar\"\n\n\"Main content\"",
      "from shiny.express import ui\n\nwith ui.sidebar(open=\"closed\", bg=\"#f8f8f8\"):  \n    \"Sidebar\"\n\n\"Main content\"",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\", open=\"closed\"),  \n    \"Main content\",\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f8\", open=\"closed\"),  \n    \"Main content\",\n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "api_Session_html",
    "url": "api/Session.html",
    "title": "session ‚Äì Shiny for Python",
    "description": "",
    "content": "- Create and run applications\n- Session\n\nSession\n\nTools for managing user sessions and accessing session-related information.\n\nsession.get_current_session\n\nGet the current user session.\n\nReturns\n\nThe current session if one is active, otherwise None.\n\nNote\n\nShiny apps should not need to call this function directly. Instead, it is intended to be used by Shiny developers who wish to create new functions that should only be called from within an active Shiny session.\n\nSee Also\n\n- require_active_session\n\nsession.require_active_session\n\nRaise an exception if no Shiny session is currently active.\n\nParameters\n\nA Session instance. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nThe session.\n\nNote\n\nShiny apps should not need to call this function directly. Instead, it is intended to be used by Shiny developers who wish to create new functions that should only be called from within an active Shiny session.\n\nRaises\n\nIf session is not active.\n\nSee Also\n\n- get_current_session\n\nsession.session_context\n\nA context manager for current session.\n\nParameters\n\nA Session instance. If not provided, the instance is inferred via get_current_session.\n\nreactive.get_current_context\n\nGet the current reactive context.\n\nReturns\n\nA ~shiny.reactive.Context class.\n\nRaises\n\nIf called outside of a reactive context.\n\nsession.ClientData\n\nAccess (client-side) information from the browser.\n\nProvides access to client-side information, such as the URL components, the pixel ratio of the device, and the properties of outputs.\n\nEach method in this class reads a reactive input value, which means that the method will error if called outside of a reactive context.\n\nRaises\n\nIf a method is called outside of a reactive context.\n\nExamples\n\nMethods\n\noutput_accent_color\n\nReactively read the accent color of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe accent color of the output, or None if the output does not exist (or does not report its accent color).\n\noutput_bg_color\n\nReactively read the background color of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe background color of the output, or None if the output does not exist (or does not report its bg color).\n\noutput_fg_color\n\nReactively read the foreground color of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe foreground color of the output, or None if the output does not exist (or does not report its fg color).\n\noutput_font\n\nReactively read the font(s) of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe font family of the output, or None if the output does not exist (or does not report its font styles).\n\noutput_height\n\nReactively read the height of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe height of the output, or None if the output does not exist (or does not report its height).\n\noutput_hidden\n\nReactively read whether an output is hidden.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nWhether the output is hidden, or None if the output does not exist.\n\noutput_width\n\nReactively read the width of an output.\n\nParameters\n\nThe id of the output.\n\nReturns\n\nThe width of the output, or None if the output does not exist (or does not report its width).\n\npixelratio\n\nReactively read the pixel ratio of the device.\n\nurl_hash\n\nReactively read the hash part of the URL.\n\nurl_hash_initial\n\nReactively read the initial hash part of the URL.\n\nurl_hostname\n\nReactively read the hostname part of the URL.\n\nurl_pathname\n\nThe pathname part of the URL.\n\nurl_port\n\nReactively read the port part of the URL.\n\nurl_protocol\n\nReactively read the protocol part of the URL.\n\nurl_search\n\nReactively read the search part of the URL.\n\nsession.Session.send_custom_message\n\nSend a message to the client.\n\nParameters\n\nThe type of message to send.\n\nThe message to send.\n\nNote\n\nSends messages to the client which can be handled in JavaScript with Shiny.addCustomMessageHandler(type, function(message){...}). Once the message handler is added, it will be invoked each time send_custom_message() is called on the server.\n\nExamples\n\nsession.Session.send_input_message\n\nSend an input message to the session.\n\nSends a message to an input on the session's client web page; if the input is present and bound on the page at the time the message is received, then the input binding object's receiveMessage(el, message) method will be called. This method should generally not be called directly from Shiny apps, but through friendlier wrapper functions like ui.update_text().\n\nParameters\n\nAn id matching the id of an input to update.\n\nThe message to send.\n\nsession.Session.on_flush\n\nRegister a function to call before the next reactive flush.\n\nParameters\n\nThe function to call.\n\nWhether to call the function only once or on every flush.\n\nReturns\n\nA function that can be used to cancel the registration.\n\nExamples\n\nsession.Session.on_flushed\n\nRegister a function to call after the next reactive flush.\n\nParameters\n\nThe function to call.\n\nWhether to call the function only once or on every flush.\n\nReturns\n\nA function that can be used to cancel the registration.\n\nExamples\n\nsession.Session.on_ended\n\nRegisters a function to be called after the client has disconnected.\n\nParameters\n\nThe function to call.\n\nReturns\n\nA function that can be used to cancel the registration.\n\nExamples\n\nsession.Session.dynamic_route\n\nRegister a function to call when a dynamically generated, session-specific, route is requested.\n\nProvides a convenient way to serve-up session-dependent values for other clients/applications to consume.\n\nParameters\n\nA name for the route (used to determine part of the URL path).\n\nThe function to call when a request is made to the route. This function should take a single argument (a starlette.requests.Request object) and return a starlette.types.ASGIApp object.\n\nReturns\n\nThe URL path for the route.\n\nExamples\n\nsession.Session.close\n\nClose the session.\n\nExamples\n\ninput_handler.input_handlers\n\ninput_handler.input_handlers\n\nManage Shiny input handlers.\n\nAdd and/or remove input handlers of a given type. Shiny uses these handlers to pre-process input values from the client (after being deserialized) before passing them to the input argument of an App's server function.\n\nThe type is based on the getType() JavaScript method on the relevant Shiny input binding. See this article <https://shiny.posit.co/articles/js-custom-input.html>_ for more information on how to create custom input bindings. (The article is about Shiny for R, but the JavaScript and general principles are the same.)\n\nMethods\n\nadd(type: str, force: bool = False) -> Callable[[InputHandlerType], None] Register an input handler. This method returns a decorator that registers the decorated function as the handler for the given type. This handler should accept three arguments: - the input value - the input name - the Session object remove(type: str) Unregister an input handler.\n\nNote\n\nadd() ing an input handler will make it persist for the duration of the Python process (unless Shiny is explicitly reloaded). For that reason, verbose naming is encouraged to minimize the risk of colliding with other Shiny input binding(s) which happen to use the same type (if the binding is bundled with a package, we recommend the format of \"packageName.widgetName\").\n\nExample\n\nOn the Javascript side, the associated input binding must have a corresponding getType method:\n\n",
    "code_examples": [
      "session.get_current_session()",
      "session.get_current_session()",
      "session.require_active_session(session)",
      "session.require_active_session(session)",
      "session.session_context(session)",
      "session.session_context(session)",
      "reactive.get_current_context()",
      "reactive.get_current_context()",
      "session.ClientData(self, session)",
      "session.ClientData(self, session)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport textwrap\n\n# pyright: reportUnknownMemberType=false, reportUnknownVariableType=false\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_slider(\"obs\", \"Number of observations:\", min=0, max=1000, value=500),\n        open=\"closed\",\n    ),\n    ui.markdown(\n        \"\"\"\n#### `session.clientdata` values\n\nThe following methods are available from the `session.clientdata` object and allow you\nto reactively read the client data values from the browser.\n\"\"\"\n    ),\n    ui.output_text_verbatim(\"clientdatatext\"),\n    ui.output_plot(\"myplot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n    @render.code\n    def clientdatatext():\n        return textwrap.dedent(\n            f\"\"\"\n        .url_hash()         -> {session.clientdata.url_hash()}\n        .url_hash_initial() -> {session.clientdata.url_hash_initial()}\n        .url_hostname()     -> {session.clientdata.url_hostname()}\n        .url_pathname()     -> {session.clientdata.url_pathname()}\n        .url_port()         -> {session.clientdata.url_port()}\n        .url_protocol()     -> {session.clientdata.url_protocol()}\n        .url_search()       -> {session.clientdata.url_search()}\n        .pixelratio()       -> {session.clientdata.pixelratio()}\n\n        .output_height(\"myplot\")       -> {session.clientdata.output_height(\"myplot\")}\n        .output_width(\"myplot\")        -> {session.clientdata.output_width(\"myplot\")}\n        .output_hidden(\"myplot\")       -> {session.clientdata.output_hidden(\"myplot\")}\n        .output_bg_color(\"myplot\")     -> {session.clientdata.output_bg_color(\"myplot\")}\n        .output_fg_color(\"myplot\")     -> {session.clientdata.output_fg_color(\"myplot\")}\n        .output_accent_color(\"myplot\") -> {session.clientdata.output_accent_color(\"myplot\")}\n        .output_font(\"myplot\")         -> {session.clientdata.output_font(\"myplot\")}\n\n        \"\"\"\n        )\n\n    @render.plot\n    def myplot():\n        plt.figure()\n        plt.hist(np.random.normal(size=input.obs()))  # type: ignore\n        plt.title(\"This is myplot\")\n\n\napp = App(app_ui, server)\n\n",
      "session.ClientData.output_accent_color(id)",
      "session.ClientData.output_accent_color(id)",
      "session.ClientData.output_bg_color(id)",
      "session.ClientData.output_bg_color(id)",
      "session.ClientData.output_fg_color(id)",
      "session.ClientData.output_fg_color(id)",
      "session.ClientData.output_font(id)",
      "session.ClientData.output_font(id)",
      "session.ClientData.output_height(id)",
      "session.ClientData.output_height(id)",
      "session.ClientData.output_hidden(id)",
      "session.ClientData.output_hidden(id)",
      "session.ClientData.output_width(id)",
      "session.ClientData.output_width(id)",
      "session.ClientData.pixelratio()",
      "session.ClientData.pixelratio()",
      "session.ClientData.url_hash()",
      "session.ClientData.url_hash()",
      "session.ClientData.url_hash_initial()",
      "session.ClientData.url_hash_initial()",
      "session.ClientData.url_hostname()",
      "session.ClientData.url_hostname()",
      "session.ClientData.url_pathname()",
      "session.ClientData.url_pathname()",
      "session.ClientData.url_port()",
      "session.ClientData.url_port()",
      "session.ClientData.url_protocol()",
      "session.ClientData.url_protocol()",
      "session.ClientData.url_search()",
      "session.ClientData.url_search()",
      "session.Session.send_custom_message(type, message)",
      "session.Session.send_custom_message(type, message)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"msg\", \"Enter a message\"),\n    ui.input_action_button(\"submit\", \"Submit the message\"),\n    # It'd be better to use ui.insert_ui() in order to implement this kind of\n    # functionality...this is just a basic demo of how custom message handling works.\n    ui.tags.div(id=\"messages\"),\n    ui.tags.script(\n        \"\"\"\n        $(function() {\n            Shiny.addCustomMessageHandler(\"append_msg\", function(message) {\n                $(\"<p>\").text(message.msg).appendTo(\"#messages\");\n            });\n        });\n        \"\"\"\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.submit)\n    async def _():\n        await session.send_custom_message(\"append_msg\", {\"msg\": input.msg()})\n\n\napp = App(app_ui, server, debug=True)\n\n",
      "session.Session.send_input_message(id, message)",
      "session.Session.send_input_message(id, message)",
      "session.Session.on_flush(fn, once=True)",
      "session.Session.on_flush(fn, once=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"flush\", \"Trigger flush\"),\n    ui.output_ui(\"n_clicks\"),\n    ui.div(id=\"flush_time\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n        print(msg)\n        ui.insert_ui(\n            ui.p(msg),\n            selector=\"#flush_time\",\n        )\n\n    session.on_flush(log, once=False)\n\n    @render.ui\n    def n_clicks():\n        return \"Number of clicks: \" + str(input.flush())\n\n\napp = App(app_ui, server)\n\n",
      "session.Session.on_flushed(fn, once=True)",
      "session.Session.on_flushed(fn, once=True)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"flush\", \"Trigger flush\"),\n    ui.output_ui(\"n_clicks\"),\n    ui.div(id=\"flush_time\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        msg = \"A reactive flush occurred at \" + datetime.now().strftime(\"%H:%M:%S:%f\")\n        print(msg)\n        ui.insert_ui(\n            ui.p(msg),\n            selector=\"#flush_time\",\n        )\n\n    session.on_flushed(log, once=False)\n\n    @render.ui\n    def n_clicks():\n        return \"Number of clicks: \" + str(input.flush())\n\n\napp = App(app_ui, server)\n\n",
      "session.Session.on_ended(fn)",
      "session.Session.on_ended(fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"close\", \"Close the session\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n    session.on_ended(log)\n\n    @reactive.effect\n    @reactive.event(input.close)\n    async def _():\n        await session.close()\n\n\napp = App(app_ui, server)\n\n",
      "session.Session.dynamic_route(name, handler)",
      "session.Session.dynamic_route(name, handler)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"serve\", \"Click to serve\"), ui.div(id=\"messages\")\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.serve)\n    def _():\n        async def my_handler(request: Request) -> JSONResponse:\n            return JSONResponse({\"n_clicks\": input.serve()}, status_code=200)\n\n        path = session.dynamic_route(\"my_handler\", my_handler)\n\n        print(\"Serving at: \", path)\n\n        ui.insert_ui(\n            ui.tags.script(\n                f\"\"\"\n                fetch('{path}')\n                  .then(r => r.json())\n                  .then(x => {{ $('#messages').text(`Clicked ${{x.n_clicks}} times`); }});\n                \"\"\"\n            ),\n            selector=\"body\",\n        )\n\n\napp = App(app_ui, server)\n\n",
      "session.Session.close(code=1001)",
      "session.Session.close(code=1001)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import datetime\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"close\", \"Close the session\"),\n    ui.p(\n        \"\"\"If this example is running on the browser (i.e., via shinylive),\n        closing the session will log a message to the JavaScript console\n        (open the browser's developer tools to see it).\n        \"\"\"\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    def log():\n        print(\"Session ended at: \" + datetime.now().strftime(\"%H:%M:%S\"))\n\n    session.on_ended(log)\n\n    @reactive.effect\n    @reactive.event(input.close)\n    async def _():\n        await session.close()\n\n\napp = App(app_ui, server)\n\n",
      "from shiny.input_handler import input_handlers\n@input_handlers.add(\"mypackage.intify\")\ndef _(value, name, session):\n    return int(value)",
      "from shiny.input_handler import input_handlers\n@input_handlers.add(\"mypackage.intify\")\ndef _(value, name, session):\n    return int(value)",
      "getType: function(el) {\n    return \"mypackage.intify\";\n}",
      "getType: function(el) {\n    return \"mypackage.intify\";\n}"
    ]
  },
  {
    "id": "api_testing",
    "url": "api/testing/",
    "title": "index ‚Äì Shiny for Python",
    "description": "",
    "content": "Shiny Testing API\n\nThis page outlines Shiny‚Äôs Testing API reference.\n\nFor an introduction to Shiny testing, see the unit testing and end to end testing tutorials.\n\nFunction reference\n\nUI Layouts\n\nMethods for interacting with Shiny app multiple UI component controller.\n\nUI Inputs\n\nMethods for interacting with Shiny app input value controller.\n\nValue boxes\n\nMethods for interacting with Shiny app valuebox controller.\n\nNavigation (tab) panels\n\nMethods for interacting with Shiny app UI content controller.\n\nUpload and download\n\nMethods for interacting with Shiny app uploading and downloading controller.\n\nChat interface\n\nMethods for interacting with Shiny app chat controller.\n\nRendering Outputs\n\nRender output in a variety of ways.\n\nPlaywright Expect\n\nMethods for testing the state of a locator within a Shiny app.\n\nPytest\n\nFixtures used for testing Shiny apps with Pytest.\n\nRun\n\nMethods for starting a local Shiny app in the background\n\n",
    "code_examples": []
  },
  {
    "id": "api_ui_output_data_frame_html",
    "url": "api/ui.output_data_frame.html",
    "title": "ui.output_data_frame ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_data_frame\n\nui.output_data_frame\n\nCreate an output container for an interactive table or grid. Features fast virtualized scrolling, sorting, filtering, and row selection (single or multiple).\n\nParameters\n\nAn output id.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- shiny.render.data_frame\n\nExamples\n\n",
    "code_examples": [
      "ui.output_data_frame(id)",
      "ui.output_data_frame(id)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas  # noqa: F401 (this line needed for Shinylive to load plotly.express)\nimport plotly.express as px\nfrom shinywidgets import output_widget, render_widget\n\nfrom shiny import App, reactive, render, req, ui\n\n# Load the Gapminder dataset\ndf = px.data.gapminder()\n\n# Prepare a summary DataFrame\nsummary_df = (\n    df.groupby(\"country\")\n    .agg(\n        {\n            \"pop\": [\"min\", \"max\", \"mean\"],\n            \"lifeExp\": [\"min\", \"max\", \"mean\"],\n            \"gdpPercap\": [\"min\", \"max\", \"mean\"],\n        }\n    )\n    .reset_index()\n)\n\nsummary_df.columns = [\"_\".join(col).strip() for col in summary_df.columns.values]\nsummary_df.rename(columns={\"country_\": \"country\"}, inplace=True)\n\napp_ui = ui.page_fillable(\n    {\"class\": \"p-3\"},\n    ui.markdown(\n        \"**Instructions**: Select one or more countries in the table below to see more information.\"\n    ),\n    ui.layout_columns(\n        ui.card(ui.output_data_frame(\"summary_data\"), height=\"400px\"),\n        ui.card(output_widget(\"country_detail_pop\"), height=\"400px\"),\n        ui.card(output_widget(\"country_detail_percap\"), height=\"400px\"),\n        col_widths=[12, 6, 6],\n    ),\n)\n\n\ndef server(input, output, session):\n    @render.data_frame\n    def summary_data():\n        return render.DataGrid(summary_df.round(2), selection_mode=\"rows\")\n\n    @reactive.calc\n    def filtered_df():\n        data_selected = summary_data.data_view(selected=True)\n        req(not data_selected.empty)\n        countries = data_selected[\"country\"]\n        # Filter data for selected countries\n        return df[df[\"country\"].isin(countries)]\n\n    @render_widget\n    def country_detail_pop():\n        return px.line(\n            filtered_df(),\n            x=\"year\",\n            y=\"pop\",\n            color=\"country\",\n            title=\"Population Over Time\",\n        )\n\n    @render_widget\n    def country_detail_percap():\n        return px.line(\n            filtered_df(),\n            x=\"year\",\n            y=\"gdpPercap\",\n            color=\"country\",\n            title=\"GDP per Capita Over Time\",\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_render_data_frame_html",
    "url": "api/render.data_frame.html",
    "title": "render.data_frame ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.data_frame\n\nrender.data_frame\n\nDecorator for a function that returns a pandas, polars, or eager narwhals compatible DataFrame object to render as an interactive table or grid. Features fast virtualized scrolling, sorting, filtering, and row selection (single or multiple).\n\nReturns\n\nA decorator for a function that returns any of the following: 1. A DataGrid or DataTable object, which can be used to customize the appearance and behavior of the data frame output. 2. A pandas, polars, or eager narwhals compatible DataFrame object. This object will be internally upgraded to a default shiny.render.DataGrid(df).\n\nRow selection\n\nWhen using the row selection feature, you can access the selected rows by using the <data_frame_renderer>.cell_selection() method, where <data_frame_renderer> is the @render.data_frame function name that corresponds with the id= used in outout_data_frame. Internally, <data_frame_renderer>.cell_selection() retrieves the selected cell information from session‚Äôs input.<data_frame_renderer>_cell_selection() value and upgrades it for consistent subsetting.\n\nFor example, to filter your pandas data frame (df) down to the selected rows you can use:\n\n- df.iloc[list(input.<data_frame_renderer>_cell_selection()[\"rows\"])]\n- df.iloc[list(<data_frame_renderer>.cell_selection()[\"rows\"])]\n- <data_frame_renderer>.data_view(selected=True)\n\nThe last method (.data_view(selected=True)) will also apply any sorting, filtering, or edits that has been applied by the user.\n\nEditing cells\n\nWhen a returned DataTable or DataGrid object has editable=True, app users will be able to edit the cells in the table. After a cell has been edited, the edited value will be sent to the server for processing. The handling methods are set via @<data_frame_renderer>.set_patch_fn or @<data_frame_renderer>.set_patches_fn decorators. By default, both decorators will return the corresponding value as a string.\n\nData methods\n\nThere are several methods available to inspect and update data frame renderer. It is important to know the side effects of each method to know how they interact with each other.\n\n- Data frame render method: When this method is reactively executed, the .data() data frame is set to the underlying data frame and all .cell_patches() are removed. When this method is reactively executed, all user state is reset. This includes the user‚Äôs edits, sorting, filtering.\n- .data(): Reactive calculation that returns the render method‚Äôs underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n- .cell_patches(): Reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame.\n- .data_patched(): Reactive calculation that returns the .data() data frame with all .cell_patches() patches applied.\n- .data_view(*, selected: bool): Reactive function that returns the .data_patched() data frame with the user‚Äôs sorting and filtering applied. It represents the data frame as viewed by the user within the browser. If selected=True, only the selected rows are returned.\n- .update_cell_value(value, row, col): Sets a new entry in .cell_patches(). Calling this method will not reset the user‚Äôs sorting or filtering.\n- .update_data(data): Updates the .data() data frame with new data. Calling this method will remove all .cell_patches(). Calling this method will not reset the user‚Äôs sorting or filtering.\n\n- When this method is reactively executed, the .data() data frame is set to the underlying data frame and all .cell_patches() are removed.\n- When this method is reactively executed, all user state is reset. This includes the user‚Äôs edits, sorting, filtering.\n\n- Reactive calculation that returns the render method‚Äôs underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n\n- Reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame.\n\n- Reactive calculation that returns the .data() data frame with all .cell_patches() patches applied.\n\n- Reactive function that returns the .data_patched() data frame with the user‚Äôs sorting and filtering applied. It represents the data frame as viewed by the user within the browser.\n- If selected=True, only the selected rows are returned.\n\n- Sets a new entry in .cell_patches().\n- Calling this method will not reset the user‚Äôs sorting or filtering.\n\n- Updates the .data() data frame with new data.\n- Calling this method will remove all .cell_patches().\n- Calling this method will not reset the user‚Äôs sorting or filtering.\n\nNote: All data methods are shallow copies of each other. If they are mutated in place, it will modify the underlying data object and possibly alter other data objects.\n\nNarwhals\n\nShiny uses narwhals to manage data frame interactions. From their website: ‚ÄúExtremely lightweight and extensible compatibility layer between dataframe libraries!‚Äù. This allows for seamless integration between pandas, polars, and any other eagerly defined data frame type.\n\nThere are some reasonable limitations to the narwhals compatibility layer. As they are found, they will be added to this list: * When converting the column type who does not have a 1:1 mapping between libraries (such as pandas‚Äô columns containing str and dict items both share the same object data type), narwhals will only inspect the first row to disambiguate the cell type. This could lead to false negatives in the data type conversion. Shiny could inspect each column in an attempt to disambiguate the cell type, but this would be a costly operation. The best way to avoid this is to use consistent typing. For example, if your first row of the pandas column contains a string and the second row of the same column contains a ui.TagList, the column will incorrectly be interpreted as a string. To get around this, you can wrap all cells (or at the very lest the first cell) in the same column within a ui.TagList as it will not insert any tags, but it will cause the column to be interpreted as html where possible. (tl/dr: Use consistent typing in your columns!)\n\nTip\n\nThis decorator should be applied before the @output decorator (if that decorator is used). Also, the name of the decorated function (or @output(id=...)) should match the id of a output_data_frame container (see output_data_frame for example usage).\n\nSee Also\n\n- output_data_frame\n- DataGrid and DataTable are the objects you can return from the rendering function to specify options.\n\nExamples\n\nMethods\n\ncell_patches\n\nReactive calculation of the data frame's edits.\n\nThis reactive calculation that returns a list of user edits (or updated cell values) that will be applied to .data() to create the .data_patched() data frame.\n\nReturns\n\nA list of cell patches to apply to the data frame.\n\ncell_selection\n\nReactive calculation of selected cell information.\n\nThis method is a wrapper around input.<id>_cell_selection(), where <id> is the id of the data frame output. This method returns the selected rows and will cause reactive updates as the selected rows change.\n\nThe value has been enhanced from it's vanilla form to include the missing cols key (or rows key) as a tuple of integers representing all column (or row) numbers. This allows for consistent usage within code when subsetting your data. These missing keys are not sent over the wire as they are independent of the selection.\n\nReturns\n\nCellSelection representing the indices of the selected cells. If no cells are currently selected, None is returned.\n\ndata\n\nReactive calculation of the data frame's data.\n\nThis reactive calculation returns the render method's underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n\nThe returned value is a shallow copy of the original data frame. It is possible that alterations to the .data() data frame could alter other associated data frame values. Please be cautious when using this value directly.\n\nReturns\n\nThis reactive calculation returns the render method‚Äôs underlying data frame or the data frame supplied to .update_data(data), whichever has been most recently set.\n\ndata_patched\n\nReactive calculation of the data frame's patched data.\n\nThis method returns the .data() data frame with all .cell_patches() patches applied.\n\nThe returned value is a shallow copy of the original data frame. It is possible that alterations to the .data_patched() data frame could alter other associated data frame values. Please be cautious when using this value directly.\n\nReturns\n\nThe patched data frame.\n\ndata_view\n\nReactive function that retrieves the data how it is viewed within the browser.\n\nThis function will return the .data_patched() data frame with the user's sorting and filtering applied. It represents the data frame as viewed by the user within the browser.\n\nThe returned value is a shallow copy of the original data frame. It is possible that alterations to the .data_view() data frame could alter other associated date frame values. Please be cautious when using this value directly.\n\nParameters\n\nIf True, subset the viewed data to the selected area. Defaults to False (all rows).\n\nReturns\n\nA view of the (possibly selected) data frame as seen in the browser.\n\nSee Also\n\n- pandas.DataFrame.copy API documentation\n- polars.DataFrame.clone API documentation\n- narwhals.DataFrame.clone API documentation\n\nExamples\n\ndata_view_rows\n\nReactive calculation of the data frame's user view row numbers.\n\nThis value is a wrapper around input.<id>_data_view_rows(), where <id> is the id of the data frame output.\n\nReturns\n\nThe row numbers of the data frame that are currently being viewed in the browser after sorting and filtering has been applied.\n\nfilter\n\nReactive calculation of the data frame's column filters.\n\nReturns\n\nAn array of column number and value information. If the column type is a number, a tuple of (min, max) is used for value. If no min (or max) value is set, None is used in its place. If the column type is a string, the string value is used for value.\n\ninput_cell_selection\n\n[Deprecated] Reactive calculation of selected cell information.\n\nPlease use ~shiny.render.data_frame's .cell_selection() method instead.\n\nselection_modes\n\nReactive calculation of the data frame's possible selection modes.\n\nReturns\n\nThe possible selection modes for the data frame.\n\nset_patch_fn\n\nDecorator to set the function that updates a single cell in the data frame.\n\nThe default patch function returns the value as is.\n\nParameters\n\nA function that accepts a kwarg patch and returns the processed patch.value for the cell.\n\nExamples\n\nset_patches_fn\n\nDecorator to set the function that updates a batch of cells in the data frame.\n\nThe default patches function calls the async ._patch_fn() on each input patch and returns the updated patch values.\n\nThere are no checks made on the quantity of patches returned. The user can return more, less, or the same number of patches as the input patches. This allows for the app author to own more control over which columns are updated and how they are updated.\n\nParameters\n\nA function that accepts a kwarg patches and returns a list of (possibly updated) patches to apply to the data frame.\n\nExamples\n\nsort\n\nReactive calculation of the data frame's column sorting information.\n\nReturns\n\nAn array of column number and is descending information.\n\nupdate_cell_selection\n\nUpdate the cell selection in the data frame.\n\nCurrently only single (\"type\": \"row\") or multiple (\"type\": \"rows\") row selection is supported.\n\nIf the current data frame selection mode is \"none\" and a non-none selection is provided, a warning will be raised and no rows will be selected. If cells are supposes to be selected, the selection mode returned from the render function must (currently) be set to \"row\" or \"rows\".\n\nParameters\n\nThe cell selection to apply to the data frame. This can be a CellSelection object, \"all\" to select all cells (if possible), or None to clear the selection.\n\nupdate_cell_value\n\nUpdate the value of a cell in the data frame.\n\nCalling this method will set a new entry in .cell_patches(). It will not reset the user's sorting or filtering of their rendered data frame.\n\nParameters\n\nThe new value to set the cell to.\n\nThe row index of the cell to update.\n\nThe column index of the cell to update.\n\nupdate_data\n\nUpdate the data frame with new data.\n\nCalling this method will update the .data() data frame with new data and will remove all .cell_patches(). It will not reset the user's sorting or filtering of their rendered data frame. Any incompatible sorting or filtering settings will be silently dropped.\n\nParameters\n\nThe new data to render.\n\nupdate_filter\n\nUpdate the column filtering in the data frame.\n\nParameters\n\nA list of column filtering information. If None, filtering will be removed.\n\nExamples\n\nupdate_sort\n\nUpdate the column sorting in the data frame.\n\nThe sort will be applied in reverse order so that the first value has the highest precedence. This mean ties will go to the second sort column (and so on).\n\nParameters\n\nA list of column sorting information. If None, sorting will be removed. int values will be upgraded to {\"col\": int, \"desc\": <DESC>} where <DESC> is True if the column is number like and False otherwise.\n\nExamples\n\n",
    "code_examples": [
      "render.data_frame(self, fn)",
      "render.data_frame(self, fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas  # noqa: F401 (this line needed for Shinylive to load plotly.express)\nimport plotly.express as px\nfrom shinywidgets import output_widget, render_widget\n\nfrom shiny import App, reactive, render, req, ui\n\n# Load the Gapminder dataset\ndf = px.data.gapminder()\n\n# Prepare a summary DataFrame\nsummary_df = (\n    df.groupby(\"country\")\n    .agg(\n        {\n            \"pop\": [\"min\", \"max\", \"mean\"],\n            \"lifeExp\": [\"min\", \"max\", \"mean\"],\n            \"gdpPercap\": [\"min\", \"max\", \"mean\"],\n        }\n    )\n    .reset_index()\n)\n\nsummary_df.columns = [\"_\".join(col).strip() for col in summary_df.columns.values]\nsummary_df.rename(columns={\"country_\": \"country\"}, inplace=True)\n\napp_ui = ui.page_fillable(\n    {\"class\": \"p-3\"},\n    ui.markdown(\n        \"**Instructions**: Select one or more countries in the table below to see more information.\"\n    ),\n    ui.layout_columns(\n        ui.card(ui.output_data_frame(\"summary_data\"), height=\"400px\"),\n        ui.card(output_widget(\"country_detail_pop\"), height=\"400px\"),\n        ui.card(output_widget(\"country_detail_percap\"), height=\"400px\"),\n        col_widths=[12, 6, 6],\n    ),\n)\n\n\ndef server(input, output, session):\n    @render.data_frame\n    def summary_data():\n        return render.DataGrid(summary_df.round(2), selection_mode=\"rows\")\n\n    @reactive.calc\n    def filtered_df():\n        data_selected = summary_data.data_view(selected=True)\n        req(not data_selected.empty)\n        countries = data_selected[\"country\"]\n        # Filter data for selected countries\n        return df[df[\"country\"].isin(countries)]\n\n    @render_widget\n    def country_detail_pop():\n        return px.line(\n            filtered_df(),\n            x=\"year\",\n            y=\"pop\",\n            color=\"country\",\n            title=\"Population Over Time\",\n        )\n\n    @render_widget\n    def country_detail_percap():\n        return px.line(\n            filtered_df(),\n            x=\"year\",\n            y=\"gdpPercap\",\n            color=\"country\",\n            title=\"GDP per Capita Over Time\",\n        )\n\n\napp = App(app_ui, server)\n\n",
      "render.data_frame.cell_patches()",
      "render.data_frame.cell_patches()",
      "render.data_frame.cell_selection()",
      "render.data_frame.cell_selection()",
      "render.data_frame.data()",
      "render.data_frame.data()",
      "render.data_frame.data_patched()",
      "render.data_frame.data_patched()",
      "render.data_frame.data_view(selected=False)",
      "render.data_frame.data_view(selected=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Editable data frame\n                    * Edit the cells!\n                    * Sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_original\"),\n        ),\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Updated data from the first data frame\n                    * Select the rows!\n                    * Filter and sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_edited\"),\n        ),\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Selected data from the second data frame\n                    * Sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_selected\"),\n        ),\n        col_widths=[4, 4, 4],\n    ),\n)\n\n\ndef server(input, output, session):\n    df = reactive.value(mtcars.iloc[:, range(4)])\n\n    @render.data_frame\n    def df_original():\n        return render.DataGrid(\n            df(),\n            editable=True,\n        )\n\n    # Convert edited values to the correct data type\n    @df_original.set_patch_fn\n    def _(*, patch: render.CellPatch) -> render.CellValue:\n        if patch[\"column_index\"] in [0, 2]:\n            return float(patch[\"value\"])\n        return int(patch[\"value\"])\n\n    @render.data_frame\n    def df_edited():\n        return render.DataGrid(\n            # Reactive value is updated when the user edits the data within `df_original` output\n            df_original.data_view(),\n            selection_mode=\"rows\",\n            filters=True,\n        )\n\n    @render.data_frame\n    def df_selected():\n        return render.DataGrid(\n            # Reactive value is updated when the user selects rows the data within `df_edited` output\n            df_edited.data_view(selected=True),\n            selection_mode=\"rows\",\n        )\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
      "render.data_frame.data_view_rows()",
      "render.data_frame.data_view_rows()",
      "render.data_frame.filter()",
      "render.data_frame.filter()",
      "render.data_frame.input_cell_selection()",
      "render.data_frame.input_cell_selection()",
      "render.data_frame.selection_modes()",
      "render.data_frame.selection_modes()",
      "render.data_frame.set_patch_fn(fn)",
      "render.data_frame.set_patch_fn(fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Editable data frame\n                    * Edit the cells!\n                    * Sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_original\"),\n        ),\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Updated data from the first data frame\n                    * Select the rows!\n                    * Filter and sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_edited\"),\n        ),\n        ui.card(\n            ui.card_header(\n                ui.markdown(\n                    \"\"\"\n                    ##### Selected data from the second data frame\n                    * Sort the columns!\n                    \"\"\"\n                )\n            ),\n            ui.output_data_frame(\"df_selected\"),\n        ),\n        col_widths=[4, 4, 4],\n    ),\n)\n\n\ndef server(input, output, session):\n    df = reactive.value(mtcars.iloc[:, range(4)])\n\n    @render.data_frame\n    def df_original():\n        return render.DataGrid(\n            df(),\n            editable=True,\n        )\n\n    # Convert edited values to the correct data type\n    @df_original.set_patch_fn\n    def _(*, patch: render.CellPatch) -> render.CellValue:\n        if patch[\"column_index\"] in [0, 2]:\n            return float(patch[\"value\"])\n        return int(patch[\"value\"])\n\n    @render.data_frame\n    def df_edited():\n        return render.DataGrid(\n            # Reactive value is updated when the user edits the data within `df_original` output\n            df_original.data_view(),\n            selection_mode=\"rows\",\n            filters=True,\n        )\n\n    @render.data_frame\n    def df_selected():\n        return render.DataGrid(\n            # Reactive value is updated when the user selects rows the data within `df_edited` output\n            df_edited.data_view(selected=True),\n            selection_mode=\"rows\",\n        )\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
      "render.data_frame.set_patches_fn(fn)",
      "render.data_frame.set_patches_fn(fn)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nimport pandas as pd\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fillable(\n    {\"class\": \"p-3\"},\n    ui.markdown(\n        \"\"\"\n        #### Instructions:\n        * Run the app locally so that the edits to the underlying CSV file will persist.\n        * Edit the cells in the table.\n\n        #### Note:\n        The data frame will not be re-rendered as the result of `df()` has not updated.\n\n        Once the `df()` is invalidated, all local edits are forgotten, and the data frame will be re-rendered. However, since the edits were saved to the CSV file, the edits will persist between refreshes (when run locally).\n        \"\"\"\n    ),\n    ui.card(\n        ui.output_data_frame(\"my_data_frame\"),\n    ),\n)\n\nhere = Path(__file__).parent\n\n\ndef server(input, output, session):\n    mtcars_df = reactive.value(pd.read_csv(here / \"mtcars.csv\").iloc[:, range(4)])\n\n    # A copy of the data frame that will store all the edits\n    edited_df = reactive.value(None)\n\n    # Copy mtcars_df to edited_df when mtcars_df changes and on initial load\n    @reactive.effect\n    def _sync_mtcars_to_edited_df():\n        edited_df.set(mtcars_df())\n\n    @render.data_frame\n    def my_data_frame():\n        return render.DataGrid(\n            mtcars_df(),\n            editable=True,\n        )\n\n    # Save the edited values to the data source (ex: the CSV file)\n    @my_data_frame.set_patches_fn\n    def _(*, patches: list[render.CellPatch]) -> list[render.CellPatch]:\n        for patch in patches:\n            if patch[\"column_index\"] in [0, 2]:\n                patch[\"value\"] = float(patch[\"value\"])\n            else:\n                patch[\"value\"] = int(patch[\"value\"])\n\n        # \"Save to the database\" by writing the edited data to a CSV file\n        df = edited_df().copy()\n        for patch in patches:\n            df.iloc[patch[\"row_index\"], patch[\"column_index\"]] = patch[\"value\"]\n        edited_df.set(df)\n        df.to_csv(here / \"mtcars.csv\", index=False)\n        print(\"Saved the edited data to './mtcars.csv'\")\n\n        return patches\n\n\napp = App(app_ui, server)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp\n21.0,6,160.0,110\n21.0,6,160.0,110\n22.8,4,108.0,93\n21.4,6,258.0,110\n18.7,8,360.0,175\n18.1,6,225.0,105\n14.3,8,360.0,245\n24.4,4,146.7,62\n22.8,4,140.8,95\n19.2,6,167.6,123\n17.8,6,167.6,123\n16.4,8,275.8,180\n17.3,8,275.8,180\n15.2,8,275.8,180\n10.4,8,472.0,205\n10.4,8,460.0,215\n14.7,8,440.0,230\n32.4,4,78.7,66\n30.4,4,75.7,52\n33.9,4,71.1,65\n21.5,4,120.1,97\n15.5,8,318.0,150\n15.2,8,304.0,150\n13.3,8,350.0,245\n19.2,8,400.0,175\n27.3,4,79.0,66\n26.0,4,120.3,91\n30.4,4,95.1,113\n15.8,8,351.0,264\n19.7,6,145.0,175\n15.0,8,301.0,335\n21.4,4,121.0,109\n\n",
      "render.data_frame.sort()",
      "render.data_frame.sort()",
      "render.data_frame.update_cell_selection(selection)",
      "render.data_frame.update_cell_selection(selection)",
      "render.data_frame.update_cell_value(value, *, row, col)",
      "render.data_frame.update_cell_value(value, *, row, col)",
      "render.data_frame.update_data(data)",
      "render.data_frame.update_data(data)",
      "render.data_frame.update_filter(filter)",
      "render.data_frame.update_filter(filter)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fillable(\n    ui.card(\n        ui.layout_column_wrap(\n            ui.input_action_button(\"btn\", \"Filter on columns 0, 1, and 3\"),\n            ui.input_action_button(\"reset\", \"Reset column filters\"),\n            fill=False,\n        ),\n        ui.output_data_frame(\"df\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    data = reactive.value(mtcars.iloc[:, range(4)])\n\n    @render.data_frame\n    def df():\n        return render.DataGrid(data(), filters=True)\n\n    @reactive.effect\n    @reactive.event(input.reset)\n    async def _():\n        await df.update_filter(None)\n\n    @reactive.effect\n    @reactive.event(input.btn)\n    async def _():\n        await df.update_filter(\n            [\n                {\"col\": 0, \"value\": [19, 25]},\n                {\"col\": 1, \"value\": [None, 6]},\n                {\"col\": 3, \"value\": [100, None]},\n            ]\n        )\n\n\napp = App(app_ui, server, debug=True)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n",
      "render.data_frame.update_sort(sort)",
      "render.data_frame.update_sort(sort)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shared import mtcars\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fillable(\n    ui.card(\n        ui.layout_column_wrap(\n            ui.input_action_button(\"btn\", \"Sort on columns 1‚Üë and 3‚Üì\"),\n            ui.input_action_button(\"reset\", \"Reset sorting\"),\n            fill=False,\n        ),\n        ui.output_data_frame(\"df\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    data = reactive.value(mtcars.iloc[:, range(4)])\n\n    @render.data_frame\n    def df():\n        return render.DataGrid(data())\n\n    @reactive.effect\n    @reactive.event(input.reset)\n    async def _():\n        await df.update_sort(None)\n\n    @reactive.effect\n    @reactive.event(input.btn)\n    async def _():\n        await df.update_sort([{\"col\": 1, \"desc\": False}, {\"col\": 3, \"desc\": True}])\n\n\napp = App(app_ui, server, debug=True)\n\n\n## file: mtcars.csv\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n## file: shared.py\nfrom pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\nmtcars = pd.read_csv(app_dir / \"mtcars.csv\")\n\n"
    ]
  },
  {
    "id": "api_render_DataGrid_html",
    "url": "api/render.DataGrid.html",
    "title": "render.datagrid ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.DataGrid\n\nrender.DataGrid\n\nHolds the data and options for a data_frame output, for a spreadsheet-like view.\n\nThis class is used to wrap the returned data frame from a @render.data_frame render function. It allows you to specify options for the data grid, such as the width and height of the grid, whether to show a summary message, whether to show filter inputs, whether the cells are editable, and how the cells are selected.\n\nWhile there are currently no execution or parameter differences between DataGrid and DataTable other than CSS styling in the browser, the two classes are kept separate to allow for future extensibility.\n\nParameters\n\nA pandas, polars, or eager narwhals compatible DataFrame object.\n\nA maximum amount of horizontal space for the data grid to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. The default is fit-content, which sets the grid‚Äôs width according to its contents. Set this to 100% to use the maximum available horizontal space.\n\nA maximum amount of vertical space for the data grid to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the grid will scroll. Set the height to \"auto\" to allow the grid to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).\n\nIf True (the default), shows a message like ‚ÄúViewing rows 1 through 10 of 20‚Äù below the grid when not all of the rows are being shown. If False, the message is not displayed. You can also specify a string template to customize the message, containing {start}, {end}, and {total} tokens. For example: \"Viendo filas {start} a {end} de {total}\".\n\nIf True, shows a row of filter inputs below the headers, one for each column.\n\nIf True, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.\n\nSingle string or a set/list/tuple of string values to define possible ways to select data within the data frame. Supported values: * Use \"none\" to disable any cell selections or editing. * Use \"row\" to allow a single row to be selected at a time. * Use \"rows\" to allow multiple rows to be selected by clicking on them individually. Resolution rules: * If \"none\" is supplied, all other values will be ignored. * If both \"row\" and \"rows\" are supplied, \"row\" will be dropped (supporting \"rows\").\n\nA style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If styles=None, no styling will be applied. Style info object key/value description: * location: This value \"body\" and is not required. * rows: The row numbers to which the style should be applied. If None, the style will be applied to all rows. * cols: The column numbers to which the style should be applied. If None, the style will be applied to all columns. * style: A dictionary of CSS properties and values to apply to the selected rows and columns. Traditional kebab-cased CSS property names (e.g. background-color) will work in addition to camelCased CSS property names (e.g. backgroundColor). * class: A string of CSS class names to apply to the selected rows and columns. If both style and class are missing or None, nothing will be applied. If both rows and cols are missing or None, the style will be applied to the complete data frame.\n\nDeprecated. Please use selection_mode= instead.\n\nReturns\n\nAn object suitable for being returned from a @render.data_frame-decorated output function.\n\nSee Also\n\n- output_data_frame - The UI placeholder for a data frame output.\n- data_frame - The render method for data frames.\n- DataTable - A more tabular view of the data.\n\nExamples\n\nMethods\n\nto_payload\n\nConverts the DataGrid object to a payload dictionary.\n\nReturns\n\nThe payload dictionary representing the DataGrid object.\n\n",
    "code_examples": [
      "render.DataGrid(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height=None,\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "render.DataGrid(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height=None,\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\nimport seaborn as sns\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.head_content(\n        ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\")\n    ),\n    ui.input_select(\n        \"selection_mode\",\n        \"Selection mode\",\n        {\n            \"none\": \"(None)\",\n            \"row\": \"Single row\",\n            \"rows\": \"Multiple rows\",\n        },\n        selected=\"rows\",\n    ),\n    ui.input_switch(\"filters\", \"Filters\", True),\n    ui.input_switch(\"editable\", \"Editable\", True),\n    ui.layout_column_wrap(\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataGrid\")),\n            ui.output_data_frame(\"grid\"),\n        ),\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataTable\")),\n            ui.output_data_frame(\"table\"),\n        ),\n        width=1 / 2,\n    ),\n    class_=\"p-3\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    df: reactive.value[pd.DataFrame] = reactive.value(\n        sns.load_dataset(\"anagrams\").iloc[:, 1:]\n    )\n\n    def update_data_with_patch(patch):\n        df_copy = df().copy()\n        fn = str if patch[\"column_index\"] == 0 else int\n        df_copy.iat[patch[\"row_index\"], patch[\"column_index\"]] = fn(patch[\"value\"])\n        df.set(df_copy)\n\n    height = 350\n    width = \"fit-content\"\n\n    @render.data_frame\n    def grid():\n        return render.DataGrid(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @grid.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n    @render.data_frame\n    def table():\n        return render.DataTable(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @table.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n\napp = App(app_ui, server)\n\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\n\nfrom shiny import App, Inputs, render, ui\n\ngreen_styles = [\n    {\n        \"rows\": [2, 4],\n        \"cols\": [2, 4],\n        \"style\": {\n            \"background-color\": \"mediumspringgreen\",\n            \"width\": \"300px\",\n            \"height\": \"100px\",\n        },\n    }\n]\n\nn = 6\ndf = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n    }\n)\n\nhi_styles = [\n    {\n        # No `rows` or `cols` means apply to all cells\n        \"class\": \"posit-bg\",\n        \"style\": {\n            \"border\": \"transparent\",\n            \"color\": \"transparent\",\n        },\n    },\n    {\n        \"rows\": [3],\n        \"cols\": [2],\n        \"class\": \"posit-blue-bg\",\n        \"style\": {\n            \"width\": \"100px\",\n            \"height\": \"75px\",\n        },\n    },\n    {\n        \"cols\": [1, 3, 5],\n        \"class\": \"posit-blue-bg\",\n    },\n    {\n        \"cols\": [7],\n        \"rows\": [0, 1, 2, 3, 5],\n        \"class\": \"posit-orange-bg\",\n    },\n]\n\nn = 7\nhi_pd = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n        \"f\": range(n * 5, n * 6),\n        \"g\": range(n * 6, n * 7),\n        \"h\": range(n * 7, n * 8),\n        \"i\": range(n * 8, n * 9),\n    }\n)\n\n\napp_ui = ui.page_fillable(\n    ui.h2(\"Data Frame with Styles applied to 4 cells\"),\n    ui.output_data_frame(\"my_df\"),\n    ui.hr(),\n    ui.tags.style(\n        ui.HTML(\n            \"\"\"\n        .posit-bg {\n            background-color: #242a26 ;\n        }\n        .posit-blue-bg {\n            background-color: #447099 ;\n        }\n        .posit-orange-bg {\n            background-color: #ED642F ;\n        }\n        \"\"\"\n        )\n    ),\n    ui.h2(\n        \"Custom styles applied to all cells within a data frame \", ui.HTML(\"&#128075;\")\n    ),\n    ui.output_data_frame(\"hi_df\"),\n)\n\n\ndef server(input: Inputs):\n    @render.data_frame\n    def my_df():\n        return render.DataGrid(\n            df,\n            styles=green_styles,\n        )\n\n    @render.data_frame\n    def hi_df():\n        return render.DataGrid(\n            hi_pd,\n            styles=hi_styles,\n        )\n\n\napp = App(app_ui, server)\n\n",
      "render.DataGrid.to_payload()",
      "render.DataGrid.to_payload()"
    ]
  },
  {
    "id": "api_ui_input_dark_mode_html",
    "url": "api/ui.input_dark_mode.html",
    "title": "ui.input_dark_mode ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_dark_mode\n\nui.input_dark_mode\n\nCreates a dark mode switch input that toggles the app between dark and light modes.\n\nParameters\n\nAn optional ID for the dark mode switch. When included, the current color mode is reported in the value of the input with this ID.\n\nThe initial mode of the dark mode switch. By default or when set to None, the user‚Äôs system settings for the preferred color scheme will be used. Otherwise, set to \"light\" or \"dark\" to force the initial mode.\n\nAdditional attributes to be added to the dark mode switch, such as class_ or style.\n\nReturns\n\nA dark mode toggle switch UI element.\n\nReferences\n\n- https://getbootstrap.com/docs/5.3/customize/color-modes\n\nExamples\n\n",
    "code_examples": [
      "ui.input_dark_mode(id=None, mode=None, **kwargs)",
      "ui.input_dark_mode(id=None, mode=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"One\",\n        ui.layout_sidebar(\n            ui.sidebar(\n                ui.input_slider(\"n\", \"N\", min=0, max=100, value=20),\n            ),\n            ui.output_plot(\"plot\"),\n        ),\n    ),\n    ui.nav_panel(\n        \"Two\",\n        ui.layout_column_wrap(\n            ui.card(\"Second page content.\"),\n            ui.card(\n                ui.card_header(\"Server-side color mode setting\"),\n                ui.input_action_button(\"make_light\", \"Switch to light mode\"),\n                ui.input_action_button(\"make_dark\", \"Switch to dark mode\"),\n            ),\n        ),\n    ),\n    ui.nav_spacer(),\n    ui.nav_control(ui.input_dark_mode(id=\"mode\")),\n    title=\"Shiny Dark Mode\",\n    id=\"page\",\n    fillable=\"One\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.make_light)\n    def _():\n        ui.update_dark_mode(\"light\")\n\n    @reactive.effect\n    @reactive.event(input.make_dark)\n    def _():\n        ui.update_dark_mode(\"dark\")\n\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n\n        # Theme the plot to match light/dark mode\n        fig.patch.set_facecolor(\"none\")\n        ax.set_facecolor(\"none\")\n\n        color_fg = \"black\" if input.mode() == \"light\" else \"silver\"\n        ax.tick_params(axis=\"both\", colors=color_fg)\n        ax.spines[\"bottom\"].set_color(color_fg)\n        ax.spines[\"top\"].set_color(color_fg)\n        ax.spines[\"left\"].set_color(color_fg)\n        ax.spines[\"right\"].set_color(color_fg)\n\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_output_plot_html",
    "url": "api/ui.output_plot.html",
    "title": "ui.output_plot ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_plot\n\nui.output_plot\n\nCreate a output container for a static plot.\n\nPlace a plot result in the user interface. See plot for more details on what types of plots are supported.\n\nParameters\n\nAn output id.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nThe CSS height, e.g. ‚Äò100%‚Äô or ‚Äò600px‚Äô.\n\nIf True, the result is displayed inline.\n\nThis can be a boolean or an object created by click_opts. The default is False, but if you use True (or equivalently, click_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_click(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position.\n\nThis is just like the click parameter, but for double-click events.\n\nSimilar to the click argument, this can be a boolean or an object created by hover_opts. The default is False, but if you use True (or equivalently, hover_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_hover(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, use hover_opts.\n\nSimilar to the click argument, this can be a boolean or an object created by brush_opts. The default is False, but if you use True (or equivalently, brush_opts()), the plot will allow the user to ‚Äúbrush‚Äù in the plotting area, and will send information about the brushed area to the server, and the value will be accessible via input.plot_brush(). Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, use brush_opts. Multiple output_image/output_plot calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.\n\nWhether or not to allow the plot output to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable). If no fill value is provided, it will default to the inverse of inline.\n\nReturns\n\nA UI element\n\nSee Also\n\n- plot\n- output_image\n\nExamples\n\n",
    "code_examples": [
      "ui.output_plot(\n    id,\n    width='100%',\n    height='400px',\n    *,\n    inline=False,\n    click=False,\n    dblclick=False,\n    hover=False,\n    brush=False,\n    fill=MISSING,\n)",
      "ui.output_plot(\n    id,\n    width='100%',\n    height='400px',\n    *,\n    inline=False,\n    click=False,\n    dblclick=False,\n    hover=False,\n    brush=False,\n    fill=MISSING,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\n        \"n\", \"input_slider()\", min=10, max=100, value=50, step=5, animate=True\n    ),\n    ui.output_plot(\"p\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot\n    def p():\n        np.random.seed(19680801)\n        x_rand = 100 + 15 * np.random.randn(437)\n        fig, ax = plt.subplots()\n        ax.hist(x_rand, int(input.n()), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_render_plot_html",
    "url": "api/render.plot.html",
    "title": "render.plot ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.plot\n\nrender.plot\n\nReactively render a plot object as an HTML image.\n\nParameters\n\nAlternative text for the image if it cannot be displayed or viewed (i.e., the user uses a screen reader).\n\nWidth of the plot in pixels. If None or MISSING, the width will be determined by the size of the corresponding output_plot. (You should not need to use this argument in most Shiny apps‚Äìset the desired width on output_plot instead.)\n\nHeight of the plot in pixels. If None or MISSING, the height will be determined by the size of the corresponding output_plot. (You should not need to use this argument in most Shiny apps‚Äìset the desired height on output_plot instead.)\n\nAdditional keyword arguments passed to the relevant method for saving the image (e.g., for matplotlib, arguments to savefig(); for PIL and plotnine, arguments to save()).\n\nReturns\n\nA decorator for a function that returns any of the following: 1. A matplotlib.figure.Figure instance. 2. An matplotlib.artist.Artist instance. 3. A list/tuple of Figure/Artist instances. 4. An object with a ‚Äòfigure‚Äô attribute pointing to a matplotlib.figure.Figure instance. 5. A PIL.Image.Image instance.\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_plot container (see output_plot for example usage).\n\nSee Also\n\n- output_plot\n- image\n\nExamples\n\n",
    "code_examples": [
      "render.plot(\n    self,\n    _fn=None,\n    *,\n    alt=None,\n    width=MISSING,\n    height=MISSING,\n    **kwargs,\n)",
      "render.plot(\n    self,\n    _fn=None,\n    *,\n    alt=None,\n    width=MISSING,\n    height=MISSING,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\n        \"n\", \"input_slider()\", min=10, max=100, value=50, step=5, animate=True\n    ),\n    ui.output_plot(\"p\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot\n    def p():\n        np.random.seed(19680801)\n        x_rand = 100 + 15 * np.random.randn(437)\n        fig, ax = plt.subplots()\n        ax.hist(x_rand, int(input.n()), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "docs_reactive-programming_html",
    "url": "docs/reactive-programming.html",
    "title": "Redirect",
    "description": "",
    "content": "",
    "code_examples": []
  },
  {
    "id": "docs_ipywidgets_html",
    "url": "docs/ipywidgets.html",
    "title": "Redirect",
    "description": "",
    "content": "",
    "code_examples": []
  },
  {
    "id": "templates_dashboard_index_html",
    "url": "templates/dashboard/index.html",
    "title": "Shiny for Python ‚Äì Basic dashboard",
    "description": "Use the dashboard template as a foundation for your next Shiny app.",
    "content": "Back to Templates\n\nBasic dashboard\n\n- Express\n- Core\n\nA basic dashboard with input filters, value boxes, a plot, and table. This particular dashboard visualizes the palmerpenguins dataset. In addition to demonstrating the basics visual components of a dashboard, it also demonstrates how to leverage reactive calculations to filter the data once and use it as needed in multiple places.\n\nComponents:\n\n- Slider input\n- Checkbox group input\n- Value box\n- Plot output\n- Data grid output\n\nLayouts:\n\n- Sidebar\n- Grid layout\n- Cards\n\nPackages:\n\n- faicons\n- pandas\n- seaborn\n\n",
    "code_examples": [
      "shiny create --template dashboard --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template dashboard --mode express --github posit-dev/py-shiny-templates",
      "shiny create --template dashboard --mode core --github posit-dev/py-shiny-templates",
      "shiny create --template dashboard --mode core --github posit-dev/py-shiny-templates"
    ]
  },
  {
    "id": "api_ui_input_action_button_html",
    "url": "api/ui.input_action_button.html",
    "title": "ui.input_action_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_action_button\n\nui.input_action_button\n\nCreates an action button whose value is initially zero, and increments by one each time it is pressed.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nIf True, the button will not be clickable. Use update_action_button to dynamically enable/disable the button.\n\nAttributes to be applied to the button.\n\nReturns\n\nA UI element\n\nNotes\n\nAn integer representing the number of clicks.\n\nSee Also\n\n- update_action_button\n- input_action_link\n- event\n\nExamples\n\n",
    "code_examples": [
      "ui.input_action_button(\n    id,\n    label,\n    *,\n    icon=None,\n    width=None,\n    disabled=False,\n    **kwargs,\n)",
      "ui.input_action_button(\n    id,\n    label,\n    *,\n    icon=None,\n    width=None,\n    disabled=False,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500),\n    ui.input_action_button(\"go\", \"Go!\", class_=\"btn-success\"),\n    ui.output_plot(\"plot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    # Use reactive.event() to invalidate the plot only when the button is pressed\n    # (not when the slider is changed)\n    @reactive.event(input.go, ignore_none=False)\n    def plot():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(input.n())\n        fig, ax = plt.subplots()\n        ax.hist(x, bins=30, density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"name\", \"Your Name\"),\n    ui.input_action_button(\"greet\", \"Say Hello\", disabled=True),\n    ui.output_ui(\"hello\"),\n)\n\n\ndef server(input: Inputs):\n    @reactive.effect\n    @reactive.event(input.name)\n    def set_button_state():\n        if input.name():\n            ui.update_action_button(\"greet\", disabled=False)\n        else:\n            ui.update_action_button(\"greet\", disabled=True)\n\n    @render.ui\n    @reactive.event(input.greet)\n    def hello():\n        return ui.p(f\"Hello, {input.name()}!\", class_=\"fs-1 text-primary mt-3\")\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_reactive_event_html",
    "url": "api/reactive.event.html",
    "title": "reactive.event ‚Äì Shiny for Python",
    "description": "",
    "content": "- Reactive programming\n- reactive.event\n\nreactive.event\n\nMark a function to react only when an \"event\" occurs.\n\nShiny's reactive programming framework is primarily designed for calculated values (calc) and side-effect-causing actions (effect) that respond to any of their inputs changing. That's often what is desired in Shiny apps, but not always: sometimes you want to wait for a specific action to be taken from the user, like clicking an input_action_button, before calculating or taking an action. You do not want the calculation or action to be prematurely triggered if other reactive values that it calls are invalidated. The reactive value (or function) which triggers other calculations or actions in this way is called an event.\n\nThese situations demand a more imperative, \"event handling\" style of programming, which @reactive.event() provides. It does this by using the isolate primitive under-the-hood to essentially \"limit\" the set of reactive dependencies to those in args. In other words, the event can call as many reactive values as it likes in its code body without taking a reactive dependency on them; it will be invalidated only when a dependency listed in args is invalidated.\n\nParameters\n\nOne or more callables that represent the event; most likely this will be a reactive input value linked to a input_action_button or similar (e.g., input.click), but it can also be a (reactive or non-reactive) function that returns a value.\n\nWhether to ignore the event if the value is None or 0.\n\nIf False, the event triggers on the first run.\n\nReturns\n\nA decorator that marks a function as an event handler.\n\nTip\n\nThis decorator must be applied before the relevant reactivity decorator (i.e., @reactive.event must be applied before @reactive.effect, @reactive.calc, @render.ui, etc).\n\nExamples\n\n",
    "code_examples": [
      "reactive.event(*args, ignore_none=True, ignore_init=False)",
      "reactive.event(*args, ignore_none=True, ignore_init=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport random\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.markdown(\n        f\"\"\"\n        This example demonstrates how `@reactive.event()` can be used to restrict\n        execution of: (1) a `@render` function, (2) `@reactive.calc`, or (3)\n        `@reactive.effect`.\n\n        In all three cases, the output is dependent on a random value that gets updated\n        every 0.5 seconds (currently, it is {ui.output_ui(\"number\", inline=True)}), but\n        the output is only updated when the button is clicked.\n        \"\"\"\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.input_action_button(\"btn_out\", \"(1) Update number\"),\n            ui.output_text(\"out_out\"),\n        ),\n        ui.column(\n            3,\n            ui.input_action_button(\"btn_calc\", \"(2) Show 1 / number\"),\n            ui.output_text(\"out_calc\"),\n        ),\n        ui.column(\n            3,\n            ui.input_action_button(\"btn_effect\", \"(3) Log number\"),\n            ui.div(id=\"out_effect\"),\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Update a random number every second\n    val = reactive.value(random.randint(0, 1000))\n\n    @reactive.effect\n    def _():\n        reactive.invalidate_later(0.5)\n        val.set(random.randint(0, 1000))\n\n    # Always update this output when the number is updated\n    @render.ui\n    def number():\n        return val.get()\n\n    # Since ignore_none=False, the function executes before clicking the button.\n    # (input.btn_out() is 0 on page load, but @@reactive.event() treats 0 as None for\n    # action buttons.)\n    @render.text\n    @reactive.event(input.btn_out, ignore_none=False)\n    def out_out():\n        return str(val.get())\n\n    @reactive.calc\n    @reactive.event(input.btn_calc)\n    def calc():\n        return 1 / val.get()\n\n    @render.text\n    def out_calc():\n        return str(calc())\n\n    @reactive.effect\n    @reactive.event(input.btn_effect)\n    def _():\n        ui.insert_ui(\n            ui.p(\"Random number!\", val.get()),\n            selector=\"#out_effect\",\n            where=\"afterEnd\",\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_action_link_html",
    "url": "api/ui.input_action_link.html",
    "title": "ui.input_action_link ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_action_link\n\nui.input_action_link\n\nCreates a link whose value is initially zero, and increments by one each time it is pressed.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nAttributes to be applied to the link.\n\nReturns\n\nA UI element\n\nNotes\n\nAn integer representing the number of clicks.\n\nSee Also\n\n- update_action_link\n- input_action_button\n- event\n\nExamples\n\n",
    "code_examples": [
      "ui.input_action_link(id, label, *, icon=None, **kwargs)",
      "ui.input_action_link(id, label, *, icon=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500),\n    ui.input_action_link(\"go\", \"Go!\"),\n    ui.output_plot(\"plot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    # reactive.event() to invalidate the plot when the button is pressed but not when\n    # the slider is changed\n    @reactive.event(input.go, ignore_none=False)\n    def plot():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(input.n())\n        fig, ax = plt.subplots()\n        ax.hist(x, bins=30, density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_checkbox_html",
    "url": "api/ui.input_checkbox.html",
    "title": "ui.input_checkbox ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_checkbox\n\nui.input_checkbox\n\nCreate a checkbox that can be used to specify logical values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nReturns\n\nA UI element.\n\nNotes\n\nTrue if checked, False otherwise.\n\nSee Also\n\n- input_switch\n- update_checkbox\n- input_checkbox_group\n- input_radio_buttons\n\nExamples\n\n",
    "code_examples": [
      "ui.input_checkbox(id, label, value=False, *, width=None)",
      "ui.input_checkbox(id, label, value=False, *, width=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"somevalue\", \"Some value\", False),\n    ui.output_ui(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    def value():\n        return input.somevalue()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_checkbox_group_html",
    "url": "api/ui.input_checkbox_group.html",
    "title": "ui.input_checkbox_group ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_checkbox_group\n\nui.input_checkbox_group\n\nCreate a group of checkboxes that can be used to toggle multiple choices independently.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\nThe values that should be initially selected, if any.\n\nIf True, the result is displayed inline.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nReturns\n\nA UI element.\n\nNotes\n\nA tuple of string(s) with the selected value(s) (if any).\n\nSee Also\n\n- update_checkbox_group\n- input_checkbox\n- input_radio_buttons\n\nExamples\n\n",
    "code_examples": [
      "ui.input_checkbox_group(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "ui.input_checkbox_group(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, req, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox_group(\n        \"colors\",\n        \"Choose color(s):\",\n        {\n            \"red\": ui.span(\"Red\", style=\"color: #FF0000;\"),\n            \"green\": ui.span(\"Green\", style=\"color: #00AA00;\"),\n            \"blue\": ui.span(\"Blue\", style=\"color: #0000AA;\"),\n        },\n    ),\n    ui.output_ui(\"val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    def val():\n        req(input.colors())\n        return \"You chose \" + \", \".join(input.colors())\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_date_range_html",
    "url": "api/ui.input_date_range.html",
    "title": "ui.input_date_range ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_date_range\n\nui.input_date_range\n\nCreates a pair of text inputs which, when clicked on, bring up calendars that the user can click on to select dates.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe initial start date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe initial end date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe minimum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe maximum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe format of the date to display in the browser.\n\nThe date range shown when the input object is first clicked. Can be ‚Äúmonth‚Äù (the default), ‚Äúyear‚Äù, or ‚Äúdecade‚Äù.\n\nWhich day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).\n\nThe language used for month and day names. Default is ‚Äúen‚Äù. Other valid values include ‚Äúar‚Äù, ‚Äúaz‚Äù, ‚Äúbg‚Äù, ‚Äúbs‚Äù, ‚Äúca‚Äù, ‚Äúcs‚Äù, ‚Äúcy‚Äù, ‚Äúda‚Äù, ‚Äúde‚Äù, ‚Äúel‚Äù, ‚Äúen-AU‚Äù, ‚Äúen-GB‚Äù, ‚Äúeo‚Äù, ‚Äúes‚Äù, ‚Äúet‚Äù, ‚Äúeu‚Äù, ‚Äúfa‚Äù, ‚Äúfi‚Äù, ‚Äúfo‚Äù, ‚Äúfr-CH‚Äù, ‚Äúfr‚Äù, ‚Äúgl‚Äù, ‚Äúhe‚Äù, ‚Äúhr‚Äù, ‚Äúhu‚Äù, ‚Äúhy‚Äù, ‚Äúid‚Äù, ‚Äúis‚Äù, ‚Äúit-CH‚Äù, ‚Äúit‚Äù, ‚Äúja‚Äù, ‚Äúka‚Äù, ‚Äúkh‚Äù, ‚Äúkk‚Äù, ‚Äúko‚Äù, ‚Äúkr‚Äù, ‚Äúlt‚Äù, ‚Äúlv‚Äù, ‚Äúme‚Äù, ‚Äúmk‚Äù, ‚Äúmn‚Äù, ‚Äúms‚Äù, ‚Äúnb‚Äù, ‚Äúnl-BE‚Äù, ‚Äúnl‚Äù, ‚Äúno‚Äù, ‚Äúpl‚Äù, ‚Äúpt-BR‚Äù, ‚Äúpt‚Äù, ‚Äúro‚Äù, ‚Äúrs-latin‚Äù, ‚Äúrs‚Äù, ‚Äúru‚Äù, ‚Äúsk‚Äù, ‚Äúsl‚Äù, ‚Äúsq‚Äù, ‚Äúsr-latin‚Äù, ‚Äúsr‚Äù, ‚Äúsv‚Äù, ‚Äúsw‚Äù, ‚Äúth‚Äù, ‚Äútr‚Äù, ‚Äúuk‚Äù, ‚Äúvi‚Äù, ‚Äúzh-CN‚Äù, and ‚Äúzh-TW‚Äù.\n\nString to display between the start and end input boxes.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhether or not to close the datepicker immediately when a date is selected.\n\nReturns\n\nA UI element.\n\nNote\n\nThe date format string specifies how the date will be displayed in the browser. It allows the following values:\n\n- yy: Year without century (12)\n- yyyy: Year with century (2012)\n- mm: Month number, with leading zero (01-12)\n- m: Month number, without leading zero (1-12)\n- M: Abbreviated month name\n- MM: Full month name\n- dd: Day of month with leading zero\n- d: Day of month without leading zero\n- D: Abbreviated weekday name\n- DD: Full weekday name\n\nNotes\n\nA tuple of date objects.\n\nSee Also\n\n- update_date_range\n- input_date\n\nExamples\n\n",
    "code_examples": [
      "ui.input_date_range(\n    id,\n    label,\n    *,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    separator=' to ',\n    width=None,\n    autoclose=True,\n)",
      "ui.input_date_range(\n    id,\n    label,\n    *,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    separator=' to ',\n    width=None,\n    autoclose=True,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import date\n\nfrom shiny import App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(\n    # Default start and end is the current date in the client's time zone\n    ui.input_date_range(\"daterange1\", \"Date range:\"),\n    # Set start and end dates\n    ui.input_date_range(\n        \"daterange2\", \"Set start and end date:\", start=\"2001-01-01\", end=\"2010-12-31\"\n    ),\n    # Start and end are always specified in yyyy-mm-dd, even if the display\n    # format is different\n    ui.input_date_range(\n        \"daterange3\",\n        \"Min, max, start, and end dates are set with custom format and separator:\",\n        start=\"2001-01-01\",\n        end=\"2010-12-31\",\n        min=\"2001-01-01\",\n        max=\"2012-12-21\",\n        format=\"mm/dd/yy\",\n        separator=\" - \",\n    ),\n    # Pass in Date objects\n    ui.input_date_range(\n        \"daterange4\",\n        \"Default start and end use date objects:\",\n        start=date(2001, 1, 1),\n        end=date(2010, 12, 31),\n    ),\n    # Use different language and different first day of week\n    ui.input_date_range(\n        \"daterange5\",\n        \"Language is German and we starts on Monday:\",\n        language=\"de\",\n        weekstart=1,\n    ),\n    # Start with decade view instead of default month view\n    ui.input_date_range(\n        \"daterange6\", \"Start Date picker in Decade view:\", startview=\"decade\"\n    ),\n    # Set width of the daterange field\n    ui.input_date_range(\"daterange7\", \"Set width of text input:\", width=\"600px\"),\n    # Set autoclose to false\n    ui.input_date_range(\"daterange8\", \"Auto close is disabled:\", autoclose=False),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_date_html",
    "url": "api/ui.input_date.html",
    "title": "ui.input_date ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_date\n\nui.input_date\n\nCreates a text input which, when clicked on, brings up a calendar that the user can click on to select dates.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe starting date. Either a date object, or a string in yyyy-mm-dd format. If None (the default), will use the current date in the client‚Äôs time zone.\n\nThe minimum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe maximum allowed date. Either a date object, or a string in yyyy-mm-dd format.\n\nThe format of the date to display in the browser. Defaults to \"yyyy-mm-dd\".\n\nThe date range shown when the input object is first clicked. Can be ‚Äúmonth‚Äù (the default), ‚Äúyear‚Äù, or ‚Äúdecade‚Äù.\n\nWhich day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).\n\nThe language used for month and day names. Default is ‚Äúen‚Äù. Other valid values include ‚Äúar‚Äù, ‚Äúaz‚Äù, ‚Äúbg‚Äù, ‚Äúbs‚Äù, ‚Äúca‚Äù, ‚Äúcs‚Äù, ‚Äúcy‚Äù, ‚Äúda‚Äù, ‚Äúde‚Äù, ‚Äúel‚Äù, ‚Äúen-AU‚Äù, ‚Äúen-GB‚Äù, ‚Äúeo‚Äù, ‚Äúes‚Äù, ‚Äúet‚Äù, ‚Äúeu‚Äù, ‚Äúfa‚Äù, ‚Äúfi‚Äù, ‚Äúfo‚Äù, ‚Äúfr-CH‚Äù, ‚Äúfr‚Äù, ‚Äúgl‚Äù, ‚Äúhe‚Äù, ‚Äúhr‚Äù, ‚Äúhu‚Äù, ‚Äúhy‚Äù, ‚Äúid‚Äù, ‚Äúis‚Äù, ‚Äúit-CH‚Äù, ‚Äúit‚Äù, ‚Äúja‚Äù, ‚Äúka‚Äù, ‚Äúkh‚Äù, ‚Äúkk‚Äù, ‚Äúko‚Äù, ‚Äúkr‚Äù, ‚Äúlt‚Äù, ‚Äúlv‚Äù, ‚Äúme‚Äù, ‚Äúmk‚Äù, ‚Äúmn‚Äù, ‚Äúms‚Äù, ‚Äúnb‚Äù, ‚Äúnl-BE‚Äù, ‚Äúnl‚Äù, ‚Äúno‚Äù, ‚Äúpl‚Äù, ‚Äúpt-BR‚Äù, ‚Äúpt‚Äù, ‚Äúro‚Äù, ‚Äúrs-latin‚Äù, ‚Äúrs‚Äù, ‚Äúru‚Äù, ‚Äúsk‚Äù, ‚Äúsl‚Äù, ‚Äúsq‚Äù, ‚Äúsr-latin‚Äù, ‚Äúsr‚Äù, ‚Äúsv‚Äù, ‚Äúsw‚Äù, ‚Äúth‚Äù, ‚Äútr‚Äù, ‚Äúuk‚Äù, ‚Äúvi‚Äù, ‚Äúzh-CN‚Äù, and ‚Äúzh-TW‚Äù.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhether or not to close the datepicker immediately when a date is selected.\n\nWhich dates should be disabled (in yyyy-mm-dd format).\n\nDays of the week that should be disabled. Should be a integer vector with values from 0 (Sunday) to 6 (Saturday).\n\nReturns\n\nA UI element.\n\nNote\n\nThe date format string specifies how the date will be displayed in the browser. It allows the following values:\n\n- yy: Year without century (12)\n- yyyy: Year with century (2012)\n- mm: Month number, with leading zero (01-12)\n- m: Month number, without leading zero (1-12)\n- M: Abbreviated month name\n- MM: Full month name\n- dd: Day of month with leading zero\n- d: Day of month without leading zero\n- D: Abbreviated weekday name\n- DD: Full weekday name\n\nNotes\n\nA date object.\n\nSee Also\n\n- update_date\n- input_date_range\n\nExamples\n\n",
    "code_examples": [
      "ui.input_date(\n    id,\n    label,\n    *,\n    value=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    width=None,\n    autoclose=True,\n    datesdisabled=None,\n    daysofweekdisabled=None,\n)",
      "ui.input_date(\n    id,\n    label,\n    *,\n    value=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    width=None,\n    autoclose=True,\n    datesdisabled=None,\n    daysofweekdisabled=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom datetime import date\n\nfrom shiny import App, Inputs, Outputs, Session, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date(\"date1\", \"Has default date:\", value=\"2016-02-29\"),\n    # Default value is the date in client's time zone\n    ui.input_date(\"date2\", \"Client's current date:\"),\n    # value is always yyyy-mm-dd, even if the display format is different\n    ui.input_date(\"date3\", \"Format mm/dd/yy:\", value=\"2016-02-29\", format=\"mm/dd/yy\"),\n    # Pass in a Date object\n    ui.input_date(\"date4\", \"Default uses date object:\", value=date(2016, 2, 29)),\n    # Use different language and different first day of week\n    ui.input_date(\n        \"date5\",\n        \"Language is German and the week starts on Monday:\",\n        language=\"ru\",\n        weekstart=1,\n    ),\n    # Start with decade view instead of default month view\n    ui.input_date(\"date6\", \"Start Date picker in Decade view:\", startview=\"decade\"),\n    # Disable Mondays and Tuesdays.\n    ui.input_date(\"date7\", \"Disable Monday and Tuesday:\", daysofweekdisabled=[1, 2]),\n    # Disable specific dates.\n    ui.input_date(\n        \"date8\",\n        \"Disable specific dates:\",\n        value=\"2016-02-29\",\n        datesdisabled=[\"2016-03-01\", \"2016-03-02\"],\n    ),\n    # Set min and max dates.\n    ui.input_date(\n        \"date9\",\n        \"Set min and max dates:\",\n        value=\"2016-02-03\",\n        min=\"2016-02-01\",\n        max=\"2016-02-29\",\n    ),\n    # Set width of the date field\n    ui.input_date(\"date10\", \"Set width of text input:\", width=\"600px\"),\n    # Set autoclose to false\n    ui.input_date(\"date11\", \"Auto close is disabled:\", autoclose=False),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    pass\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_numeric_html",
    "url": "api/ui.input_numeric.html",
    "title": "ui.input_numeric ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_numeric\n\nui.input_numeric\n\nCreate an input control for entry of numeric values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nInterval to use when stepping between min and max.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Enter is pressed.\n\nReturns\n\nA UI element.\n\nNotes\n\nA numeric value.\n\nSee Also\n\n- update_numeric\n\nExamples\n\n",
    "code_examples": [
      "ui.input_numeric(\n    id,\n    label,\n    value,\n    *,\n    min=None,\n    max=None,\n    step=None,\n    width=None,\n    update_on='change',\n)",
      "ui.input_numeric(\n    id,\n    label,\n    value,\n    *,\n    min=None,\n    max=None,\n    step=None,\n    width=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"obs\", \"Observations:\", 10, min=1, max=100),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return input.obs()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_password_html",
    "url": "api/ui.input_password.html",
    "title": "ui.input_password ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_password\n\nui.input_password\n\nCreate an password control for entry of passwords.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nThe placeholder of the input.\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Enter is pressed.\n\nReturns\n\nA UI element.\n\nNotes\n\nA string of the password input. The default value is unless value is provided.\n\nSee Also\n\n- update_text\n\nExamples\n\n",
    "code_examples": [
      "ui.input_password(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    update_on='change',\n)",
      "ui.input_password(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_password(\"password\", \"Password:\"),\n    ui.input_action_button(\"go\", \"Go\"),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    @reactive.event(input.go)\n    def value():\n        return input.password()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_radio_buttons_html",
    "url": "api/ui.input_radio_buttons.html",
    "title": "ui.input_radio_buttons ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_radio_buttons\n\nui.input_radio_buttons\n\nCreate a set of radio buttons used to select an item from a list.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\nThe values that should be initially selected, if any.\n\nIf True, the result is displayed inline.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nReturns\n\nA UI element\n\nNotes\n\nA string with the selected value.\n\nSee Also\n\n- update_radio_buttons\n- input_checkbox_group\n- input_checkbox\n\nExamples\n\n",
    "code_examples": [
      "ui.input_radio_buttons(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "ui.input_radio_buttons(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(\n        \"rb\",\n        \"Choose one:\",\n        {\n            \"html\": ui.HTML(\"<span style='color:red;'>Red Text</span>\"),\n            \"text\": \"Normal text\",\n        },\n    ),\n    ui.output_ui(\"val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    def val():\n        return \"You chose \" + input.rb()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_select_html",
    "url": "api/ui.input_select.html",
    "title": "ui.input_select ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_select\n\nui.input_select\n\nCreate a select list that can be used to choose a single or multiple items from a list of values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\n\nThe values that should be initially selected, if any.\n\nIs selection of multiple items allowed?\n\nWhether to use selectize.js or not.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nNumber of items to show in the selection box; a larger number will result in a taller box. Normally, when multiple=False, a select input will be a drop-down list, but when size is set, it will be a box instead.\n\nReturns\n\nA UI element.\n\nNotes\n\nIf multiple=False, the server value is a string with the value of the selected item. If multiple=True, the server value is a tuple containing the values of the selected items. When multiple=True and nothing is selected, this value will be None.\n\nSee Also\n\n- input_selectize\n- update_select\n- input_radio_buttons\n- input_checkbox_group\n\nExamples\n\n",
    "code_examples": [
      "ui.input_select(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    selectize=False,\n    width=None,\n    size=None,\n    remove_button=None,\n    options=None,\n)",
      "ui.input_select(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    selectize=False,\n    width=None,\n    size=None,\n    remove_button=None,\n    options=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(\n        \"state\",\n        \"Choose a state:\",\n        {\n            \"East Coast\": {\"NY\": \"New York\", \"NJ\": \"New Jersey\", \"CT\": \"Connecticut\"},\n            \"West Coast\": {\"WA\": \"Washington\", \"OR\": \"Oregon\", \"CA\": \"California\"},\n            \"Midwest\": {\"MN\": \"Minnesota\", \"WI\": \"Wisconsin\", \"IA\": \"Iowa\"},\n        },\n    ),\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return \"You choose: \" + str(input.state())\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_selectize_html",
    "url": "api/ui.input_selectize.html",
    "title": "ui.input_selectize ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_selectize\n\nui.input_selectize\n\nCreate a select list that can be used to choose a single or multiple items from a list of values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nEither a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as <optgroup> labels.\n\nThe values that should be initially selected, if any.\n\nIs selection of multiple items allowed?\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nWhether to add a remove button. This uses the clear_button and remove_button selectize plugins which can also be supplied as options. By default it will apply a remove button to multiple selections, but not single selections.\n\nA dictionary of options. See the documentation of selectize.js for possible options. If you want to pass a JavaScript function, wrap the string in ui.JS.\n\nReturns\n\nA UI element.\n\nNotes\n\nIf multiple=False, the server value is a string with the value of the selected item. If multiple=True, the server value is a tuple containing the values of the selected items. When multiple=True and nothing is selected, this value will be None.\n\nSee Also\n\n- input_select\n- input_radio_buttons\n- input_checkbox_group\n\nExamples\n\n",
    "code_examples": [
      "ui.input_selectize(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    width=None,\n    remove_button=None,\n    options=None,\n)",
      "ui.input_selectize(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    width=None,\n    remove_button=None,\n    options=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom html import escape  # noqa: F401\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\nstates = {\n    \"East Coast\": {\"NY\": \"New York\", \"NJ\": \"New Jersey\", \"CT\": \"Connecticut\"},\n    \"West Coast\": {\"WA\": \"Washington\", \"OR\": \"Oregon\", \"CA\": \"California\"},\n    \"Midwest\": {\"MN\": \"Minnesota\", \"WI\": \"Wisconsin\", \"IA\": \"Iowa\"},\n}\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(\n        \"state\",\n        \"Choose a state:\",\n        states,\n        multiple=True,\n    ),\n    ui.output_text(\"value\"),\n    ui.input_selectize(\n        \"state2\",\n        \"Selectize Options\",\n        states,\n        multiple=True,\n        options=(\n            {\n                \"placeholder\": \"Enter text\",\n                \"render\": ui.js_eval(\n                    '{option: function(item, escape) {return \"<div><strong>Select \" + escape(item.label) + \"</strong></div>\";}}'\n                ),\n                \"create\": True,\n            }\n        ),\n    ),\n    ui.input_selectize(\n        \"state3\",\n        \"Selectize plugins\",\n        states,\n        multiple=True,\n        options={\"plugins\": [\"clear_button\"]},\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return \"You choose: \" + str(input.state())\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_slider_html",
    "url": "api/ui.input_slider.html",
    "title": "ui.input_slider ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_slider\n\nui.input_slider\n\nConstructs a slider widget to select a number, date, or date-time from a range.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nThe minimum allowed value.\n\nThe maximum allowed value.\n\nInitial value.\n\nInterval to use when stepping between min and max.\n\nFalse to hide tick marks, True to show them according to some simple heuristics.\n\nTrue to show simple animation controls with default settings; False not to; or a custom settings list, such as those created using AnimationOptions.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nSeparator between thousands places in numbers.\n\nA prefix string to put in front of the value.\n\nA suffix string to put after the value.\n\nOnly used if the slider values are date or datetime objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is ‚Äú%F‚Äù (like ‚Äú2015-07-01‚Äù), and for Datetimes, the default is ‚Äú%F %T‚Äù (like ‚Äú2015-07-01 15:32:10‚Äù).\n\nOnly used if the values are datetime objects. A string specifying the time zone offset for the displayed times, in the format ‚Äú+HHMM‚Äù or ‚Äú-HHMM‚Äù. If None (the default), times will be displayed in the browser‚Äôs time zone. The value ‚Äú+0000‚Äù will result in UTC time.\n\nThis option is used only if it is a range slider (with two values). If True (the default), the range can be dragged. In other words, the min and max can be dragged together. If False, the range cannot be dragged.\n\nReturns\n\nA UI element\n\nNotes\n\nA number, date, or date-time (depending on the class of value), or in the case of slider range, a tuple of two numbers/dates/date-times.\n\nSee Also\n\n- update_slider\n\nExamples\n\n",
    "code_examples": [
      "ui.input_slider(\n    id,\n    label,\n    min,\n    max,\n    value,\n    *,\n    step=None,\n    ticks=False,\n    animate=False,\n    width=None,\n    sep=',',\n    pre=None,\n    post=None,\n    time_format=None,\n    timezone=None,\n    drag_range=True,\n)",
      "ui.input_slider(\n    id,\n    label,\n    min,\n    max,\n    value,\n    *,\n    step=None,\n    ticks=False,\n    animate=False,\n    width=None,\n    sep=',',\n    pre=None,\n    post=None,\n    time_format=None,\n    timezone=None,\n    drag_range=True,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"obs\", \"Number of bins:\", min=10, max=100, value=30),\n    ui.output_plot(\"distPlot\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot\n    def distPlot():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.obs(), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_render_DataTable_html",
    "url": "api/render.DataTable.html",
    "title": "render.datatable ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.DataTable\n\nrender.DataTable\n\nHolds the data and options for a data_frame output, for a spreadsheet-like view.\n\nThis class is used to wrap the returned data frame from a @render.data_frame render function. It allows you to specify options for the data table, such as the width and height of the table, whether to show a summary message, whether to show filter inputs, whether the cells are editable, and how the cells are selected.\n\nWhile there are currently no execution or parameter differences between DataGrid and DataTable other than CSS styling in the browser, the two classes are kept separate to allow for future extensibility.\n\nParameters\n\nA pandas, polars, or eager narwhals compatible DataFrame object.\n\nA maximum amount of vertical space for the data table to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. The default is fit-content, which sets the table‚Äôs width according to its contents. Set this to 100% to use the maximum available horizontal space.\n\nA maximum amount of vertical space for the data table to occupy, in CSS units (e.g. \"400px\") or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the table body will scroll. Set the height to None to allow the table to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).\n\nIf True (the default), shows a message like ‚ÄúViewing rows 1 through 10 of 20‚Äù below the grid when not all of the rows are being shown. If False, the message is not displayed. You can also specify a string template to customize the message, containing {start}, {end}, and {total} tokens. For example: \"Viendo filas {start} a {end} de {total}\".\n\nIf True, shows a row of filter inputs below the headers, one for each column.\n\nIf True, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.\n\nSingle string or a set/list/tuple of string values to define possible ways to select data within the data frame. Supported values: * Use \"none\" to disable any cell selections or editing. * Use \"row\" to allow a single row to be selected at a time. * Use \"rows\" to allow multiple rows to be selected by clicking on them individually. Resolution rules: * If \"none\" is supplied, all other values will be ignored. * If both \"row\" and \"rows\" are supplied, \"row\" will be dropped (supporting \"rows\").\n\nA style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If styles=None, no styling will be applied. Style info object key/value description: * location: This value \"body\" and is not required. * rows: The row numbers to which the style should be applied. If None, the style will be applied to all rows. * cols: The column numbers to which the style should be applied. If None, the style will be applied to all columns. * style: A dictionary of CSS properties and values to apply to the selected rows and columns. Traditional kebab-cased CSS property names (e.g. background-color) will work in addition to camelCased CSS property names (e.g. backgroundColor). * class: A string of CSS class names to apply to the selected rows and columns. If both style and class are missing or None, nothing will be applied. If both rows and cols are missing or None, the style will be applied to the complete data frame.\n\nDeprecated. Please use mode={row_selection_mode}_row instead.\n\nReturns\n\nAn object suitable for being returned from a @render.data_frame-decorated output function.\n\nSee Also\n\n- output_data_frame - The UI placeholder for a data frame output.\n- data_frame - The render method for data frames.\n- DataTable - A more grid view of the data.\n\nExamples\n\nMethods\n\nto_payload\n\nConverts the DataTable object to a payload dictionary.\n\nReturns\n\nThe payload dictionary representing the DataTable object.\n\n",
    "code_examples": [
      "render.DataTable(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height='500px',\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "render.DataTable(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height='500px',\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\nimport seaborn as sns\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.head_content(\n        ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\")\n    ),\n    ui.input_select(\n        \"selection_mode\",\n        \"Selection mode\",\n        {\n            \"none\": \"(None)\",\n            \"row\": \"Single row\",\n            \"rows\": \"Multiple rows\",\n        },\n        selected=\"rows\",\n    ),\n    ui.input_switch(\"filters\", \"Filters\", True),\n    ui.input_switch(\"editable\", \"Editable\", True),\n    ui.layout_column_wrap(\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataGrid\")),\n            ui.output_data_frame(\"grid\"),\n        ),\n        ui.card(\n            ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataTable\")),\n            ui.output_data_frame(\"table\"),\n        ),\n        width=1 / 2,\n    ),\n    class_=\"p-3\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    df: reactive.value[pd.DataFrame] = reactive.value(\n        sns.load_dataset(\"anagrams\").iloc[:, 1:]\n    )\n\n    def update_data_with_patch(patch):\n        df_copy = df().copy()\n        fn = str if patch[\"column_index\"] == 0 else int\n        df_copy.iat[patch[\"row_index\"], patch[\"column_index\"]] = fn(patch[\"value\"])\n        df.set(df_copy)\n\n    height = 350\n    width = \"fit-content\"\n\n    @render.data_frame\n    def grid():\n        return render.DataGrid(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @grid.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n    @render.data_frame\n    def table():\n        return render.DataTable(\n            df(),\n            width=width,\n            height=height,\n            filters=input.filters(),\n            editable=input.editable(),\n            selection_mode=input.selection_mode(),\n        )\n\n    @table.set_patch_fn\n    def _(*, patch: render.CellPatch):\n        update_data_with_patch(patch)\n        return patch[\"value\"]\n\n\napp = App(app_ui, server)\n\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport pandas as pd\n\nfrom shiny import App, Inputs, render, ui\n\ngreen_styles = [\n    {\n        \"rows\": [2, 4],\n        \"cols\": [2, 4],\n        \"style\": {\n            \"background-color\": \"mediumspringgreen\",\n            \"width\": \"300px\",\n            \"height\": \"100px\",\n        },\n    }\n]\n\nn = 6\ndf = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n    }\n)\n\nhi_styles = [\n    {\n        # No `rows` or `cols` means apply to all cells\n        \"class\": \"posit-bg\",\n        \"style\": {\n            \"border\": \"transparent\",\n            \"color\": \"transparent\",\n        },\n    },\n    {\n        \"rows\": [3],\n        \"cols\": [2],\n        \"class\": \"posit-blue-bg\",\n        \"style\": {\n            \"width\": \"100px\",\n            \"height\": \"75px\",\n        },\n    },\n    {\n        \"cols\": [1, 3, 5],\n        \"class\": \"posit-blue-bg\",\n    },\n    {\n        \"cols\": [7],\n        \"rows\": [0, 1, 2, 3, 5],\n        \"class\": \"posit-orange-bg\",\n    },\n]\n\nn = 7\nhi_pd = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n        \"f\": range(n * 5, n * 6),\n        \"g\": range(n * 6, n * 7),\n        \"h\": range(n * 7, n * 8),\n        \"i\": range(n * 8, n * 9),\n    }\n)\n\n\napp_ui = ui.page_fillable(\n    ui.h2(\"Data Frame with Styles applied to 4 cells\"),\n    ui.output_data_frame(\"my_df\"),\n    ui.hr(),\n    ui.tags.style(\n        ui.HTML(\n            \"\"\"\n        .posit-bg {\n            background-color: #242a26 ;\n        }\n        .posit-blue-bg {\n            background-color: #447099 ;\n        }\n        .posit-orange-bg {\n            background-color: #ED642F ;\n        }\n        \"\"\"\n        )\n    ),\n    ui.h2(\n        \"Custom styles applied to all cells within a data frame \", ui.HTML(\"&#128075;\")\n    ),\n    ui.output_data_frame(\"hi_df\"),\n)\n\n\ndef server(input: Inputs):\n    @render.data_frame\n    def my_df():\n        return render.DataGrid(\n            df,\n            styles=green_styles,\n        )\n\n    @render.data_frame\n    def hi_df():\n        return render.DataGrid(\n            hi_pd,\n            styles=hi_styles,\n        )\n\n\napp = App(app_ui, server)\n\n",
      "render.DataTable.to_payload()",
      "render.DataTable.to_payload()"
    ]
  },
  {
    "id": "api_ui_input_switch_html",
    "url": "api/ui.input_switch.html",
    "title": "ui.input_switch ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_switch\n\nui.input_switch\n\nCreate a switch that can be used to specify logical values. Similar to input_checkbox, but implies to the user that the change will take effect immediately.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô\n\nReturns\n\nA UI element.\n\nNotes\n\nTrue if checked, False otherwise.\n\nSee Also\n\n- input_checkbox\n- update_switch\n- input_checkbox_group\n- input_radio_buttons\n\nExamples\n\n",
    "code_examples": [
      "ui.input_switch(id, label, value=False, *, width=None)",
      "ui.input_switch(id, label, value=False, *, width=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"somevalue\", \"Some value\", False),\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return input.somevalue()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_text_area_html",
    "url": "api/ui.input_text_area.html",
    "title": "ui.input_text_area ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_text_area\n\nui.input_text_area\n\nCreate a textarea input control for entry of unstructured text values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nThe CSS height, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nValue of the visible character columns of the input, e.g., 80. This argument will only take effect if there is not a CSS width rule defined for this element; such a rule could come from the width argument of this function or from a containing page layout such as page_fluid.\n\nThe value of the visible character rows of the input, e.g., 6. If the height argument is specified, height will take precedence in the browser‚Äôs rendering.\n\nA hint as to what can be entered into the control.\n\nWhich directions the textarea box can be resized. Can be one of ‚Äúboth‚Äù, ‚Äúnone‚Äù, ‚Äúvertical‚Äù, and ‚Äúhorizontal‚Äù. The default, None, will use the client browser‚Äôs default setting for resizing textareas.\n\nIf True, then the textarea will automatically resize the height to fit the input text.\n\nWhether to enable browser autocompletion of the text input (default is ‚Äúoff‚Äù). If None, then it will use the browser‚Äôs default behavior. Other possible values include ‚Äúon‚Äù, ‚Äúname‚Äù, ‚Äúusername‚Äù, and ‚Äúemail‚Äù. See Mozilla‚Äôs autocomplete documentation for more.\n\nWhether to enable browser spell checking of the text input (default is None). If None, then it will use the browser‚Äôs default behavior.\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Ctrl/Cmd + Enter is pressed.\n\nReturns\n\nA UI element\n\nNotes\n\nA string containing the current text input. The default value is \"\" unless value is provided.\n\nSee Also\n\n- input_text\n\nExamples\n\n",
    "code_examples": [
      "ui.input_text_area(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    height=None,\n    cols=None,\n    rows=None,\n    placeholder=None,\n    resize=None,\n    autoresize=False,\n    autocomplete=None,\n    spellcheck=None,\n    update_on='change',\n)",
      "ui.input_text_area(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    height=None,\n    cols=None,\n    rows=None,\n    placeholder=None,\n    resize=None,\n    autoresize=False,\n    autocomplete=None,\n    spellcheck=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text_area(\n        \"caption_regular\",\n        \"Caption:\",\n        \"Data summary\\nwith\\nmultiple\\nlines\",\n    ),\n    ui.output_text_verbatim(\"value_regular\", placeholder=True),\n    ui.input_text_area(\n        \"caption_autoresize\",\n        ui.markdown(\"Caption (w/ `autoresize=True`):\"),\n        \"Data summary\\nwith\\nmultiple\\nlines\",\n        autoresize=True,\n    ),\n    ui.output_text_verbatim(\"value_autoresize\", placeholder=True),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value_regular():\n        return input.caption_regular()\n\n    @render.text\n    def value_autoresize():\n        return input.caption_autoresize()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_input_text_html",
    "url": "api/ui.input_text.html",
    "title": "ui.input_text ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Inputs\n- ui.input_text\n\nui.input_text\n\nCreate an input control for entry of text values.\n\nParameters\n\nAn input id.\n\nAn input label.\n\nInitial value.\n\nThe CSS width, e.g., ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nA hint as to what can be entered into the control.\n\nWhether to enable browser autocompletion of the text input. If None, then it will use the browser‚Äôs default behavior. Some values include ‚Äúon‚Äù, ‚Äúoff‚Äù, ‚Äúname‚Äù, ‚Äúusername‚Äù, and ‚Äúemail‚Äù. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete to learn more about autocomplete‚Äôs supported values.\n\nWhether to enable browser spell checking of the text input (default is None). If None, then it will use the browser‚Äôs default behavior.\n\nWhen should the input value be updated? Options are \"change\" (default) and \"blur\". Use \"change\" to update the input immediately whenever the value changes. Use \"blur\"to delay the input update until the input loses focus (the user moves away from the input), or when Enter is pressed.\n\nReturns\n\nA UI element\n\nNotes\n\nA string containing the current text input. The default value is \"\" unless value is provided.\n\nSee Also\n\n- input_text_area\n\nExamples\n\n",
    "code_examples": [
      "ui.input_text(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    autocomplete='off',\n    spellcheck=None,\n    update_on='change',\n)",
      "ui.input_text(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    autocomplete='off',\n    spellcheck=None,\n    update_on='change',\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"caption\", \"Caption:\", \"Data summary\"),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return input.caption()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_output_image_html",
    "url": "api/ui.output_image.html",
    "title": "ui.output_image ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_image\n\nui.output_image\n\nCreate a output container for a static image.\n\nParameters\n\nAn output id.\n\nThe CSS width, e.g. ‚Äò400px‚Äô, or ‚Äò100%‚Äô.\n\nThe CSS height, e.g. ‚Äò100%‚Äô or ‚Äò600px‚Äô.\n\nIf True, the result is displayed inline.\n\nThis can be a boolean or an object created by click_opts. The default is False, but if you use True (or equivalently, click_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_click(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position.\n\nThis is just like the click parameter, but for double-click events.\n\nSimilar to the click argument, this can be a boolean or an object created by hover_opts. The default is False, but if you use True (or equivalently, hover_opts()), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via input.xx_hover(), where xx is replaced with the ID of this plot. The input value will be a dictionary with x and y elements indicating the mouse position. To control the hover time or hover delay type, use hover_opts.\n\nSimilar to the click argument, this can be a boolean or an object created by brush_opts. The default is False, but if you use True (or equivalently, brush_opts()), the plot will allow the user to ‚Äúbrush‚Äù in the plotting area, and will send information about the brushed area to the server, and the value will be accessible via input.plot_brush(). Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with xmin, xmax, ymin, and ymax elements indicating the brush area. To control the brush behavior, use brush_opts. Multiple output_image/output_plot calls may share the same id value; brushing one image or plot will cause any other brushes with the same id to disappear.\n\nWhether or not to allow the image output to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nReturns\n\nA UI element\n\nSee Also\n\n- image\n- output_plot\n\nExamples\n\n",
    "code_examples": [
      "ui.output_image(\n    id,\n    width='100%',\n    height='400px',\n    *,\n    inline=False,\n    click=False,\n    dblclick=False,\n    hover=False,\n    brush=False,\n    fill=False,\n)",
      "ui.output_image(\n    id,\n    width='100%',\n    height='400px',\n    *,\n    inline=False,\n    click=False,\n    dblclick=False,\n    hover=False,\n    brush=False,\n    fill=False,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny.types import ImgData\n\napp_ui = ui.page_fluid(ui.output_image(\"image\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.image\n    def image():\n        from pathlib import Path\n\n        dir = Path(__file__).resolve().parent\n        img: ImgData = {\"src\": str(dir / \"posit-logo.png\"), \"width\": \"100px\"}\n        return img\n\n\napp = App(app_ui, server)\n\n\n## file: posit-logo.png\n## type: binary\\n"
    ]
  },
  {
    "id": "api_render_image_html",
    "url": "api/render.image.html",
    "title": "render.image ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.image\n\nrender.image\n\nReactively render a image file as an HTML image.\n\nParameters\n\nIf True, the image file will be deleted after rendering.\n\nReturns\n\nA decorator for a function that returns an ImgData object.\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_image container (see output_image for example usage).\n\nSee Also\n\n- output_image\n- ImgData\n- plot\n\nExamples\n\n",
    "code_examples": [
      "render.image(self, _fn=None, *, delete_file=False)",
      "render.image(self, _fn=None, *, delete_file=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny.types import ImgData\n\napp_ui = ui.page_fluid(ui.output_image(\"image\"))\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.image\n    def image():\n        from pathlib import Path\n\n        dir = Path(__file__).resolve().parent\n        img: ImgData = {\"src\": str(dir / \"posit-logo.png\"), \"width\": \"100px\"}\n        return img\n\n\napp = App(app_ui, server)\n\n\n## file: posit-logo.png\n## type: binary\\n"
    ]
  },
  {
    "id": "api_ui_output_text_html",
    "url": "api/ui.output_text.html",
    "title": "ui.output_text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_text\n\nui.output_text\n\nCreate a output container for some text.\n\nParameters\n\nAn output id.\n\nIf True, the result is displayed inline.\n\nA Callable that returns the output container.\n\nReturns\n\nA UI element\n\nNote\n\nText is HTML-escaped prior to rendering.\n\nSee Also\n\n- text\n- output_text_verbatim\n\nExamples\n\n",
    "code_examples": [
      "ui.output_text(id, inline=False, container=None)",
      "ui.output_text(id, inline=False, container=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"txt\", \"Enter the text to display below:\", \"delete me\"),\n    ui.row(\n        ui.column(6, ui.code(\"ui.output_text()\"), ui.output_text(\"text\")),\n        ui.column(\n            6,\n            ui.code(\"ui.output_text_verbatim(placeholder=True)\"),\n            ui.output_text_verbatim(\"verb\", placeholder=True),\n        ),\n    ),\n    ui.row(\n        ui.column(6),\n        ui.column(\n            6,\n            ui.code(\"ui.output_text_verbatim(placeholder=False)\"),\n            ui.output_text_verbatim(\"verb_no_placeholder\", placeholder=False),\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def text():\n        return input.txt()\n\n    @render.text\n    def verb():\n        return input.txt()\n\n    @render.text\n    def verb_no_placeholder():\n        return input.txt()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_render_text_html",
    "url": "api/render.text.html",
    "title": "render.text ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- render.text\n\nrender.text\n\nReactively render text.\n\nWhen used in Shiny Express applications, this defaults to displaying the text as normal text on the web page. When used in Shiny Core applications, this should be paired with output_text in the UI.\n\nParameters\n\n(Express only). If True, the result is displayed inline. (This argument is passed to output_text.)\n\nReturns\n\nA decorator for a function that returns a string.\n\nTip\n\nThe name of the decorated function (or @output(id=...)) should match the id of a output_text container (see output_text for example usage).\n\nSee Also\n\n- code\n- output_text\n\nExamples\n\n",
    "code_examples": [
      "render.text(self, _fn=None, *, inline=False)",
      "render.text(self, _fn=None, *, inline=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"txt\", \"Enter the text to display below:\", \"delete me\"),\n    ui.row(\n        ui.column(6, ui.code(\"ui.output_text()\"), ui.output_text(\"text\")),\n        ui.column(\n            6,\n            ui.code(\"ui.output_text_verbatim(placeholder=True)\"),\n            ui.output_text_verbatim(\"verb\", placeholder=True),\n        ),\n    ),\n    ui.row(\n        ui.column(6),\n        ui.column(\n            6,\n            ui.code(\"ui.output_text_verbatim(placeholder=False)\"),\n            ui.output_text_verbatim(\"verb_no_placeholder\", placeholder=False),\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def text():\n        return input.txt()\n\n    @render.text\n    def verb():\n        return input.txt()\n\n    @render.text\n    def verb_no_placeholder():\n        return input.txt()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_output_ui_html",
    "url": "api/ui.output_ui.html",
    "title": "ui.output_ui ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_ui\n\nui.output_ui\n\nCreate a output container for a UI (i.e., HTML) element.\n\nParameters\n\nAn output id.\n\nIf True, the result is displayed inline.\n\nA Callable that returns the output container.\n\nWhether or not to allow the UI output to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nWhether or not the UI output area should be considered a fillable (i.e., flexbox) container.\n\nAttributes to be applied to the output container.\n\nReturns\n\nA UI element\n\nSee Also\n\n- ui\n- output_text\n\nExamples\n\n",
    "code_examples": [
      "ui.output_ui(\n    id,\n    inline=False,\n    container=None,\n    fill=False,\n    fillable=False,\n    **kwargs,\n)",
      "ui.output_ui(\n    id,\n    inline=False,\n    container=None,\n    fill=False,\n    fillable=False,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"add\", \"Add more controls\"),\n    ui.output_ui(\"moreControls\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.ui\n    @reactive.event(input.add)\n    def moreControls():\n        return ui.TagList(\n            ui.input_slider(\"n\", \"N\", min=1, max=1000, value=500),\n            ui.input_text(\"label\", \"Label\"),\n        )\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_value_box_html",
    "url": "api/ui.value_box.html",
    "title": "ui.value_box ‚Äì Shiny for Python",
    "description": "",
    "content": "- Value boxes\n- ui.value_box\n\nui.value_box\n\nValue box\n\nAn opinionated (card-powered) box, designed for displaying a value and title. Optionally, a showcase can provide context for what the value represents (for example, it could hold an icon, or even a output_plot).\n\nParameters\n\nA string, number, or Tag child to display as the title or value of the value box. The title appears above the value.\n\nUnnamed arguments may be any Tag children to display below value. Named arguments are passed to card as element attributes.\n\nA Tag child to showcase (e.g., an icon, a output_plot, etc).\n\nOne of \"left center\" (default), \"top right\" or \"bottom\". Alternatively, you can customize the showcase layout options with the showcase_left_center, showcase_top_right, or showcase_bottom functions. Use the options functions when you want to control the height or width of the showcase area.\n\nThe name of a theme (e.g. \"primary\", \"danger\", \"purple\", \"bg-green\", \"text-red\") for the value box, or a theme constructed with value_box_theme. The theme names provide a convenient way to use your app‚Äôs Bootstrap theme colors as the foreground or background colors of the value box. For more control, you can create your own theme with value_box_theme where you can pass foreground and background colors directly. Bootstrap supported color themes: \"blue\", \"purple\", \"pink\", \"red\", \"orange\", \"yellow\", \"green\", \"teal\", and \"cyan\". These colors can be used with bg-NAME, text-NAME, and bg-gradient-NAME1-NAME2 to change the background, foreground, or use a background gradient respectively. If a theme string does not start with text- or bg-, it will be auto prefixed with bg-.\n\nIf True, an icon will appear when hovering over the card body. Clicking the icon expands the card to fit viewport size.\n\nAny valid CSS unit (e.g., height=\"200px\"). Doesn‚Äôt apply when a value box is made full_screen.\n\nWhether to allow the value box to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nUtility classes for customizing the appearance of the summary card. Use bg-* and text-* classes (e.g, \"bg-danger\" and \"text-light\") to customize the background/foreground colors.\n\nProvide a unique identifier for the :func:~shiny.ui.value_box() to report its state to Shiny. For example, using id=\"my_value_box\", you can observe the value box‚Äôs full screen state with input.my_value_box()[\"full_screen\"].\n\nAdditional attributes to pass to card.\n\nReturns\n\nA card\n\nSee Also\n\n- value_box_theme\n- showcase_bottom\n- showcase_left_center\n- showcase_top_right\n- card\n\nExamples\n\n",
    "code_examples": [
      "ui.value_box(\n    title,\n    value,\n    *args,\n    showcase=None,\n    showcase_layout='left center',\n    full_screen=False,\n    theme=None,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    id=None,\n    **kwargs,\n)",
      "ui.value_box(\n    title,\n    value,\n    *args,\n    showcase=None,\n    showcase_layout='left center',\n    full_screen=False,\n    theme=None,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    id=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import piggy_bank\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=piggy_bank,\n            theme=\"bg-gradient-orange-red\",\n            full_screen=True,\n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=piggy_bank,\n            theme=\"text-green\",\n            showcase_layout=\"top right\",\n            full_screen=True,\n        ),\n        ui.value_box(\n            \"KPI Title\",\n            \"$1 Billion Dollars\",\n            \"Up 30% VS PREVIOUS 30 DAYS\",\n            showcase=piggy_bank,\n            theme=\"purple\",\n            showcase_layout=\"bottom\",\n            full_screen=True,\n        ),\n    )\n)\n\n\napp = App(app_ui, server=None)\n\n\n## file: icons.py\nfrom shiny import ui\n\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\n"
    ]
  },
  {
    "id": "api_ui_output_text_verbatim_html",
    "url": "api/ui.output_text_verbatim.html",
    "title": "ui.output_text_verbatim ‚Äì Shiny for Python",
    "description": "",
    "content": "- Rendering outputs\n- ui.output_text_verbatim\n\nui.output_text_verbatim\n\nCreate a output container for some text.\n\nPlace a text result in the user interface. Differs from output_text in that it wraps the text in a fixed-width container with a gray-ish background color and border.\n\nParameters\n\nAn output id.\n\nIf the output is empty or None, should an empty rectangle be displayed to serve as a placeholder? (This does not affect behavior when the output is nonempty.)\n\nReturns\n\nA UI element\n\nSee Also\n\n- text\n- output_text\n\nExample\n\nSee output_text\n\nExamples\n\n",
    "code_examples": [
      "ui.output_text_verbatim(id, placeholder=False)",
      "ui.output_text_verbatim(id, placeholder=False)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"caption\", \"Caption:\", \"Data summary\"),\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def value():\n        return input.caption()\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_modal_html",
    "url": "api/ui.modal.html",
    "title": "ui.modal ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.modal\n\nui.modal\n\nCreates the UI for a modal dialog, using Bootstrap's modal class.\n\nA modal is a dialog box that appears in front of the app. Modals are typically used for showing important messages, or for presenting UI that requires input from the user, such as a user name and/or password input.\n\nParameters\n\nUI elements for the body of the modal.\n\nAn optional title for the modal dialog.\n\nUI for footer. Use None for no footer.\n\nThe size of the modal dialogue box. Use one of ‚Äús‚Äù for small, ‚Äúm‚Äù (the default) for medium, or ‚Äúl‚Äù for large.\n\nIf True, the modal dialog can be dismissed by clicking outside the dialog box, or by pressing the Escape key. If False (the default), the modal dialog can‚Äôt be dismissed in those ways; instead it must be dismissed by clicking on a modal_button(), or from a call to modal_remove() on the server.\n\nIf False, the modal dialog will have no fade-in animation (it will simply appear rather than fade in to view).\n\nAttributes to be applied to the modal‚Äôs body tag.\n\nReturns\n\nA UI element\n\nSee Also\n\n- modal_show\n- modal_remove\n- modal_button\n\nExamples\n\n",
    "code_examples": [
      "ui.modal(\n    *args,\n    title=None,\n    footer=MISSING,\n    size='m',\n    easy_close=False,\n    fade=True,\n    **kwargs,\n)",
      "ui.modal(\n    *args,\n    title=None,\n    footer=MISSING,\n    size='m',\n    easy_close=False,\n    fade=True,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            title=\"Somewhat important message\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_modal_show_html",
    "url": "api/ui.modal_show.html",
    "title": "ui.modal_show ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.modal_show\n\nui.modal_show\n\nShow a modal dialog.\n\nmodal_show is used to display a modal that has been created with modal.\n\nParameters\n\nTypically a modal instance.\n\nThe Session instance to display the modal in. If not provided, the session is inferred via get_current_session.\n\nSee Also\n\n- modal_remove\n- modal\n\nExamples\n\n",
    "code_examples": [
      "ui.modal_show(modal, session=None)",
      "ui.modal_show(modal, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            title=\"Somewhat important message\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_modal_remove_html",
    "url": "api/ui.modal_remove.html",
    "title": "ui.modal_remove ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.modal_remove\n\nui.modal_remove\n\nRemove a modal dialog box.\n\nmodal_remove provides a way to remove a modal programmatically. Modals can also be removed manually by the user if a modal_button is provided, or if the modal is created with easy_close=True.\n\nParameters\n\nThe Session instance that contains the modal to remove. If not provided, the session is inferred via get_current_session.\n\nSee Also\n\n- modal_show\n- modal\n\nExamples\n\n",
    "code_examples": [
      "ui.modal_remove(session=None)",
      "ui.modal_remove(session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\n\ndef run_model(delay=10.0):\n    import time\n\n    # Pretend to run a model for `delay` seconds\n    start_time = time.time()\n    while time.time() - start_time < delay:\n        pass\n    return time.time()\n\n\ndef the_modal():\n    return ui.modal(\n        \"The model is running, please wait.\",\n        title=\"Running model\",\n        easy_close=False,\n        footer=None,\n    )\n\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"run\", \"Run Model\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    model_result = reactive.value()\n\n    @reactive.effect\n    @reactive.event(input.run)\n    def do_run_model():\n        # Show the modal, blocking interaction with the UI\n        ui.modal_show(the_modal())\n\n        result = run_model(delay=4)\n\n        # Now that we have model results, remove the modal\n        # and update the model result reactive value\n        ui.modal_remove()\n        model_result.set(result)\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_modal_button_html",
    "url": "api/ui.modal_button.html",
    "title": "ui.modal_button ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.modal_button\n\nui.modal_button\n\nCreates a button that will dismiss a modal.\n\nmodal_button is usually passed to the footer of a modal to add a button to the footer that will close the modal.\n\nParameters\n\nAn input label.\n\nAn icon to appear inline with the button/link.\n\nAttributes to be applied to the button.\n\nReturns\n\nA UI element\n\nSee Also\n\n- modal\n- modal_show\n- modal_remove\n\nExamples\n\n",
    "code_examples": [
      "ui.modal_button(label, icon=None, **kwargs)",
      "ui.modal_button(label, icon=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(\n            \"This is a somewhat important message.\",\n            title=\"Somewhat important message\",\n            easy_close=True,\n            footer=None,\n        )\n        ui.modal_show(m)\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_notification_show_html",
    "url": "api/ui.notification_show.html",
    "title": "ui.notification_show ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.notification_show\n\nui.notification_show\n\nShow a notification to the user.\n\nA notification is a message that appears near the bottom corner of the app. Notifications normally disappear after a short period of time, and should multiple notifications appear together, they will stack on top of one another.\n\nParameters\n\nContents of the notification message.\n\nMessage content that represents an action. For example, this could be a link that the user can click on. This is separate from ui so customized layouts can handle the main notification content separately from the action content.\n\nNumber of seconds to display the message before it disappears. Use None to prevent the message from disappearing automatically. The user will need to click the corner of the notification to close it.\n\nIf True, display a button which will make the notification disappear when clicked. If False do not display.\n\nAn optional unique identifier for the notification. If supplied, any existing notification with the same id will be replaced with this one (otherwise, a new notification is created).\n\nA string which controls the color of the notification. This should be one of ‚Äúdefault‚Äù (gray), ‚Äúmessage‚Äù (blue), ‚Äúwarning‚Äù (yellow), or ‚Äúerror‚Äù (red).\n\nThe Session in which the notification should appear. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nThe notification‚Äôs id.\n\nSee Also\n\n- notification_remove\n- modal\n\nExamples\n\n",
    "code_examples": [
      "ui.notification_show(\n    ui,\n    *,\n    action=None,\n    duration=5,\n    close_button=True,\n    id=None,\n    type='default',\n    session=None,\n)",
      "ui.notification_show(\n    ui,\n    *,\n    action=None,\n    duration=5,\n    close_button=True,\n    id=None,\n    type='default',\n    session=None,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"show\", \"Show\"),\n    \" \",\n    ui.input_action_button(\"remove\", \"Remove\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    ids: list[str] = []\n    n: int = 0\n\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        nonlocal ids\n        nonlocal n\n        # Save the ID for removal later\n        id = ui.notification_show(\"Message \" + str(n), duration=None)\n        ids.append(id)\n        n += 1\n\n    @reactive.effect\n    @reactive.event(input.remove)\n    def _():\n        nonlocal ids\n        if ids:\n            ui.notification_remove(ids.pop())\n\n\napp = App(app_ui, server, debug=True)\n\n"
    ]
  },
  {
    "id": "api_ui_notification_remove_html",
    "url": "api/ui.notification_remove.html",
    "title": "ui.notification_remove ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.notification_remove\n\nui.notification_remove\n\nRemove a notification.\n\nnotification_remove provides a way to remove a notification programmatically. Notifications can also be removed manually by the user, or automatically after a specififed amont of time passes.\n\nParameters\n\nThe id of the notification to remove.\n\nThe Session in which the notification appears. If not provided, the session is inferred via get_current_session.\n\nReturns\n\nThe notification‚Äôs id.\n\nSee Also\n\n- notification_show\n- modal\n\nExample\n\nSee shiny.ui.notification_show.\n\n",
    "code_examples": [
      "ui.notification_remove(id, *, session=None)",
      "ui.notification_remove(id, *, session=None)"
    ]
  },
  {
    "id": "api_ui_Progress_html",
    "url": "api/ui.Progress.html",
    "title": "ui.progress ‚Äì Shiny for Python",
    "description": "",
    "content": "- Display messages\n- ui.Progress\n\nui.Progress\n\nInitialize a progress bar.\n\nProgress creates a computation manager that can be used with with to run a block of code. Shiny will display a progress bar while the code runs, which you can update by calling the set() and message() methods of the computation manager at strategic points in the code block.\n\nParameters\n\nThe value that represents the starting point of the progress bar. Must be less than max.\n\nThe value that represents the end of the progress bar. Must be greater than min.\n\nThe Session instance that the progress bar should appear in. If not provided, the session is inferred via get_current_session.\n\nExamples\n\nMethods\n\nclose\n\nClose the progress bar. You can also use the Progress object as a context manager, which will cause the progress bar to close on exit.\n\nParameters\n\nThe object instance\n\nNote\n\nRemoves the progress panel. Future calls to set and close will be ignored.\n\ninc\n\nIncrement the progress bar.\n\nLike set, this updates the progress panel. The difference is that inc increases the progress bar by amount, instead of setting it to a specific value.\n\nParameters\n\nThe object instance\n\nThe amount to increment in progress.\n\nThe message to be displayed to the user or None to hide the current message (if any).\n\nThe detail message to be displayed to the user or None to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.\n\nset\n\nOpens and updates the progress panel.\n\nWhen called the first time, the progress panel is displayed.\n\nParameters\n\nThe object instance\n\nThe value at which to set the progress bar, relative to min and max. None hides the progress bar, if it is currently visible.\n\nThe message to be displayed to the user or None to hide the current message (if any).\n\nThe detail message to be displayed to the user or None to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.\n\n",
    "code_examples": [
      "ui.Progress(self, min=0, max=1, session=None)",
      "ui.Progress(self, min=0, max=1, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport asyncio\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_text(\"compute\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n                # Normally use time.sleep() instead, but it doesn't yet work in Pyodide.\n                # https://github.com/pyodide/pyodide/issues/2354\n\n        return \"Done computing!\"\n\n\napp = App(app_ui, server)\n\n",
      "ui.Progress.close()",
      "ui.Progress.close()",
      "ui.Progress.inc(amount=0.1, message=None, detail=None)",
      "ui.Progress.inc(amount=0.1, message=None, detail=None)",
      "ui.Progress.set(value=None, message=None, detail=None)",
      "ui.Progress.set(value=None, message=None, detail=None)"
    ]
  },
  {
    "id": "api_ui_tooltip_html",
    "url": "api/ui.tooltip.html",
    "title": "ui.tooltip ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.tooltip\n\nui.tooltip\n\nAdd a tooltip to a UI element.\n\nDisplay additional information when focusing (or hovering over) a UI element.\n\nParameters\n\nA UI element (i.e., Tag) to serve as the tooltips trigger. It‚Äôs good practice for this element to be a keyboard-focusable and interactive element (e.g., input_action_button, input_action_link, etc.) so that the tooltip is accessible to keyboard and assistive technology users.\n\nContents to the tooltip‚Äôs body. Or tag attributes that are supplied to the resolved Tag object.\n\nA character string. Required to reactively respond to the visibility of the tooltip (via the input[id] value) and/or update the visibility/contents of the tooltip.\n\nThe placement of the tooltip relative to its trigger.\n\nA list of additional Bootstrap options.\n\nDetails\n\nIf trigger yields multiple HTML elements (e.g., a TagList or complex shinywidgets object), the last HTML element is used as the trigger. If the trigger should contain all of those elements, wrap the object in a div or span.\n\nAccessibility of Tooltip Triggers\n\nBecause the user needs to interact with the trigger element to see the tooltip, it‚Äôs best practice to use an element that is typically accessible via keyboard interactions, like a button or a link.\n\nIf you use a non-interactive element, like a <span> or text, tooltip() will automatically add the tabindex=\"0\" attribute to the trigger element to make sure that users can reach the element with the keyboard. This means that in most cases you can use any element you want as the trigger.\n\nOne place where it‚Äôs important to consider the accessibility of the trigger is when using an icon without any accompanying text. In these cases, many icon elements are created with the assumption that the icon is decorative, which will make it inaccessible to users of assistive technologies.\n\nWhen using an icon as the primary trigger, ensure that the icon does not have aria-hidden=\"true\" or role=\"presentation\" attributes. Icon packages typically provide a way to specify a title for the icon, as well as a way to specify that the icon is not decorative. The title should be a short description of the purpose of the trigger, rather than a description of the icon itself.\n\nFor example:\n\nSee Also\n\n- Bootstrap tooltips documentation\n\nExamples\n\n",
    "code_examples": [
      "ui.tooltip(trigger, *args, id=None, placement='auto', options=None, **kwargs)",
      "ui.tooltip(trigger, *args, id=None, placement='auto', options=None, **kwargs)",
      "icon_title = \"About tooltips\"\ndef bs_info_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(\"info-circle\", title = icon_title)`\n    return ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-info-circle \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"></path><path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"></path></svg>')\n\nui.tooltip(\n    bs_info_icon(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "icon_title = \"About tooltips\"\ndef bs_info_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(\"info-circle\", title = icon_title)`\n    return ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-info-circle \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"></path><path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"></path></svg>')\n\nui.tooltip(\n    bs_info_icon(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "icon_title = \"About tooltips\"\ndef fa_info_circle(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(\"info-circle\", a11y = \"sem\", title = icon_title)`\n    return ui.HTML(f'<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>')\nui.tooltip(\n    fa_info_circle(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "icon_title = \"About tooltips\"\ndef fa_info_circle(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(\"info-circle\", a11y = \"sem\", title = icon_title)`\n    return ui.HTML(f'<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>')\nui.tooltip(\n    fa_info_circle(icon_title),\n    \"Text shown in the tooltip.\"\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import question_circle_fill\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(\n        ui.input_action_button(\"btn\", \"A button\", class_=\"mt-3\"),\n        \"A message\",\n        id=\"btn_tooltip\",\n    ),\n    ui.hr(),\n    ui.card(\n        ui.card_header(\n            ui.tooltip(\n                ui.span(\"Card title \", question_circle_fill),\n                \"Additional info\",\n                placement=\"right\",\n                id=\"card_tooltip\",\n            ),\n        ),\n        \"Card body content...\",\n    ),\n)\n\n\napp = App(app_ui, server=None)\n\n\n## file: icons.py\nfrom shiny import ui\n\n# https://icons.getbootstrap.com/icons/question-circle-fill/\nquestion_circle_fill = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-question-circle-fill mb-1\" viewBox=\"0 0 16 16\"><path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.496 6.033h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286a.237.237 0 0 0 .241.247zm2.325 6.443c.61 0 1.029-.394 1.029-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94 0 .533.425.927 1.01.927z\"/></svg>'\n)\n\n"
    ]
  },
  {
    "id": "api_ui_update_tooltip_html",
    "url": "api/ui.update_tooltip.html",
    "title": "ui.update_tooltip ‚Äì Shiny for Python",
    "description": "",
    "content": "- Update UI Layouts\n- ui.update_tooltip\n\nui.update_tooltip\n\nUpdate tooltip contents.\n\nParameters\n\nA character string that matches an existing tooltip id.\n\nContents to the tooltip‚Äôs body.\n\nOpens (True) or closes (False) the tooltip.\n\nA Shiny session object (the default should almost always be used).\n\nExamples\n\n",
    "code_examples": [
      "ui.update_tooltip(id, *args, show=None, session=None)",
      "ui.update_tooltip(id, *args, show=None, session=None)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"btn_show\", \"Show tooltip\", class_=\"mt-3 me-3\"),\n    ui.input_action_button(\"btn_close\", \"Close tooltip\", class_=\"mt-3 me-3\"),\n    ui.input_action_button(\n        \"btn_update\", \"Update tooltip phrase (and show tooltip)\", class_=\"mt-3 me-3\"\n    ),\n    ui.tooltip(\n        ui.input_action_button(\n            \"btn_w_tooltip\", \"A button w/ a tooltip\", class_=\"btn-primary mt-5\"\n        ),\n        \"A message\",\n        id=\"tooltip_id\",\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.btn_show)\n    def _():\n        ui.update_tooltip(\"tooltip_id\", show=True)\n\n    @reactive.effect\n    @reactive.event(input.btn_close)\n    def _():\n        ui.update_tooltip(\"tooltip_id\", show=False)\n\n    @reactive.effect\n    @reactive.event(input.btn_update)\n    def _():\n        content = (\n            \"A \" + \" \".join([\"NEW\" for _ in range(input.btn_update())]) + \" message\"\n        )\n\n        ui.update_tooltip(\"tooltip_id\", content, show=True)\n\n    @reactive.effect\n    @reactive.event(input.btn_w_tooltip)\n    def _():\n        ui.notification_show(\"Button clicked!\", duration=3, type=\"message\")\n\n\napp = App(app_ui, server=server)\n\n"
    ]
  },
  {
    "id": "api_ui_popover_html",
    "url": "api/ui.popover.html",
    "title": "ui.popover ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.popover\n\nui.popover\n\nAdd a popover to a UI element.\n\nDisplay additional information when clicking on a UI element (typically a button).\n\nParameters\n\nThe UI element to serve as the popover trigger (typically a input_action_button or similar). If trigger renders as multiple HTML elements (e.g., it‚Äôs a TagList), the last HTML element is used for the trigger. If the trigger should contain all of those elements, wrap the object in a div or span.\n\nUI elements for the popover‚Äôs body. Character strings are automatically escaped unless marked as HTML.\n\nA title (header) for the popover.\n\nA character string. Required to re-actively respond to the visibility of the popover (via the input.<ID>() value) and/or update the visibility/contents of the popover.\n\nThe placement of the popover relative to its trigger.\n\nA list of additional options <https://getbootstrap.com/docs/5.3/components/popovers/#options>_.\n\nClosing popovers\n\nIn addition to clicking the close_button, popovers can be closed by pressing the Esc/Space key when the popover (and/or its trigger) is focused.\n\nAccessibility of Popover Triggers\n\nBecause the user needs to interact with the trigger element to see the popover, it‚Äôs best practice to use an element that is typically accessible via keyboard interactions, like a button or a link.\n\nIf you use a non-interactive element, like a <span> or text, popover() will automatically add the tabindex=\"0\" attribute to the trigger element to make sure that users can reach the element with the keyboard. This means that in most cases you can use any element you want as the trigger.\n\nOne place where it‚Äôs important to consider the accessibility of the trigger is when using an icon without any accompanying text. In these cases, many icon elements are created with the assumption that the icon is decorative, which will make it inaccessible to users of assistive technologies.\n\nWhen using an icon as the primary trigger, ensure that the icon does not have aria-hidden=\"true\" or role=\"presentation\" attributes. Icon packages typically provide a way to specify a title for the icon, as well as a way to specify that the icon is not decorative. The title should be a short description of the purpose of the trigger, rather than a description of the icon itself.\n\nFor example:\n\nSee Also\n\n- https://getbootstrap.com/docs/5.3/components/popovers/\n- update_popover\n- tooltip\n\nExamples\n\n",
    "code_examples": [
      "ui.popover(\n    trigger,\n    *args,\n    title=None,\n    id=None,\n    placement='auto',\n    options=None,\n    **kwargs,\n)",
      "ui.popover(\n    trigger,\n    *args,\n    title=None,\n    id=None,\n    placement='auto',\n    options=None,\n    **kwargs,\n)",
      "icon_title = \"Settings\"\ndef bs_gear_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(\"gear\", title = icon_title)`\n    return ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-gear \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z\"></path><path d=\"M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z\"></path></svg>')\n\nui.popover(\n    bs_gear_icon(icon_title),\n    title = icon_title,\n    ui.input_slider(\"n\", \"Number of points\", 1, 100, 50)\n)",
      "icon_title = \"Settings\"\ndef bs_gear_icon(title: str):\n    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon(\"gear\", title = icon_title)`\n    return ui.HTML(f'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-gear \" style=\"height:1em;width:1em;fill:currentColor;\" aria-hidden=\"true\" role=\"img\" ><title>{title}</title><path d=\"M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z\"></path><path d=\"M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z\"></path></svg>')\n\nui.popover(\n    bs_gear_icon(icon_title),\n    title = icon_title,\n    ui.input_slider(\"n\", \"Number of points\", 1, 100, 50)\n)",
      "icon_title = \"Settings\"\ndef fa_gear_icon(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(\"gear\", a11y = \"sem\", title = icon_title)`\n    return ui.HTML(f'<svg aria-label=\"{title}\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z\"/></svg>')\nui.popover(\n    fa_gear_icon(icon_title),\n    title = icon_title,\n    ui.input_slider(\"n\", \"Number of points\", 1, 100, 50)\n)",
      "icon_title = \"Settings\"\ndef fa_gear_icon(title: str):\n    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa(\"gear\", a11y = \"sem\", title = icon_title)`\n    return ui.HTML(f'<svg aria-label=\"{title}\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><title>{title}</title><path d=\"M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z\"/></svg>')\nui.popover(\n    fa_gear_icon(icon_title),\n    title = icon_title,\n    ui.input_slider(\"n\", \"Number of points\", 1, 100, 50)\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom icons import gear_fill\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.popover(\n        ui.input_action_button(\"btn\", \"A button\", class_=\"mt-3\"),\n        \"A popover with more context and information than should be used in a tooltip.\",\n        \"You can even have multiple DOM elements in a popover!\",\n        id=\"btn_popover\",\n    ),\n    ui.hr(),\n    ui.card(\n        ui.card_header(\n            \"Plot title (Click the gear to change variables)\",\n            ui.popover(\n                ui.span(\n                    gear_fill,\n                    style=\"position:absolute; top: 5px; right: 7px;\",\n                ),\n                \"Put dropdowns here to alter your plot!\",\n                ui.input_selectize(\"x\", \"X\", [\"x1\", \"x2\", \"x3\"]),\n                ui.input_selectize(\"y\", \"Y\", [\"y1\", \"y2\", \"y3\"]),\n                placement=\"right\",\n                id=\"card_popover\",\n            ),\n        ),\n        ui.output_text_verbatim(\"plot_txt\", placeholder=True),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.text\n    def plot_txt():\n        return f\"<Making plot using x: {input.x()} and y: {input.y()}>\"\n\n\napp = App(app_ui, server=server)\n\n\n## file: icons.py\nfrom shiny import ui\n\n# https://icons.getbootstrap.com/icons/gear-fill/\ngear_fill = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-gear-fill\" viewBox=\"0 0 16 16\"><path d=\"M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z\"/></svg>'\n)\n\n"
    ]
  },
  {
    "id": "layouts_navbars_index_html",
    "url": "layouts/navbars/index.html",
    "title": "Navbars ‚Äì Shiny for Python",
    "description": "A navbar adds a navigation bar, allowing users to easily navigate your Shiny app.",
    "content": "Navbars\n\nA navbar adds a navigation bar, allowing users to easily navigate your Shiny app.\n\nA navbar adds a navigation bar to your app, allowing users to easily navigate your app.\n\nRelevant Functions\n\n- ui.page_navbar ui.page_navbar(*args, title=None, id=None, selected=None, sidebar=None, fillable=True, fillable_mobile=False, gap=None, padding=None, position='static-top', header=None, footer=None, bg=None, inverse=False, underline=True, collapsible=True, fluid=True, window_title=MISSING, lang=None)\n- ui.nav ui.nav_panel(title, *args, value=None, icon=None)\n\nui.page_navbar ui.page_navbar(*args, title=None, id=None, selected=None, sidebar=None, fillable=True, fillable_mobile=False, gap=None, padding=None, position='static-top', header=None, footer=None, bg=None, inverse=False, underline=True, collapsible=True, fluid=True, window_title=MISSING, lang=None)\n\nui.nav ui.nav_panel(title, *args, value=None, icon=None)\n\nNavbar at top\n\n- Express\n- Core\n\nFollow these steps to add a navbar to the top of your app:\n\n- Define a navbar page layout with ui.page_navbar().\n- Pass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.page_navbar() to control the items displayed in the navbar.\n- Set the title argument of ui.page_navbar() to set the browser window title.\n- Optional: Pass a string to the id argument of ui.page_navbar(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nDefine a navbar page layout with ui.page_navbar().\n\nPass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.page_navbar() to control the items displayed in the navbar.\n\nSet the title argument of ui.page_navbar() to set the browser window title.\n\nOptional: Pass a string to the id argument of ui.page_navbar(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nNavbar at bottom\n\n- Express\n- Core\n\nFollow these steps to add a navbar to the bottom of your app:\n\n- Define a navbar page layout with ui.page_navbar().\n- Pass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.page_navbar() to control the items displayed in the navbar.\n- Set the position parameter of ui.page_navbar() to \"fixed-bottom\" to pin the navbar to the bottom of the app. By default, position is \"static-top\", which causes the navbar to display at the top with normal scrolling behavior. You can also pin the navbar to the top (position=\"fixed-top\").\n- Set the title argument of ui.page_navbar() to set the browser window title.\n- Optional: Pass a string to the id argument of ui.page_navbar(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nDefine a navbar page layout with ui.page_navbar().\n\nPass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.page_navbar() to control the items displayed in the navbar.\n\nSet the position parameter of ui.page_navbar() to \"fixed-bottom\" to pin the navbar to the bottom of the app. By default, position is \"static-top\", which causes the navbar to display at the top with normal scrolling behavior. You can also pin the navbar to the top (position=\"fixed-top\").\n\nSet the title argument of ui.page_navbar() to set the browser window title.\n\nOptional: Pass a string to the id argument of ui.page_navbar(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 150\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_navbar(  \n    ui.nav_panel(\"A\", \"Page A content\"),  \n    ui.nav_panel(\"B\", \"Page B content\"),  \n    ui.nav_panel(\"C\", \"Page C content\"),  \n    title=\"App with navbar\",  \n    id=\"page\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 150\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_navbar(  \n    ui.nav_panel(\"A\", \"Page A content\"),  \n    ui.nav_panel(\"B\", \"Page B content\"),  \n    ui.nav_panel(\"C\", \"Page C content\"),  \n    title=\"App with navbar\",  \n    id=\"page\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from functools import partial\n\nfrom shiny.express import ui\nfrom shiny.ui import page_navbar\n\nui.page_opts(\n    title=\"App with navbar\",  \n    page_fn=partial(page_navbar, id=\"page\"),  \n)\n\nwith ui.nav_panel(\"A\"):  \n    \"Page A content\"\n\nwith ui.nav_panel(\"B\"):  \n    \"Page B content\"\n\nwith ui.nav_panel(\"C\"):  \n    \"Page C content\"",
      "from functools import partial\n\nfrom shiny.express import ui\nfrom shiny.ui import page_navbar\n\nui.page_opts(\n    title=\"App with navbar\",  \n    page_fn=partial(page_navbar, id=\"page\"),  \n)\n\nwith ui.nav_panel(\"A\"):  \n    \"Page A content\"\n\nwith ui.nav_panel(\"B\"):  \n    \"Page B content\"\n\nwith ui.nav_panel(\"C\"):  \n    \"Page C content\"",
      "from shiny import App, ui\n\napp_ui = ui.page_navbar(  \n    ui.nav_panel(\"A\", \"Page A content\"),  \n    ui.nav_panel(\"B\", \"Page B content\"),  \n    ui.nav_panel(\"C\", \"Page C content\"),  \n    title=\"App with navbar\",  \n    id=\"page\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_navbar(  \n    ui.nav_panel(\"A\", \"Page A content\"),  \n    ui.nav_panel(\"B\", \"Page B content\"),  \n    ui.nav_panel(\"C\", \"Page C content\"),  \n    title=\"App with navbar\",  \n    id=\"page\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 150\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_navbar(  \n    ui.nav_panel(\"A\", \"Page A content\"),  \n    ui.nav_panel(\"B\", \"Page B content\"),  \n    ui.nav_panel(\"C\", \"Page C content\"),  \n    title=\"App with navbar\",  \n    id=\"page\",  \n    position=\"fixed-bottom\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 150\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_navbar(  \n    ui.nav_panel(\"A\", \"Page A content\"),  \n    ui.nav_panel(\"B\", \"Page B content\"),  \n    ui.nav_panel(\"C\", \"Page C content\"),  \n    title=\"App with navbar\",  \n    id=\"page\",  \n    position=\"fixed-bottom\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from functools import partial\n\nfrom shiny.express import ui\nfrom shiny.ui import page_navbar\n\nui.page_opts(\n    title=\"App with navbar\",  \n    page_fn=partial(page_navbar, id=\"page\", position=\"fixed-bottom\"),  \n)\n\nwith ui.nav_panel(\"A\"):  \n    \"Page A content\"\n\nwith ui.nav_panel(\"B\"):  \n    \"Page B content\"\n\nwith ui.nav_panel(\"C\"):  \n    \"Page C content\"",
      "from functools import partial\n\nfrom shiny.express import ui\nfrom shiny.ui import page_navbar\n\nui.page_opts(\n    title=\"App with navbar\",  \n    page_fn=partial(page_navbar, id=\"page\", position=\"fixed-bottom\"),  \n)\n\nwith ui.nav_panel(\"A\"):  \n    \"Page A content\"\n\nwith ui.nav_panel(\"B\"):  \n    \"Page B content\"\n\nwith ui.nav_panel(\"C\"):  \n    \"Page C content\"",
      "from shiny import App, ui\n\napp_ui = ui.page_navbar(  \n    ui.nav_panel(\"A\", \"Page A content\"),  \n    ui.nav_panel(\"B\", \"Page B content\"),  \n    ui.nav_panel(\"C\", \"Page C content\"),  \n    title=\"App with navbar\",  \n    id=\"page\",  \n    position=\"fixed-bottom\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_navbar(  \n    ui.nav_panel(\"A\", \"Page A content\"),  \n    ui.nav_panel(\"B\", \"Page B content\"),  \n    ui.nav_panel(\"C\", \"Page C content\"),  \n    title=\"App with navbar\",  \n    id=\"page\",  \n    position=\"fixed-bottom\",  \n)  \n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "layouts_tabs_index_html",
    "url": "layouts/tabs/index.html",
    "title": "Tabs ‚Äì Shiny for Python",
    "description": "Tabs and navigation allow you to create Shiny apps with multiple pages.",
    "content": "Tabs\n\nTabs and navigation allow you to create Shiny apps with multiple pages.\n\nTabs and navigation allow you to create apps that have multiple pages.\n\nRelevant Functions\n\n- ui.accordion ui.accordion(*args, id=None, open=None, multiple=True, class_=None, width=None, height=None, **kwargs)\n- ui.accordion_panel ui.accordion_panel(title, *args, value=MISSING, icon=None, **kwargs)\n- ui.navset_card_tab ui.navset_card_tab(*args, id=None, selected=None, title=None, sidebar=None, header=None, footer=None)\n- ui.navset_card_pill ui.navset_card_pill(*args, id=None, selected=None, title=None, sidebar=None, header=None, footer=None, placement='above')\n- ui.navset_pill ui.navset_pill(*args, id=None, selected=None, header=None, footer=None)\n- ui.navset_pill_list ui.navset_pill_list(*args, id=None, selected=None, header=None, footer=None, well=True, widths=(4, 8))\n- ui.navset_tab ui.navset_tab(*args, id=None, selected=None, header=None, footer=None)\n\nui.accordion ui.accordion(*args, id=None, open=None, multiple=True, class_=None, width=None, height=None, **kwargs)\n\nui.accordion_panel ui.accordion_panel(title, *args, value=MISSING, icon=None, **kwargs)\n\nui.navset_card_tab ui.navset_card_tab(*args, id=None, selected=None, title=None, sidebar=None, header=None, footer=None)\n\nui.navset_card_pill ui.navset_card_pill(*args, id=None, selected=None, title=None, sidebar=None, header=None, footer=None, placement='above')\n\nui.navset_pill ui.navset_pill(*args, id=None, selected=None, header=None, footer=None)\n\nui.navset_pill_list ui.navset_pill_list(*args, id=None, selected=None, header=None, footer=None, well=True, widths=(4, 8))\n\nui.navset_tab ui.navset_tab(*args, id=None, selected=None, header=None, footer=None)\n\nTabset with pill navigation\n\n- Express\n- Core\n\nFollow these steps to create an app with a tabset with pill navigation layout:\n\n- Add ui.navset_pill() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.navset_pill() creates a pillset.\n- Pass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.navset_pill() to set the items displayed in the navset.\n- Pass arguments to the nav items to control each item‚Äôs title, appearance, and associated content. For example, set the title argument of ui.nav_panel() to control the displayed title of the nav item. Pass UI elements as additional arguments to ui.nav_panel(). These elements will be displayed when the tab is active.\n- Optional: Pass a string to the id argument of ui.navset_pill(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nAdd ui.navset_pill() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.navset_pill() creates a pillset.\n\nPass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.navset_pill() to set the items displayed in the navset.\n\nPass arguments to the nav items to control each item‚Äôs title, appearance, and associated content. For example, set the title argument of ui.nav_panel() to control the displayed title of the nav item. Pass UI elements as additional arguments to ui.nav_panel(). These elements will be displayed when the tab is active.\n\nOptional: Pass a string to the id argument of ui.navset_pill(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nTabset with pill list navigation\n\n- Express\n- Core\n\nFollow these steps to create an app with a pill list navigation layout. A pill list is a vertical pillset navigation.\n\n- Add ui.navset_pill_list() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.navset_pill() creates a pill list.\n- Pass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.navset_pill_list() to set the items displayed in the pillset.\n- Pass arguments to the nav items to control each item‚Äôs title, appearance, and associated content. For example, set the title argument of ui.nav_panel() to control the displayed title of the nav item. Pass UI elements as additional arguments to ui.nav_panel(). These elements will be displayed when the tab is active.\n- Optional: Pass a string to the id argument of ui.navset_pill_list(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nAdd ui.navset_pill_list() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.navset_pill() creates a pill list.\n\nPass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.navset_pill_list() to set the items displayed in the pillset.\n\nPass arguments to the nav items to control each item‚Äôs title, appearance, and associated content. For example, set the title argument of ui.nav_panel() to control the displayed title of the nav item. Pass UI elements as additional arguments to ui.nav_panel(). These elements will be displayed when the tab is active.\n\nOptional: Pass a string to the id argument of ui.navset_pill_list(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nTabset with tab navigation\n\n- Express\n- Core\n\nFollow these steps to create an app with a tab navigation layout:\n\n- Add ui.navset_tab() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.navset_tab() creates a tabset.\n- Pass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.navset_tab() to set the items displayed in the tabset.\n- Pass arguments to the nav items to control each item‚Äôs title, appearance, and associated content. For example, set the title argument of ui.nav_panel() to control the displayed title of the nav item. Pass UI elements as additional arguments to ui.nav_panel(). These elements will be displayed when the tab is active.\n- Optional: Pass a string to the id argument of ui.navset_tab(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nAdd ui.navset_tab() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.navset_tab() creates a tabset.\n\nPass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.navset_tab() to set the items displayed in the tabset.\n\nPass arguments to the nav items to control each item‚Äôs title, appearance, and associated content. For example, set the title argument of ui.nav_panel() to control the displayed title of the nav item. Pass UI elements as additional arguments to ui.nav_panel(). These elements will be displayed when the tab is active.\n\nOptional: Pass a string to the id argument of ui.navset_tab(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nCard with a tabbed tabset\n\n- Express\n- Core\n\nFollow these steps to add a card with a tabbed tabset to your app:\n\n- Add ui.navset_card_tab() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.navset_card_tab() creates a tabset inside a card.\n- Pass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.navset_card_tab() to set the items displayed in the tabset inside the card.\n- Pass arguments to the nav items to control each item‚Äôs title, appearance, and associated content. For example, set the title argument of ui.nav_panel() to control the displayed title of the nav item. Pass UI elements as additional arguments to ui.nav_panel(). These elements will be displayed when the tab is active.\n- Optional: Pass a string to the id argument of ui.navset_card_tab(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nAdd ui.navset_card_tab() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.navset_card_tab() creates a tabset inside a card.\n\nPass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.navset_card_tab() to set the items displayed in the tabset inside the card.\n\nPass arguments to the nav items to control each item‚Äôs title, appearance, and associated content. For example, set the title argument of ui.nav_panel() to control the displayed title of the nav item. Pass UI elements as additional arguments to ui.nav_panel(). These elements will be displayed when the tab is active.\n\nOptional: Pass a string to the id argument of ui.navset_card_tab(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nCard with a pill tabset\n\n- Express\n- Core\n\nFollow these steps to add a card with a pill tabset to your app:\n\n- Add ui.navset_card_pill() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.navset_card_pill() creates a pillset inside a card.\n- Pass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.navset_card_pill() to set the items displayed in the pillset inside the card.\n- Pass arguments to the nav items to control each item‚Äôs title, appearance, and associated content. For example, set the title argument of ui.nav_panel() to control the displayed title of the nav item. Pass UI elements as additional arguments to ui.nav_panel(). These elements will be displayed when the tab is active.\n- Optional: Pass a string to the id argument of ui.navset_card_pill(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nAdd ui.navset_card_pill() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.navset_card_pill() creates a pillset inside a card.\n\nPass nav items (e.g., ui.nav_panel() and ui.nav_menu()) to ui.navset_card_pill() to set the items displayed in the pillset inside the card.\n\nPass arguments to the nav items to control each item‚Äôs title, appearance, and associated content. For example, set the title argument of ui.nav_panel() to control the displayed title of the nav item. Pass UI elements as additional arguments to ui.nav_panel(). These elements will be displayed when the tab is active.\n\nOptional: Pass a string to the id argument of ui.navset_card_pill(). This will create an input value that holds the title of the currently selected nav item. For example, id = \"tab\" would create a reactive value accessible as input.tab().\n\nVertically collapsing accordion panels\n\n- Express\n- Core\n\nFollow these steps to add vertically collapsing accordion panels to your app:\n\n- Add ui.accordion() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.accordion() creates a vertically collapsing accordion.\n- Pass accordion panel items to ui.accordion() using calls to ui.accordion_panel(). Each call to ui.accordion_panel() creates one accordion panel.\n- Pass arguments to the accordion panels to control each panel‚Äôs title, appearance, and associated content. The *args argument of ui.accordion_panel() controls the contents of the accordion panel.\n- Optional: Pass a string to the id argument of ui.accordian(). This will create an input value that represents the currently active accordion panels. For example, id = \"panel\" would create a reactive value accessible as input.panel().\n\nAdd ui.accordion() inside any Shiny UI page method (e.g., ui.page_fluid()). ui.accordion() creates a vertically collapsing accordion.\n\nPass accordion panel items to ui.accordion() using calls to ui.accordion_panel(). Each call to ui.accordion_panel() creates one accordion panel.\n\nPass arguments to the accordion panels to control each panel‚Äôs title, appearance, and associated content. The *args argument of ui.accordion_panel() controls the contents of the accordion panel.\n\nOptional: Pass a string to the id argument of ui.accordian(). This will create an input value that represents the currently active accordion panels. For example, id = \"panel\" would create a reactive value accessible as input.panel().\n\n",
    "code_examples": [
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 190\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_pill(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 190\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_pill(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nwith ui.navset_pill(id=\"tab\"):  \n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")",
      "from shiny.express import ui\n\nwith ui.navset_pill(id=\"tab\"):  \n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")",
      "from shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_pill(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_pill(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 320\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_pill_list(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",\n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 320\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_pill_list(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",\n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nwith ui.navset_pill_list(id=\"tab\"):  \n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")",
      "from shiny.express import ui\n\nwith ui.navset_pill_list(id=\"tab\"):  \n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")",
      "from shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_pill_list(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",\n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_pill_list(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",\n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_tab(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 200\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_tab(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nwith ui.navset_pill(id=\"tab\"):  \n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")",
      "from shiny.express import ui\n\nwith ui.navset_pill(id=\"tab\"):  \n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")",
      "from shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_tab(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.navset_tab(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 250\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.navset_card_tab(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 250\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.navset_card_tab(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.navset_card_tab(id=\"tab\"):  \n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.navset_card_tab(id=\"tab\"):  \n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.navset_card_tab(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.navset_card_tab(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",  \n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 250\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.navset_card_pill(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",\n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 250\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.navset_card_pill(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",\n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.navset_card_pill(id=\"tab\"):  \n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")",
      "from shiny.express import ui\n\nui.page_opts(fillable=True)\n\nwith ui.navset_card_pill(id=\"tab\"):  \n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.navset_card_pill(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",\n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.navset_card_pill(  \n        ui.nav_panel(\"A\", \"Panel A content\"),\n        ui.nav_panel(\"B\", \"Panel B content\"),\n        ui.nav_panel(\"C\", \"Panel C content\"),\n        ui.nav_menu(\n            \"Other links\",\n            ui.nav_panel(\"D\", \"Panel D content\"),\n            \"----\",\n            \"Description:\",\n            ui.nav_control(\n                ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\n            ),\n        ),\n        id=\"tab\",\n    )  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 350\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.accordion(  \n        ui.accordion_panel(\"Section A\", \"Section A content\"),  \n        ui.accordion_panel(\"Section B\", \"Section B content\"),  \n        ui.accordion_panel(\"Section C\", \"Section C content\"),  \n        ui.accordion_panel(\"Section D\", \"Section D content\"),  \n        ui.accordion_panel(\"Section E\", \"Section E content\"),  \n        id=\"acc\",  \n        open=\"Section A\",  \n    ),  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 350\n\n## file: app.py\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.accordion(  \n        ui.accordion_panel(\"Section A\", \"Section A content\"),  \n        ui.accordion_panel(\"Section B\", \"Section B content\"),  \n        ui.accordion_panel(\"Section C\", \"Section C content\"),  \n        ui.accordion_panel(\"Section D\", \"Section D content\"),  \n        ui.accordion_panel(\"Section E\", \"Section E content\"),  \n        id=\"acc\",  \n        open=\"Section A\",  \n    ),  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)\n",
      "from shiny.express import ui\n\nwith ui.accordion(id=\"acc\", open=\"Section A\"):  \n    with ui.accordion_panel(\"Section A\"):  \n        \"Section A content\"\n\n    with ui.accordion_panel(\"Section B\"):  \n        \"Section B content\"\n\n    with ui.accordion_panel(\"Section C\"):  \n        \"Section C content\"\n\n    with ui.accordion_panel(\"Section D\"):  \n        \"Section D content\"\n\n    with ui.accordion_panel(\"Section E\"):  \n        \"Section E content\"",
      "from shiny.express import ui\n\nwith ui.accordion(id=\"acc\", open=\"Section A\"):  \n    with ui.accordion_panel(\"Section A\"):  \n        \"Section A content\"\n\n    with ui.accordion_panel(\"Section B\"):  \n        \"Section B content\"\n\n    with ui.accordion_panel(\"Section C\"):  \n        \"Section C content\"\n\n    with ui.accordion_panel(\"Section D\"):  \n        \"Section D content\"\n\n    with ui.accordion_panel(\"Section E\"):  \n        \"Section E content\"",
      "from shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.accordion(  \n        ui.accordion_panel(\"Section A\", \"Section A content\"),  \n        ui.accordion_panel(\"Section B\", \"Section B content\"),  \n        ui.accordion_panel(\"Section C\", \"Section C content\"),  \n        ui.accordion_panel(\"Section D\", \"Section D content\"),  \n        ui.accordion_panel(\"Section E\", \"Section E content\"),  \n        id=\"acc\",  \n        open=\"Section A\",  \n    ),  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)",
      "from shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.accordion(  \n        ui.accordion_panel(\"Section A\", \"Section A content\"),  \n        ui.accordion_panel(\"Section B\", \"Section B content\"),  \n        ui.accordion_panel(\"Section C\", \"Section C content\"),  \n        ui.accordion_panel(\"Section D\", \"Section D content\"),  \n        ui.accordion_panel(\"Section E\", \"Section E content\"),  \n        id=\"acc\",  \n        open=\"Section A\",  \n    ),  \n)\n\n\ndef server(input, output, session):\n    pass\n\n\napp = App(app_ui, server)"
    ]
  },
  {
    "id": "api_ui_layout_sidebar_html",
    "url": "api/ui.layout_sidebar.html",
    "title": "ui.layout_sidebar ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.layout_sidebar\n\nui.layout_sidebar\n\nSidebar layout\n\nCreate a sidebar layout component which can be dropped inside any Shiny UI page method (e.g. page_fillable) or card context.\n\nParameters\n\nOne argument needs to be of class Sidebar object created by sidebar. The remaining arguments will contain the contents to the main content area. Or tag attributes that are supplied to the resolved Tag object.\n\nWhether or not the main content area should be wrapped in a fillable container. See as_fillable_container for details.\n\nWhether or not the sidebar layout should be wrapped in a fillable container. See as_fill_item for details.\n\nA background or foreground color.\n\nWhether or not to show a border around the sidebar layout.\n\nWhether or not to round the corners of the sidebar layout.\n\nA border color.\n\nA CSS length unit defining the vertical gap (i.e., spacing) between elements provided to *args. This value will only be used if fillable is True.\n\nPadding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. padding may be one to four values. * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left respectively.\n\nAny valid CSS unit to use for the height.\n\nReturns\n\nA Tag object.\n\nSee Also\n\n- sidebar\n\nExamples\n\n",
    "code_examples": [
      "ui.layout_sidebar(\n    sidebar,\n    *args,\n    fillable=True,\n    fill=True,\n    bg=None,\n    fg=None,\n    border=None,\n    border_radius=None,\n    border_color=None,\n    gap=None,\n    padding=None,\n    height=None,\n    **kwargs,\n)",
      "ui.layout_sidebar(\n    sidebar,\n    *args,\n    fillable=True,\n    fill=True,\n    bg=None,\n    fg=None,\n    border=None,\n    border_radius=None,\n    border_color=None,\n    gap=None,\n    padding=None,\n    height=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", min=0, max=100, value=20),\n        ),\n        ui.output_plot(\"plot\"),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_layout_columns_html",
    "url": "api/ui.layout_columns.html",
    "title": "ui.layout_columns ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.layout_columns\n\nui.layout_columns\n\nCreate responsive, column-based grid layouts, based on a 12-column grid.\n\nParameters\n\nChild elements or attributes to be added to the layout.\n\nThe widths of the columns, possibly at different breakpoints. Can be one of the following: * None (the default): Automatically determines a sensible number of columns based on the number of children given to the layout. * A list or tuple of integers between 1 and 12, where each element represents the number of columns for the relevant UI element. Column widths are recycled to extend the values in col_widths to match the actual number of items in the layout, and children are wrapped onto the next row when a row exceeds 12 column units. For example, col_widths=(4, 8, 12) allocates 4 columns to the first element, 8 columns to the second element, and 12 columns to the third element (which wraps to the next row). Negative values are also allowed, and are treated as empty columns. For example, col_widths=(-2, 8, -2) would allocate 8 columns to an element (with 2 empty columns on either side). * A dictionary of column widths at different breakpoints. The keys should be one of \"xs\", \"sm\", \"md\", \"lg\", \"xl\", or \"xxl\", and the values are either of the above. For example, col_widths={\"sm\": (3, 3, 6), \"lg\": (4)}.\n\nThe heights of the rows, possibly at different breakpoints. Can be one of the following: * A numeric vector, where each value represents the fractional unit (fr) height of the relevant row. If there are more rows than values provided, the pattern will be repeated. For example, row_heights=(1, 2) allows even rows to take up twice as much space as odd rows. * A list of numeric or CSS length units, where each value represents the height of the relevant row. If more rows are needed than values provided, the pattern will repeat. For example, row_heights=[\"auto\", 1] allows the height of odd rows to be driven my it‚Äôs contents and even rows to be 1fr. * A single string containing CSS length units. In this case, the value is supplied directly to grid-auto-rows. * A dictionary of row heights at different breakpoints, where each key is a breakpoint name (one of \"xs\", \"sm\", \"md\", \"lg\", \"xl\", or \"xxl\") and where the values may be any of the above options.\n\nWhether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nWhether or not each element is wrapped in a fillable container.\n\nAny valid CSS unit to use for the gap between columns.\n\nCSS class(es) to apply to the containing element.\n\nA valid CSS unit (e.g., height=\"200px\"). Use min_height and max_height in a filling layout to ensure that the layout container does not shrink below a min_height or grow beyond a max_height.\n\nAdditional attributes to apply to the containing element.\n\nReturns\n\nAn Tag element.\n\nSee Also\n\n- layout_column_wrap for laying out elements into a uniform grid.\n\nReference\n\n- Bootstrap CSS Grid\n- Bootstrap Breakpoints\n\nExamples\n\n",
    "code_examples": [
      "ui.layout_columns(\n    *args,\n    col_widths=None,\n    row_heights=None,\n    fill=True,\n    fillable=True,\n    gap=None,\n    class_=None,\n    height=None,\n    min_height=None,\n    max_height=None,\n    **kwargs,\n)",
      "ui.layout_columns(\n    *args,\n    col_widths=None,\n    row_heights=None,\n    fill=True,\n    fillable=True,\n    gap=None,\n    class_=None,\n    height=None,\n    min_height=None,\n    max_height=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom model_plots import *  # model plots and cards\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.panel_title(ui.h2(\"Model Dashboard\")),\n    ui.markdown(\"Using `ui.layout_columns()` for the layout.\"),\n    ui.layout_columns(\n        card_loss,\n        card_acc,\n        card_feat,\n        col_widths={\"sm\": (5, 7, 12)},\n        # row_heights=(2, 3),\n        # height=\"700px\",\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot\n    def loss_over_time():\n        return plot_loss_over_time()\n\n    @render.plot\n    def accuracy_over_time():\n        return plot_accuracy_over_time()\n\n    @render.plot\n    def feature_importance():\n        return plot_feature_importance()\n\n\napp = App(app_ui, server)\n\n\n## file: model_plots.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import ui\n\n\ndef plot_loss_over_time():\n    epochs = np.arange(1, 101)\n    loss = 1000 / np.sqrt(epochs) + np.random.rand(100) * 25\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.plot(epochs, loss)\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Loss\")\n    return fig\n\n\ndef plot_accuracy_over_time():\n    epochs = np.arange(1, 101)\n    accuracy = np.sqrt(epochs) / 12 + np.random.rand(100) * 0.15\n    accuracy = [np.min([np.max(accuracy[:i]), 1]) for i in range(1, 101)]\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.plot(epochs, accuracy)\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Accuracy\")\n    return fig\n\n\ndef plot_feature_importance():\n    features = [\"Product Category\", \"Price\", \"Brand\", \"Rating\", \"Number of Reviews\"]\n    importance = np.random.rand(5)\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.barh(features, importance)\n    plt.xlabel(\"Importance\")\n    return fig\n\n\ncard_loss = ui.card(\n    ui.card_header(\"Loss Over Time\"),\n    ui.output_plot(\"loss_over_time\"),\n    full_screen=True,\n)\n\ncard_acc = ui.card(\n    ui.card_header(\"Accuracy Over Time\"),\n    ui.output_plot(\"accuracy_over_time\"),\n    full_screen=True,\n)\n\ncard_feat = ui.card(\n    ui.card_header(\"Feature Importance\"),\n    ui.output_plot(\"feature_importance\"),\n    full_screen=True,\n)\n\n"
    ]
  },
  {
    "id": "api_ui_layout_column_wrap_html",
    "url": "api/ui.layout_column_wrap.html",
    "title": "ui.layout_column_wrap ‚Äì Shiny for Python",
    "description": "",
    "content": "- UI Layouts\n- ui.layout_column_wrap\n\nui.layout_column_wrap\n\nA grid-like, column-first layout\n\nWraps a 1d sequence of UI elements into a 2d grid. The number of columns (and rows) in the grid depends on the column width and the size of the display.\n\nParameters\n\nUnnamed arguments should be UI elements (e.g., card). Named arguments become attributes on the containing Tag element.\n\nThe desired width of each card. It can be one of the following: * A (unit-less) number between 0 and 1, specified as 1/num, where num represents the number of desired columns. * A CSS length unit representing either the minimum (when fixed_width=False) or fixed width (fixed_width=True). * None, which allows power users to set the grid-template-columns CSS property manually, either via a style attribute or a CSS stylesheet. * If missing, a value of 200px will be used.\n\nWhen width is greater than 1 or is a CSS length unit, e.g., \"200px\", fixed_width indicates whether that width value represents the absolute size of each column (fixed_width=TRUE) or the minimum size of a column (fixed_width=FALSE). When fixed_width=FALSE, new columns are added to a row when width space is available and columns will never exceed the container or viewport size. When fixed_width=TRUE, all columns will be exactly width wide, which may result in columns overflowing the parent container.\n\nIf \"all\" (the default), every card in every row of the grid will have the same height. If \"row\", then every card in each row of the grid will have the same height, but heights may vary between rows.\n\nWhether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., page_fillable).\n\nWhether or not each element is wrapped in a fillable container.\n\nA valid CSS unit (e.g., height=\"200px\"). Use min_height and max_height in a filling layout to ensure that the layout container does not shrink below a min_height or grow beyond a max_height.\n\nAny valid CSS unit to use for the height when on mobile devices (or narrow windows).\n\nAny valid CSS unit to use for the gap between columns.\n\nA CSS class to apply to the containing element.\n\nAdditional attributes to apply to the containing element.\n\nReturns\n\nA Tag element.\n\nSee Also\n\n- layout_columns for laying out elements into a responsive 12-column grid.\n\nExamples\n\n",
    "code_examples": [
      "ui.layout_column_wrap(\n    *args,\n    width=MISSING,\n    fixed_width=False,\n    heights_equal='all',\n    fill=True,\n    fillable=True,\n    height=None,\n    min_height=None,\n    max_height=None,\n    height_mobile=None,\n    gap=None,\n    class_=None,\n    **kwargs,\n)",
      "ui.layout_column_wrap(\n    *args,\n    width=MISSING,\n    fixed_width=False,\n    heights_equal='all',\n    fill=True,\n    fillable=True,\n    height=None,\n    min_height=None,\n    max_height=None,\n    height_mobile=None,\n    gap=None,\n    class_=None,\n    **kwargs,\n)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nfrom shiny import App, ui\n\ny = ui.card(\"A simple card\")\n\napp_ui = ui.page_fluid(\n    # Always has 2 columns (on non-mobile)\n    ui.layout_column_wrap(y, y, y, width=1 / 2),\n    ui.hr(),\n    # Has three columns when viewport is wider than 750px\n    ui.layout_column_wrap(y, y, y, width=\"250px\"),\n)\n\n\napp = App(app_ui, server=None)\n\n"
    ]
  },
  {
    "id": "api_ui_page_fixed_html",
    "url": "api/ui.page_fixed.html",
    "title": "ui.page_fixed ‚Äì Shiny for Python",
    "description": "",
    "content": "- Page containers\n- ui.page_fixed\n\nui.page_fixed\n\nCreate a fixed page.\n\nParameters\n\nUI elements.\n\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via panel_title.\n\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\n\nA custom Shiny theme created using the Theme class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete bootstrap.css or bootstrap.min.css file. For advanced uses, you can also pass a Tagifiable object. In this case, Shiny will suppress the default Bootstrap CSS. To modify the theme of an app without replacing the Bootstrap CSS entirely, use include_css to add custom CSS.\n\nAttributes on the page level container.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- page_fluid\n- page_bootstrap\n- page_navbar\n\nExamples\n\n",
    "code_examples": [
      "ui.page_fixed(*args, title=None, lang=None, theme=None, **kwargs)",
      "ui.page_fixed(*args, title=None, lang=None, theme=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fixed(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", min=0, max=100, value=20),\n        ),\n        ui.output_plot(\"plot\"),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  },
  {
    "id": "api_ui_page_fillable_html",
    "url": "api/ui.page_fillable.html",
    "title": "ui.page_fillable ‚Äì Shiny for Python",
    "description": "",
    "content": "- Page containers\n- ui.page_fillable\n\nui.page_fillable\n\nCreate a fillable page.\n\nParameters\n\nUI elements.\n\nPadding to use for the body. See as_css_padding for more details.\n\nWhether or not the page should fill the viewport‚Äôs height on mobile devices (i.e., narrow windows).\n\nA CSS length unit passed through as_css_unit defining the gap (i.e., spacing) between elements provided to *args.\n\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via panel_title.\n\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\n\nA custom Shiny theme created using the Theme class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete bootstrap.css or bootstrap.min.css file. For advanced uses, you can also pass a Tagifiable object. In this case, Shiny will suppress the default Bootstrap CSS. To modify the theme of an app without replacing the Bootstrap CSS entirely, use include_css to add custom CSS.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- page_fluid\n- page_fixed\n\n",
    "code_examples": [
      "ui.page_fillable(\n    *args,\n    padding=None,\n    gap=None,\n    fillable_mobile=False,\n    title=None,\n    lang=None,\n    theme=None,\n    **kwargs,\n)",
      "ui.page_fillable(\n    *args,\n    padding=None,\n    gap=None,\n    fillable_mobile=False,\n    title=None,\n    lang=None,\n    theme=None,\n    **kwargs,\n)"
    ]
  },
  {
    "id": "api_ui_page_fluid_html",
    "url": "api/ui.page_fluid.html",
    "title": "ui.page_fluid ‚Äì Shiny for Python",
    "description": "",
    "content": "- Page containers\n- ui.page_fluid\n\nui.page_fluid\n\nCreate a fluid page.\n\nParameters\n\nUI elements.\n\nThe browser window title (defaults to the host URL of the page). Can also be set as a side effect via panel_title.\n\nISO 639-1 language code for the HTML page, such as \"en\" or \"ko\". This will be used as the lang in the <html> tag, as in <html lang=\"en\">. The default, None, results in an empty string.\n\nA custom Shiny theme created using the Theme class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete bootstrap.css or bootstrap.min.css file. For advanced uses, you can also pass a Tagifiable object. In this case, Shiny will suppress the default Bootstrap CSS. To modify the theme of an app without replacing the Bootstrap CSS entirely, use include_css to add custom CSS.\n\nAttributes on the page level container.\n\nReturns\n\nA UI element.\n\nSee Also\n\n- page_fixed\n- page_bootstrap\n- page_navbar\n\nExamples\n\n",
    "code_examples": [
      "ui.page_fluid(*args, title=None, lang=None, theme=None, **kwargs)",
      "ui.page_fluid(*args, title=None, lang=None, theme=None, **kwargs)",
      "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 400\n\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"n\", \"N\", min=0, max=100, value=20),\n        ),\n        ui.output_plot(\"plot\"),\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\napp = App(app_ui, server)\n\n"
    ]
  }
]